
ledice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a8  080052a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b0  080052b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000002cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000033c  2000033c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd12  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002062  00000000  00000000  0002bdb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a88  00000000  00000000  0002e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002454e  00000000  00000000  0002f440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da5d  00000000  00000000  0005398e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9096  00000000  00000000  000613eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a481  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000388c  00000000  00000000  0013a4d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005130 	.word	0x08005130

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005130 	.word	0x08005130

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_DMA_Init+0x3c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <MX_DMA_Init+0x3c>)
 80005a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_DMA_Init+0x3c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2039      	movs	r0, #57	; 0x39
 80005bc:	f001 f83b 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80005c0:	2039      	movs	r0, #57	; 0x39
 80005c2:	f001 f854 	bl	800166e <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_GPIO_Init+0x4c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <MX_GPIO_Init+0x4c>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_GPIO_Init+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_GPIO_Init+0x4c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a08      	ldr	r2, [pc, #32]	; (8000620 <MX_GPIO_Init+0x4c>)
 8000600:	f043 0310 	orr.w	r3, r3, #16
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_GPIO_Init+0x4c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0310 	and.w	r3, r3, #16
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800

08000624 <MDL_leds_init>:

struct LED_handler ledHandler;



void MDL_leds_init() {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0

	ledHandler.state = WAITING;
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MDL_leds_init+0x44>)
 800062c:	2201      	movs	r2, #1
 800062e:	765a      	strb	r2, [r3, #25]
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <MDL_leds_init+0x44>)
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < NUM_OF_LEDS; i++) {
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e00b      	b.n	8000654 <MDL_leds_init+0x30>
		ledHandler.led[i] = i;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	b2d9      	uxtb	r1, r3
 8000640:	4a09      	ldr	r2, [pc, #36]	; (8000668 <MDL_leds_init+0x44>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 800064a:	460a      	mov	r2, r1
 800064c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_LEDS; i++) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b05      	cmp	r3, #5
 8000658:	ddf0      	ble.n	800063c <MDL_leds_init+0x18>
	}

}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	2000008c 	.word	0x2000008c

0800066c <MDL_leds_handler>:

void MDL_leds_handler() {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

	switch(ledHandler.state) {
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MDL_leds_handler+0x48>)
 8000672:	7e5b      	ldrb	r3, [r3, #25]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d81b      	bhi.n	80006b0 <MDL_leds_handler+0x44>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <MDL_leds_handler+0x14>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	08000691 	.word	0x08000691
 8000684:	080006af 	.word	0x080006af
 8000688:	0800069d 	.word	0x0800069d
 800068c:	080006a3 	.word	0x080006a3
	case NEXT_ROUND:
		next_round();
 8000690:	f000 f8ac 	bl	80007ec <next_round>
		ledHandler.state = WAITING;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MDL_leds_handler+0x48>)
 8000696:	2201      	movs	r2, #1
 8000698:	765a      	strb	r2, [r3, #25]
	case WAITING:
		break;
 800069a:	e008      	b.n	80006ae <MDL_leds_handler+0x42>
	case SCORED:
		// saljem points Majdi i dispenzeru

		ledHandler.state = WAITING;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <MDL_leds_handler+0x48>)
 800069e:	2201      	movs	r2, #1
 80006a0:	765a      	strb	r2, [r3, #25]
	case WIN:
		win();
 80006a2:	f000 f939 	bl	8000918 <win>
		ledHandler.state = WAITING;
 80006a6:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <MDL_leds_handler+0x48>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	765a      	strb	r2, [r3, #25]
	}
}
 80006ac:	e000      	b.n	80006b0 <MDL_leds_handler+0x44>
		break;
 80006ae:	bf00      	nop
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000008c 	.word	0x2000008c

080006b8 <set_LED>:
	// if netko pobijedio
	ledHandler.state = WIN;

}

void set_LED(uint8_t LEDnum, uint8_t Red, uint8_t Green, uint8_t Blue) {
 80006b8:	b490      	push	{r4, r7}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4604      	mov	r4, r0
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4623      	mov	r3, r4
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	4603      	mov	r3, r0
 80006cc:	71bb      	strb	r3, [r7, #6]
 80006ce:	460b      	mov	r3, r1
 80006d0:	717b      	strb	r3, [r7, #5]
 80006d2:	4613      	mov	r3, r2
 80006d4:	713b      	strb	r3, [r7, #4]
	ledHandler.LED_Data[LEDnum][0] = LEDnum;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <set_LED+0x58>)
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	705a      	strb	r2, [r3, #1]
	ledHandler.LED_Data[LEDnum][1] = Red;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <set_LED+0x58>)
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	79ba      	ldrb	r2, [r7, #6]
 80006ec:	709a      	strb	r2, [r3, #2]
	ledHandler.LED_Data[LEDnum][2] = Green;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <set_LED+0x58>)
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	797a      	ldrb	r2, [r7, #5]
 80006f8:	70da      	strb	r2, [r3, #3]
	ledHandler.LED_Data[LEDnum][3] = Blue;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <set_LED+0x58>)
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	793a      	ldrb	r2, [r7, #4]
 8000704:	711a      	strb	r2, [r3, #4]
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bc90      	pop	{r4, r7}
 800070e:	4770      	bx	lr
 8000710:	2000008c 	.word	0x2000008c

08000714 <send>:

void send(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	uint32_t index = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
	uint32_t color;

	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 800071e:	2300      	movs	r3, #0
 8000720:	727b      	strb	r3, [r7, #9]
 8000722:	7a7b      	ldrb	r3, [r7, #9]
 8000724:	2b05      	cmp	r3, #5
 8000726:	d834      	bhi.n	8000792 <send+0x7e>
		color = ((ledHandler.LED_Data[i][1] << 16) | (ledHandler.LED_Data[i][2] << 8) | (ledHandler.LED_Data[i][3]));
 8000728:	7a7b      	ldrb	r3, [r7, #9]
 800072a:	4a2d      	ldr	r2, [pc, #180]	; (80007e0 <send+0xcc>)
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	789b      	ldrb	r3, [r3, #2]
 8000732:	041a      	lsls	r2, r3, #16
 8000734:	7a7b      	ldrb	r3, [r7, #9]
 8000736:	492a      	ldr	r1, [pc, #168]	; (80007e0 <send+0xcc>)
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	440b      	add	r3, r1
 800073c:	78db      	ldrb	r3, [r3, #3]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	431a      	orrs	r2, r3
 8000742:	7a7b      	ldrb	r3, [r7, #9]
 8000744:	4926      	ldr	r1, [pc, #152]	; (80007e0 <send+0xcc>)
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	440b      	add	r3, r1
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	607b      	str	r3, [r7, #4]

		for (uint8_t i = 23; i >= 0; i--) {
 8000750:	2317      	movs	r3, #23
 8000752:	72fb      	strb	r3, [r7, #11]
			if (color & (1 << i))
 8000754:	7afb      	ldrb	r3, [r7, #11]
 8000756:	2201      	movs	r2, #1
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	461a      	mov	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4013      	ands	r3, r2
 8000762:	2b00      	cmp	r3, #0
 8000764:	d007      	beq.n	8000776 <send+0x62>
				ledHandler.pwmData[index] = 60;
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <send+0xcc>)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	330c      	adds	r3, #12
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	223c      	movs	r2, #60	; 0x3c
 8000772:	805a      	strh	r2, [r3, #2]
 8000774:	e006      	b.n	8000784 <send+0x70>
			else
				ledHandler.pwmData[index] = 30;
 8000776:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <send+0xcc>)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	330c      	adds	r3, #12
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	221e      	movs	r2, #30
 8000782:	805a      	strh	r2, [r3, #2]
			index++;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3301      	adds	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 23; i >= 0; i--) {
 800078a:	7afb      	ldrb	r3, [r7, #11]
 800078c:	3b01      	subs	r3, #1
 800078e:	72fb      	strb	r3, [r7, #11]
			if (color & (1 << i))
 8000790:	e7e0      	b.n	8000754 <send+0x40>
		}
	}

	for (uint8_t i = 0; i < 50; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	72bb      	strb	r3, [r7, #10]
 8000796:	e00c      	b.n	80007b2 <send+0x9e>
		ledHandler.pwmData[index] = 0;
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <send+0xcc>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	330c      	adds	r3, #12
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	2200      	movs	r2, #0
 80007a4:	805a      	strh	r2, [r3, #2]
		index++;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 50; i++) {
 80007ac:	7abb      	ldrb	r3, [r7, #10]
 80007ae:	3301      	adds	r3, #1
 80007b0:	72bb      	strb	r3, [r7, #10]
 80007b2:	7abb      	ldrb	r3, [r7, #10]
 80007b4:	2b31      	cmp	r3, #49	; 0x31
 80007b6:	d9ef      	bls.n	8000798 <send+0x84>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) ledHandler.pwmData, index);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <send+0xd0>)
 80007be:	2100      	movs	r1, #0
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <send+0xd4>)
 80007c2:	f002 fa2b 	bl	8002c1c <HAL_TIM_PWM_Start_DMA>
	while (ledHandler.datasentflag == TRANSFER_NOT_FINISHED) {};
 80007c6:	bf00      	nop
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <send+0xcc>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d0fb      	beq.n	80007c8 <send+0xb4>
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <send+0xcc>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]

}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	200000a6 	.word	0x200000a6
 80007e8:	20000238 	.word	0x20000238

080007ec <next_round>:

void next_round(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < NUM_OF_LEDS - 1; i++) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	71fb      	strb	r3, [r7, #7]
 80007f6:	e02a      	b.n	800084e <next_round+0x62>
		uint8_t n = i + rand() / (RAND_MAX / (NUM_OF_LEDS - i) + 1);
 80007f8:	f003 fc62 	bl	80040c0 <rand>
 80007fc:	4602      	mov	r2, r0
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f1c3 0306 	rsb	r3, r3, #6
 8000804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000808:	fb91 f3f3 	sdiv	r3, r1, r3
 800080c:	3301      	adds	r3, #1
 800080e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4413      	add	r3, r2
 8000818:	71bb      	strb	r3, [r7, #6]
		uint8_t pom = ledHandler.led[n];
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	4a3d      	ldr	r2, [pc, #244]	; (8000914 <next_round+0x128>)
 800081e:	4413      	add	r3, r2
 8000820:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 8000824:	717b      	strb	r3, [r7, #5]
		ledHandler.led[n] = ledHandler.led[i];
 8000826:	79fa      	ldrb	r2, [r7, #7]
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	493a      	ldr	r1, [pc, #232]	; (8000914 <next_round+0x128>)
 800082c:	440a      	add	r2, r1
 800082e:	f892 119e 	ldrb.w	r1, [r2, #414]	; 0x19e
 8000832:	4a38      	ldr	r2, [pc, #224]	; (8000914 <next_round+0x128>)
 8000834:	4413      	add	r3, r2
 8000836:	460a      	mov	r2, r1
 8000838:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
		ledHandler.led[i] = pom;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4a35      	ldr	r2, [pc, #212]	; (8000914 <next_round+0x128>)
 8000840:	4413      	add	r3, r2
 8000842:	797a      	ldrb	r2, [r7, #5]
 8000844:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	for (uint8_t i = 0; i < NUM_OF_LEDS - 1; i++) {
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	3301      	adds	r3, #1
 800084c:	71fb      	strb	r3, [r7, #7]
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d9d1      	bls.n	80007f8 <next_round+0xc>
	}

	set_LED(LED_1, 0, 0, 0);
 8000854:	2300      	movs	r3, #0
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ff2c 	bl	80006b8 <set_LED>
	set_LED(LED_2, 0, 0, 0);
 8000860:	2300      	movs	r3, #0
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff ff26 	bl	80006b8 <set_LED>
	set_LED(LED_3, 0, 0, 0);
 800086c:	2300      	movs	r3, #0
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2002      	movs	r0, #2
 8000874:	f7ff ff20 	bl	80006b8 <set_LED>
	set_LED(LED_4, 0, 0, 0);
 8000878:	2300      	movs	r3, #0
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2003      	movs	r0, #3
 8000880:	f7ff ff1a 	bl	80006b8 <set_LED>
	set_LED(LED_5, 0, 0, 0);
 8000884:	2300      	movs	r3, #0
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2004      	movs	r0, #4
 800088c:	f7ff ff14 	bl	80006b8 <set_LED>
	set_LED(LED_6, 0, 0, 0);
 8000890:	2300      	movs	r3, #0
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2005      	movs	r0, #5
 8000898:	f7ff ff0e 	bl	80006b8 <set_LED>
	send();
 800089c:	f7ff ff3a 	bl	8000714 <send>
	timer2_wait_millisec(1000);
 80008a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a4:	f000 fb9e 	bl	8000fe4 <timer2_wait_millisec>

	set_LED(ledHandler.led[0], 255, 0, 0);
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <next_round+0x128>)
 80008aa:	f893 019e 	ldrb.w	r0, [r3, #414]	; 0x19e
 80008ae:	2300      	movs	r3, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	21ff      	movs	r1, #255	; 0xff
 80008b4:	f7ff ff00 	bl	80006b8 <set_LED>
	set_LED(ledHandler.led[1], 0, 255, 0);
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <next_round+0x128>)
 80008ba:	f893 019f 	ldrb.w	r0, [r3, #415]	; 0x19f
 80008be:	2300      	movs	r3, #0
 80008c0:	22ff      	movs	r2, #255	; 0xff
 80008c2:	2100      	movs	r1, #0
 80008c4:	f7ff fef8 	bl	80006b8 <set_LED>
	set_LED(ledHandler.led[2], 0, 255, 0);
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <next_round+0x128>)
 80008ca:	f893 01a0 	ldrb.w	r0, [r3, #416]	; 0x1a0
 80008ce:	2300      	movs	r3, #0
 80008d0:	22ff      	movs	r2, #255	; 0xff
 80008d2:	2100      	movs	r1, #0
 80008d4:	f7ff fef0 	bl	80006b8 <set_LED>
	set_LED(ledHandler.led[3], 0, 0, 255);
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <next_round+0x128>)
 80008da:	f893 01a1 	ldrb.w	r0, [r3, #417]	; 0x1a1
 80008de:	23ff      	movs	r3, #255	; 0xff
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	f7ff fee8 	bl	80006b8 <set_LED>
	set_LED(ledHandler.led[4], 0, 0, 255);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <next_round+0x128>)
 80008ea:	f893 01a2 	ldrb.w	r0, [r3, #418]	; 0x1a2
 80008ee:	23ff      	movs	r3, #255	; 0xff
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	f7ff fee0 	bl	80006b8 <set_LED>
	set_LED(ledHandler.led[5], 0, 0, 255);
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <next_round+0x128>)
 80008fa:	f893 01a3 	ldrb.w	r0, [r3, #419]	; 0x1a3
 80008fe:	23ff      	movs	r3, #255	; 0xff
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	f7ff fed8 	bl	80006b8 <set_LED>
	send();
 8000908:	f7ff ff04 	bl	8000714 <send>

}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000008c 	.word	0x2000008c

08000918 <win>:

	return points;
}


void win(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

	set_LED(LED_1, 0, 0, 0);
 800091e:	2300      	movs	r3, #0
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fec7 	bl	80006b8 <set_LED>
	set_LED(LED_2, 0, 0, 0);
 800092a:	2300      	movs	r3, #0
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fec1 	bl	80006b8 <set_LED>
	set_LED(LED_3, 0, 0, 0);
 8000936:	2300      	movs	r3, #0
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2002      	movs	r0, #2
 800093e:	f7ff febb 	bl	80006b8 <set_LED>
	set_LED(LED_4, 0, 0, 0);
 8000942:	2300      	movs	r3, #0
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2003      	movs	r0, #3
 800094a:	f7ff feb5 	bl	80006b8 <set_LED>
	set_LED(LED_5, 0, 0, 0);
 800094e:	2300      	movs	r3, #0
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2004      	movs	r0, #4
 8000956:	f7ff feaf 	bl	80006b8 <set_LED>
	set_LED(LED_6, 0, 0, 0);
 800095a:	2300      	movs	r3, #0
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2005      	movs	r0, #5
 8000962:	f7ff fea9 	bl	80006b8 <set_LED>
	send();
 8000966:	f7ff fed5 	bl	8000714 <send>
	timer2_wait_millisec(500);
 800096a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096e:	f000 fb39 	bl	8000fe4 <timer2_wait_millisec>

	for (uint8_t i = 0; i < 4*NUM_OF_LEDS; i++) {
 8000972:	2300      	movs	r3, #0
 8000974:	71fb      	strb	r3, [r7, #7]
 8000976:	e0e0      	b.n	8000b3a <win+0x222>
		set_LED(i % NUM_OF_LEDS, 142, 0, 142);  //ljubicasta
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	4b74      	ldr	r3, [pc, #464]	; (8000b4c <win+0x234>)
 800097c:	fba3 1302 	umull	r1, r3, r3, r2
 8000980:	0899      	lsrs	r1, r3, #2
 8000982:	460b      	mov	r3, r1
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	440b      	add	r3, r1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	b2d8      	uxtb	r0, r3
 800098e:	238e      	movs	r3, #142	; 0x8e
 8000990:	2200      	movs	r2, #0
 8000992:	218e      	movs	r1, #142	; 0x8e
 8000994:	f7ff fe90 	bl	80006b8 <set_LED>
		set_LED((i + 1) % NUM_OF_LEDS, 0, 0, 255);  //plava
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	4b6c      	ldr	r3, [pc, #432]	; (8000b50 <win+0x238>)
 800099e:	fb83 3102 	smull	r3, r1, r3, r2
 80009a2:	17d3      	asrs	r3, r2, #31
 80009a4:	1ac9      	subs	r1, r1, r3
 80009a6:	460b      	mov	r3, r1
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	440b      	add	r3, r1
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	1ad1      	subs	r1, r2, r3
 80009b0:	b2c8      	uxtb	r0, r1
 80009b2:	23ff      	movs	r3, #255	; 0xff
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	f7ff fe7e 	bl	80006b8 <set_LED>
		set_LED((i + 2) % NUM_OF_LEDS, 0, 255, 180);  //zelena
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	1c9a      	adds	r2, r3, #2
 80009c0:	4b63      	ldr	r3, [pc, #396]	; (8000b50 <win+0x238>)
 80009c2:	fb83 3102 	smull	r3, r1, r3, r2
 80009c6:	17d3      	asrs	r3, r2, #31
 80009c8:	1ac9      	subs	r1, r1, r3
 80009ca:	460b      	mov	r3, r1
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	440b      	add	r3, r1
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	1ad1      	subs	r1, r2, r3
 80009d4:	b2c8      	uxtb	r0, r1
 80009d6:	23b4      	movs	r3, #180	; 0xb4
 80009d8:	22ff      	movs	r2, #255	; 0xff
 80009da:	2100      	movs	r1, #0
 80009dc:	f7ff fe6c 	bl	80006b8 <set_LED>
		set_LED((i + 3) % NUM_OF_LEDS, 255, 255, 0);  //zuta
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	1cda      	adds	r2, r3, #3
 80009e4:	4b5a      	ldr	r3, [pc, #360]	; (8000b50 <win+0x238>)
 80009e6:	fb83 3102 	smull	r3, r1, r3, r2
 80009ea:	17d3      	asrs	r3, r2, #31
 80009ec:	1ac9      	subs	r1, r1, r3
 80009ee:	460b      	mov	r3, r1
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	440b      	add	r3, r1
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	1ad1      	subs	r1, r2, r3
 80009f8:	b2c8      	uxtb	r0, r1
 80009fa:	2300      	movs	r3, #0
 80009fc:	22ff      	movs	r2, #255	; 0xff
 80009fe:	21ff      	movs	r1, #255	; 0xff
 8000a00:	f7ff fe5a 	bl	80006b8 <set_LED>
		set_LED((i + 4) % NUM_OF_LEDS, 255, 173, 51);  //narancasta
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	4b51      	ldr	r3, [pc, #324]	; (8000b50 <win+0x238>)
 8000a0a:	fb83 3102 	smull	r3, r1, r3, r2
 8000a0e:	17d3      	asrs	r3, r2, #31
 8000a10:	1ac9      	subs	r1, r1, r3
 8000a12:	460b      	mov	r3, r1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	440b      	add	r3, r1
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	1ad1      	subs	r1, r2, r3
 8000a1c:	b2c8      	uxtb	r0, r1
 8000a1e:	2333      	movs	r3, #51	; 0x33
 8000a20:	22ad      	movs	r2, #173	; 0xad
 8000a22:	21ff      	movs	r1, #255	; 0xff
 8000a24:	f7ff fe48 	bl	80006b8 <set_LED>
		set_LED((i + 5) % NUM_OF_LEDS, 255, 0, 0);  //crvena
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	1d5a      	adds	r2, r3, #5
 8000a2c:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <win+0x238>)
 8000a2e:	fb83 3102 	smull	r3, r1, r3, r2
 8000a32:	17d3      	asrs	r3, r2, #31
 8000a34:	1ac9      	subs	r1, r1, r3
 8000a36:	460b      	mov	r3, r1
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	440b      	add	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	1ad1      	subs	r1, r2, r3
 8000a40:	b2c8      	uxtb	r0, r1
 8000a42:	2300      	movs	r3, #0
 8000a44:	2200      	movs	r2, #0
 8000a46:	21ff      	movs	r1, #255	; 0xff
 8000a48:	f7ff fe36 	bl	80006b8 <set_LED>
		send();
 8000a4c:	f7ff fe62 	bl	8000714 <send>
		timer2_wait_millisec(100);
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f000 fac7 	bl	8000fe4 <timer2_wait_millisec>
		set_LED(i % NUM_OF_LEDS, 102, 0, 255);
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <win+0x234>)
 8000a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a5e:	0899      	lsrs	r1, r3, #2
 8000a60:	460b      	mov	r3, r1
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	440b      	add	r3, r1
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b2d8      	uxtb	r0, r3
 8000a6c:	23ff      	movs	r3, #255	; 0xff
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2166      	movs	r1, #102	; 0x66
 8000a72:	f7ff fe21 	bl	80006b8 <set_LED>
		set_LED((i + 1) % NUM_OF_LEDS, 0, 153, 255);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	1c5a      	adds	r2, r3, #1
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <win+0x238>)
 8000a7c:	fb83 3102 	smull	r3, r1, r3, r2
 8000a80:	17d3      	asrs	r3, r2, #31
 8000a82:	1ac9      	subs	r1, r1, r3
 8000a84:	460b      	mov	r3, r1
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	440b      	add	r3, r1
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	1ad1      	subs	r1, r2, r3
 8000a8e:	b2c8      	uxtb	r0, r1
 8000a90:	23ff      	movs	r3, #255	; 0xff
 8000a92:	2299      	movs	r2, #153	; 0x99
 8000a94:	2100      	movs	r1, #0
 8000a96:	f7ff fe0f 	bl	80006b8 <set_LED>
		set_LED((i + 2) % NUM_OF_LEDS, 191, 255, 128);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	1c9a      	adds	r2, r3, #2
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <win+0x238>)
 8000aa0:	fb83 3102 	smull	r3, r1, r3, r2
 8000aa4:	17d3      	asrs	r3, r2, #31
 8000aa6:	1ac9      	subs	r1, r1, r3
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	440b      	add	r3, r1
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	1ad1      	subs	r1, r2, r3
 8000ab2:	b2c8      	uxtb	r0, r1
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	22ff      	movs	r2, #255	; 0xff
 8000ab8:	21bf      	movs	r1, #191	; 0xbf
 8000aba:	f7ff fdfd 	bl	80006b8 <set_LED>
		set_LED((i + 3) % NUM_OF_LEDS, 255, 197, 20);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	1cda      	adds	r2, r3, #3
 8000ac2:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <win+0x238>)
 8000ac4:	fb83 3102 	smull	r3, r1, r3, r2
 8000ac8:	17d3      	asrs	r3, r2, #31
 8000aca:	1ac9      	subs	r1, r1, r3
 8000acc:	460b      	mov	r3, r1
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	440b      	add	r3, r1
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	1ad1      	subs	r1, r2, r3
 8000ad6:	b2c8      	uxtb	r0, r1
 8000ad8:	2314      	movs	r3, #20
 8000ada:	22c5      	movs	r2, #197	; 0xc5
 8000adc:	21ff      	movs	r1, #255	; 0xff
 8000ade:	f7ff fdeb 	bl	80006b8 <set_LED>
		set_LED((i + 4) % NUM_OF_LEDS, 255, 102, 0);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	1d1a      	adds	r2, r3, #4
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <win+0x238>)
 8000ae8:	fb83 3102 	smull	r3, r1, r3, r2
 8000aec:	17d3      	asrs	r3, r2, #31
 8000aee:	1ac9      	subs	r1, r1, r3
 8000af0:	460b      	mov	r3, r1
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	440b      	add	r3, r1
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	1ad1      	subs	r1, r2, r3
 8000afa:	b2c8      	uxtb	r0, r1
 8000afc:	2300      	movs	r3, #0
 8000afe:	2266      	movs	r2, #102	; 0x66
 8000b00:	21ff      	movs	r1, #255	; 0xff
 8000b02:	f7ff fdd9 	bl	80006b8 <set_LED>
		set_LED((i + 5) % NUM_OF_LEDS, 153, 0, 51);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	1d5a      	adds	r2, r3, #5
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <win+0x238>)
 8000b0c:	fb83 3102 	smull	r3, r1, r3, r2
 8000b10:	17d3      	asrs	r3, r2, #31
 8000b12:	1ac9      	subs	r1, r1, r3
 8000b14:	460b      	mov	r3, r1
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	440b      	add	r3, r1
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	1ad1      	subs	r1, r2, r3
 8000b1e:	b2c8      	uxtb	r0, r1
 8000b20:	2333      	movs	r3, #51	; 0x33
 8000b22:	2200      	movs	r2, #0
 8000b24:	2199      	movs	r1, #153	; 0x99
 8000b26:	f7ff fdc7 	bl	80006b8 <set_LED>
		send();
 8000b2a:	f7ff fdf3 	bl	8000714 <send>
		timer2_wait_millisec(100);
 8000b2e:	2064      	movs	r0, #100	; 0x64
 8000b30:	f000 fa58 	bl	8000fe4 <timer2_wait_millisec>
	for (uint8_t i = 0; i < 4*NUM_OF_LEDS; i++) {
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	3301      	adds	r3, #1
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b17      	cmp	r3, #23
 8000b3e:	f67f af1b 	bls.w	8000978 <win+0x60>
	}

}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	aaaaaaab 	.word	0xaaaaaaab
 8000b50:	2aaaaaab 	.word	0x2aaaaaab

08000b54 <HAL_TIM_PWM_PulseFinishedCallback>:



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000b60:	f002 fa24 	bl	8002fac <HAL_TIM_PWM_Stop_DMA>
	ledHandler.datasentflag = TRANSFER_FINISHED;
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	701a      	strb	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000238 	.word	0x20000238
 8000b78:	2000008c 	.word	0x2000008c

08000b7c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b80:	f000 fc0c 	bl	800139c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b84:	f000 f812 	bl	8000bac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b88:	f7ff fd24 	bl	80005d4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b8c:	f7ff fd02 	bl	8000594 <MX_DMA_Init>
	MX_TIM1_Init();
 8000b90:	f000 fa44 	bl	800101c <MX_TIM1_Init>
	MX_TIM2_Init();
 8000b94:	f000 fae2 	bl	800115c <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <main+0x2c>)
 8000b9a:	f001 ff75 	bl	8002a88 <HAL_TIM_Base_Start_IT>
	MDL_leds_init();
 8000b9e:	f7ff fd41 	bl	8000624 <MDL_leds_init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		MDL_leds_handler();
 8000ba2:	f7ff fd63 	bl	800066c <MDL_leds_handler>
 8000ba6:	e7fc      	b.n	8000ba2 <main+0x26>
 8000ba8:	20000280 	.word	0x20000280

08000bac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2230      	movs	r2, #48	; 0x30
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fa78 	bl	80040b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <SystemClock_Config+0xd0>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <SystemClock_Config+0xd0>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <SystemClock_Config+0xd0>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <SystemClock_Config+0xd4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <SystemClock_Config+0xd4>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <SystemClock_Config+0xd4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000c20:	2304      	movs	r3, #4
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000c24:	2348      	movs	r3, #72	; 0x48
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fa73 	bl	8002120 <HAL_RCC_OscConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x98>
		Error_Handler();
 8000c40:	f000 f820 	bl	8000c84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c44:	230f      	movs	r3, #15
 8000c46:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c54:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2102      	movs	r1, #2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fcd4 	bl	8002610 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0xc6>
		Error_Handler();
 8000c6e:	f000 f809 	bl	8000c84 <Error_Handler>
	}
}
 8000c72:	bf00      	nop
 8000c74:	3750      	adds	r7, #80	; 0x50
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 fb88 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <TIM2_IRQHandler+0x10>)
 8000d3a:	f002 fa09 	bl	8003150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000280 	.word	0x20000280

08000d48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <DMA2_Stream1_IRQHandler+0x10>)
 8000d4e:	f000 fdd1 	bl	80018f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200002c8 	.word	0x200002c8

08000d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
	return 1;
 8000d60:	2301      	movs	r3, #1
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_kill>:

int _kill(int pid, int sig)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d76:	f003 f971 	bl	800405c <__errno>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2216      	movs	r2, #22
 8000d7e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_exit>:

void _exit (int status)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffe7 	bl	8000d6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d9e:	e7fe      	b.n	8000d9e <_exit+0x12>

08000da0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e00a      	b.n	8000dc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000db2:	f3af 8000 	nop.w
 8000db6:	4601      	mov	r1, r0
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	60ba      	str	r2, [r7, #8]
 8000dbe:	b2ca      	uxtb	r2, r1
 8000dc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dbf0      	blt.n	8000db2 <_read+0x12>
	}

return len;
 8000dd0:	687b      	ldr	r3, [r7, #4]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	e009      	b.n	8000e00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	60ba      	str	r2, [r7, #8]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf1      	blt.n	8000dec <_write+0x12>
	}
	return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_close>:

int _close(int file)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
	return -1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_isatty>:

int _isatty(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	return 1;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f003 f8d6 	bl	800405c <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20030000 	.word	0x20030000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	20000230 	.word	0x20000230
 8000ee4:	20000340 	.word	0x20000340

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db12      	blt.n	8000f80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	490a      	ldr	r1, [pc, #40]	; (8000f8c <__NVIC_DisableIRQ+0x44>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	3320      	adds	r3, #32
 8000f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f74:	f3bf 8f4f 	dsb	sy
}
 8000f78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f7a:	f3bf 8f6f 	isb	sy
}
 8000f7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 0 */
uint32_t timer2_Ticks_Millisec;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM2) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa0:	d104      	bne.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x1c>
	timer2_Ticks_Millisec++;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000faa:	6013      	str	r3, [r2, #0]
	}
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20000234 	.word	0x20000234

08000fbc <timer2_get_millisec>:

uint32_t timer2_get_millisec() {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint32_t value;
	NVIC_DisableIRQ(TIM2_IRQn);
 8000fc2:	201c      	movs	r0, #28
 8000fc4:	f7ff ffc0 	bl	8000f48 <__NVIC_DisableIRQ>
	value = timer2_Ticks_Millisec;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <timer2_get_millisec+0x24>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	607b      	str	r3, [r7, #4]
	NVIC_EnableIRQ(TIM2_IRQn);
 8000fce:	201c      	movs	r0, #28
 8000fd0:	f7ff ff9c 	bl	8000f0c <__NVIC_EnableIRQ>
	return value ;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000234 	.word	0x20000234

08000fe4 <timer2_wait_millisec>:

void timer2_wait_millisec(uint32_t ms) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint32_t t1, t2;
	t1 = timer2_get_millisec();
 8000fec:	f7ff ffe6 	bl	8000fbc <timer2_get_millisec>
 8000ff0:	60f8      	str	r0, [r7, #12]

	while (1) {
		t2 = timer2_get_millisec();
 8000ff2:	f7ff ffe3 	bl	8000fbc <timer2_get_millisec>
 8000ff6:	60b8      	str	r0, [r7, #8]
		if ((t2 - t1) >= ms)
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	d904      	bls.n	800100e <timer2_wait_millisec+0x2a>
			break;
		if (t2 < t1)
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d302      	bcc.n	8001012 <timer2_wait_millisec+0x2e>
		t2 = timer2_get_millisec();
 800100c:	e7f1      	b.n	8000ff2 <timer2_wait_millisec+0xe>
			break;
 800100e:	bf00      	nop
 8001010:	e000      	b.n	8001014 <timer2_wait_millisec+0x30>
			break;
 8001012:	bf00      	nop
	}
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b096      	sub	sp, #88	; 0x58
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2220      	movs	r2, #32
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f003 f82b 	bl	80040b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800105a:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <MX_TIM1_Init+0x138>)
 800105c:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <MX_TIM1_Init+0x13c>)
 800105e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001060:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <MX_TIM1_Init+0x138>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <MX_TIM1_Init+0x138>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 800106c:	4b39      	ldr	r3, [pc, #228]	; (8001154 <MX_TIM1_Init+0x138>)
 800106e:	2259      	movs	r2, #89	; 0x59
 8001070:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b38      	ldr	r3, [pc, #224]	; (8001154 <MX_TIM1_Init+0x138>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001078:	4b36      	ldr	r3, [pc, #216]	; (8001154 <MX_TIM1_Init+0x138>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b35      	ldr	r3, [pc, #212]	; (8001154 <MX_TIM1_Init+0x138>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001084:	4833      	ldr	r0, [pc, #204]	; (8001154 <MX_TIM1_Init+0x138>)
 8001086:	f001 fcaf 	bl	80029e8 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001090:	f7ff fdf8 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800109e:	4619      	mov	r1, r3
 80010a0:	482c      	ldr	r0, [pc, #176]	; (8001154 <MX_TIM1_Init+0x138>)
 80010a2:	f002 fa1f 	bl	80034e4 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80010ac:	f7ff fdea 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b0:	4828      	ldr	r0, [pc, #160]	; (8001154 <MX_TIM1_Init+0x138>)
 80010b2:	f001 fd59 	bl	8002b68 <HAL_TIM_PWM_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010bc:	f7ff fde2 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010cc:	4619      	mov	r1, r3
 80010ce:	4821      	ldr	r0, [pc, #132]	; (8001154 <MX_TIM1_Init+0x138>)
 80010d0:	f002 fee2 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010da:	f7ff fdd3 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010de:	2360      	movs	r3, #96	; 0x60
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_TIM1_Init+0x138>)
 8001104:	f002 f92c 	bl	8003360 <HAL_TIM_PWM_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800110e:	f7ff fdb9 	bl	8000c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM1_Init+0x138>)
 8001136:	f002 ff2b 	bl	8003f90 <HAL_TIMEx_ConfigBreakDeadTime>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001140:	f7ff fda0 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM1_Init+0x138>)
 8001146:	f000 f8c5 	bl	80012d4 <HAL_TIM_MspPostInit>

}
 800114a:	bf00      	nop
 800114c:	3758      	adds	r7, #88	; 0x58
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000238 	.word	0x20000238
 8001158:	40010000 	.word	0x40010000

0800115c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_TIM2_Init+0x94>)
 800117a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM2_Init+0x94>)
 8001182:	2201      	movs	r2, #1
 8001184:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_TIM2_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 35999;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_TIM2_Init+0x94>)
 800118e:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001192:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_TIM2_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_TIM2_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a0:	4813      	ldr	r0, [pc, #76]	; (80011f0 <MX_TIM2_Init+0x94>)
 80011a2:	f001 fc21 	bl	80029e8 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011ac:	f7ff fd6a 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM2_Init+0x94>)
 80011be:	f002 f991 	bl	80034e4 <HAL_TIM_ConfigClockSource>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011c8:	f7ff fd5c 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_TIM2_Init+0x94>)
 80011da:	f002 fe5d 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011e4:	f7ff fd4e 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000280 	.word	0x20000280

080011f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a30      	ldr	r2, [pc, #192]	; (80012c4 <HAL_TIM_Base_MspInit+0xd0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d13e      	bne.n	8001284 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_TIM_Base_MspInit+0xd4>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a2e      	ldr	r2, [pc, #184]	; (80012c8 <HAL_TIM_Base_MspInit+0xd4>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <HAL_TIM_Base_MspInit+0xd4>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 8001224:	4a2a      	ldr	r2, [pc, #168]	; (80012d0 <HAL_TIM_Base_MspInit+0xdc>)
 8001226:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 800122a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800122e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 8001232:	2240      	movs	r2, #64	; 0x40
 8001234:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 800123e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001242:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 8001246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800124a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 800124e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001252:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001266:	4819      	ldr	r0, [pc, #100]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 8001268:	f000 fa1c 	bl	80016a4 <HAL_DMA_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001272:	f7ff fd07 	bl	8000c84 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_TIM_Base_MspInit+0xd8>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001282:	e01a      	b.n	80012ba <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800128c:	d115      	bne.n	80012ba <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <HAL_TIM_Base_MspInit+0xd4>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <HAL_TIM_Base_MspInit+0xd4>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_TIM_Base_MspInit+0xd4>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	201c      	movs	r0, #28
 80012b0:	f000 f9c1 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012b4:	201c      	movs	r0, #28
 80012b6:	f000 f9da 	bl	800166e <HAL_NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40010000 	.word	0x40010000
 80012c8:	40023800 	.word	0x40023800
 80012cc:	200002c8 	.word	0x200002c8
 80012d0:	40026428 	.word	0x40026428

080012d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_TIM_MspPostInit+0x68>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d11e      	bne.n	8001334 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_TIM_MspPostInit+0x6c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a10      	ldr	r2, [pc, #64]	; (8001340 <HAL_TIM_MspPostInit+0x6c>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_TIM_MspPostInit+0x6c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001324:	2301      	movs	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_TIM_MspPostInit+0x70>)
 8001330:	f000 fd4a 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40010000 	.word	0x40010000
 8001340:	40023800 	.word	0x40023800
 8001344:	40021000 	.word	0x40021000

08001348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001380 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800134e:	490e      	ldr	r1, [pc, #56]	; (8001388 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001350:	4a0e      	ldr	r2, [pc, #56]	; (800138c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001364:	4c0b      	ldr	r4, [pc, #44]	; (8001394 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001372:	f7ff fdb9 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001376:	f002 fe77 	bl	8004068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137a:	f7ff fbff 	bl	8000b7c <main>
  bx  lr    
 800137e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001380:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800138c:	080052b8 	.word	0x080052b8
  ldr r2, =_sbss
 8001390:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001394:	2000033c 	.word	0x2000033c

08001398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <HAL_Init+0x40>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_Init+0x40>)
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x40>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f92b 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	200f      	movs	r0, #15
 80013cc:	f000 f808 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fc5e 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023c00 	.word	0x40023c00

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x54>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f943 	bl	800168a <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 f90b 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x5c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000000 	.word	0x20000000
 8001438:	20000008 	.word	0x20000008
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	20000328 	.word	0x20000328

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000328 	.word	0x20000328

08001480 <__NVIC_SetPriorityGrouping>:
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_GetPriorityGrouping>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff3e 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff31 	bl	80014e4 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff feda 	bl	8001468 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e099      	b.n	80017f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e0:	e00f      	b.n	8001702 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e2:	f7ff fec1 	bl	8001468 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d908      	bls.n	8001702 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2203      	movs	r2, #3
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e078      	b.n	80017f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e8      	bne.n	80016e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_DMA_Init+0x158>)
 800171c:	4013      	ands	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	2b04      	cmp	r3, #4
 800175a:	d107      	bne.n	800176c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4313      	orrs	r3, r2
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f023 0307 	bic.w	r3, r3, #7
 8001782:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4313      	orrs	r3, r2
 800178c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2b04      	cmp	r3, #4
 8001794:	d117      	bne.n	80017c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4313      	orrs	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fa91 	bl	8001cd0 <DMA_CheckFifoParam>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017c2:	2301      	movs	r3, #1
 80017c4:	e016      	b.n	80017f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fa48 	bl	8001c64 <DMA_CalcBaseAndBitshift>
 80017d4:	4603      	mov	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	f010803f 	.word	0xf010803f

08001800 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_DMA_Start_IT+0x26>
 8001822:	2302      	movs	r3, #2
 8001824:	e040      	b.n	80018a8 <HAL_DMA_Start_IT+0xa8>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d12f      	bne.n	800189a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2202      	movs	r2, #2
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f9da 	bl	8001c08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	223f      	movs	r2, #63	; 0x3f
 800185a:	409a      	lsls	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0216 	orr.w	r2, r2, #22
 800186e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0208 	orr.w	r2, r2, #8
 8001886:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e005      	b.n	80018a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
 80018a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d004      	beq.n	80018ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00c      	b.n	80018e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2205      	movs	r2, #5
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001900:	4b8e      	ldr	r3, [pc, #568]	; (8001b3c <HAL_DMA_IRQHandler+0x248>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a8e      	ldr	r2, [pc, #568]	; (8001b40 <HAL_DMA_IRQHandler+0x24c>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0a9b      	lsrs	r3, r3, #10
 800190c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	2208      	movs	r2, #8
 8001920:	409a      	lsls	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d01a      	beq.n	8001960 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0204 	bic.w	r2, r2, #4
 8001946:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194c:	2208      	movs	r2, #8
 800194e:	409a      	lsls	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	2201      	movs	r2, #1
 8001966:	409a      	lsls	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d012      	beq.n	8001996 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001982:	2201      	movs	r2, #1
 8001984:	409a      	lsls	r2, r3
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	f043 0202 	orr.w	r2, r3, #2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2204      	movs	r2, #4
 800199c:	409a      	lsls	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d012      	beq.n	80019cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00b      	beq.n	80019cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b8:	2204      	movs	r2, #4
 80019ba:	409a      	lsls	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	f043 0204 	orr.w	r2, r3, #4
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2210      	movs	r2, #16
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d043      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03c      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	2210      	movs	r2, #16
 80019f0:	409a      	lsls	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d108      	bne.n	8001a24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d024      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
 8001a22:	e01f      	b.n	8001a64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01b      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	4798      	blx	r3
 8001a34:	e016      	b.n	8001a64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0208 	bic.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	2220      	movs	r2, #32
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 808f 	beq.w	8001b94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8087 	beq.w	8001b94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d136      	bne.n	8001b0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0216 	bic.w	r2, r2, #22
 8001aac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001abc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d103      	bne.n	8001ace <HAL_DMA_IRQHandler+0x1da>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0208 	bic.w	r2, r2, #8
 8001adc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	223f      	movs	r2, #63	; 0x3f
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d07e      	beq.n	8001c00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
        }
        return;
 8001b0a:	e079      	b.n	8001c00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01d      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d031      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
 8001b38:	e02c      	b.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
 8001b3a:	bf00      	nop
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
 8001b54:	e01e      	b.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10f      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0210 	bic.w	r2, r2, #16
 8001b72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d032      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d022      	beq.n	8001bee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2205      	movs	r2, #5
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d307      	bcc.n	8001bdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f2      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x2cc>
 8001bda:	e000      	b.n	8001bde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bdc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
 8001bfe:	e000      	b.n	8001c02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c00:	bf00      	nop
    }
  }
}
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	d108      	bne.n	8001c48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c46:	e007      	b.n	8001c58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	60da      	str	r2, [r3, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	3b10      	subs	r3, #16
 8001c74:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <DMA_CalcBaseAndBitshift+0x64>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c7e:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <DMA_CalcBaseAndBitshift+0x68>)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d909      	bls.n	8001ca6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	1d1a      	adds	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca4:	e007      	b.n	8001cb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	aaaaaaab 	.word	0xaaaaaaab
 8001ccc:	08005158 	.word	0x08005158

08001cd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d11f      	bne.n	8001d2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d856      	bhi.n	8001d9e <DMA_CheckFifoParam+0xce>
 8001cf0:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <DMA_CheckFifoParam+0x28>)
 8001cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf6:	bf00      	nop
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d1b 	.word	0x08001d1b
 8001d00:	08001d09 	.word	0x08001d09
 8001d04:	08001d9f 	.word	0x08001d9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d046      	beq.n	8001da2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d18:	e043      	b.n	8001da2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d22:	d140      	bne.n	8001da6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d28:	e03d      	b.n	8001da6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d32:	d121      	bne.n	8001d78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d837      	bhi.n	8001daa <DMA_CheckFifoParam+0xda>
 8001d3a:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <DMA_CheckFifoParam+0x70>)
 8001d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d40:	08001d51 	.word	0x08001d51
 8001d44:	08001d57 	.word	0x08001d57
 8001d48:	08001d51 	.word	0x08001d51
 8001d4c:	08001d69 	.word	0x08001d69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
      break;
 8001d54:	e030      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d025      	beq.n	8001dae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d66:	e022      	b.n	8001dae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d70:	d11f      	bne.n	8001db2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d76:	e01c      	b.n	8001db2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d903      	bls.n	8001d86 <DMA_CheckFifoParam+0xb6>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d003      	beq.n	8001d8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d84:	e018      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
      break;
 8001d8a:	e015      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00e      	beq.n	8001db6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9c:	e00b      	b.n	8001db6 <DMA_CheckFifoParam+0xe6>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e00a      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001da2:	bf00      	nop
 8001da4:	e008      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001da6:	bf00      	nop
 8001da8:	e006      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001daa:	bf00      	nop
 8001dac:	e004      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001dae:	bf00      	nop
 8001db0:	e002      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
    }
  } 
  
  return status; 
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e177      	b.n	80020d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8166 	bne.w	80020ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d005      	beq.n	8001e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d130      	bne.n	8001e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 0201 	and.w	r2, r3, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d017      	beq.n	8001eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d123      	bne.n	8001f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	69b9      	ldr	r1, [r7, #24]
 8001f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80c0 	beq.w	80020ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b66      	ldr	r3, [pc, #408]	; (80020ec <HAL_GPIO_Init+0x324>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a65      	ldr	r2, [pc, #404]	; (80020ec <HAL_GPIO_Init+0x324>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_GPIO_Init+0x324>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6a:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <HAL_GPIO_Init+0x328>)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	220f      	movs	r2, #15
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <HAL_GPIO_Init+0x32c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d037      	beq.n	8002006 <HAL_GPIO_Init+0x23e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d031      	beq.n	8002002 <HAL_GPIO_Init+0x23a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a56      	ldr	r2, [pc, #344]	; (80020fc <HAL_GPIO_Init+0x334>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d02b      	beq.n	8001ffe <HAL_GPIO_Init+0x236>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a55      	ldr	r2, [pc, #340]	; (8002100 <HAL_GPIO_Init+0x338>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d025      	beq.n	8001ffa <HAL_GPIO_Init+0x232>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_GPIO_Init+0x33c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01f      	beq.n	8001ff6 <HAL_GPIO_Init+0x22e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a53      	ldr	r2, [pc, #332]	; (8002108 <HAL_GPIO_Init+0x340>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d019      	beq.n	8001ff2 <HAL_GPIO_Init+0x22a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_GPIO_Init+0x344>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0x226>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a51      	ldr	r2, [pc, #324]	; (8002110 <HAL_GPIO_Init+0x348>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00d      	beq.n	8001fea <HAL_GPIO_Init+0x222>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a50      	ldr	r2, [pc, #320]	; (8002114 <HAL_GPIO_Init+0x34c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <HAL_GPIO_Init+0x21e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4f      	ldr	r2, [pc, #316]	; (8002118 <HAL_GPIO_Init+0x350>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_GPIO_Init+0x21a>
 8001fde:	2309      	movs	r3, #9
 8001fe0:	e012      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	e010      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	e00e      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fea:	2307      	movs	r3, #7
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x240>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x328>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_GPIO_Init+0x354>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204a:	4a34      	ldr	r2, [pc, #208]	; (800211c <HAL_GPIO_Init+0x354>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002050:	4b32      	ldr	r3, [pc, #200]	; (800211c <HAL_GPIO_Init+0x354>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002074:	4a29      	ldr	r2, [pc, #164]	; (800211c <HAL_GPIO_Init+0x354>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <HAL_GPIO_Init+0x354>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209e:	4a1f      	ldr	r2, [pc, #124]	; (800211c <HAL_GPIO_Init+0x354>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_GPIO_Init+0x354>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_GPIO_Init+0x354>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f ae84 	bls.w	8001de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40021800 	.word	0x40021800
 8002110:	40021c00 	.word	0x40021c00
 8002114:	40022000 	.word	0x40022000
 8002118:	40022400 	.word	0x40022400
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e267      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d075      	beq.n	800222a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d00c      	beq.n	8002164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800214a:	4b85      	ldr	r3, [pc, #532]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002152:	2b08      	cmp	r3, #8
 8002154:	d112      	bne.n	800217c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002162:	d10b      	bne.n	800217c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	4b7e      	ldr	r3, [pc, #504]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d05b      	beq.n	8002228 <HAL_RCC_OscConfig+0x108>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d157      	bne.n	8002228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e242      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002184:	d106      	bne.n	8002194 <HAL_RCC_OscConfig+0x74>
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e01d      	b.n	80021d0 <HAL_RCC_OscConfig+0xb0>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x98>
 800219e:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a6f      	ldr	r2, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6c      	ldr	r2, [pc, #432]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0xb0>
 80021b8:	4b69      	ldr	r3, [pc, #420]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a68      	ldr	r2, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a65      	ldr	r2, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff f946 	bl	8001468 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff f942 	bl	8001468 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e207      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0xc0>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff f932 	bl	8001468 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002208:	f7ff f92e 	bl	8001468 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e1f3      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	4b51      	ldr	r3, [pc, #324]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0xe8>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d063      	beq.n	80022fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800224a:	2b08      	cmp	r3, #8
 800224c:	d11c      	bne.n	8002288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224e:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x152>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e1c7      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	e03a      	b.n	80022fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002290:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCC_OscConfig+0x244>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7ff f8e7 	bl	8001468 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229e:	f7ff f8e3 	bl	8001468 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1a8      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4925      	ldr	r1, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_OscConfig+0x244>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7ff f8c6 	bl	8001468 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e0:	f7ff f8c2 	bl	8001468 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e187      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d036      	beq.n	8002378 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d016      	beq.n	8002340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_RCC_OscConfig+0x248>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff f8a6 	bl	8001468 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff f8a2 	bl	8001468 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e167      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x240>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x200>
 800233e:	e01b      	b.n	8002378 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_OscConfig+0x248>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7ff f88f 	bl	8001468 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	e00e      	b.n	800236c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234e:	f7ff f88b 	bl	8001468 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d907      	bls.n	800236c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e150      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
 8002360:	40023800 	.word	0x40023800
 8002364:	42470000 	.word	0x42470000
 8002368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ea      	bne.n	800234e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8097 	beq.w	80024b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b7d      	ldr	r3, [pc, #500]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a7c      	ldr	r2, [pc, #496]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b7a      	ldr	r3, [pc, #488]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b77      	ldr	r3, [pc, #476]	; (8002594 <HAL_RCC_OscConfig+0x474>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b74      	ldr	r3, [pc, #464]	; (8002594 <HAL_RCC_OscConfig+0x474>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a73      	ldr	r2, [pc, #460]	; (8002594 <HAL_RCC_OscConfig+0x474>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7ff f84b 	bl	8001468 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7ff f847 	bl	8001468 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e10c      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b6a      	ldr	r3, [pc, #424]	; (8002594 <HAL_RCC_OscConfig+0x474>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x2ea>
 80023fc:	4b64      	ldr	r3, [pc, #400]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a63      	ldr	r2, [pc, #396]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	e01c      	b.n	8002444 <HAL_RCC_OscConfig+0x324>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b05      	cmp	r3, #5
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x30c>
 8002412:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a5e      	ldr	r2, [pc, #376]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a5b      	ldr	r2, [pc, #364]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0x324>
 800242c:	4b58      	ldr	r3, [pc, #352]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	4a57      	ldr	r2, [pc, #348]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6713      	str	r3, [r2, #112]	; 0x70
 8002438:	4b55      	ldr	r3, [pc, #340]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a54      	ldr	r2, [pc, #336]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800243e:	f023 0304 	bic.w	r3, r3, #4
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7ff f80c 	bl	8001468 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	e00a      	b.n	800246a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7ff f808 	bl	8001468 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0cb      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	4b49      	ldr	r3, [pc, #292]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ee      	beq.n	8002454 <HAL_RCC_OscConfig+0x334>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7fe fff6 	bl	8001468 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe fff2 	bl	8001468 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e0b5      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002496:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ee      	bne.n	8002480 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	4a38      	ldr	r2, [pc, #224]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80024ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80a1 	beq.w	8002600 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d05c      	beq.n	8002584 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d141      	bne.n	8002556 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_OscConfig+0x478>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe ffc6 	bl	8001468 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe ffc2 	bl	8001468 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e087      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	3b01      	subs	r3, #1
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	491b      	ldr	r1, [pc, #108]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x478>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe ff9b 	bl	8001468 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe ff97 	bl	8001468 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e05c      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x416>
 8002554:	e054      	b.n	8002600 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_RCC_OscConfig+0x478>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe ff84 	bl	8001468 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe ff80 	bl	8001468 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e045      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_RCC_OscConfig+0x470>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x444>
 8002582:	e03d      	b.n	8002600 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d107      	bne.n	800259c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e038      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
 8002590:	40023800 	.word	0x40023800
 8002594:	40007000 	.word	0x40007000
 8002598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800259c:	4b1b      	ldr	r3, [pc, #108]	; (800260c <HAL_RCC_OscConfig+0x4ec>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d028      	beq.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d121      	bne.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d11a      	bne.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025cc:	4013      	ands	r3, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d111      	bne.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	3b01      	subs	r3, #1
 80025e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0cc      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d90c      	bls.n	800264c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b8      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800266e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	494d      	ldr	r1, [pc, #308]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d044      	beq.n	8002730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d119      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e067      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4934      	ldr	r1, [pc, #208]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002700:	f7fe feb2 	bl	8001468 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	e00a      	b.n	800271e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002708:	f7fe feae 	bl	8001468 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e04f      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 020c 	and.w	r2, r3, #12
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	429a      	cmp	r2, r3
 800272e:	d1eb      	bne.n	8002708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d20c      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e032      	b.n	80027be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002796:	f000 f821 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800279a:	4602      	mov	r2, r0
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	490a      	ldr	r1, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	5ccb      	ldrb	r3, [r1, r3]
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fe12 	bl	80013e0 <HAL_InitTick>

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023c00 	.word	0x40023c00
 80027cc:	40023800 	.word	0x40023800
 80027d0:	08005148 	.word	0x08005148
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e0:	b094      	sub	sp, #80	; 0x50
 80027e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	647b      	str	r3, [r7, #68]	; 0x44
 80027e8:	2300      	movs	r3, #0
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ec:	2300      	movs	r3, #0
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f4:	4b79      	ldr	r3, [pc, #484]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d00d      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x40>
 8002800:	2b08      	cmp	r3, #8
 8002802:	f200 80e1 	bhi.w	80029c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x34>
 800280a:	2b04      	cmp	r3, #4
 800280c:	d003      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x3a>
 800280e:	e0db      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002814:	e0db      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002816:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800281a:	e0d8      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800281c:	4b6f      	ldr	r3, [pc, #444]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002824:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002826:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d063      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002832:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	099b      	lsrs	r3, r3, #6
 8002838:	2200      	movs	r2, #0
 800283a:	63bb      	str	r3, [r7, #56]	; 0x38
 800283c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	0159      	lsls	r1, r3, #5
 800285c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002860:	0150      	lsls	r0, r2, #5
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4621      	mov	r1, r4
 8002868:	1a51      	subs	r1, r2, r1
 800286a:	6139      	str	r1, [r7, #16]
 800286c:	4629      	mov	r1, r5
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002880:	4659      	mov	r1, fp
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	4651      	mov	r1, sl
 8002886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288a:	4651      	mov	r1, sl
 800288c:	018a      	lsls	r2, r1, #6
 800288e:	4651      	mov	r1, sl
 8002890:	ebb2 0801 	subs.w	r8, r2, r1
 8002894:	4659      	mov	r1, fp
 8002896:	eb63 0901 	sbc.w	r9, r3, r1
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ae:	4690      	mov	r8, r2
 80028b0:	4699      	mov	r9, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	eb18 0303 	adds.w	r3, r8, r3
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	462b      	mov	r3, r5
 80028bc:	eb49 0303 	adc.w	r3, r9, r3
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ce:	4629      	mov	r1, r5
 80028d0:	024b      	lsls	r3, r1, #9
 80028d2:	4621      	mov	r1, r4
 80028d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028d8:	4621      	mov	r1, r4
 80028da:	024a      	lsls	r2, r1, #9
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e2:	2200      	movs	r2, #0
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028ec:	f7fd fcd0 	bl	8000290 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4613      	mov	r3, r2
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f8:	e058      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	2200      	movs	r2, #0
 8002902:	4618      	mov	r0, r3
 8002904:	4611      	mov	r1, r2
 8002906:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800290a:	623b      	str	r3, [r7, #32]
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002914:	4642      	mov	r2, r8
 8002916:	464b      	mov	r3, r9
 8002918:	f04f 0000 	mov.w	r0, #0
 800291c:	f04f 0100 	mov.w	r1, #0
 8002920:	0159      	lsls	r1, r3, #5
 8002922:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002926:	0150      	lsls	r0, r2, #5
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4641      	mov	r1, r8
 800292e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002932:	4649      	mov	r1, r9
 8002934:	eb63 0b01 	sbc.w	fp, r3, r1
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002944:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002948:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800294c:	ebb2 040a 	subs.w	r4, r2, sl
 8002950:	eb63 050b 	sbc.w	r5, r3, fp
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	00eb      	lsls	r3, r5, #3
 800295e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002962:	00e2      	lsls	r2, r4, #3
 8002964:	4614      	mov	r4, r2
 8002966:	461d      	mov	r5, r3
 8002968:	4643      	mov	r3, r8
 800296a:	18e3      	adds	r3, r4, r3
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	464b      	mov	r3, r9
 8002970:	eb45 0303 	adc.w	r3, r5, r3
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002982:	4629      	mov	r1, r5
 8002984:	028b      	lsls	r3, r1, #10
 8002986:	4621      	mov	r1, r4
 8002988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800298c:	4621      	mov	r1, r4
 800298e:	028a      	lsls	r2, r1, #10
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002996:	2200      	movs	r2, #0
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	61fa      	str	r2, [r7, #28]
 800299c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a0:	f7fd fc76 	bl	8000290 <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4613      	mov	r3, r2
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_GetSysClockFreq+0x200>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	3301      	adds	r3, #1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029c6:	e002      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3750      	adds	r7, #80	; 0x50
 80029d4:	46bd      	mov	sp, r7
 80029d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	007a1200 	.word	0x007a1200

080029e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e041      	b.n	8002a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe fbf0 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f000 ff26 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d001      	beq.n	8002aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e04e      	b.n	8002b3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d022      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aca:	d01d      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d018      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00e      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d009      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x80>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d111      	bne.n	8002b2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b06      	cmp	r3, #6
 8002b18:	d010      	beq.n	8002b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	e007      	b.n	8002b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40000800 	.word	0x40000800
 8002b58:	40000c00 	.word	0x40000c00
 8002b5c:	40010400 	.word	0x40010400
 8002b60:	40014000 	.word	0x40014000
 8002b64:	40001800 	.word	0x40001800

08002b68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e041      	b.n	8002bfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f839 	bl	8002c06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f000 fe66 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e022      	b.n	8002c8e <HAL_TIM_PWM_Start_DMA+0x72>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d109      	bne.n	8002c62 <HAL_TIM_PWM_Start_DMA+0x46>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	bf0c      	ite	eq
 8002c5a:	2301      	moveq	r3, #1
 8002c5c:	2300      	movne	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	e015      	b.n	8002c8e <HAL_TIM_PWM_Start_DMA+0x72>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d109      	bne.n	8002c7c <HAL_TIM_PWM_Start_DMA+0x60>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e008      	b.n	8002c8e <HAL_TIM_PWM_Start_DMA+0x72>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	e171      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_TIM_PWM_Start_DMA+0x94>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e022      	b.n	8002cf6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d109      	bne.n	8002cca <HAL_TIM_PWM_Start_DMA+0xae>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	e015      	b.n	8002cf6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d109      	bne.n	8002ce4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e008      	b.n	8002cf6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d024      	beq.n	8002d44 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start_DMA+0xee>
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e137      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start_DMA+0xfe>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d18:	e016      	b.n	8002d48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_PWM_Start_DMA+0x10e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d28:	e00e      	b.n	8002d48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_PWM_Start_DMA+0x11e>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d38:	e006      	b.n	8002d48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d42:	e001      	b.n	8002d48 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e118      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	f200 80ae 	bhi.w	8002eac <HAL_TIM_PWM_Start_DMA+0x290>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	08002ead 	.word	0x08002ead
 8002d60:	08002ead 	.word	0x08002ead
 8002d64:	08002ead 	.word	0x08002ead
 8002d68:	08002dd5 	.word	0x08002dd5
 8002d6c:	08002ead 	.word	0x08002ead
 8002d70:	08002ead 	.word	0x08002ead
 8002d74:	08002ead 	.word	0x08002ead
 8002d78:	08002e1d 	.word	0x08002e1d
 8002d7c:	08002ead 	.word	0x08002ead
 8002d80:	08002ead 	.word	0x08002ead
 8002d84:	08002ead 	.word	0x08002ead
 8002d88:	08002e65 	.word	0x08002e65
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	4a7c      	ldr	r2, [pc, #496]	; (8002f84 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002d92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	4a7b      	ldr	r2, [pc, #492]	; (8002f88 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	4a7a      	ldr	r2, [pc, #488]	; (8002f8c <HAL_TIM_PWM_Start_DMA+0x370>)
 8002da2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3334      	adds	r3, #52	; 0x34
 8002db0:	461a      	mov	r2, r3
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	f7fe fd24 	bl	8001800 <HAL_DMA_Start_IT>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0db      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd0:	60da      	str	r2, [r3, #12]
      break;
 8002dd2:	e06e      	b.n	8002eb2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	; (8002f84 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	4a69      	ldr	r2, [pc, #420]	; (8002f88 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	4a68      	ldr	r2, [pc, #416]	; (8002f8c <HAL_TIM_PWM_Start_DMA+0x370>)
 8002dea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3338      	adds	r3, #56	; 0x38
 8002df8:	461a      	mov	r2, r3
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	f7fe fd00 	bl	8001800 <HAL_DMA_Start_IT>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0b7      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e18:	60da      	str	r2, [r3, #12]
      break;
 8002e1a:	e04a      	b.n	8002eb2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002e22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	4a57      	ldr	r2, [pc, #348]	; (8002f88 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	4a56      	ldr	r2, [pc, #344]	; (8002f8c <HAL_TIM_PWM_Start_DMA+0x370>)
 8002e32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	333c      	adds	r3, #60	; 0x3c
 8002e40:	461a      	mov	r2, r3
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	f7fe fcdc 	bl	8001800 <HAL_DMA_Start_IT>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e093      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e60:	60da      	str	r2, [r3, #12]
      break;
 8002e62:	e026      	b.n	8002eb2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4a46      	ldr	r2, [pc, #280]	; (8002f84 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4a45      	ldr	r2, [pc, #276]	; (8002f88 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4a44      	ldr	r2, [pc, #272]	; (8002f8c <HAL_TIM_PWM_Start_DMA+0x370>)
 8002e7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3340      	adds	r3, #64	; 0x40
 8002e88:	461a      	mov	r2, r3
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	f7fe fcb8 	bl	8001800 <HAL_DMA_Start_IT>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06f      	b.n	8002f7a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ea8:	60da      	str	r2, [r3, #12]
      break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15f      	bne.n	8002f78 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 ffc3 	bl	8003e4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a31      	ldr	r2, [pc, #196]	; (8002f90 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_TIM_PWM_Start_DMA+0x2be>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2f      	ldr	r2, [pc, #188]	; (8002f94 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d022      	beq.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x328>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f06:	d01d      	beq.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d018      	beq.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a21      	ldr	r2, [pc, #132]	; (8002f9c <HAL_TIM_PWM_Start_DMA+0x380>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_TIM_PWM_Start_DMA+0x378>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_TIM_PWM_Start_DMA+0x328>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d111      	bne.n	8002f68 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d010      	beq.n	8002f78 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	e007      	b.n	8002f78 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08003769 	.word	0x08003769
 8002f88:	08003811 	.word	0x08003811
 8002f8c:	080036d7 	.word	0x080036d7
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40010400 	.word	0x40010400
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40001800 	.word	0x40001800

08002fac <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d855      	bhi.n	800306c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002ffd 	.word	0x08002ffd
 8002fcc:	0800306d 	.word	0x0800306d
 8002fd0:	0800306d 	.word	0x0800306d
 8002fd4:	0800306d 	.word	0x0800306d
 8002fd8:	08003019 	.word	0x08003019
 8002fdc:	0800306d 	.word	0x0800306d
 8002fe0:	0800306d 	.word	0x0800306d
 8002fe4:	0800306d 	.word	0x0800306d
 8002fe8:	08003035 	.word	0x08003035
 8002fec:	0800306d 	.word	0x0800306d
 8002ff0:	0800306d 	.word	0x0800306d
 8002ff4:	0800306d 	.word	0x0800306d
 8002ff8:	08003051 	.word	0x08003051
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800300a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	4618      	mov	r0, r3
 8003012:	f7fe fc4d 	bl	80018b0 <HAL_DMA_Abort_IT>
      break;
 8003016:	e02c      	b.n	8003072 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003026:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fc3f 	bl	80018b0 <HAL_DMA_Abort_IT>
      break;
 8003032:	e01e      	b.n	8003072 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003042:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fc31 	bl	80018b0 <HAL_DMA_Abort_IT>
      break;
 800304e:	e010      	b.n	8003072 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800305e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fc23 	bl	80018b0 <HAL_DMA_Abort_IT>
      break;
 800306a:	e002      	b.n	8003072 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      break;
 8003070:	bf00      	nop
  }

  if (status == HAL_OK)
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d161      	bne.n	800313c <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fee3 	bl	8003e4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_PWM_Stop_DMA+0xee>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_TIM_PWM_Stop_DMA+0xf2>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d017      	beq.n	80030d4 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10f      	bne.n	80030d4 <HAL_TIM_PWM_Stop_DMA+0x128>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a1a      	ldr	r2, [r3, #32]
 80030ba:	f240 4344 	movw	r3, #1092	; 0x444
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_TIM_PWM_Stop_DMA+0x128>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a1a      	ldr	r2, [r3, #32]
 80030da:	f241 1311 	movw	r3, #4369	; 0x1111
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10f      	bne.n	8003104 <HAL_TIM_PWM_Stop_DMA+0x158>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6a1a      	ldr	r2, [r3, #32]
 80030ea:	f240 4344 	movw	r3, #1092	; 0x444
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_PWM_Stop_DMA+0x158>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_TIM_PWM_Stop_DMA+0x168>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003112:	e013      	b.n	800313c <HAL_TIM_PWM_Stop_DMA+0x190>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b04      	cmp	r3, #4
 8003118:	d104      	bne.n	8003124 <HAL_TIM_PWM_Stop_DMA+0x178>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003122:	e00b      	b.n	800313c <HAL_TIM_PWM_Stop_DMA+0x190>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b08      	cmp	r3, #8
 8003128:	d104      	bne.n	8003134 <HAL_TIM_PWM_Stop_DMA+0x188>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003132:	e003      	b.n	800313c <HAL_TIM_PWM_Stop_DMA+0x190>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000
 800314c:	40010400 	.word	0x40010400

08003150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d122      	bne.n	80031ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b02      	cmp	r3, #2
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0202 	mvn.w	r2, #2
 800317c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa77 	bl	8003686 <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa69 	bl	8003672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7fd fcd7 	bl	8000b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d122      	bne.n	8003200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d11b      	bne.n	8003200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0204 	mvn.w	r2, #4
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa4d 	bl	8003686 <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa3f 	bl	8003672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7fd fcad 	bl	8000b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b08      	cmp	r3, #8
 800320c:	d122      	bne.n	8003254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d11b      	bne.n	8003254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0208 	mvn.w	r2, #8
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa23 	bl	8003686 <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa15 	bl	8003672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fd fc83 	bl	8000b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b10      	cmp	r3, #16
 8003260:	d122      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	d11b      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0210 	mvn.w	r2, #16
 8003278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2208      	movs	r2, #8
 800327e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f9f9 	bl	8003686 <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9eb 	bl	8003672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd fc59 	bl	8000b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10e      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0201 	mvn.w	r2, #1
 80032cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fe5e 	bl	8000f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fea4 	bl	8004048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f9c1 	bl	80036ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b20      	cmp	r3, #32
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b20      	cmp	r3, #32
 8003346:	d107      	bne.n	8003358 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0220 	mvn.w	r2, #32
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fe6e 	bl	8004034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800337a:	2302      	movs	r3, #2
 800337c:	e0ae      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	f200 809f 	bhi.w	80034cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033c9 	.word	0x080033c9
 8003398:	080034cd 	.word	0x080034cd
 800339c:	080034cd 	.word	0x080034cd
 80033a0:	080034cd 	.word	0x080034cd
 80033a4:	08003409 	.word	0x08003409
 80033a8:	080034cd 	.word	0x080034cd
 80033ac:	080034cd 	.word	0x080034cd
 80033b0:	080034cd 	.word	0x080034cd
 80033b4:	0800344b 	.word	0x0800344b
 80033b8:	080034cd 	.word	0x080034cd
 80033bc:	080034cd 	.word	0x080034cd
 80033c0:	080034cd 	.word	0x080034cd
 80033c4:	0800348b 	.word	0x0800348b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 faf2 	bl	80039b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0208 	orr.w	r2, r2, #8
 80033e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0204 	bic.w	r2, r2, #4
 80033f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6999      	ldr	r1, [r3, #24]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	619a      	str	r2, [r3, #24]
      break;
 8003406:	e064      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fb42 	bl	8003a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6999      	ldr	r1, [r3, #24]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	021a      	lsls	r2, r3, #8
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	619a      	str	r2, [r3, #24]
      break;
 8003448:	e043      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fb97 	bl	8003b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0208 	orr.w	r2, r2, #8
 8003464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0204 	bic.w	r2, r2, #4
 8003474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69d9      	ldr	r1, [r3, #28]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	61da      	str	r2, [r3, #28]
      break;
 8003488:	e023      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fbeb 	bl	8003c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69da      	ldr	r2, [r3, #28]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69d9      	ldr	r1, [r3, #28]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	021a      	lsls	r2, r3, #8
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	61da      	str	r2, [r3, #28]
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	75fb      	strb	r3, [r7, #23]
      break;
 80034d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034da:	7dfb      	ldrb	r3, [r7, #23]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_TIM_ConfigClockSource+0x1c>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e0b4      	b.n	800366a <HAL_TIM_ConfigClockSource+0x186>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800351e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003538:	d03e      	beq.n	80035b8 <HAL_TIM_ConfigClockSource+0xd4>
 800353a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353e:	f200 8087 	bhi.w	8003650 <HAL_TIM_ConfigClockSource+0x16c>
 8003542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003546:	f000 8086 	beq.w	8003656 <HAL_TIM_ConfigClockSource+0x172>
 800354a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354e:	d87f      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b70      	cmp	r3, #112	; 0x70
 8003552:	d01a      	beq.n	800358a <HAL_TIM_ConfigClockSource+0xa6>
 8003554:	2b70      	cmp	r3, #112	; 0x70
 8003556:	d87b      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b60      	cmp	r3, #96	; 0x60
 800355a:	d050      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x11a>
 800355c:	2b60      	cmp	r3, #96	; 0x60
 800355e:	d877      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x16c>
 8003560:	2b50      	cmp	r3, #80	; 0x50
 8003562:	d03c      	beq.n	80035de <HAL_TIM_ConfigClockSource+0xfa>
 8003564:	2b50      	cmp	r3, #80	; 0x50
 8003566:	d873      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x16c>
 8003568:	2b40      	cmp	r3, #64	; 0x40
 800356a:	d058      	beq.n	800361e <HAL_TIM_ConfigClockSource+0x13a>
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d86f      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x16c>
 8003570:	2b30      	cmp	r3, #48	; 0x30
 8003572:	d064      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x15a>
 8003574:	2b30      	cmp	r3, #48	; 0x30
 8003576:	d86b      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x16c>
 8003578:	2b20      	cmp	r3, #32
 800357a:	d060      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x15a>
 800357c:	2b20      	cmp	r3, #32
 800357e:	d867      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x16c>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d05c      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x15a>
 8003584:	2b10      	cmp	r3, #16
 8003586:	d05a      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x15a>
 8003588:	e062      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6899      	ldr	r1, [r3, #8]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f000 fc37 	bl	8003e0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	609a      	str	r2, [r3, #8]
      break;
 80035b6:	e04f      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6899      	ldr	r1, [r3, #8]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f000 fc20 	bl	8003e0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035da:	609a      	str	r2, [r3, #8]
      break;
 80035dc:	e03c      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f000 fb94 	bl	8003d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2150      	movs	r1, #80	; 0x50
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fbed 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 80035fc:	e02c      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6859      	ldr	r1, [r3, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	461a      	mov	r2, r3
 800360c:	f000 fbb3 	bl	8003d76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2160      	movs	r1, #96	; 0x60
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fbdd 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 800361c:	e01c      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6859      	ldr	r1, [r3, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	461a      	mov	r2, r3
 800362c:	f000 fb74 	bl	8003d18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2140      	movs	r1, #64	; 0x40
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fbcd 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 800363c:	e00c      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4619      	mov	r1, r3
 8003648:	4610      	mov	r0, r2
 800364a:	f000 fbc4 	bl	8003dd6 <TIM_ITRx_SetConfig>
      break;
 800364e:	e003      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      break;
 8003654:	e000      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d107      	bne.n	80036fe <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fc:	e02a      	b.n	8003754 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d107      	bne.n	8003718 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2202      	movs	r2, #2
 800370c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003716:	e01d      	b.n	8003754 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	d107      	bne.n	8003732 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2204      	movs	r2, #4
 8003726:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003730:	e010      	b.n	8003754 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d107      	bne.n	800374c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2208      	movs	r2, #8
 8003740:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800374a:	e003      	b.n	8003754 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff ffb4 	bl	80036c2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	429a      	cmp	r2, r3
 800377e:	d10b      	bne.n	8003798 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d136      	bne.n	80037fc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003796:	e031      	b.n	80037fc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d10b      	bne.n	80037ba <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d125      	bne.n	80037fc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b8:	e020      	b.n	80037fc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d10b      	bne.n	80037dc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2204      	movs	r2, #4
 80037c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d114      	bne.n	80037fc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037da:	e00f      	b.n	80037fc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10a      	bne.n	80037fc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2208      	movs	r2, #8
 80037ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d103      	bne.n	80037fc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7fd f9a9 	bl	8000b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d103      	bne.n	8003830 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	771a      	strb	r2, [r3, #28]
 800382e:	e019      	b.n	8003864 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d103      	bne.n	8003842 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2202      	movs	r2, #2
 800383e:	771a      	strb	r2, [r3, #28]
 8003840:	e010      	b.n	8003864 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d103      	bne.n	8003854 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2204      	movs	r2, #4
 8003850:	771a      	strb	r2, [r3, #28]
 8003852:	e007      	b.n	8003864 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	d102      	bne.n	8003864 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2208      	movs	r2, #8
 8003862:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f7ff ff18 	bl	800369a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a40      	ldr	r2, [pc, #256]	; (800398c <TIM_Base_SetConfig+0x114>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d00f      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3d      	ldr	r2, [pc, #244]	; (8003990 <TIM_Base_SetConfig+0x118>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3c      	ldr	r2, [pc, #240]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2f      	ldr	r2, [pc, #188]	; (800398c <TIM_Base_SetConfig+0x114>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d027      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <TIM_Base_SetConfig+0x118>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d023      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2b      	ldr	r2, [pc, #172]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a29      	ldr	r2, [pc, #164]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d017      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <TIM_Base_SetConfig+0x128>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <TIM_Base_SetConfig+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <TIM_Base_SetConfig+0x130>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <TIM_Base_SetConfig+0x134>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <TIM_Base_SetConfig+0x138>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <TIM_Base_SetConfig+0x13c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <TIM_Base_SetConfig+0x114>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0xf8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <TIM_Base_SetConfig+0x124>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d103      	bne.n	8003978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	615a      	str	r2, [r3, #20]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40010400 	.word	0x40010400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800
 80039ac:	40001800 	.word	0x40001800
 80039b0:	40001c00 	.word	0x40001c00
 80039b4:	40002000 	.word	0x40002000

080039b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0201 	bic.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <TIM_OC1_SetConfig+0xd8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_OC1_SetConfig+0x64>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a1f      	ldr	r2, [pc, #124]	; (8003a94 <TIM_OC1_SetConfig+0xdc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10c      	bne.n	8003a36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0308 	bic.w	r3, r3, #8
 8003a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 0304 	bic.w	r3, r3, #4
 8003a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <TIM_OC1_SetConfig+0xd8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d003      	beq.n	8003a46 <TIM_OC1_SetConfig+0x8e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <TIM_OC1_SetConfig+0xdc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	621a      	str	r2, [r3, #32]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40010400 	.word	0x40010400

08003a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0210 	bic.w	r2, r3, #16
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	021b      	lsls	r3, r3, #8
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f023 0320 	bic.w	r3, r3, #32
 8003ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <TIM_OC2_SetConfig+0xe4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_OC2_SetConfig+0x68>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a21      	ldr	r2, [pc, #132]	; (8003b80 <TIM_OC2_SetConfig+0xe8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d10d      	bne.n	8003b1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <TIM_OC2_SetConfig+0xe4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_OC2_SetConfig+0x94>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <TIM_OC2_SetConfig+0xe8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d113      	bne.n	8003b54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	621a      	str	r2, [r3, #32]
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40010400 	.word	0x40010400

08003b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <TIM_OC3_SetConfig+0xe0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d003      	beq.n	8003bea <TIM_OC3_SetConfig+0x66>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <TIM_OC3_SetConfig+0xe4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10d      	bne.n	8003c06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <TIM_OC3_SetConfig+0xe0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_OC3_SetConfig+0x92>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <TIM_OC3_SetConfig+0xe4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d113      	bne.n	8003c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40010400 	.word	0x40010400

08003c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	031b      	lsls	r3, r3, #12
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <TIM_OC4_SetConfig+0xa4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d003      	beq.n	8003cd4 <TIM_OC4_SetConfig+0x68>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a11      	ldr	r2, [pc, #68]	; (8003d14 <TIM_OC4_SetConfig+0xa8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d109      	bne.n	8003ce8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40010000 	.word	0x40010000
 8003d14:	40010400 	.word	0x40010400

08003d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f023 0201 	bic.w	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 030a 	bic.w	r3, r3, #10
 8003d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b087      	sub	sp, #28
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0210 	bic.w	r2, r3, #16
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003da0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	031b      	lsls	r3, r3, #12
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003db2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f043 0307 	orr.w	r3, r3, #7
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	021a      	lsls	r2, r3, #8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	609a      	str	r2, [r3, #8]
}
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2201      	movs	r2, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1a      	ldr	r2, [r3, #32]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	401a      	ands	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1a      	ldr	r2, [r3, #32]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 031f 	and.w	r3, r3, #31
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	fa01 f303 	lsl.w	r3, r1, r3
 8003e84:	431a      	orrs	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e05a      	b.n	8003f66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d022      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d01d      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d018      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00e      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a18      	ldr	r2, [pc, #96]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d009      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10c      	bne.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40001800 	.word	0x40001800

08003f90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e03d      	b.n	8004028 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <__errno>:
 800405c:	4b01      	ldr	r3, [pc, #4]	; (8004064 <__errno+0x8>)
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c

08004068 <__libc_init_array>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	4d0d      	ldr	r5, [pc, #52]	; (80040a0 <__libc_init_array+0x38>)
 800406c:	4c0d      	ldr	r4, [pc, #52]	; (80040a4 <__libc_init_array+0x3c>)
 800406e:	1b64      	subs	r4, r4, r5
 8004070:	10a4      	asrs	r4, r4, #2
 8004072:	2600      	movs	r6, #0
 8004074:	42a6      	cmp	r6, r4
 8004076:	d109      	bne.n	800408c <__libc_init_array+0x24>
 8004078:	4d0b      	ldr	r5, [pc, #44]	; (80040a8 <__libc_init_array+0x40>)
 800407a:	4c0c      	ldr	r4, [pc, #48]	; (80040ac <__libc_init_array+0x44>)
 800407c:	f001 f858 	bl	8005130 <_init>
 8004080:	1b64      	subs	r4, r4, r5
 8004082:	10a4      	asrs	r4, r4, #2
 8004084:	2600      	movs	r6, #0
 8004086:	42a6      	cmp	r6, r4
 8004088:	d105      	bne.n	8004096 <__libc_init_array+0x2e>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004090:	4798      	blx	r3
 8004092:	3601      	adds	r6, #1
 8004094:	e7ee      	b.n	8004074 <__libc_init_array+0xc>
 8004096:	f855 3b04 	ldr.w	r3, [r5], #4
 800409a:	4798      	blx	r3
 800409c:	3601      	adds	r6, #1
 800409e:	e7f2      	b.n	8004086 <__libc_init_array+0x1e>
 80040a0:	080052b0 	.word	0x080052b0
 80040a4:	080052b0 	.word	0x080052b0
 80040a8:	080052b0 	.word	0x080052b0
 80040ac:	080052b4 	.word	0x080052b4

080040b0 <memset>:
 80040b0:	4402      	add	r2, r0
 80040b2:	4603      	mov	r3, r0
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d100      	bne.n	80040ba <memset+0xa>
 80040b8:	4770      	bx	lr
 80040ba:	f803 1b01 	strb.w	r1, [r3], #1
 80040be:	e7f9      	b.n	80040b4 <memset+0x4>

080040c0 <rand>:
 80040c0:	4b16      	ldr	r3, [pc, #88]	; (800411c <rand+0x5c>)
 80040c2:	b510      	push	{r4, lr}
 80040c4:	681c      	ldr	r4, [r3, #0]
 80040c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040c8:	b9b3      	cbnz	r3, 80040f8 <rand+0x38>
 80040ca:	2018      	movs	r0, #24
 80040cc:	f000 f866 	bl	800419c <malloc>
 80040d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80040d2:	b928      	cbnz	r0, 80040e0 <rand+0x20>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b12      	ldr	r3, [pc, #72]	; (8004120 <rand+0x60>)
 80040d8:	4812      	ldr	r0, [pc, #72]	; (8004124 <rand+0x64>)
 80040da:	214e      	movs	r1, #78	; 0x4e
 80040dc:	f000 f82e 	bl	800413c <__assert_func>
 80040e0:	4a11      	ldr	r2, [pc, #68]	; (8004128 <rand+0x68>)
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <rand+0x6c>)
 80040e4:	e9c0 2300 	strd	r2, r3, [r0]
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <rand+0x70>)
 80040ea:	6083      	str	r3, [r0, #8]
 80040ec:	230b      	movs	r3, #11
 80040ee:	8183      	strh	r3, [r0, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	2300      	movs	r3, #0
 80040f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80040f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80040fa:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <rand+0x74>)
 80040fc:	6920      	ldr	r0, [r4, #16]
 80040fe:	6963      	ldr	r3, [r4, #20]
 8004100:	490d      	ldr	r1, [pc, #52]	; (8004138 <rand+0x78>)
 8004102:	4342      	muls	r2, r0
 8004104:	fb01 2203 	mla	r2, r1, r3, r2
 8004108:	fba0 0101 	umull	r0, r1, r0, r1
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	eb42 0001 	adc.w	r0, r2, r1
 8004112:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004116:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800411a:	bd10      	pop	{r4, pc}
 800411c:	2000000c 	.word	0x2000000c
 8004120:	08005164 	.word	0x08005164
 8004124:	0800517b 	.word	0x0800517b
 8004128:	abcd330e 	.word	0xabcd330e
 800412c:	e66d1234 	.word	0xe66d1234
 8004130:	0005deec 	.word	0x0005deec
 8004134:	5851f42d 	.word	0x5851f42d
 8004138:	4c957f2d 	.word	0x4c957f2d

0800413c <__assert_func>:
 800413c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800413e:	4614      	mov	r4, r2
 8004140:	461a      	mov	r2, r3
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <__assert_func+0x2c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4605      	mov	r5, r0
 8004148:	68d8      	ldr	r0, [r3, #12]
 800414a:	b14c      	cbz	r4, 8004160 <__assert_func+0x24>
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <__assert_func+0x30>)
 800414e:	9100      	str	r1, [sp, #0]
 8004150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004154:	4906      	ldr	r1, [pc, #24]	; (8004170 <__assert_func+0x34>)
 8004156:	462b      	mov	r3, r5
 8004158:	f000 f80e 	bl	8004178 <fiprintf>
 800415c:	f000 fcc4 	bl	8004ae8 <abort>
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <__assert_func+0x38>)
 8004162:	461c      	mov	r4, r3
 8004164:	e7f3      	b.n	800414e <__assert_func+0x12>
 8004166:	bf00      	nop
 8004168:	2000000c 	.word	0x2000000c
 800416c:	080051d6 	.word	0x080051d6
 8004170:	080051e3 	.word	0x080051e3
 8004174:	08005211 	.word	0x08005211

08004178 <fiprintf>:
 8004178:	b40e      	push	{r1, r2, r3}
 800417a:	b503      	push	{r0, r1, lr}
 800417c:	4601      	mov	r1, r0
 800417e:	ab03      	add	r3, sp, #12
 8004180:	4805      	ldr	r0, [pc, #20]	; (8004198 <fiprintf+0x20>)
 8004182:	f853 2b04 	ldr.w	r2, [r3], #4
 8004186:	6800      	ldr	r0, [r0, #0]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	f000 f919 	bl	80043c0 <_vfiprintf_r>
 800418e:	b002      	add	sp, #8
 8004190:	f85d eb04 	ldr.w	lr, [sp], #4
 8004194:	b003      	add	sp, #12
 8004196:	4770      	bx	lr
 8004198:	2000000c 	.word	0x2000000c

0800419c <malloc>:
 800419c:	4b02      	ldr	r3, [pc, #8]	; (80041a8 <malloc+0xc>)
 800419e:	4601      	mov	r1, r0
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	f000 b86f 	b.w	8004284 <_malloc_r>
 80041a6:	bf00      	nop
 80041a8:	2000000c 	.word	0x2000000c

080041ac <_free_r>:
 80041ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ae:	2900      	cmp	r1, #0
 80041b0:	d044      	beq.n	800423c <_free_r+0x90>
 80041b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b6:	9001      	str	r0, [sp, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f1a1 0404 	sub.w	r4, r1, #4
 80041be:	bfb8      	it	lt
 80041c0:	18e4      	addlt	r4, r4, r3
 80041c2:	f000 feb9 	bl	8004f38 <__malloc_lock>
 80041c6:	4a1e      	ldr	r2, [pc, #120]	; (8004240 <_free_r+0x94>)
 80041c8:	9801      	ldr	r0, [sp, #4]
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	b933      	cbnz	r3, 80041dc <_free_r+0x30>
 80041ce:	6063      	str	r3, [r4, #4]
 80041d0:	6014      	str	r4, [r2, #0]
 80041d2:	b003      	add	sp, #12
 80041d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041d8:	f000 beb4 	b.w	8004f44 <__malloc_unlock>
 80041dc:	42a3      	cmp	r3, r4
 80041de:	d908      	bls.n	80041f2 <_free_r+0x46>
 80041e0:	6825      	ldr	r5, [r4, #0]
 80041e2:	1961      	adds	r1, r4, r5
 80041e4:	428b      	cmp	r3, r1
 80041e6:	bf01      	itttt	eq
 80041e8:	6819      	ldreq	r1, [r3, #0]
 80041ea:	685b      	ldreq	r3, [r3, #4]
 80041ec:	1949      	addeq	r1, r1, r5
 80041ee:	6021      	streq	r1, [r4, #0]
 80041f0:	e7ed      	b.n	80041ce <_free_r+0x22>
 80041f2:	461a      	mov	r2, r3
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b10b      	cbz	r3, 80041fc <_free_r+0x50>
 80041f8:	42a3      	cmp	r3, r4
 80041fa:	d9fa      	bls.n	80041f2 <_free_r+0x46>
 80041fc:	6811      	ldr	r1, [r2, #0]
 80041fe:	1855      	adds	r5, r2, r1
 8004200:	42a5      	cmp	r5, r4
 8004202:	d10b      	bne.n	800421c <_free_r+0x70>
 8004204:	6824      	ldr	r4, [r4, #0]
 8004206:	4421      	add	r1, r4
 8004208:	1854      	adds	r4, r2, r1
 800420a:	42a3      	cmp	r3, r4
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	d1e0      	bne.n	80041d2 <_free_r+0x26>
 8004210:	681c      	ldr	r4, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	6053      	str	r3, [r2, #4]
 8004216:	4421      	add	r1, r4
 8004218:	6011      	str	r1, [r2, #0]
 800421a:	e7da      	b.n	80041d2 <_free_r+0x26>
 800421c:	d902      	bls.n	8004224 <_free_r+0x78>
 800421e:	230c      	movs	r3, #12
 8004220:	6003      	str	r3, [r0, #0]
 8004222:	e7d6      	b.n	80041d2 <_free_r+0x26>
 8004224:	6825      	ldr	r5, [r4, #0]
 8004226:	1961      	adds	r1, r4, r5
 8004228:	428b      	cmp	r3, r1
 800422a:	bf04      	itt	eq
 800422c:	6819      	ldreq	r1, [r3, #0]
 800422e:	685b      	ldreq	r3, [r3, #4]
 8004230:	6063      	str	r3, [r4, #4]
 8004232:	bf04      	itt	eq
 8004234:	1949      	addeq	r1, r1, r5
 8004236:	6021      	streq	r1, [r4, #0]
 8004238:	6054      	str	r4, [r2, #4]
 800423a:	e7ca      	b.n	80041d2 <_free_r+0x26>
 800423c:	b003      	add	sp, #12
 800423e:	bd30      	pop	{r4, r5, pc}
 8004240:	2000032c 	.word	0x2000032c

08004244 <sbrk_aligned>:
 8004244:	b570      	push	{r4, r5, r6, lr}
 8004246:	4e0e      	ldr	r6, [pc, #56]	; (8004280 <sbrk_aligned+0x3c>)
 8004248:	460c      	mov	r4, r1
 800424a:	6831      	ldr	r1, [r6, #0]
 800424c:	4605      	mov	r5, r0
 800424e:	b911      	cbnz	r1, 8004256 <sbrk_aligned+0x12>
 8004250:	f000 fb7a 	bl	8004948 <_sbrk_r>
 8004254:	6030      	str	r0, [r6, #0]
 8004256:	4621      	mov	r1, r4
 8004258:	4628      	mov	r0, r5
 800425a:	f000 fb75 	bl	8004948 <_sbrk_r>
 800425e:	1c43      	adds	r3, r0, #1
 8004260:	d00a      	beq.n	8004278 <sbrk_aligned+0x34>
 8004262:	1cc4      	adds	r4, r0, #3
 8004264:	f024 0403 	bic.w	r4, r4, #3
 8004268:	42a0      	cmp	r0, r4
 800426a:	d007      	beq.n	800427c <sbrk_aligned+0x38>
 800426c:	1a21      	subs	r1, r4, r0
 800426e:	4628      	mov	r0, r5
 8004270:	f000 fb6a 	bl	8004948 <_sbrk_r>
 8004274:	3001      	adds	r0, #1
 8004276:	d101      	bne.n	800427c <sbrk_aligned+0x38>
 8004278:	f04f 34ff 	mov.w	r4, #4294967295
 800427c:	4620      	mov	r0, r4
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	20000330 	.word	0x20000330

08004284 <_malloc_r>:
 8004284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004288:	1ccd      	adds	r5, r1, #3
 800428a:	f025 0503 	bic.w	r5, r5, #3
 800428e:	3508      	adds	r5, #8
 8004290:	2d0c      	cmp	r5, #12
 8004292:	bf38      	it	cc
 8004294:	250c      	movcc	r5, #12
 8004296:	2d00      	cmp	r5, #0
 8004298:	4607      	mov	r7, r0
 800429a:	db01      	blt.n	80042a0 <_malloc_r+0x1c>
 800429c:	42a9      	cmp	r1, r5
 800429e:	d905      	bls.n	80042ac <_malloc_r+0x28>
 80042a0:	230c      	movs	r3, #12
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	2600      	movs	r6, #0
 80042a6:	4630      	mov	r0, r6
 80042a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ac:	4e2e      	ldr	r6, [pc, #184]	; (8004368 <_malloc_r+0xe4>)
 80042ae:	f000 fe43 	bl	8004f38 <__malloc_lock>
 80042b2:	6833      	ldr	r3, [r6, #0]
 80042b4:	461c      	mov	r4, r3
 80042b6:	bb34      	cbnz	r4, 8004306 <_malloc_r+0x82>
 80042b8:	4629      	mov	r1, r5
 80042ba:	4638      	mov	r0, r7
 80042bc:	f7ff ffc2 	bl	8004244 <sbrk_aligned>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	4604      	mov	r4, r0
 80042c4:	d14d      	bne.n	8004362 <_malloc_r+0xde>
 80042c6:	6834      	ldr	r4, [r6, #0]
 80042c8:	4626      	mov	r6, r4
 80042ca:	2e00      	cmp	r6, #0
 80042cc:	d140      	bne.n	8004350 <_malloc_r+0xcc>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	4631      	mov	r1, r6
 80042d2:	4638      	mov	r0, r7
 80042d4:	eb04 0803 	add.w	r8, r4, r3
 80042d8:	f000 fb36 	bl	8004948 <_sbrk_r>
 80042dc:	4580      	cmp	r8, r0
 80042de:	d13a      	bne.n	8004356 <_malloc_r+0xd2>
 80042e0:	6821      	ldr	r1, [r4, #0]
 80042e2:	3503      	adds	r5, #3
 80042e4:	1a6d      	subs	r5, r5, r1
 80042e6:	f025 0503 	bic.w	r5, r5, #3
 80042ea:	3508      	adds	r5, #8
 80042ec:	2d0c      	cmp	r5, #12
 80042ee:	bf38      	it	cc
 80042f0:	250c      	movcc	r5, #12
 80042f2:	4629      	mov	r1, r5
 80042f4:	4638      	mov	r0, r7
 80042f6:	f7ff ffa5 	bl	8004244 <sbrk_aligned>
 80042fa:	3001      	adds	r0, #1
 80042fc:	d02b      	beq.n	8004356 <_malloc_r+0xd2>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	442b      	add	r3, r5
 8004302:	6023      	str	r3, [r4, #0]
 8004304:	e00e      	b.n	8004324 <_malloc_r+0xa0>
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	1b52      	subs	r2, r2, r5
 800430a:	d41e      	bmi.n	800434a <_malloc_r+0xc6>
 800430c:	2a0b      	cmp	r2, #11
 800430e:	d916      	bls.n	800433e <_malloc_r+0xba>
 8004310:	1961      	adds	r1, r4, r5
 8004312:	42a3      	cmp	r3, r4
 8004314:	6025      	str	r5, [r4, #0]
 8004316:	bf18      	it	ne
 8004318:	6059      	strne	r1, [r3, #4]
 800431a:	6863      	ldr	r3, [r4, #4]
 800431c:	bf08      	it	eq
 800431e:	6031      	streq	r1, [r6, #0]
 8004320:	5162      	str	r2, [r4, r5]
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	4638      	mov	r0, r7
 8004326:	f104 060b 	add.w	r6, r4, #11
 800432a:	f000 fe0b 	bl	8004f44 <__malloc_unlock>
 800432e:	f026 0607 	bic.w	r6, r6, #7
 8004332:	1d23      	adds	r3, r4, #4
 8004334:	1af2      	subs	r2, r6, r3
 8004336:	d0b6      	beq.n	80042a6 <_malloc_r+0x22>
 8004338:	1b9b      	subs	r3, r3, r6
 800433a:	50a3      	str	r3, [r4, r2]
 800433c:	e7b3      	b.n	80042a6 <_malloc_r+0x22>
 800433e:	6862      	ldr	r2, [r4, #4]
 8004340:	42a3      	cmp	r3, r4
 8004342:	bf0c      	ite	eq
 8004344:	6032      	streq	r2, [r6, #0]
 8004346:	605a      	strne	r2, [r3, #4]
 8004348:	e7ec      	b.n	8004324 <_malloc_r+0xa0>
 800434a:	4623      	mov	r3, r4
 800434c:	6864      	ldr	r4, [r4, #4]
 800434e:	e7b2      	b.n	80042b6 <_malloc_r+0x32>
 8004350:	4634      	mov	r4, r6
 8004352:	6876      	ldr	r6, [r6, #4]
 8004354:	e7b9      	b.n	80042ca <_malloc_r+0x46>
 8004356:	230c      	movs	r3, #12
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	4638      	mov	r0, r7
 800435c:	f000 fdf2 	bl	8004f44 <__malloc_unlock>
 8004360:	e7a1      	b.n	80042a6 <_malloc_r+0x22>
 8004362:	6025      	str	r5, [r4, #0]
 8004364:	e7de      	b.n	8004324 <_malloc_r+0xa0>
 8004366:	bf00      	nop
 8004368:	2000032c 	.word	0x2000032c

0800436c <__sfputc_r>:
 800436c:	6893      	ldr	r3, [r2, #8]
 800436e:	3b01      	subs	r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	b410      	push	{r4}
 8004374:	6093      	str	r3, [r2, #8]
 8004376:	da08      	bge.n	800438a <__sfputc_r+0x1e>
 8004378:	6994      	ldr	r4, [r2, #24]
 800437a:	42a3      	cmp	r3, r4
 800437c:	db01      	blt.n	8004382 <__sfputc_r+0x16>
 800437e:	290a      	cmp	r1, #10
 8004380:	d103      	bne.n	800438a <__sfputc_r+0x1e>
 8004382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004386:	f000 baef 	b.w	8004968 <__swbuf_r>
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	1c58      	adds	r0, r3, #1
 800438e:	6010      	str	r0, [r2, #0]
 8004390:	7019      	strb	r1, [r3, #0]
 8004392:	4608      	mov	r0, r1
 8004394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004398:	4770      	bx	lr

0800439a <__sfputs_r>:
 800439a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439c:	4606      	mov	r6, r0
 800439e:	460f      	mov	r7, r1
 80043a0:	4614      	mov	r4, r2
 80043a2:	18d5      	adds	r5, r2, r3
 80043a4:	42ac      	cmp	r4, r5
 80043a6:	d101      	bne.n	80043ac <__sfputs_r+0x12>
 80043a8:	2000      	movs	r0, #0
 80043aa:	e007      	b.n	80043bc <__sfputs_r+0x22>
 80043ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b0:	463a      	mov	r2, r7
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7ff ffda 	bl	800436c <__sfputc_r>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d1f3      	bne.n	80043a4 <__sfputs_r+0xa>
 80043bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043c0 <_vfiprintf_r>:
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	460d      	mov	r5, r1
 80043c6:	b09d      	sub	sp, #116	; 0x74
 80043c8:	4614      	mov	r4, r2
 80043ca:	4698      	mov	r8, r3
 80043cc:	4606      	mov	r6, r0
 80043ce:	b118      	cbz	r0, 80043d8 <_vfiprintf_r+0x18>
 80043d0:	6983      	ldr	r3, [r0, #24]
 80043d2:	b90b      	cbnz	r3, 80043d8 <_vfiprintf_r+0x18>
 80043d4:	f000 fcaa 	bl	8004d2c <__sinit>
 80043d8:	4b89      	ldr	r3, [pc, #548]	; (8004600 <_vfiprintf_r+0x240>)
 80043da:	429d      	cmp	r5, r3
 80043dc:	d11b      	bne.n	8004416 <_vfiprintf_r+0x56>
 80043de:	6875      	ldr	r5, [r6, #4]
 80043e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043e2:	07d9      	lsls	r1, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_vfiprintf_r+0x32>
 80043e6:	89ab      	ldrh	r3, [r5, #12]
 80043e8:	059a      	lsls	r2, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_vfiprintf_r+0x32>
 80043ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ee:	f000 fd3b 	bl	8004e68 <__retarget_lock_acquire_recursive>
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	d501      	bpl.n	80043fc <_vfiprintf_r+0x3c>
 80043f8:	692b      	ldr	r3, [r5, #16]
 80043fa:	b9eb      	cbnz	r3, 8004438 <_vfiprintf_r+0x78>
 80043fc:	4629      	mov	r1, r5
 80043fe:	4630      	mov	r0, r6
 8004400:	f000 fb04 	bl	8004a0c <__swsetup_r>
 8004404:	b1c0      	cbz	r0, 8004438 <_vfiprintf_r+0x78>
 8004406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004408:	07dc      	lsls	r4, r3, #31
 800440a:	d50e      	bpl.n	800442a <_vfiprintf_r+0x6a>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	b01d      	add	sp, #116	; 0x74
 8004412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004416:	4b7b      	ldr	r3, [pc, #492]	; (8004604 <_vfiprintf_r+0x244>)
 8004418:	429d      	cmp	r5, r3
 800441a:	d101      	bne.n	8004420 <_vfiprintf_r+0x60>
 800441c:	68b5      	ldr	r5, [r6, #8]
 800441e:	e7df      	b.n	80043e0 <_vfiprintf_r+0x20>
 8004420:	4b79      	ldr	r3, [pc, #484]	; (8004608 <_vfiprintf_r+0x248>)
 8004422:	429d      	cmp	r5, r3
 8004424:	bf08      	it	eq
 8004426:	68f5      	ldreq	r5, [r6, #12]
 8004428:	e7da      	b.n	80043e0 <_vfiprintf_r+0x20>
 800442a:	89ab      	ldrh	r3, [r5, #12]
 800442c:	0598      	lsls	r0, r3, #22
 800442e:	d4ed      	bmi.n	800440c <_vfiprintf_r+0x4c>
 8004430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004432:	f000 fd1a 	bl	8004e6a <__retarget_lock_release_recursive>
 8004436:	e7e9      	b.n	800440c <_vfiprintf_r+0x4c>
 8004438:	2300      	movs	r3, #0
 800443a:	9309      	str	r3, [sp, #36]	; 0x24
 800443c:	2320      	movs	r3, #32
 800443e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004442:	f8cd 800c 	str.w	r8, [sp, #12]
 8004446:	2330      	movs	r3, #48	; 0x30
 8004448:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800460c <_vfiprintf_r+0x24c>
 800444c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004450:	f04f 0901 	mov.w	r9, #1
 8004454:	4623      	mov	r3, r4
 8004456:	469a      	mov	sl, r3
 8004458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800445c:	b10a      	cbz	r2, 8004462 <_vfiprintf_r+0xa2>
 800445e:	2a25      	cmp	r2, #37	; 0x25
 8004460:	d1f9      	bne.n	8004456 <_vfiprintf_r+0x96>
 8004462:	ebba 0b04 	subs.w	fp, sl, r4
 8004466:	d00b      	beq.n	8004480 <_vfiprintf_r+0xc0>
 8004468:	465b      	mov	r3, fp
 800446a:	4622      	mov	r2, r4
 800446c:	4629      	mov	r1, r5
 800446e:	4630      	mov	r0, r6
 8004470:	f7ff ff93 	bl	800439a <__sfputs_r>
 8004474:	3001      	adds	r0, #1
 8004476:	f000 80aa 	beq.w	80045ce <_vfiprintf_r+0x20e>
 800447a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800447c:	445a      	add	r2, fp
 800447e:	9209      	str	r2, [sp, #36]	; 0x24
 8004480:	f89a 3000 	ldrb.w	r3, [sl]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a2 	beq.w	80045ce <_vfiprintf_r+0x20e>
 800448a:	2300      	movs	r3, #0
 800448c:	f04f 32ff 	mov.w	r2, #4294967295
 8004490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004494:	f10a 0a01 	add.w	sl, sl, #1
 8004498:	9304      	str	r3, [sp, #16]
 800449a:	9307      	str	r3, [sp, #28]
 800449c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044a0:	931a      	str	r3, [sp, #104]	; 0x68
 80044a2:	4654      	mov	r4, sl
 80044a4:	2205      	movs	r2, #5
 80044a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044aa:	4858      	ldr	r0, [pc, #352]	; (800460c <_vfiprintf_r+0x24c>)
 80044ac:	f7fb fea0 	bl	80001f0 <memchr>
 80044b0:	9a04      	ldr	r2, [sp, #16]
 80044b2:	b9d8      	cbnz	r0, 80044ec <_vfiprintf_r+0x12c>
 80044b4:	06d1      	lsls	r1, r2, #27
 80044b6:	bf44      	itt	mi
 80044b8:	2320      	movmi	r3, #32
 80044ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044be:	0713      	lsls	r3, r2, #28
 80044c0:	bf44      	itt	mi
 80044c2:	232b      	movmi	r3, #43	; 0x2b
 80044c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044c8:	f89a 3000 	ldrb.w	r3, [sl]
 80044cc:	2b2a      	cmp	r3, #42	; 0x2a
 80044ce:	d015      	beq.n	80044fc <_vfiprintf_r+0x13c>
 80044d0:	9a07      	ldr	r2, [sp, #28]
 80044d2:	4654      	mov	r4, sl
 80044d4:	2000      	movs	r0, #0
 80044d6:	f04f 0c0a 	mov.w	ip, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044e0:	3b30      	subs	r3, #48	; 0x30
 80044e2:	2b09      	cmp	r3, #9
 80044e4:	d94e      	bls.n	8004584 <_vfiprintf_r+0x1c4>
 80044e6:	b1b0      	cbz	r0, 8004516 <_vfiprintf_r+0x156>
 80044e8:	9207      	str	r2, [sp, #28]
 80044ea:	e014      	b.n	8004516 <_vfiprintf_r+0x156>
 80044ec:	eba0 0308 	sub.w	r3, r0, r8
 80044f0:	fa09 f303 	lsl.w	r3, r9, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	46a2      	mov	sl, r4
 80044fa:	e7d2      	b.n	80044a2 <_vfiprintf_r+0xe2>
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	1d19      	adds	r1, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	9103      	str	r1, [sp, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	bfbb      	ittet	lt
 8004508:	425b      	neglt	r3, r3
 800450a:	f042 0202 	orrlt.w	r2, r2, #2
 800450e:	9307      	strge	r3, [sp, #28]
 8004510:	9307      	strlt	r3, [sp, #28]
 8004512:	bfb8      	it	lt
 8004514:	9204      	strlt	r2, [sp, #16]
 8004516:	7823      	ldrb	r3, [r4, #0]
 8004518:	2b2e      	cmp	r3, #46	; 0x2e
 800451a:	d10c      	bne.n	8004536 <_vfiprintf_r+0x176>
 800451c:	7863      	ldrb	r3, [r4, #1]
 800451e:	2b2a      	cmp	r3, #42	; 0x2a
 8004520:	d135      	bne.n	800458e <_vfiprintf_r+0x1ce>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	9203      	str	r2, [sp, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	bfb8      	it	lt
 800452e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004532:	3402      	adds	r4, #2
 8004534:	9305      	str	r3, [sp, #20]
 8004536:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800461c <_vfiprintf_r+0x25c>
 800453a:	7821      	ldrb	r1, [r4, #0]
 800453c:	2203      	movs	r2, #3
 800453e:	4650      	mov	r0, sl
 8004540:	f7fb fe56 	bl	80001f0 <memchr>
 8004544:	b140      	cbz	r0, 8004558 <_vfiprintf_r+0x198>
 8004546:	2340      	movs	r3, #64	; 0x40
 8004548:	eba0 000a 	sub.w	r0, r0, sl
 800454c:	fa03 f000 	lsl.w	r0, r3, r0
 8004550:	9b04      	ldr	r3, [sp, #16]
 8004552:	4303      	orrs	r3, r0
 8004554:	3401      	adds	r4, #1
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455c:	482c      	ldr	r0, [pc, #176]	; (8004610 <_vfiprintf_r+0x250>)
 800455e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004562:	2206      	movs	r2, #6
 8004564:	f7fb fe44 	bl	80001f0 <memchr>
 8004568:	2800      	cmp	r0, #0
 800456a:	d03f      	beq.n	80045ec <_vfiprintf_r+0x22c>
 800456c:	4b29      	ldr	r3, [pc, #164]	; (8004614 <_vfiprintf_r+0x254>)
 800456e:	bb1b      	cbnz	r3, 80045b8 <_vfiprintf_r+0x1f8>
 8004570:	9b03      	ldr	r3, [sp, #12]
 8004572:	3307      	adds	r3, #7
 8004574:	f023 0307 	bic.w	r3, r3, #7
 8004578:	3308      	adds	r3, #8
 800457a:	9303      	str	r3, [sp, #12]
 800457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457e:	443b      	add	r3, r7
 8004580:	9309      	str	r3, [sp, #36]	; 0x24
 8004582:	e767      	b.n	8004454 <_vfiprintf_r+0x94>
 8004584:	fb0c 3202 	mla	r2, ip, r2, r3
 8004588:	460c      	mov	r4, r1
 800458a:	2001      	movs	r0, #1
 800458c:	e7a5      	b.n	80044da <_vfiprintf_r+0x11a>
 800458e:	2300      	movs	r3, #0
 8004590:	3401      	adds	r4, #1
 8004592:	9305      	str	r3, [sp, #20]
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 0c0a 	mov.w	ip, #10
 800459a:	4620      	mov	r0, r4
 800459c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a0:	3a30      	subs	r2, #48	; 0x30
 80045a2:	2a09      	cmp	r2, #9
 80045a4:	d903      	bls.n	80045ae <_vfiprintf_r+0x1ee>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0c5      	beq.n	8004536 <_vfiprintf_r+0x176>
 80045aa:	9105      	str	r1, [sp, #20]
 80045ac:	e7c3      	b.n	8004536 <_vfiprintf_r+0x176>
 80045ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80045b2:	4604      	mov	r4, r0
 80045b4:	2301      	movs	r3, #1
 80045b6:	e7f0      	b.n	800459a <_vfiprintf_r+0x1da>
 80045b8:	ab03      	add	r3, sp, #12
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	462a      	mov	r2, r5
 80045be:	4b16      	ldr	r3, [pc, #88]	; (8004618 <_vfiprintf_r+0x258>)
 80045c0:	a904      	add	r1, sp, #16
 80045c2:	4630      	mov	r0, r6
 80045c4:	f3af 8000 	nop.w
 80045c8:	4607      	mov	r7, r0
 80045ca:	1c78      	adds	r0, r7, #1
 80045cc:	d1d6      	bne.n	800457c <_vfiprintf_r+0x1bc>
 80045ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045d0:	07d9      	lsls	r1, r3, #31
 80045d2:	d405      	bmi.n	80045e0 <_vfiprintf_r+0x220>
 80045d4:	89ab      	ldrh	r3, [r5, #12]
 80045d6:	059a      	lsls	r2, r3, #22
 80045d8:	d402      	bmi.n	80045e0 <_vfiprintf_r+0x220>
 80045da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045dc:	f000 fc45 	bl	8004e6a <__retarget_lock_release_recursive>
 80045e0:	89ab      	ldrh	r3, [r5, #12]
 80045e2:	065b      	lsls	r3, r3, #25
 80045e4:	f53f af12 	bmi.w	800440c <_vfiprintf_r+0x4c>
 80045e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045ea:	e711      	b.n	8004410 <_vfiprintf_r+0x50>
 80045ec:	ab03      	add	r3, sp, #12
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	462a      	mov	r2, r5
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <_vfiprintf_r+0x258>)
 80045f4:	a904      	add	r1, sp, #16
 80045f6:	4630      	mov	r0, r6
 80045f8:	f000 f880 	bl	80046fc <_printf_i>
 80045fc:	e7e4      	b.n	80045c8 <_vfiprintf_r+0x208>
 80045fe:	bf00      	nop
 8004600:	08005268 	.word	0x08005268
 8004604:	08005288 	.word	0x08005288
 8004608:	08005248 	.word	0x08005248
 800460c:	08005212 	.word	0x08005212
 8004610:	0800521c 	.word	0x0800521c
 8004614:	00000000 	.word	0x00000000
 8004618:	0800439b 	.word	0x0800439b
 800461c:	08005218 	.word	0x08005218

08004620 <_printf_common>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	4616      	mov	r6, r2
 8004626:	4699      	mov	r9, r3
 8004628:	688a      	ldr	r2, [r1, #8]
 800462a:	690b      	ldr	r3, [r1, #16]
 800462c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004630:	4293      	cmp	r3, r2
 8004632:	bfb8      	it	lt
 8004634:	4613      	movlt	r3, r2
 8004636:	6033      	str	r3, [r6, #0]
 8004638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800463c:	4607      	mov	r7, r0
 800463e:	460c      	mov	r4, r1
 8004640:	b10a      	cbz	r2, 8004646 <_printf_common+0x26>
 8004642:	3301      	adds	r3, #1
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	0699      	lsls	r1, r3, #26
 800464a:	bf42      	ittt	mi
 800464c:	6833      	ldrmi	r3, [r6, #0]
 800464e:	3302      	addmi	r3, #2
 8004650:	6033      	strmi	r3, [r6, #0]
 8004652:	6825      	ldr	r5, [r4, #0]
 8004654:	f015 0506 	ands.w	r5, r5, #6
 8004658:	d106      	bne.n	8004668 <_printf_common+0x48>
 800465a:	f104 0a19 	add.w	sl, r4, #25
 800465e:	68e3      	ldr	r3, [r4, #12]
 8004660:	6832      	ldr	r2, [r6, #0]
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	42ab      	cmp	r3, r5
 8004666:	dc26      	bgt.n	80046b6 <_printf_common+0x96>
 8004668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800466c:	1e13      	subs	r3, r2, #0
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	bf18      	it	ne
 8004672:	2301      	movne	r3, #1
 8004674:	0692      	lsls	r2, r2, #26
 8004676:	d42b      	bmi.n	80046d0 <_printf_common+0xb0>
 8004678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800467c:	4649      	mov	r1, r9
 800467e:	4638      	mov	r0, r7
 8004680:	47c0      	blx	r8
 8004682:	3001      	adds	r0, #1
 8004684:	d01e      	beq.n	80046c4 <_printf_common+0xa4>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	68e5      	ldr	r5, [r4, #12]
 800468a:	6832      	ldr	r2, [r6, #0]
 800468c:	f003 0306 	and.w	r3, r3, #6
 8004690:	2b04      	cmp	r3, #4
 8004692:	bf08      	it	eq
 8004694:	1aad      	subeq	r5, r5, r2
 8004696:	68a3      	ldr	r3, [r4, #8]
 8004698:	6922      	ldr	r2, [r4, #16]
 800469a:	bf0c      	ite	eq
 800469c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a0:	2500      	movne	r5, #0
 80046a2:	4293      	cmp	r3, r2
 80046a4:	bfc4      	itt	gt
 80046a6:	1a9b      	subgt	r3, r3, r2
 80046a8:	18ed      	addgt	r5, r5, r3
 80046aa:	2600      	movs	r6, #0
 80046ac:	341a      	adds	r4, #26
 80046ae:	42b5      	cmp	r5, r6
 80046b0:	d11a      	bne.n	80046e8 <_printf_common+0xc8>
 80046b2:	2000      	movs	r0, #0
 80046b4:	e008      	b.n	80046c8 <_printf_common+0xa8>
 80046b6:	2301      	movs	r3, #1
 80046b8:	4652      	mov	r2, sl
 80046ba:	4649      	mov	r1, r9
 80046bc:	4638      	mov	r0, r7
 80046be:	47c0      	blx	r8
 80046c0:	3001      	adds	r0, #1
 80046c2:	d103      	bne.n	80046cc <_printf_common+0xac>
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046cc:	3501      	adds	r5, #1
 80046ce:	e7c6      	b.n	800465e <_printf_common+0x3e>
 80046d0:	18e1      	adds	r1, r4, r3
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	2030      	movs	r0, #48	; 0x30
 80046d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046da:	4422      	add	r2, r4
 80046dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046e4:	3302      	adds	r3, #2
 80046e6:	e7c7      	b.n	8004678 <_printf_common+0x58>
 80046e8:	2301      	movs	r3, #1
 80046ea:	4622      	mov	r2, r4
 80046ec:	4649      	mov	r1, r9
 80046ee:	4638      	mov	r0, r7
 80046f0:	47c0      	blx	r8
 80046f2:	3001      	adds	r0, #1
 80046f4:	d0e6      	beq.n	80046c4 <_printf_common+0xa4>
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7d9      	b.n	80046ae <_printf_common+0x8e>
	...

080046fc <_printf_i>:
 80046fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004700:	7e0f      	ldrb	r7, [r1, #24]
 8004702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004704:	2f78      	cmp	r7, #120	; 0x78
 8004706:	4691      	mov	r9, r2
 8004708:	4680      	mov	r8, r0
 800470a:	460c      	mov	r4, r1
 800470c:	469a      	mov	sl, r3
 800470e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004712:	d807      	bhi.n	8004724 <_printf_i+0x28>
 8004714:	2f62      	cmp	r7, #98	; 0x62
 8004716:	d80a      	bhi.n	800472e <_printf_i+0x32>
 8004718:	2f00      	cmp	r7, #0
 800471a:	f000 80d8 	beq.w	80048ce <_printf_i+0x1d2>
 800471e:	2f58      	cmp	r7, #88	; 0x58
 8004720:	f000 80a3 	beq.w	800486a <_printf_i+0x16e>
 8004724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800472c:	e03a      	b.n	80047a4 <_printf_i+0xa8>
 800472e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004732:	2b15      	cmp	r3, #21
 8004734:	d8f6      	bhi.n	8004724 <_printf_i+0x28>
 8004736:	a101      	add	r1, pc, #4	; (adr r1, 800473c <_printf_i+0x40>)
 8004738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800473c:	08004795 	.word	0x08004795
 8004740:	080047a9 	.word	0x080047a9
 8004744:	08004725 	.word	0x08004725
 8004748:	08004725 	.word	0x08004725
 800474c:	08004725 	.word	0x08004725
 8004750:	08004725 	.word	0x08004725
 8004754:	080047a9 	.word	0x080047a9
 8004758:	08004725 	.word	0x08004725
 800475c:	08004725 	.word	0x08004725
 8004760:	08004725 	.word	0x08004725
 8004764:	08004725 	.word	0x08004725
 8004768:	080048b5 	.word	0x080048b5
 800476c:	080047d9 	.word	0x080047d9
 8004770:	08004897 	.word	0x08004897
 8004774:	08004725 	.word	0x08004725
 8004778:	08004725 	.word	0x08004725
 800477c:	080048d7 	.word	0x080048d7
 8004780:	08004725 	.word	0x08004725
 8004784:	080047d9 	.word	0x080047d9
 8004788:	08004725 	.word	0x08004725
 800478c:	08004725 	.word	0x08004725
 8004790:	0800489f 	.word	0x0800489f
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	1d1a      	adds	r2, r3, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	602a      	str	r2, [r5, #0]
 800479c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0a3      	b.n	80048f0 <_printf_i+0x1f4>
 80047a8:	6820      	ldr	r0, [r4, #0]
 80047aa:	6829      	ldr	r1, [r5, #0]
 80047ac:	0606      	lsls	r6, r0, #24
 80047ae:	f101 0304 	add.w	r3, r1, #4
 80047b2:	d50a      	bpl.n	80047ca <_printf_i+0xce>
 80047b4:	680e      	ldr	r6, [r1, #0]
 80047b6:	602b      	str	r3, [r5, #0]
 80047b8:	2e00      	cmp	r6, #0
 80047ba:	da03      	bge.n	80047c4 <_printf_i+0xc8>
 80047bc:	232d      	movs	r3, #45	; 0x2d
 80047be:	4276      	negs	r6, r6
 80047c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047c4:	485e      	ldr	r0, [pc, #376]	; (8004940 <_printf_i+0x244>)
 80047c6:	230a      	movs	r3, #10
 80047c8:	e019      	b.n	80047fe <_printf_i+0x102>
 80047ca:	680e      	ldr	r6, [r1, #0]
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047d2:	bf18      	it	ne
 80047d4:	b236      	sxthne	r6, r6
 80047d6:	e7ef      	b.n	80047b8 <_printf_i+0xbc>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	6820      	ldr	r0, [r4, #0]
 80047dc:	1d19      	adds	r1, r3, #4
 80047de:	6029      	str	r1, [r5, #0]
 80047e0:	0601      	lsls	r1, r0, #24
 80047e2:	d501      	bpl.n	80047e8 <_printf_i+0xec>
 80047e4:	681e      	ldr	r6, [r3, #0]
 80047e6:	e002      	b.n	80047ee <_printf_i+0xf2>
 80047e8:	0646      	lsls	r6, r0, #25
 80047ea:	d5fb      	bpl.n	80047e4 <_printf_i+0xe8>
 80047ec:	881e      	ldrh	r6, [r3, #0]
 80047ee:	4854      	ldr	r0, [pc, #336]	; (8004940 <_printf_i+0x244>)
 80047f0:	2f6f      	cmp	r7, #111	; 0x6f
 80047f2:	bf0c      	ite	eq
 80047f4:	2308      	moveq	r3, #8
 80047f6:	230a      	movne	r3, #10
 80047f8:	2100      	movs	r1, #0
 80047fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047fe:	6865      	ldr	r5, [r4, #4]
 8004800:	60a5      	str	r5, [r4, #8]
 8004802:	2d00      	cmp	r5, #0
 8004804:	bfa2      	ittt	ge
 8004806:	6821      	ldrge	r1, [r4, #0]
 8004808:	f021 0104 	bicge.w	r1, r1, #4
 800480c:	6021      	strge	r1, [r4, #0]
 800480e:	b90e      	cbnz	r6, 8004814 <_printf_i+0x118>
 8004810:	2d00      	cmp	r5, #0
 8004812:	d04d      	beq.n	80048b0 <_printf_i+0x1b4>
 8004814:	4615      	mov	r5, r2
 8004816:	fbb6 f1f3 	udiv	r1, r6, r3
 800481a:	fb03 6711 	mls	r7, r3, r1, r6
 800481e:	5dc7      	ldrb	r7, [r0, r7]
 8004820:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004824:	4637      	mov	r7, r6
 8004826:	42bb      	cmp	r3, r7
 8004828:	460e      	mov	r6, r1
 800482a:	d9f4      	bls.n	8004816 <_printf_i+0x11a>
 800482c:	2b08      	cmp	r3, #8
 800482e:	d10b      	bne.n	8004848 <_printf_i+0x14c>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	07de      	lsls	r6, r3, #31
 8004834:	d508      	bpl.n	8004848 <_printf_i+0x14c>
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	6861      	ldr	r1, [r4, #4]
 800483a:	4299      	cmp	r1, r3
 800483c:	bfde      	ittt	le
 800483e:	2330      	movle	r3, #48	; 0x30
 8004840:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004844:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004848:	1b52      	subs	r2, r2, r5
 800484a:	6122      	str	r2, [r4, #16]
 800484c:	f8cd a000 	str.w	sl, [sp]
 8004850:	464b      	mov	r3, r9
 8004852:	aa03      	add	r2, sp, #12
 8004854:	4621      	mov	r1, r4
 8004856:	4640      	mov	r0, r8
 8004858:	f7ff fee2 	bl	8004620 <_printf_common>
 800485c:	3001      	adds	r0, #1
 800485e:	d14c      	bne.n	80048fa <_printf_i+0x1fe>
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	b004      	add	sp, #16
 8004866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486a:	4835      	ldr	r0, [pc, #212]	; (8004940 <_printf_i+0x244>)
 800486c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004870:	6829      	ldr	r1, [r5, #0]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f851 6b04 	ldr.w	r6, [r1], #4
 8004878:	6029      	str	r1, [r5, #0]
 800487a:	061d      	lsls	r5, r3, #24
 800487c:	d514      	bpl.n	80048a8 <_printf_i+0x1ac>
 800487e:	07df      	lsls	r7, r3, #31
 8004880:	bf44      	itt	mi
 8004882:	f043 0320 	orrmi.w	r3, r3, #32
 8004886:	6023      	strmi	r3, [r4, #0]
 8004888:	b91e      	cbnz	r6, 8004892 <_printf_i+0x196>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	f023 0320 	bic.w	r3, r3, #32
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	2310      	movs	r3, #16
 8004894:	e7b0      	b.n	80047f8 <_printf_i+0xfc>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	f043 0320 	orr.w	r3, r3, #32
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	2378      	movs	r3, #120	; 0x78
 80048a0:	4828      	ldr	r0, [pc, #160]	; (8004944 <_printf_i+0x248>)
 80048a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048a6:	e7e3      	b.n	8004870 <_printf_i+0x174>
 80048a8:	0659      	lsls	r1, r3, #25
 80048aa:	bf48      	it	mi
 80048ac:	b2b6      	uxthmi	r6, r6
 80048ae:	e7e6      	b.n	800487e <_printf_i+0x182>
 80048b0:	4615      	mov	r5, r2
 80048b2:	e7bb      	b.n	800482c <_printf_i+0x130>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	6826      	ldr	r6, [r4, #0]
 80048b8:	6961      	ldr	r1, [r4, #20]
 80048ba:	1d18      	adds	r0, r3, #4
 80048bc:	6028      	str	r0, [r5, #0]
 80048be:	0635      	lsls	r5, r6, #24
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	d501      	bpl.n	80048c8 <_printf_i+0x1cc>
 80048c4:	6019      	str	r1, [r3, #0]
 80048c6:	e002      	b.n	80048ce <_printf_i+0x1d2>
 80048c8:	0670      	lsls	r0, r6, #25
 80048ca:	d5fb      	bpl.n	80048c4 <_printf_i+0x1c8>
 80048cc:	8019      	strh	r1, [r3, #0]
 80048ce:	2300      	movs	r3, #0
 80048d0:	6123      	str	r3, [r4, #16]
 80048d2:	4615      	mov	r5, r2
 80048d4:	e7ba      	b.n	800484c <_printf_i+0x150>
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	1d1a      	adds	r2, r3, #4
 80048da:	602a      	str	r2, [r5, #0]
 80048dc:	681d      	ldr	r5, [r3, #0]
 80048de:	6862      	ldr	r2, [r4, #4]
 80048e0:	2100      	movs	r1, #0
 80048e2:	4628      	mov	r0, r5
 80048e4:	f7fb fc84 	bl	80001f0 <memchr>
 80048e8:	b108      	cbz	r0, 80048ee <_printf_i+0x1f2>
 80048ea:	1b40      	subs	r0, r0, r5
 80048ec:	6060      	str	r0, [r4, #4]
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	6123      	str	r3, [r4, #16]
 80048f2:	2300      	movs	r3, #0
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f8:	e7a8      	b.n	800484c <_printf_i+0x150>
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	462a      	mov	r2, r5
 80048fe:	4649      	mov	r1, r9
 8004900:	4640      	mov	r0, r8
 8004902:	47d0      	blx	sl
 8004904:	3001      	adds	r0, #1
 8004906:	d0ab      	beq.n	8004860 <_printf_i+0x164>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	079b      	lsls	r3, r3, #30
 800490c:	d413      	bmi.n	8004936 <_printf_i+0x23a>
 800490e:	68e0      	ldr	r0, [r4, #12]
 8004910:	9b03      	ldr	r3, [sp, #12]
 8004912:	4298      	cmp	r0, r3
 8004914:	bfb8      	it	lt
 8004916:	4618      	movlt	r0, r3
 8004918:	e7a4      	b.n	8004864 <_printf_i+0x168>
 800491a:	2301      	movs	r3, #1
 800491c:	4632      	mov	r2, r6
 800491e:	4649      	mov	r1, r9
 8004920:	4640      	mov	r0, r8
 8004922:	47d0      	blx	sl
 8004924:	3001      	adds	r0, #1
 8004926:	d09b      	beq.n	8004860 <_printf_i+0x164>
 8004928:	3501      	adds	r5, #1
 800492a:	68e3      	ldr	r3, [r4, #12]
 800492c:	9903      	ldr	r1, [sp, #12]
 800492e:	1a5b      	subs	r3, r3, r1
 8004930:	42ab      	cmp	r3, r5
 8004932:	dcf2      	bgt.n	800491a <_printf_i+0x21e>
 8004934:	e7eb      	b.n	800490e <_printf_i+0x212>
 8004936:	2500      	movs	r5, #0
 8004938:	f104 0619 	add.w	r6, r4, #25
 800493c:	e7f5      	b.n	800492a <_printf_i+0x22e>
 800493e:	bf00      	nop
 8004940:	08005223 	.word	0x08005223
 8004944:	08005234 	.word	0x08005234

08004948 <_sbrk_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d06      	ldr	r5, [pc, #24]	; (8004964 <_sbrk_r+0x1c>)
 800494c:	2300      	movs	r3, #0
 800494e:	4604      	mov	r4, r0
 8004950:	4608      	mov	r0, r1
 8004952:	602b      	str	r3, [r5, #0]
 8004954:	f7fc fa92 	bl	8000e7c <_sbrk>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_sbrk_r+0x1a>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_sbrk_r+0x1a>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	20000338 	.word	0x20000338

08004968 <__swbuf_r>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	460e      	mov	r6, r1
 800496c:	4614      	mov	r4, r2
 800496e:	4605      	mov	r5, r0
 8004970:	b118      	cbz	r0, 800497a <__swbuf_r+0x12>
 8004972:	6983      	ldr	r3, [r0, #24]
 8004974:	b90b      	cbnz	r3, 800497a <__swbuf_r+0x12>
 8004976:	f000 f9d9 	bl	8004d2c <__sinit>
 800497a:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <__swbuf_r+0x98>)
 800497c:	429c      	cmp	r4, r3
 800497e:	d12b      	bne.n	80049d8 <__swbuf_r+0x70>
 8004980:	686c      	ldr	r4, [r5, #4]
 8004982:	69a3      	ldr	r3, [r4, #24]
 8004984:	60a3      	str	r3, [r4, #8]
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	071a      	lsls	r2, r3, #28
 800498a:	d52f      	bpl.n	80049ec <__swbuf_r+0x84>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	b36b      	cbz	r3, 80049ec <__swbuf_r+0x84>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	1ac0      	subs	r0, r0, r3
 8004996:	6963      	ldr	r3, [r4, #20]
 8004998:	b2f6      	uxtb	r6, r6
 800499a:	4283      	cmp	r3, r0
 800499c:	4637      	mov	r7, r6
 800499e:	dc04      	bgt.n	80049aa <__swbuf_r+0x42>
 80049a0:	4621      	mov	r1, r4
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 f92e 	bl	8004c04 <_fflush_r>
 80049a8:	bb30      	cbnz	r0, 80049f8 <__swbuf_r+0x90>
 80049aa:	68a3      	ldr	r3, [r4, #8]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	60a3      	str	r3, [r4, #8]
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	6022      	str	r2, [r4, #0]
 80049b6:	701e      	strb	r6, [r3, #0]
 80049b8:	6963      	ldr	r3, [r4, #20]
 80049ba:	3001      	adds	r0, #1
 80049bc:	4283      	cmp	r3, r0
 80049be:	d004      	beq.n	80049ca <__swbuf_r+0x62>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	07db      	lsls	r3, r3, #31
 80049c4:	d506      	bpl.n	80049d4 <__swbuf_r+0x6c>
 80049c6:	2e0a      	cmp	r6, #10
 80049c8:	d104      	bne.n	80049d4 <__swbuf_r+0x6c>
 80049ca:	4621      	mov	r1, r4
 80049cc:	4628      	mov	r0, r5
 80049ce:	f000 f919 	bl	8004c04 <_fflush_r>
 80049d2:	b988      	cbnz	r0, 80049f8 <__swbuf_r+0x90>
 80049d4:	4638      	mov	r0, r7
 80049d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <__swbuf_r+0x9c>)
 80049da:	429c      	cmp	r4, r3
 80049dc:	d101      	bne.n	80049e2 <__swbuf_r+0x7a>
 80049de:	68ac      	ldr	r4, [r5, #8]
 80049e0:	e7cf      	b.n	8004982 <__swbuf_r+0x1a>
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <__swbuf_r+0xa0>)
 80049e4:	429c      	cmp	r4, r3
 80049e6:	bf08      	it	eq
 80049e8:	68ec      	ldreq	r4, [r5, #12]
 80049ea:	e7ca      	b.n	8004982 <__swbuf_r+0x1a>
 80049ec:	4621      	mov	r1, r4
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 f80c 	bl	8004a0c <__swsetup_r>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d0cb      	beq.n	8004990 <__swbuf_r+0x28>
 80049f8:	f04f 37ff 	mov.w	r7, #4294967295
 80049fc:	e7ea      	b.n	80049d4 <__swbuf_r+0x6c>
 80049fe:	bf00      	nop
 8004a00:	08005268 	.word	0x08005268
 8004a04:	08005288 	.word	0x08005288
 8004a08:	08005248 	.word	0x08005248

08004a0c <__swsetup_r>:
 8004a0c:	4b32      	ldr	r3, [pc, #200]	; (8004ad8 <__swsetup_r+0xcc>)
 8004a0e:	b570      	push	{r4, r5, r6, lr}
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	4606      	mov	r6, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	b125      	cbz	r5, 8004a22 <__swsetup_r+0x16>
 8004a18:	69ab      	ldr	r3, [r5, #24]
 8004a1a:	b913      	cbnz	r3, 8004a22 <__swsetup_r+0x16>
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f000 f985 	bl	8004d2c <__sinit>
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <__swsetup_r+0xd0>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d10f      	bne.n	8004a48 <__swsetup_r+0x3c>
 8004a28:	686c      	ldr	r4, [r5, #4]
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a30:	0719      	lsls	r1, r3, #28
 8004a32:	d42c      	bmi.n	8004a8e <__swsetup_r+0x82>
 8004a34:	06dd      	lsls	r5, r3, #27
 8004a36:	d411      	bmi.n	8004a5c <__swsetup_r+0x50>
 8004a38:	2309      	movs	r3, #9
 8004a3a:	6033      	str	r3, [r6, #0]
 8004a3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a40:	81a3      	strh	r3, [r4, #12]
 8004a42:	f04f 30ff 	mov.w	r0, #4294967295
 8004a46:	e03e      	b.n	8004ac6 <__swsetup_r+0xba>
 8004a48:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <__swsetup_r+0xd4>)
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	d101      	bne.n	8004a52 <__swsetup_r+0x46>
 8004a4e:	68ac      	ldr	r4, [r5, #8]
 8004a50:	e7eb      	b.n	8004a2a <__swsetup_r+0x1e>
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <__swsetup_r+0xd8>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	bf08      	it	eq
 8004a58:	68ec      	ldreq	r4, [r5, #12]
 8004a5a:	e7e6      	b.n	8004a2a <__swsetup_r+0x1e>
 8004a5c:	0758      	lsls	r0, r3, #29
 8004a5e:	d512      	bpl.n	8004a86 <__swsetup_r+0x7a>
 8004a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a62:	b141      	cbz	r1, 8004a76 <__swsetup_r+0x6a>
 8004a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	d002      	beq.n	8004a72 <__swsetup_r+0x66>
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f7ff fb9d 	bl	80041ac <_free_r>
 8004a72:	2300      	movs	r3, #0
 8004a74:	6363      	str	r3, [r4, #52]	; 0x34
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a7c:	81a3      	strh	r3, [r4, #12]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6063      	str	r3, [r4, #4]
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f043 0308 	orr.w	r3, r3, #8
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	6923      	ldr	r3, [r4, #16]
 8004a90:	b94b      	cbnz	r3, 8004aa6 <__swsetup_r+0x9a>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9c:	d003      	beq.n	8004aa6 <__swsetup_r+0x9a>
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 fa09 	bl	8004eb8 <__smakebuf_r>
 8004aa6:	89a0      	ldrh	r0, [r4, #12]
 8004aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004aac:	f010 0301 	ands.w	r3, r0, #1
 8004ab0:	d00a      	beq.n	8004ac8 <__swsetup_r+0xbc>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60a3      	str	r3, [r4, #8]
 8004ab6:	6963      	ldr	r3, [r4, #20]
 8004ab8:	425b      	negs	r3, r3
 8004aba:	61a3      	str	r3, [r4, #24]
 8004abc:	6923      	ldr	r3, [r4, #16]
 8004abe:	b943      	cbnz	r3, 8004ad2 <__swsetup_r+0xc6>
 8004ac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ac4:	d1ba      	bne.n	8004a3c <__swsetup_r+0x30>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	0781      	lsls	r1, r0, #30
 8004aca:	bf58      	it	pl
 8004acc:	6963      	ldrpl	r3, [r4, #20]
 8004ace:	60a3      	str	r3, [r4, #8]
 8004ad0:	e7f4      	b.n	8004abc <__swsetup_r+0xb0>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	e7f7      	b.n	8004ac6 <__swsetup_r+0xba>
 8004ad6:	bf00      	nop
 8004ad8:	2000000c 	.word	0x2000000c
 8004adc:	08005268 	.word	0x08005268
 8004ae0:	08005288 	.word	0x08005288
 8004ae4:	08005248 	.word	0x08005248

08004ae8 <abort>:
 8004ae8:	b508      	push	{r3, lr}
 8004aea:	2006      	movs	r0, #6
 8004aec:	f000 fa58 	bl	8004fa0 <raise>
 8004af0:	2001      	movs	r0, #1
 8004af2:	f7fc f94b 	bl	8000d8c <_exit>
	...

08004af8 <__sflush_r>:
 8004af8:	898a      	ldrh	r2, [r1, #12]
 8004afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	4605      	mov	r5, r0
 8004b00:	0710      	lsls	r0, r2, #28
 8004b02:	460c      	mov	r4, r1
 8004b04:	d458      	bmi.n	8004bb8 <__sflush_r+0xc0>
 8004b06:	684b      	ldr	r3, [r1, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	dc05      	bgt.n	8004b18 <__sflush_r+0x20>
 8004b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dc02      	bgt.n	8004b18 <__sflush_r+0x20>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b1a:	2e00      	cmp	r6, #0
 8004b1c:	d0f9      	beq.n	8004b12 <__sflush_r+0x1a>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b24:	682f      	ldr	r7, [r5, #0]
 8004b26:	602b      	str	r3, [r5, #0]
 8004b28:	d032      	beq.n	8004b90 <__sflush_r+0x98>
 8004b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	075a      	lsls	r2, r3, #29
 8004b30:	d505      	bpl.n	8004b3e <__sflush_r+0x46>
 8004b32:	6863      	ldr	r3, [r4, #4]
 8004b34:	1ac0      	subs	r0, r0, r3
 8004b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b38:	b10b      	cbz	r3, 8004b3e <__sflush_r+0x46>
 8004b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b3c:	1ac0      	subs	r0, r0, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	4602      	mov	r2, r0
 8004b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b44:	6a21      	ldr	r1, [r4, #32]
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b0      	blx	r6
 8004b4a:	1c43      	adds	r3, r0, #1
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	d106      	bne.n	8004b5e <__sflush_r+0x66>
 8004b50:	6829      	ldr	r1, [r5, #0]
 8004b52:	291d      	cmp	r1, #29
 8004b54:	d82c      	bhi.n	8004bb0 <__sflush_r+0xb8>
 8004b56:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <__sflush_r+0x108>)
 8004b58:	40ca      	lsrs	r2, r1
 8004b5a:	07d6      	lsls	r6, r2, #31
 8004b5c:	d528      	bpl.n	8004bb0 <__sflush_r+0xb8>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	6062      	str	r2, [r4, #4]
 8004b62:	04d9      	lsls	r1, r3, #19
 8004b64:	6922      	ldr	r2, [r4, #16]
 8004b66:	6022      	str	r2, [r4, #0]
 8004b68:	d504      	bpl.n	8004b74 <__sflush_r+0x7c>
 8004b6a:	1c42      	adds	r2, r0, #1
 8004b6c:	d101      	bne.n	8004b72 <__sflush_r+0x7a>
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	b903      	cbnz	r3, 8004b74 <__sflush_r+0x7c>
 8004b72:	6560      	str	r0, [r4, #84]	; 0x54
 8004b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b76:	602f      	str	r7, [r5, #0]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	d0ca      	beq.n	8004b12 <__sflush_r+0x1a>
 8004b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b80:	4299      	cmp	r1, r3
 8004b82:	d002      	beq.n	8004b8a <__sflush_r+0x92>
 8004b84:	4628      	mov	r0, r5
 8004b86:	f7ff fb11 	bl	80041ac <_free_r>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8004b8e:	e7c1      	b.n	8004b14 <__sflush_r+0x1c>
 8004b90:	6a21      	ldr	r1, [r4, #32]
 8004b92:	2301      	movs	r3, #1
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b0      	blx	r6
 8004b98:	1c41      	adds	r1, r0, #1
 8004b9a:	d1c7      	bne.n	8004b2c <__sflush_r+0x34>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0c4      	beq.n	8004b2c <__sflush_r+0x34>
 8004ba2:	2b1d      	cmp	r3, #29
 8004ba4:	d001      	beq.n	8004baa <__sflush_r+0xb2>
 8004ba6:	2b16      	cmp	r3, #22
 8004ba8:	d101      	bne.n	8004bae <__sflush_r+0xb6>
 8004baa:	602f      	str	r7, [r5, #0]
 8004bac:	e7b1      	b.n	8004b12 <__sflush_r+0x1a>
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	e7ad      	b.n	8004b14 <__sflush_r+0x1c>
 8004bb8:	690f      	ldr	r7, [r1, #16]
 8004bba:	2f00      	cmp	r7, #0
 8004bbc:	d0a9      	beq.n	8004b12 <__sflush_r+0x1a>
 8004bbe:	0793      	lsls	r3, r2, #30
 8004bc0:	680e      	ldr	r6, [r1, #0]
 8004bc2:	bf08      	it	eq
 8004bc4:	694b      	ldreq	r3, [r1, #20]
 8004bc6:	600f      	str	r7, [r1, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	2300      	movne	r3, #0
 8004bcc:	eba6 0807 	sub.w	r8, r6, r7
 8004bd0:	608b      	str	r3, [r1, #8]
 8004bd2:	f1b8 0f00 	cmp.w	r8, #0
 8004bd6:	dd9c      	ble.n	8004b12 <__sflush_r+0x1a>
 8004bd8:	6a21      	ldr	r1, [r4, #32]
 8004bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bdc:	4643      	mov	r3, r8
 8004bde:	463a      	mov	r2, r7
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b0      	blx	r6
 8004be4:	2800      	cmp	r0, #0
 8004be6:	dc06      	bgt.n	8004bf6 <__sflush_r+0xfe>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	e78e      	b.n	8004b14 <__sflush_r+0x1c>
 8004bf6:	4407      	add	r7, r0
 8004bf8:	eba8 0800 	sub.w	r8, r8, r0
 8004bfc:	e7e9      	b.n	8004bd2 <__sflush_r+0xda>
 8004bfe:	bf00      	nop
 8004c00:	20400001 	.word	0x20400001

08004c04 <_fflush_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	690b      	ldr	r3, [r1, #16]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	b913      	cbnz	r3, 8004c14 <_fflush_r+0x10>
 8004c0e:	2500      	movs	r5, #0
 8004c10:	4628      	mov	r0, r5
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	b118      	cbz	r0, 8004c1e <_fflush_r+0x1a>
 8004c16:	6983      	ldr	r3, [r0, #24]
 8004c18:	b90b      	cbnz	r3, 8004c1e <_fflush_r+0x1a>
 8004c1a:	f000 f887 	bl	8004d2c <__sinit>
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <_fflush_r+0x6c>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	d11b      	bne.n	8004c5c <_fflush_r+0x58>
 8004c24:	686c      	ldr	r4, [r5, #4]
 8004c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ef      	beq.n	8004c0e <_fflush_r+0xa>
 8004c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c30:	07d0      	lsls	r0, r2, #31
 8004c32:	d404      	bmi.n	8004c3e <_fflush_r+0x3a>
 8004c34:	0599      	lsls	r1, r3, #22
 8004c36:	d402      	bmi.n	8004c3e <_fflush_r+0x3a>
 8004c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c3a:	f000 f915 	bl	8004e68 <__retarget_lock_acquire_recursive>
 8004c3e:	4628      	mov	r0, r5
 8004c40:	4621      	mov	r1, r4
 8004c42:	f7ff ff59 	bl	8004af8 <__sflush_r>
 8004c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c48:	07da      	lsls	r2, r3, #31
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	d4e0      	bmi.n	8004c10 <_fflush_r+0xc>
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	059b      	lsls	r3, r3, #22
 8004c52:	d4dd      	bmi.n	8004c10 <_fflush_r+0xc>
 8004c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c56:	f000 f908 	bl	8004e6a <__retarget_lock_release_recursive>
 8004c5a:	e7d9      	b.n	8004c10 <_fflush_r+0xc>
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <_fflush_r+0x70>)
 8004c5e:	429c      	cmp	r4, r3
 8004c60:	d101      	bne.n	8004c66 <_fflush_r+0x62>
 8004c62:	68ac      	ldr	r4, [r5, #8]
 8004c64:	e7df      	b.n	8004c26 <_fflush_r+0x22>
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <_fflush_r+0x74>)
 8004c68:	429c      	cmp	r4, r3
 8004c6a:	bf08      	it	eq
 8004c6c:	68ec      	ldreq	r4, [r5, #12]
 8004c6e:	e7da      	b.n	8004c26 <_fflush_r+0x22>
 8004c70:	08005268 	.word	0x08005268
 8004c74:	08005288 	.word	0x08005288
 8004c78:	08005248 	.word	0x08005248

08004c7c <std>:
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	4604      	mov	r4, r0
 8004c82:	e9c0 3300 	strd	r3, r3, [r0]
 8004c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c8a:	6083      	str	r3, [r0, #8]
 8004c8c:	8181      	strh	r1, [r0, #12]
 8004c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c90:	81c2      	strh	r2, [r0, #14]
 8004c92:	6183      	str	r3, [r0, #24]
 8004c94:	4619      	mov	r1, r3
 8004c96:	2208      	movs	r2, #8
 8004c98:	305c      	adds	r0, #92	; 0x5c
 8004c9a:	f7ff fa09 	bl	80040b0 <memset>
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <std+0x38>)
 8004ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <std+0x3c>)
 8004ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <std+0x40>)
 8004ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <std+0x44>)
 8004cac:	6224      	str	r4, [r4, #32]
 8004cae:	6323      	str	r3, [r4, #48]	; 0x30
 8004cb0:	bd10      	pop	{r4, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08004fd9 	.word	0x08004fd9
 8004cb8:	08004ffb 	.word	0x08004ffb
 8004cbc:	08005033 	.word	0x08005033
 8004cc0:	08005057 	.word	0x08005057

08004cc4 <_cleanup_r>:
 8004cc4:	4901      	ldr	r1, [pc, #4]	; (8004ccc <_cleanup_r+0x8>)
 8004cc6:	f000 b8af 	b.w	8004e28 <_fwalk_reent>
 8004cca:	bf00      	nop
 8004ccc:	08004c05 	.word	0x08004c05

08004cd0 <__sfmoreglue>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	2268      	movs	r2, #104	; 0x68
 8004cd4:	1e4d      	subs	r5, r1, #1
 8004cd6:	4355      	muls	r5, r2
 8004cd8:	460e      	mov	r6, r1
 8004cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cde:	f7ff fad1 	bl	8004284 <_malloc_r>
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	b140      	cbz	r0, 8004cf8 <__sfmoreglue+0x28>
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8004cec:	300c      	adds	r0, #12
 8004cee:	60a0      	str	r0, [r4, #8]
 8004cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cf4:	f7ff f9dc 	bl	80040b0 <memset>
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}

08004cfc <__sfp_lock_acquire>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	; (8004d04 <__sfp_lock_acquire+0x8>)
 8004cfe:	f000 b8b3 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 8004d02:	bf00      	nop
 8004d04:	20000335 	.word	0x20000335

08004d08 <__sfp_lock_release>:
 8004d08:	4801      	ldr	r0, [pc, #4]	; (8004d10 <__sfp_lock_release+0x8>)
 8004d0a:	f000 b8ae 	b.w	8004e6a <__retarget_lock_release_recursive>
 8004d0e:	bf00      	nop
 8004d10:	20000335 	.word	0x20000335

08004d14 <__sinit_lock_acquire>:
 8004d14:	4801      	ldr	r0, [pc, #4]	; (8004d1c <__sinit_lock_acquire+0x8>)
 8004d16:	f000 b8a7 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 8004d1a:	bf00      	nop
 8004d1c:	20000336 	.word	0x20000336

08004d20 <__sinit_lock_release>:
 8004d20:	4801      	ldr	r0, [pc, #4]	; (8004d28 <__sinit_lock_release+0x8>)
 8004d22:	f000 b8a2 	b.w	8004e6a <__retarget_lock_release_recursive>
 8004d26:	bf00      	nop
 8004d28:	20000336 	.word	0x20000336

08004d2c <__sinit>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	f7ff fff0 	bl	8004d14 <__sinit_lock_acquire>
 8004d34:	69a3      	ldr	r3, [r4, #24]
 8004d36:	b11b      	cbz	r3, 8004d40 <__sinit+0x14>
 8004d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d3c:	f7ff bff0 	b.w	8004d20 <__sinit_lock_release>
 8004d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d44:	6523      	str	r3, [r4, #80]	; 0x50
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <__sinit+0x68>)
 8004d48:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <__sinit+0x6c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	bf04      	itt	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	61a3      	streq	r3, [r4, #24]
 8004d56:	4620      	mov	r0, r4
 8004d58:	f000 f820 	bl	8004d9c <__sfp>
 8004d5c:	6060      	str	r0, [r4, #4]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 f81c 	bl	8004d9c <__sfp>
 8004d64:	60a0      	str	r0, [r4, #8]
 8004d66:	4620      	mov	r0, r4
 8004d68:	f000 f818 	bl	8004d9c <__sfp>
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	60e0      	str	r0, [r4, #12]
 8004d70:	2104      	movs	r1, #4
 8004d72:	6860      	ldr	r0, [r4, #4]
 8004d74:	f7ff ff82 	bl	8004c7c <std>
 8004d78:	68a0      	ldr	r0, [r4, #8]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	2109      	movs	r1, #9
 8004d7e:	f7ff ff7d 	bl	8004c7c <std>
 8004d82:	68e0      	ldr	r0, [r4, #12]
 8004d84:	2202      	movs	r2, #2
 8004d86:	2112      	movs	r1, #18
 8004d88:	f7ff ff78 	bl	8004c7c <std>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	61a3      	str	r3, [r4, #24]
 8004d90:	e7d2      	b.n	8004d38 <__sinit+0xc>
 8004d92:	bf00      	nop
 8004d94:	08005160 	.word	0x08005160
 8004d98:	08004cc5 	.word	0x08004cc5

08004d9c <__sfp>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	4607      	mov	r7, r0
 8004da0:	f7ff ffac 	bl	8004cfc <__sfp_lock_acquire>
 8004da4:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <__sfp+0x84>)
 8004da6:	681e      	ldr	r6, [r3, #0]
 8004da8:	69b3      	ldr	r3, [r6, #24]
 8004daa:	b913      	cbnz	r3, 8004db2 <__sfp+0x16>
 8004dac:	4630      	mov	r0, r6
 8004dae:	f7ff ffbd 	bl	8004d2c <__sinit>
 8004db2:	3648      	adds	r6, #72	; 0x48
 8004db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	d503      	bpl.n	8004dc4 <__sfp+0x28>
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	b30b      	cbz	r3, 8004e04 <__sfp+0x68>
 8004dc0:	6836      	ldr	r6, [r6, #0]
 8004dc2:	e7f7      	b.n	8004db4 <__sfp+0x18>
 8004dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004dc8:	b9d5      	cbnz	r5, 8004e00 <__sfp+0x64>
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <__sfp+0x88>)
 8004dcc:	60e3      	str	r3, [r4, #12]
 8004dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8004dd4:	f000 f847 	bl	8004e66 <__retarget_lock_init_recursive>
 8004dd8:	f7ff ff96 	bl	8004d08 <__sfp_lock_release>
 8004ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004de4:	6025      	str	r5, [r4, #0]
 8004de6:	61a5      	str	r5, [r4, #24]
 8004de8:	2208      	movs	r2, #8
 8004dea:	4629      	mov	r1, r5
 8004dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004df0:	f7ff f95e 	bl	80040b0 <memset>
 8004df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e00:	3468      	adds	r4, #104	; 0x68
 8004e02:	e7d9      	b.n	8004db8 <__sfp+0x1c>
 8004e04:	2104      	movs	r1, #4
 8004e06:	4638      	mov	r0, r7
 8004e08:	f7ff ff62 	bl	8004cd0 <__sfmoreglue>
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	6030      	str	r0, [r6, #0]
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d1d5      	bne.n	8004dc0 <__sfp+0x24>
 8004e14:	f7ff ff78 	bl	8004d08 <__sfp_lock_release>
 8004e18:	230c      	movs	r3, #12
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	e7ee      	b.n	8004dfc <__sfp+0x60>
 8004e1e:	bf00      	nop
 8004e20:	08005160 	.word	0x08005160
 8004e24:	ffff0001 	.word	0xffff0001

08004e28 <_fwalk_reent>:
 8004e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	4688      	mov	r8, r1
 8004e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e34:	2700      	movs	r7, #0
 8004e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8004e3e:	d505      	bpl.n	8004e4c <_fwalk_reent+0x24>
 8004e40:	6824      	ldr	r4, [r4, #0]
 8004e42:	2c00      	cmp	r4, #0
 8004e44:	d1f7      	bne.n	8004e36 <_fwalk_reent+0xe>
 8004e46:	4638      	mov	r0, r7
 8004e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e4c:	89ab      	ldrh	r3, [r5, #12]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d907      	bls.n	8004e62 <_fwalk_reent+0x3a>
 8004e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e56:	3301      	adds	r3, #1
 8004e58:	d003      	beq.n	8004e62 <_fwalk_reent+0x3a>
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	47c0      	blx	r8
 8004e60:	4307      	orrs	r7, r0
 8004e62:	3568      	adds	r5, #104	; 0x68
 8004e64:	e7e9      	b.n	8004e3a <_fwalk_reent+0x12>

08004e66 <__retarget_lock_init_recursive>:
 8004e66:	4770      	bx	lr

08004e68 <__retarget_lock_acquire_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_release_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <__swhatbuf_r>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	460e      	mov	r6, r1
 8004e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e74:	2900      	cmp	r1, #0
 8004e76:	b096      	sub	sp, #88	; 0x58
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	da08      	bge.n	8004e90 <__swhatbuf_r+0x24>
 8004e7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	602a      	str	r2, [r5, #0]
 8004e86:	061a      	lsls	r2, r3, #24
 8004e88:	d410      	bmi.n	8004eac <__swhatbuf_r+0x40>
 8004e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8e:	e00e      	b.n	8004eae <__swhatbuf_r+0x42>
 8004e90:	466a      	mov	r2, sp
 8004e92:	f000 f907 	bl	80050a4 <_fstat_r>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	dbf1      	blt.n	8004e7e <__swhatbuf_r+0x12>
 8004e9a:	9a01      	ldr	r2, [sp, #4]
 8004e9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ea0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ea4:	425a      	negs	r2, r3
 8004ea6:	415a      	adcs	r2, r3
 8004ea8:	602a      	str	r2, [r5, #0]
 8004eaa:	e7ee      	b.n	8004e8a <__swhatbuf_r+0x1e>
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	2000      	movs	r0, #0
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	b016      	add	sp, #88	; 0x58
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004eb8 <__smakebuf_r>:
 8004eb8:	898b      	ldrh	r3, [r1, #12]
 8004eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ebc:	079d      	lsls	r5, r3, #30
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	d507      	bpl.n	8004ed4 <__smakebuf_r+0x1c>
 8004ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	2301      	movs	r3, #1
 8004ece:	6163      	str	r3, [r4, #20]
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	ab01      	add	r3, sp, #4
 8004ed6:	466a      	mov	r2, sp
 8004ed8:	f7ff ffc8 	bl	8004e6c <__swhatbuf_r>
 8004edc:	9900      	ldr	r1, [sp, #0]
 8004ede:	4605      	mov	r5, r0
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f7ff f9cf 	bl	8004284 <_malloc_r>
 8004ee6:	b948      	cbnz	r0, 8004efc <__smakebuf_r+0x44>
 8004ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eec:	059a      	lsls	r2, r3, #22
 8004eee:	d4ef      	bmi.n	8004ed0 <__smakebuf_r+0x18>
 8004ef0:	f023 0303 	bic.w	r3, r3, #3
 8004ef4:	f043 0302 	orr.w	r3, r3, #2
 8004ef8:	81a3      	strh	r3, [r4, #12]
 8004efa:	e7e3      	b.n	8004ec4 <__smakebuf_r+0xc>
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <__smakebuf_r+0x7c>)
 8004efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	6020      	str	r0, [r4, #0]
 8004f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	9b00      	ldr	r3, [sp, #0]
 8004f0c:	6163      	str	r3, [r4, #20]
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	6120      	str	r0, [r4, #16]
 8004f12:	b15b      	cbz	r3, 8004f2c <__smakebuf_r+0x74>
 8004f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f000 f8d5 	bl	80050c8 <_isatty_r>
 8004f1e:	b128      	cbz	r0, 8004f2c <__smakebuf_r+0x74>
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	81a3      	strh	r3, [r4, #12]
 8004f2c:	89a0      	ldrh	r0, [r4, #12]
 8004f2e:	4305      	orrs	r5, r0
 8004f30:	81a5      	strh	r5, [r4, #12]
 8004f32:	e7cd      	b.n	8004ed0 <__smakebuf_r+0x18>
 8004f34:	08004cc5 	.word	0x08004cc5

08004f38 <__malloc_lock>:
 8004f38:	4801      	ldr	r0, [pc, #4]	; (8004f40 <__malloc_lock+0x8>)
 8004f3a:	f7ff bf95 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 8004f3e:	bf00      	nop
 8004f40:	20000334 	.word	0x20000334

08004f44 <__malloc_unlock>:
 8004f44:	4801      	ldr	r0, [pc, #4]	; (8004f4c <__malloc_unlock+0x8>)
 8004f46:	f7ff bf90 	b.w	8004e6a <__retarget_lock_release_recursive>
 8004f4a:	bf00      	nop
 8004f4c:	20000334 	.word	0x20000334

08004f50 <_raise_r>:
 8004f50:	291f      	cmp	r1, #31
 8004f52:	b538      	push	{r3, r4, r5, lr}
 8004f54:	4604      	mov	r4, r0
 8004f56:	460d      	mov	r5, r1
 8004f58:	d904      	bls.n	8004f64 <_raise_r+0x14>
 8004f5a:	2316      	movs	r3, #22
 8004f5c:	6003      	str	r3, [r0, #0]
 8004f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f66:	b112      	cbz	r2, 8004f6e <_raise_r+0x1e>
 8004f68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f6c:	b94b      	cbnz	r3, 8004f82 <_raise_r+0x32>
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f000 f830 	bl	8004fd4 <_getpid_r>
 8004f74:	462a      	mov	r2, r5
 8004f76:	4601      	mov	r1, r0
 8004f78:	4620      	mov	r0, r4
 8004f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f7e:	f000 b817 	b.w	8004fb0 <_kill_r>
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d00a      	beq.n	8004f9c <_raise_r+0x4c>
 8004f86:	1c59      	adds	r1, r3, #1
 8004f88:	d103      	bne.n	8004f92 <_raise_r+0x42>
 8004f8a:	2316      	movs	r3, #22
 8004f8c:	6003      	str	r3, [r0, #0]
 8004f8e:	2001      	movs	r0, #1
 8004f90:	e7e7      	b.n	8004f62 <_raise_r+0x12>
 8004f92:	2400      	movs	r4, #0
 8004f94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f98:	4628      	mov	r0, r5
 8004f9a:	4798      	blx	r3
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e7e0      	b.n	8004f62 <_raise_r+0x12>

08004fa0 <raise>:
 8004fa0:	4b02      	ldr	r3, [pc, #8]	; (8004fac <raise+0xc>)
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	f7ff bfd3 	b.w	8004f50 <_raise_r>
 8004faa:	bf00      	nop
 8004fac:	2000000c 	.word	0x2000000c

08004fb0 <_kill_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d07      	ldr	r5, [pc, #28]	; (8004fd0 <_kill_r+0x20>)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	602b      	str	r3, [r5, #0]
 8004fbe:	f7fb fed5 	bl	8000d6c <_kill>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	d102      	bne.n	8004fcc <_kill_r+0x1c>
 8004fc6:	682b      	ldr	r3, [r5, #0]
 8004fc8:	b103      	cbz	r3, 8004fcc <_kill_r+0x1c>
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	bd38      	pop	{r3, r4, r5, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000338 	.word	0x20000338

08004fd4 <_getpid_r>:
 8004fd4:	f7fb bec2 	b.w	8000d5c <_getpid>

08004fd8 <__sread>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	460c      	mov	r4, r1
 8004fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe0:	f000 f894 	bl	800510c <_read_r>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	bfab      	itete	ge
 8004fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fea:	89a3      	ldrhlt	r3, [r4, #12]
 8004fec:	181b      	addge	r3, r3, r0
 8004fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ff2:	bfac      	ite	ge
 8004ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ff6:	81a3      	strhlt	r3, [r4, #12]
 8004ff8:	bd10      	pop	{r4, pc}

08004ffa <__swrite>:
 8004ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffe:	461f      	mov	r7, r3
 8005000:	898b      	ldrh	r3, [r1, #12]
 8005002:	05db      	lsls	r3, r3, #23
 8005004:	4605      	mov	r5, r0
 8005006:	460c      	mov	r4, r1
 8005008:	4616      	mov	r6, r2
 800500a:	d505      	bpl.n	8005018 <__swrite+0x1e>
 800500c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005010:	2302      	movs	r3, #2
 8005012:	2200      	movs	r2, #0
 8005014:	f000 f868 	bl	80050e8 <_lseek_r>
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800501e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005022:	81a3      	strh	r3, [r4, #12]
 8005024:	4632      	mov	r2, r6
 8005026:	463b      	mov	r3, r7
 8005028:	4628      	mov	r0, r5
 800502a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800502e:	f000 b817 	b.w	8005060 <_write_r>

08005032 <__sseek>:
 8005032:	b510      	push	{r4, lr}
 8005034:	460c      	mov	r4, r1
 8005036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503a:	f000 f855 	bl	80050e8 <_lseek_r>
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	bf15      	itete	ne
 8005044:	6560      	strne	r0, [r4, #84]	; 0x54
 8005046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800504a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800504e:	81a3      	strheq	r3, [r4, #12]
 8005050:	bf18      	it	ne
 8005052:	81a3      	strhne	r3, [r4, #12]
 8005054:	bd10      	pop	{r4, pc}

08005056 <__sclose>:
 8005056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800505a:	f000 b813 	b.w	8005084 <_close_r>
	...

08005060 <_write_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4d07      	ldr	r5, [pc, #28]	; (8005080 <_write_r+0x20>)
 8005064:	4604      	mov	r4, r0
 8005066:	4608      	mov	r0, r1
 8005068:	4611      	mov	r1, r2
 800506a:	2200      	movs	r2, #0
 800506c:	602a      	str	r2, [r5, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	f7fb feb3 	bl	8000dda <_write>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d102      	bne.n	800507e <_write_r+0x1e>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	b103      	cbz	r3, 800507e <_write_r+0x1e>
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	20000338 	.word	0x20000338

08005084 <_close_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4d06      	ldr	r5, [pc, #24]	; (80050a0 <_close_r+0x1c>)
 8005088:	2300      	movs	r3, #0
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	602b      	str	r3, [r5, #0]
 8005090:	f7fb febf 	bl	8000e12 <_close>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d102      	bne.n	800509e <_close_r+0x1a>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	b103      	cbz	r3, 800509e <_close_r+0x1a>
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	20000338 	.word	0x20000338

080050a4 <_fstat_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	4d07      	ldr	r5, [pc, #28]	; (80050c4 <_fstat_r+0x20>)
 80050a8:	2300      	movs	r3, #0
 80050aa:	4604      	mov	r4, r0
 80050ac:	4608      	mov	r0, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	602b      	str	r3, [r5, #0]
 80050b2:	f7fb feba 	bl	8000e2a <_fstat>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	d102      	bne.n	80050c0 <_fstat_r+0x1c>
 80050ba:	682b      	ldr	r3, [r5, #0]
 80050bc:	b103      	cbz	r3, 80050c0 <_fstat_r+0x1c>
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	bf00      	nop
 80050c4:	20000338 	.word	0x20000338

080050c8 <_isatty_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4d06      	ldr	r5, [pc, #24]	; (80050e4 <_isatty_r+0x1c>)
 80050cc:	2300      	movs	r3, #0
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	f7fb feb9 	bl	8000e4a <_isatty>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_isatty_r+0x1a>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_isatty_r+0x1a>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	20000338 	.word	0x20000338

080050e8 <_lseek_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d07      	ldr	r5, [pc, #28]	; (8005108 <_lseek_r+0x20>)
 80050ec:	4604      	mov	r4, r0
 80050ee:	4608      	mov	r0, r1
 80050f0:	4611      	mov	r1, r2
 80050f2:	2200      	movs	r2, #0
 80050f4:	602a      	str	r2, [r5, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	f7fb feb2 	bl	8000e60 <_lseek>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_lseek_r+0x1e>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_lseek_r+0x1e>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	20000338 	.word	0x20000338

0800510c <_read_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	4d07      	ldr	r5, [pc, #28]	; (800512c <_read_r+0x20>)
 8005110:	4604      	mov	r4, r0
 8005112:	4608      	mov	r0, r1
 8005114:	4611      	mov	r1, r2
 8005116:	2200      	movs	r2, #0
 8005118:	602a      	str	r2, [r5, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	f7fb fe40 	bl	8000da0 <_read>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_read_r+0x1e>
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	b103      	cbz	r3, 800512a <_read_r+0x1e>
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	20000338 	.word	0x20000338

08005130 <_init>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr

0800513c <_fini>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr
