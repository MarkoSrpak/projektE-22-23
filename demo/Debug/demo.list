
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003bb4  08009eec  08009eec  00019eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daa0  0800daa0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800daa0  0800daa0  0001daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800daa8  0800daa8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daa8  0800daa8  0001daa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800daac  0800daac  0001daac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800dab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          000007d8  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a8  200008a8  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022e86  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d01  00000000  00000000  00042f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad0  00000000  00000000  00047c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001880  00000000  00000000  00049758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a4c1  00000000  00000000  0004afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023439  00000000  00000000  00075499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f400a  00000000  00000000  000988d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018c8dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000736c  00000000  00000000  0018c930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ed4 	.word	0x08009ed4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	08009ed4 	.word	0x08009ed4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MDL_LCD_Bttn_Pressed>:

LCD_Handler lcd_handler;


//updates game state based on button press
void MDL_LCD_Bttn_Pressed(bttns bttn){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	switch(lcd_handler.game_state){
 8000592:	4b6d      	ldr	r3, [pc, #436]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000598:	2b07      	cmp	r3, #7
 800059a:	f200 80c0 	bhi.w	800071e <MDL_LCD_Bttn_Pressed+0x196>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <MDL_LCD_Bttn_Pressed+0x1c>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005c5 	.word	0x080005c5
 80005a8:	080005db 	.word	0x080005db
 80005ac:	0800064f 	.word	0x0800064f
 80005b0:	08000663 	.word	0x08000663
 80005b4:	0800068d 	.word	0x0800068d
 80005b8:	080006b7 	.word	0x080006b7
 80005bc:	080006e1 	.word	0x080006e1
 80005c0:	0800070b 	.word	0x0800070b
		case WELCOME:
			if (bttn == START){
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f040 80ab 	bne.w	8000722 <MDL_LCD_Bttn_Pressed+0x19a>
				lcd_handler.game_state=NUM_OF_PLAYERS;
 80005cc:	4b5e      	ldr	r3, [pc, #376]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 80005d4:	f000 f9d8 	bl	8000988 <change_LCD_screenstate>
			}
			break;
 80005d8:	e0a3      	b.n	8000722 <MDL_LCD_Bttn_Pressed+0x19a>

		case NUM_OF_PLAYERS:

			if (bttn == PLUS){
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d113      	bne.n	8000608 <MDL_LCD_Bttn_Pressed+0x80>
				if(lcd_handler.num_of_players==6) lcd_handler.num_of_players = 1;
 80005e0:	4b59      	ldr	r3, [pc, #356]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b06      	cmp	r3, #6
 80005e6:	d102      	bne.n	80005ee <MDL_LCD_Bttn_Pressed+0x66>
 80005e8:	4b57      	ldr	r3, [pc, #348]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
				lcd_handler.num_of_players++;
 80005ee:	4b56      	ldr	r3, [pc, #344]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b54      	ldr	r3, [pc, #336]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80005f8:	701a      	strb	r2, [r3, #0]
				lcd_handler.game_state = NUM_OF_PLAYERS;
 80005fa:	4b53      	ldr	r3, [pc, #332]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 8000602:	f000 f9c1 	bl	8000988 <change_LCD_screenstate>
			else if(bttn == START){
				LCD_Add_Player();
				lcd_handler.game_state = PLAYER1;
				change_LCD_screenstate();
			}
			break;
 8000606:	e08e      	b.n	8000726 <MDL_LCD_Bttn_Pressed+0x19e>
			else if(bttn == MINUS){
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2b02      	cmp	r3, #2
 800060c:	d113      	bne.n	8000636 <MDL_LCD_Bttn_Pressed+0xae>
				if(lcd_handler.num_of_players==2) lcd_handler.num_of_players = 7;
 800060e:	4b4e      	ldr	r3, [pc, #312]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b02      	cmp	r3, #2
 8000614:	d102      	bne.n	800061c <MDL_LCD_Bttn_Pressed+0x94>
 8000616:	4b4c      	ldr	r3, [pc, #304]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000618:	2207      	movs	r2, #7
 800061a:	701a      	strb	r2, [r3, #0]
				lcd_handler.num_of_players--;
 800061c:	4b4a      	ldr	r3, [pc, #296]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	3b01      	subs	r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b48      	ldr	r3, [pc, #288]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000626:	701a      	strb	r2, [r3, #0]
				lcd_handler.game_state = NUM_OF_PLAYERS;
 8000628:	4b47      	ldr	r3, [pc, #284]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 800062a:	2201      	movs	r2, #1
 800062c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 8000630:	f000 f9aa 	bl	8000988 <change_LCD_screenstate>
			break;
 8000634:	e077      	b.n	8000726 <MDL_LCD_Bttn_Pressed+0x19e>
			else if(bttn == START){
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d174      	bne.n	8000726 <MDL_LCD_Bttn_Pressed+0x19e>
				LCD_Add_Player();
 800063c:	f000 f974 	bl	8000928 <LCD_Add_Player>
				lcd_handler.game_state = PLAYER1;
 8000640:	4b41      	ldr	r3, [pc, #260]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000642:	2202      	movs	r2, #2
 8000644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 8000648:	f000 f99e 	bl	8000988 <change_LCD_screenstate>
			break;
 800064c:	e06b      	b.n	8000726 <MDL_LCD_Bttn_Pressed+0x19e>

		case PLAYER1:
			if(bttn == TOCI){
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b03      	cmp	r3, #3
 8000652:	d16a      	bne.n	800072a <MDL_LCD_Bttn_Pressed+0x1a2>
				lcd_handler.game_state= PLAYER2;
 8000654:	4b3c      	ldr	r3, [pc, #240]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000656:	2203      	movs	r2, #3
 8000658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 800065c:	f000 f994 	bl	8000988 <change_LCD_screenstate>
			}
			break;
 8000660:	e063      	b.n	800072a <MDL_LCD_Bttn_Pressed+0x1a2>

		case PLAYER2:
			if(bttn == TOCI){
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b03      	cmp	r3, #3
 8000666:	d162      	bne.n	800072e <MDL_LCD_Bttn_Pressed+0x1a6>
				if(lcd_handler.num_of_players == 2){
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d106      	bne.n	800067e <MDL_LCD_Bttn_Pressed+0xf6>
					lcd_handler.game_state= PLAYER1;
 8000670:	4b35      	ldr	r3, [pc, #212]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000672:	2202      	movs	r2, #2
 8000674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 8000678:	f000 f986 	bl	8000988 <change_LCD_screenstate>
				} else {
					lcd_handler.game_state= PLAYER3;
					change_LCD_screenstate();
				}
			}
			break;
 800067c:	e057      	b.n	800072e <MDL_LCD_Bttn_Pressed+0x1a6>
					lcd_handler.game_state= PLAYER3;
 800067e:	4b32      	ldr	r3, [pc, #200]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000680:	2204      	movs	r2, #4
 8000682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 8000686:	f000 f97f 	bl	8000988 <change_LCD_screenstate>
			break;
 800068a:	e050      	b.n	800072e <MDL_LCD_Bttn_Pressed+0x1a6>
		case PLAYER3:
			if(bttn == TOCI){
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d14f      	bne.n	8000732 <MDL_LCD_Bttn_Pressed+0x1aa>
				if(lcd_handler.num_of_players ==3){
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d106      	bne.n	80006a8 <MDL_LCD_Bttn_Pressed+0x120>
					lcd_handler.game_state= PLAYER1;
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 800069c:	2202      	movs	r2, #2
 800069e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 80006a2:	f000 f971 	bl	8000988 <change_LCD_screenstate>
				} else {
					lcd_handler.game_state= PLAYER4;
					change_LCD_screenstate();
				}
			}
			break;
 80006a6:	e044      	b.n	8000732 <MDL_LCD_Bttn_Pressed+0x1aa>
					lcd_handler.game_state= PLAYER4;
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80006aa:	2205      	movs	r2, #5
 80006ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 80006b0:	f000 f96a 	bl	8000988 <change_LCD_screenstate>
			break;
 80006b4:	e03d      	b.n	8000732 <MDL_LCD_Bttn_Pressed+0x1aa>

		case PLAYER4:
			if(bttn == TOCI){
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d13c      	bne.n	8000736 <MDL_LCD_Bttn_Pressed+0x1ae>
				if(lcd_handler.num_of_players ==4){
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d106      	bne.n	80006d2 <MDL_LCD_Bttn_Pressed+0x14a>
					lcd_handler.game_state= PLAYER1;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 80006cc:	f000 f95c 	bl	8000988 <change_LCD_screenstate>
				} else {
					lcd_handler.game_state= PLAYER5;
					change_LCD_screenstate();
				}
			}
			break;
 80006d0:	e031      	b.n	8000736 <MDL_LCD_Bttn_Pressed+0x1ae>
					lcd_handler.game_state= PLAYER5;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80006d4:	2206      	movs	r2, #6
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 80006da:	f000 f955 	bl	8000988 <change_LCD_screenstate>
			break;
 80006de:	e02a      	b.n	8000736 <MDL_LCD_Bttn_Pressed+0x1ae>

		case PLAYER5:
			if(bttn == TOCI){
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d129      	bne.n	800073a <MDL_LCD_Bttn_Pressed+0x1b2>
				if(lcd_handler.num_of_players ==5){
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b05      	cmp	r3, #5
 80006ec:	d106      	bne.n	80006fc <MDL_LCD_Bttn_Pressed+0x174>
					lcd_handler.game_state= PLAYER1;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 80006f6:	f000 f947 	bl	8000988 <change_LCD_screenstate>
				} else {
					lcd_handler.game_state= PLAYER6;
					change_LCD_screenstate();
				}
			}
			break;
 80006fa:	e01e      	b.n	800073a <MDL_LCD_Bttn_Pressed+0x1b2>
					lcd_handler.game_state= PLAYER6;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 80006fe:	2207      	movs	r2, #7
 8000700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 8000704:	f000 f940 	bl	8000988 <change_LCD_screenstate>
			break;
 8000708:	e017      	b.n	800073a <MDL_LCD_Bttn_Pressed+0x1b2>

		case PLAYER6:
			if(bttn == TOCI){
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d116      	bne.n	800073e <MDL_LCD_Bttn_Pressed+0x1b6>
				lcd_handler.game_state= PLAYER1;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MDL_LCD_Bttn_Pressed+0x1c0>)
 8000712:	2202      	movs	r2, #2
 8000714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 8000718:	f000 f936 	bl	8000988 <change_LCD_screenstate>
			}
			break;
 800071c:	e00f      	b.n	800073e <MDL_LCD_Bttn_Pressed+0x1b6>


		default:
			break;
 800071e:	bf00      	nop
 8000720:	e00e      	b.n	8000740 <MDL_LCD_Bttn_Pressed+0x1b8>
			break;
 8000722:	bf00      	nop
 8000724:	e00c      	b.n	8000740 <MDL_LCD_Bttn_Pressed+0x1b8>
			break;
 8000726:	bf00      	nop
 8000728:	e00a      	b.n	8000740 <MDL_LCD_Bttn_Pressed+0x1b8>
			break;
 800072a:	bf00      	nop
 800072c:	e008      	b.n	8000740 <MDL_LCD_Bttn_Pressed+0x1b8>
			break;
 800072e:	bf00      	nop
 8000730:	e006      	b.n	8000740 <MDL_LCD_Bttn_Pressed+0x1b8>
			break;
 8000732:	bf00      	nop
 8000734:	e004      	b.n	8000740 <MDL_LCD_Bttn_Pressed+0x1b8>
			break;
 8000736:	bf00      	nop
 8000738:	e002      	b.n	8000740 <MDL_LCD_Bttn_Pressed+0x1b8>
			break;
 800073a:	bf00      	nop
 800073c:	e000      	b.n	8000740 <MDL_LCD_Bttn_Pressed+0x1b8>
			break;
 800073e:	bf00      	nop
	}

}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200002a4 	.word	0x200002a4

0800074c <MDL_LCD_Hit_Update>:


//updates game state based on sensor hits
void MDL_LCD_Hit_Update(uint32_t mLs){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	switch(lcd_handler.game_state){
 8000754:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800075a:	3b02      	subs	r3, #2
 800075c:	2b05      	cmp	r3, #5
 800075e:	f200 8099 	bhi.w	8000894 <MDL_LCD_Hit_Update+0x148>
 8000762:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <MDL_LCD_Hit_Update+0x1c>)
 8000764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000768:	08000781 	.word	0x08000781
 800076c:	080007af 	.word	0x080007af
 8000770:	080007dd 	.word	0x080007dd
 8000774:	0800080b 	.word	0x0800080b
 8000778:	08000839 	.word	0x08000839
 800077c:	08000867 	.word	0x08000867
			case PLAYER1:
				lcd_handler.Players[0].mL += mLs;
 8000780:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000782:	691a      	ldr	r2, [r3, #16]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	4a4b      	ldr	r2, [pc, #300]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 800078a:	6113      	str	r3, [r2, #16]
				change_LCD_screenstate();
 800078c:	f000 f8fc 	bl	8000988 <change_LCD_screenstate>

				if(lcd_handler.Players[0].mL >= 1000){
 8000790:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000798:	d37e      	bcc.n	8000898 <MDL_LCD_Hit_Update+0x14c>
					lcd_handler.game_state = WIN;
 800079a:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 800079c:	2208      	movs	r2, #8
 800079e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 1;
 80007a2:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 80007a8:	f000 f8ee 	bl	8000988 <change_LCD_screenstate>
				}

				break;
 80007ac:	e074      	b.n	8000898 <MDL_LCD_Hit_Update+0x14c>

			case PLAYER2:
				lcd_handler.Players[1].mL += mLs;
 80007ae:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	4a40      	ldr	r2, [pc, #256]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007b8:	6193      	str	r3, [r2, #24]
				change_LCD_screenstate();
 80007ba:	f000 f8e5 	bl	8000988 <change_LCD_screenstate>

				if(lcd_handler.Players[1].mL >= 1000){
 80007be:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007c6:	d369      	bcc.n	800089c <MDL_LCD_Hit_Update+0x150>
					lcd_handler.game_state = WIN;
 80007c8:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007ca:	2208      	movs	r2, #8
 80007cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 2;
 80007d0:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 80007d6:	f000 f8d7 	bl	8000988 <change_LCD_screenstate>
				}

				break;
 80007da:	e05f      	b.n	800089c <MDL_LCD_Hit_Update+0x150>

			case PLAYER3:
				lcd_handler.Players[2].mL += mLs;
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007de:	6a1a      	ldr	r2, [r3, #32]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007e6:	6213      	str	r3, [r2, #32]
				change_LCD_screenstate();
 80007e8:	f000 f8ce 	bl	8000988 <change_LCD_screenstate>

				if(lcd_handler.Players[2].mL >= 1000){
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007ee:	6a1b      	ldr	r3, [r3, #32]
 80007f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007f4:	d354      	bcc.n	80008a0 <MDL_LCD_Hit_Update+0x154>
					lcd_handler.game_state = WIN;
 80007f6:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 80007f8:	2208      	movs	r2, #8
 80007fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 3;
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000800:	2203      	movs	r2, #3
 8000802:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 8000804:	f000 f8c0 	bl	8000988 <change_LCD_screenstate>
				}

				break;
 8000808:	e04a      	b.n	80008a0 <MDL_LCD_Hit_Update+0x154>

			case PLAYER4:
				lcd_handler.Players[3].mL += mLs;
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 800080c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000814:	6293      	str	r3, [r2, #40]	; 0x28
				change_LCD_screenstate();
 8000816:	f000 f8b7 	bl	8000988 <change_LCD_screenstate>

				if(lcd_handler.Players[3].mL >= 1000){
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 800081c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000822:	d33f      	bcc.n	80008a4 <MDL_LCD_Hit_Update+0x158>
					lcd_handler.game_state = WIN;
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000826:	2208      	movs	r2, #8
 8000828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 4;
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 800082e:	2204      	movs	r2, #4
 8000830:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 8000832:	f000 f8a9 	bl	8000988 <change_LCD_screenstate>
				}

				break;
 8000836:	e035      	b.n	80008a4 <MDL_LCD_Hit_Update+0x158>
			case PLAYER5:
				lcd_handler.Players[4].mL += mLs;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 800083a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
				change_LCD_screenstate();
 8000844:	f000 f8a0 	bl	8000988 <change_LCD_screenstate>

				if(lcd_handler.Players[4].mL >= 1000){
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000850:	d32a      	bcc.n	80008a8 <MDL_LCD_Hit_Update+0x15c>
					lcd_handler.game_state = WIN;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000854:	2208      	movs	r2, #8
 8000856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 5;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 800085c:	2205      	movs	r2, #5
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 8000860:	f000 f892 	bl	8000988 <change_LCD_screenstate>
				}

				break;
 8000864:	e020      	b.n	80008a8 <MDL_LCD_Hit_Update+0x15c>

			case PLAYER6:
				lcd_handler.Players[5].mL += mLs;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000870:	6393      	str	r3, [r2, #56]	; 0x38
				change_LCD_screenstate();
 8000872:	f000 f889 	bl	8000988 <change_LCD_screenstate>

				if(lcd_handler.Players[5].mL >= 1000){
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800087a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800087e:	d315      	bcc.n	80008ac <MDL_LCD_Hit_Update+0x160>
					lcd_handler.game_state = WIN;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 8000882:	2208      	movs	r2, #8
 8000884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 6;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MDL_LCD_Hit_Update+0x16c>)
 800088a:	2206      	movs	r2, #6
 800088c:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 800088e:	f000 f87b 	bl	8000988 <change_LCD_screenstate>
				}

				break;
 8000892:	e00b      	b.n	80008ac <MDL_LCD_Hit_Update+0x160>

			default:
				break;
 8000894:	bf00      	nop
 8000896:	e00a      	b.n	80008ae <MDL_LCD_Hit_Update+0x162>
				break;
 8000898:	bf00      	nop
 800089a:	e008      	b.n	80008ae <MDL_LCD_Hit_Update+0x162>
				break;
 800089c:	bf00      	nop
 800089e:	e006      	b.n	80008ae <MDL_LCD_Hit_Update+0x162>
				break;
 80008a0:	bf00      	nop
 80008a2:	e004      	b.n	80008ae <MDL_LCD_Hit_Update+0x162>
				break;
 80008a4:	bf00      	nop
 80008a6:	e002      	b.n	80008ae <MDL_LCD_Hit_Update+0x162>
				break;
 80008a8:	bf00      	nop
 80008aa:	e000      	b.n	80008ae <MDL_LCD_Hit_Update+0x162>
				break;
 80008ac:	bf00      	nop
	}
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200002a4 	.word	0x200002a4

080008bc <MDL_LCD_Init>:



//initializes new game
void MDL_LCD_Init(){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 80008c0:	f002 fdf6 	bl	80034b0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80008c4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80008c8:	2000      	movs	r0, #0
 80008ca:	f002 fe73 	bl	80035b4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80008ce:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80008d2:	2001      	movs	r0, #1
 80008d4:	f002 fe6e 	bl	80035b4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80008d8:	2001      	movs	r0, #1
 80008da:	f002 fecf 	bl	800367c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80008de:	f003 f8c1 	bl	8003a64 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(BGCOLOR);
 80008e2:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80008e6:	f002 ff21 	bl	800372c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80008ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80008ee:	f002 fed5 	bl	800369c <BSP_LCD_SetTextColor>

	lcd_handler.num_of_players=2;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MDL_LCD_Init+0x60>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	701a      	strb	r2, [r3, #0]
	sprintf(lcd_handler.num_of_players_print, "%d", lcd_handler.num_of_players);
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <MDL_LCD_Init+0x60>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <MDL_LCD_Init+0x64>)
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <MDL_LCD_Init+0x68>)
 8000902:	f008 feb9 	bl	8009678 <siprintf>

	lcd_handler.game_state=WELCOME;
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <MDL_LCD_Init+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	lcd_handler.winner = 0;
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <MDL_LCD_Init+0x60>)
 8000910:	2200      	movs	r2, #0
 8000912:	641a      	str	r2, [r3, #64]	; 0x40
	change_LCD_screenstate();
 8000914:	f000 f838 	bl	8000988 <change_LCD_screenstate>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200002a4 	.word	0x200002a4
 8000920:	08009eec 	.word	0x08009eec
 8000924:	200002a5 	.word	0x200002a5

08000928 <LCD_Add_Player>:


//updates number of players based on player choice
void LCD_Add_Player(void){
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

	sprintf(lcd_handler.num_of_players_print, "%d", lcd_handler.num_of_players);
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <LCD_Add_Player+0x54>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	4912      	ldr	r1, [pc, #72]	; (8000980 <LCD_Add_Player+0x58>)
 8000936:	4813      	ldr	r0, [pc, #76]	; (8000984 <LCD_Add_Player+0x5c>)
 8000938:	f008 fe9e 	bl	8009678 <siprintf>

	for(uint32_t i=0; i<lcd_handler.num_of_players; i++){
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e011      	b.n	8000966 <LCD_Add_Player+0x3e>
		LCD_Player player = {i, 0};
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
		lcd_handler.Players[i]=player;
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <LCD_Add_Player+0x54>)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3301      	adds	r3, #1
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4413      	add	r3, r2
 8000954:	3304      	adds	r3, #4
 8000956:	1d3a      	adds	r2, r7, #4
 8000958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095c:	e883 0003 	stmia.w	r3, {r0, r1}
	for(uint32_t i=0; i<lcd_handler.num_of_players; i++){
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3301      	adds	r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <LCD_Add_Player+0x54>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4293      	cmp	r3, r2
 8000970:	d3e7      	bcc.n	8000942 <LCD_Add_Player+0x1a>
	}
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200002a4 	.word	0x200002a4
 8000980:	08009eec 	.word	0x08009eec
 8000984:	200002a5 	.word	0x200002a5

08000988 <change_LCD_screenstate>:


//calls functions to change LCD screen based on game state
void change_LCD_screenstate(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

	switch (lcd_handler.game_state){
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <change_LCD_screenstate+0x58>)
 800098e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000992:	2b08      	cmp	r3, #8
 8000994:	d820      	bhi.n	80009d8 <change_LCD_screenstate+0x50>
 8000996:	a201      	add	r2, pc, #4	; (adr r2, 800099c <change_LCD_screenstate+0x14>)
 8000998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099c:	080009c1 	.word	0x080009c1
 80009a0:	080009c7 	.word	0x080009c7
 80009a4:	080009cd 	.word	0x080009cd
 80009a8:	080009cd 	.word	0x080009cd
 80009ac:	080009cd 	.word	0x080009cd
 80009b0:	080009cd 	.word	0x080009cd
 80009b4:	080009cd 	.word	0x080009cd
 80009b8:	080009cd 	.word	0x080009cd
 80009bc:	080009d3 	.word	0x080009d3
		case WELCOME:
			LCD_State_WELCOME();
 80009c0:	f000 f810 	bl	80009e4 <LCD_State_WELCOME>
			break;
 80009c4:	e009      	b.n	80009da <change_LCD_screenstate+0x52>

		case NUM_OF_PLAYERS:
			LCD_State_NUM_OF_PLAYERS();
 80009c6:	f000 f82d 	bl	8000a24 <LCD_State_NUM_OF_PLAYERS>
			break;
 80009ca:	e006      	b.n	80009da <change_LCD_screenstate+0x52>
		case PLAYER2:
		case PLAYER3:
		case PLAYER4:
		case PLAYER5:
		case PLAYER6:
			LCD_State_PLAYERS();
 80009cc:	f000 f8fe 	bl	8000bcc <LCD_State_PLAYERS>
			break;
 80009d0:	e003      	b.n	80009da <change_LCD_screenstate+0x52>

		case WIN:
			LCD_State_WIN();
 80009d2:	f000 f879 	bl	8000ac8 <LCD_State_WIN>
			break;
 80009d6:	e000      	b.n	80009da <change_LCD_screenstate+0x52>

		default:
			break;
 80009d8:	bf00      	nop

	}
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200002a4 	.word	0x200002a4

080009e4 <LCD_State_WELCOME>:



//displays the WELCOME screen on the LCD
void LCD_State_WELCOME(void){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font20);
 80009e8:	480a      	ldr	r0, [pc, #40]	; (8000a14 <LCD_State_WELCOME+0x30>)
 80009ea:	f002 fe6f 	bl	80036cc <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80009ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009f2:	f002 fe53 	bl	800369c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5,(uint8_t *)"FERpong");
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <LCD_State_WELCOME+0x34>)
 80009f8:	2005      	movs	r0, #5
 80009fa:	f002 ffc1 	bl	8003980 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(8,(uint8_t *)"pritisni start");
 80009fe:	4907      	ldr	r1, [pc, #28]	; (8000a1c <LCD_State_WELCOME+0x38>)
 8000a00:	2008      	movs	r0, #8
 8000a02:	f002 ffbd 	bl	8003980 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(9,(uint8_t *)">");
 8000a06:	4906      	ldr	r1, [pc, #24]	; (8000a20 <LCD_State_WELCOME+0x3c>)
 8000a08:	2009      	movs	r0, #9
 8000a0a:	f002 ffb9 	bl	8003980 <BSP_LCD_DisplayStringAtLine>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000048 	.word	0x20000048
 8000a18:	08009ef0 	.word	0x08009ef0
 8000a1c:	08009ef8 	.word	0x08009ef8
 8000a20:	08009f08 	.word	0x08009f08

08000a24 <LCD_State_NUM_OF_PLAYERS>:


//displays the NUM_OF_PLAYERS screen on the LCD
void LCD_State_NUM_OF_PLAYERS(void){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	sprintf(lcd_handler.num_of_players_print, "%d", lcd_handler.num_of_players);
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <LCD_State_NUM_OF_PLAYERS+0x70>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	491a      	ldr	r1, [pc, #104]	; (8000a98 <LCD_State_NUM_OF_PLAYERS+0x74>)
 8000a30:	481a      	ldr	r0, [pc, #104]	; (8000a9c <LCD_State_NUM_OF_PLAYERS+0x78>)
 8000a32:	f008 fe21 	bl	8009678 <siprintf>

	BSP_LCD_Clear(BGCOLOR);
 8000a36:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000a3a:	f002 fe77 	bl	800372c <BSP_LCD_Clear>

	BSP_LCD_SetFont(&Font20);
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <LCD_State_NUM_OF_PLAYERS+0x7c>)
 8000a40:	f002 fe44 	bl	80036cc <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(2,(uint8_t *)"odabir igraca");
 8000a44:	4917      	ldr	r1, [pc, #92]	; (8000aa4 <LCD_State_NUM_OF_PLAYERS+0x80>)
 8000a46:	2002      	movs	r0, #2
 8000a48:	f002 ff9a 	bl	8003980 <BSP_LCD_DisplayStringAtLine>


	BSP_LCD_SetFont(&Font24);
 8000a4c:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <LCD_State_NUM_OF_PLAYERS+0x84>)
 8000a4e:	f002 fe3d 	bl	80036cc <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(5,(uint8_t *)lcd_handler.num_of_players_print);
 8000a52:	4912      	ldr	r1, [pc, #72]	; (8000a9c <LCD_State_NUM_OF_PLAYERS+0x78>)
 8000a54:	2005      	movs	r0, #5
 8000a56:	f002 ff93 	bl	8003980 <BSP_LCD_DisplayStringAtLine>

	BSP_LCD_SetFont(&Font12);
 8000a5a:	4814      	ldr	r0, [pc, #80]	; (8000aac <LCD_State_NUM_OF_PLAYERS+0x88>)
 8000a5c:	f002 fe36 	bl	80036cc <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(17,(uint8_t *)"pritisni + za dodavanje igraca");
 8000a60:	4913      	ldr	r1, [pc, #76]	; (8000ab0 <LCD_State_NUM_OF_PLAYERS+0x8c>)
 8000a62:	2011      	movs	r0, #17
 8000a64:	f002 ff8c 	bl	8003980 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(18,(uint8_t *)"pritisni - za uklanjanje igraca");
 8000a68:	4912      	ldr	r1, [pc, #72]	; (8000ab4 <LCD_State_NUM_OF_PLAYERS+0x90>)
 8000a6a:	2012      	movs	r0, #18
 8000a6c:	f002 ff88 	bl	8003980 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(20,(uint8_t *)"max broj igraca je 6");
 8000a70:	4911      	ldr	r1, [pc, #68]	; (8000ab8 <LCD_State_NUM_OF_PLAYERS+0x94>)
 8000a72:	2014      	movs	r0, #20
 8000a74:	f002 ff84 	bl	8003980 <BSP_LCD_DisplayStringAtLine>

	BSP_LCD_SetFont(&Font16);
 8000a78:	4810      	ldr	r0, [pc, #64]	; (8000abc <LCD_State_NUM_OF_PLAYERS+0x98>)
 8000a7a:	f002 fe27 	bl	80036cc <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(17,(uint8_t *)"pritisni start ");
 8000a7e:	4910      	ldr	r1, [pc, #64]	; (8000ac0 <LCD_State_NUM_OF_PLAYERS+0x9c>)
 8000a80:	2011      	movs	r0, #17
 8000a82:	f002 ff7d 	bl	8003980 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(18,(uint8_t *)"za pocetak igre");
 8000a86:	490f      	ldr	r1, [pc, #60]	; (8000ac4 <LCD_State_NUM_OF_PLAYERS+0xa0>)
 8000a88:	2012      	movs	r0, #18
 8000a8a:	f002 ff79 	bl	8003980 <BSP_LCD_DisplayStringAtLine>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200002a4 	.word	0x200002a4
 8000a98:	08009eec 	.word	0x08009eec
 8000a9c:	200002a5 	.word	0x200002a5
 8000aa0:	20000048 	.word	0x20000048
 8000aa4:	08009f0c 	.word	0x08009f0c
 8000aa8:	20000040 	.word	0x20000040
 8000aac:	20000058 	.word	0x20000058
 8000ab0:	08009f1c 	.word	0x08009f1c
 8000ab4:	08009f3c 	.word	0x08009f3c
 8000ab8:	08009f5c 	.word	0x08009f5c
 8000abc:	20000050 	.word	0x20000050
 8000ac0:	08009f74 	.word	0x08009f74
 8000ac4:	08009f84 	.word	0x08009f84

08000ac8 <LCD_State_WIN>:



//displays the WIN screen on the LCD
void LCD_State_WIN(void){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_GREEN);
 8000ace:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000ad2:	f002 fe2b 	bl	800372c <BSP_LCD_Clear>
	char wintext[25];
	sprintf(wintext,"igrac %ld!", lcd_handler.winner);
 8000ad6:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <LCD_State_WIN+0xe8>)
 8000ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ada:	463b      	mov	r3, r7
 8000adc:	4935      	ldr	r1, [pc, #212]	; (8000bb4 <LCD_State_WIN+0xec>)
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 fdca 	bl	8009678 <siprintf>

	BSP_LCD_SetFont(&Font24);
 8000ae4:	4834      	ldr	r0, [pc, #208]	; (8000bb8 <LCD_State_WIN+0xf0>)
 8000ae6:	f002 fdf1 	bl	80036cc <BSP_LCD_SetFont>
	for(uint32_t i=0; i<10; i++){
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	e056      	b.n	8000b9e <LCD_State_WIN+0xd6>
		switch(lcd_handler.winner){
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <LCD_State_WIN+0xe8>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	3b01      	subs	r3, #1
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d829      	bhi.n	8000b4e <LCD_State_WIN+0x86>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <LCD_State_WIN+0x38>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b19 	.word	0x08000b19
 8000b04:	08000b21 	.word	0x08000b21
 8000b08:	08000b2b 	.word	0x08000b2b
 8000b0c:	08000b35 	.word	0x08000b35
 8000b10:	08000b3d 	.word	0x08000b3d
 8000b14:	08000b45 	.word	0x08000b45
			case 1:
				BSP_LCD_Clear(LCD_COLOR_RED);
 8000b18:	4828      	ldr	r0, [pc, #160]	; (8000bbc <LCD_State_WIN+0xf4>)
 8000b1a:	f002 fe07 	bl	800372c <BSP_LCD_Clear>
				break;
 8000b1e:	e017      	b.n	8000b50 <LCD_State_WIN+0x88>
			case 2:
				BSP_LCD_Clear(LCD_COLOR_GREEN);
 8000b20:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000b24:	f002 fe02 	bl	800372c <BSP_LCD_Clear>
				break;
 8000b28:	e012      	b.n	8000b50 <LCD_State_WIN+0x88>
			case 3:
				BSP_LCD_Clear(LCD_COLOR_MAGENTA);
 8000b2a:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8000b2e:	f002 fdfd 	bl	800372c <BSP_LCD_Clear>
				break;
 8000b32:	e00d      	b.n	8000b50 <LCD_State_WIN+0x88>
			case 4:
				BSP_LCD_Clear(LCD_COLOR_ORANGE);
 8000b34:	4822      	ldr	r0, [pc, #136]	; (8000bc0 <LCD_State_WIN+0xf8>)
 8000b36:	f002 fdf9 	bl	800372c <BSP_LCD_Clear>
				break;
 8000b3a:	e009      	b.n	8000b50 <LCD_State_WIN+0x88>
			case 5:
				BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000b3c:	4821      	ldr	r0, [pc, #132]	; (8000bc4 <LCD_State_WIN+0xfc>)
 8000b3e:	f002 fdf5 	bl	800372c <BSP_LCD_Clear>
				break;
 8000b42:	e005      	b.n	8000b50 <LCD_State_WIN+0x88>
			case 6:
				BSP_LCD_Clear(LCD_COLOR_YELLOW);
 8000b44:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000b48:	f002 fdf0 	bl	800372c <BSP_LCD_Clear>
				break;
 8000b4c:	e000      	b.n	8000b50 <LCD_State_WIN+0x88>
			default:
				break;
 8000b4e:	bf00      	nop

		}

		BSP_LCD_DisplayStringAt(0, 150,(uint8_t *)"pobjednik je", CENTER_MODE);
 8000b50:	2301      	movs	r3, #1
 8000b52:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <LCD_State_WIN+0x100>)
 8000b54:	2196      	movs	r1, #150	; 0x96
 8000b56:	2000      	movs	r0, #0
 8000b58:	f002 fe54 	bl	8003804 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 180,(uint8_t *)wintext, CENTER_MODE);
 8000b5c:	463a      	mov	r2, r7
 8000b5e:	2301      	movs	r3, #1
 8000b60:	21b4      	movs	r1, #180	; 0xb4
 8000b62:	2000      	movs	r0, #0
 8000b64:	f002 fe4e 	bl	8003804 <BSP_LCD_DisplayStringAt>
		HAL_Delay(500);
 8000b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6c:	f003 fbb4 	bl	80042d8 <HAL_Delay>
		BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8000b70:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000b74:	f002 fdda 	bl	800372c <BSP_LCD_Clear>
		BSP_LCD_DisplayStringAt(0, 150,(uint8_t *)"pobjednik je", CENTER_MODE);
 8000b78:	2301      	movs	r3, #1
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <LCD_State_WIN+0x100>)
 8000b7c:	2196      	movs	r1, #150	; 0x96
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f002 fe40 	bl	8003804 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 180,(uint8_t *)wintext, CENTER_MODE);
 8000b84:	463a      	mov	r2, r7
 8000b86:	2301      	movs	r3, #1
 8000b88:	21b4      	movs	r1, #180	; 0xb4
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f002 fe3a 	bl	8003804 <BSP_LCD_DisplayStringAt>
		HAL_Delay(500);
 8000b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b94:	f003 fba0 	bl	80042d8 <HAL_Delay>
	for(uint32_t i=0; i<10; i++){
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	2b09      	cmp	r3, #9
 8000ba2:	d9a5      	bls.n	8000af0 <LCD_State_WIN+0x28>
	}
	MDL_LCD_Init();
 8000ba4:	f7ff fe8a 	bl	80008bc <MDL_LCD_Init>
}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200002a4 	.word	0x200002a4
 8000bb4:	08009f94 	.word	0x08009f94
 8000bb8:	20000040 	.word	0x20000040
 8000bbc:	ffff0000 	.word	0xffff0000
 8000bc0:	ffffa500 	.word	0xffffa500
 8000bc4:	ff0000ff 	.word	0xff0000ff
 8000bc8:	08009fa0 	.word	0x08009fa0

08000bcc <LCD_State_PLAYERS>:



//displays the PLAYERx screen on the LCD
void LCD_State_PLAYERS(void){
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(BGCOLOR);
 8000bd2:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000bd6:	f002 fda9 	bl	800372c <BSP_LCD_Clear>
	switch(lcd_handler.num_of_players){
 8000bda:	4bca      	ldr	r3, [pc, #808]	; (8000f04 <LCD_State_PLAYERS+0x338>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	3b02      	subs	r3, #2
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	f200 84b9 	bhi.w	8001558 <LCD_State_PLAYERS+0x98c>
 8000be6:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <LCD_State_PLAYERS+0x20>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000c01 	.word	0x08000c01
 8000bf0:	08000d0b 	.word	0x08000d0b
 8000bf4:	08000ea3 	.word	0x08000ea3
 8000bf8:	080010e9 	.word	0x080010e9
 8000bfc:	08001335 	.word	0x08001335
		case 2:
			switch(lcd_handler.game_state){
 8000c00:	4bc0      	ldr	r3, [pc, #768]	; (8000f04 <LCD_State_PLAYERS+0x338>)
 8000c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d002      	beq.n	8000c10 <LCD_State_PLAYERS+0x44>
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d01b      	beq.n	8000c46 <LCD_State_PLAYERS+0x7a>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2);
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
					break;
				default:
					break;
 8000c0e:	e03b      	b.n	8000c88 <LCD_State_PLAYERS+0xbc>
					BSP_LCD_Clear(BGCOLOR);
 8000c10:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000c14:	f002 fd8a 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000c18:	48bb      	ldr	r0, [pc, #748]	; (8000f08 <LCD_State_PLAYERS+0x33c>)
 8000c1a:	f002 fd3f 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2);
 8000c1e:	f002 fcb1 	bl	8003584 <BSP_LCD_GetXSize>
 8000c22:	4603      	mov	r3, r0
 8000c24:	085b      	lsrs	r3, r3, #1
 8000c26:	b29c      	uxth	r4, r3
 8000c28:	f002 fcb8 	bl	800359c <BSP_LCD_GetYSize>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	085b      	lsrs	r3, r3, #1
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4622      	mov	r2, r4
 8000c34:	2100      	movs	r1, #0
 8000c36:	2000      	movs	r0, #0
 8000c38:	f002 feba 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c3c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c40:	f002 fd2c 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8000c44:	e020      	b.n	8000c88 <LCD_State_PLAYERS+0xbc>
					BSP_LCD_Clear(BGCOLOR);
 8000c46:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000c4a:	f002 fd6f 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000c4e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000c52:	f002 fd23 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2);
 8000c56:	f002 fc95 	bl	8003584 <BSP_LCD_GetXSize>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	085b      	lsrs	r3, r3, #1
 8000c5e:	b29c      	uxth	r4, r3
 8000c60:	f002 fc90 	bl	8003584 <BSP_LCD_GetXSize>
 8000c64:	4603      	mov	r3, r0
 8000c66:	085b      	lsrs	r3, r3, #1
 8000c68:	b29d      	uxth	r5, r3
 8000c6a:	f002 fc97 	bl	800359c <BSP_LCD_GetYSize>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	085b      	lsrs	r3, r3, #1
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	462a      	mov	r2, r5
 8000c76:	2100      	movs	r1, #0
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f002 fe99 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c7e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c82:	f002 fd0b 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8000c86:	bf00      	nop
			}
			BSP_LCD_SetFont(&Font20);
 8000c88:	48a0      	ldr	r0, [pc, #640]	; (8000f0c <LCD_State_PLAYERS+0x340>)
 8000c8a:	f002 fd1f 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8000c8e:	2303      	movs	r3, #3
 8000c90:	4a9f      	ldr	r2, [pc, #636]	; (8000f10 <LCD_State_PLAYERS+0x344>)
 8000c92:	210a      	movs	r1, #10
 8000c94:	200a      	movs	r0, #10
 8000c96:	f002 fdb5 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	4a9d      	ldr	r2, [pc, #628]	; (8000f14 <LCD_State_PLAYERS+0x348>)
 8000c9e:	210a      	movs	r1, #10
 8000ca0:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000ca4:	f002 fdae 	bl	8003804 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font24);
 8000ca8:	489b      	ldr	r0, [pc, #620]	; (8000f18 <LCD_State_PLAYERS+0x34c>)
 8000caa:	f002 fd0f 	bl	80036cc <BSP_LCD_SetFont>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[0].mL);
 8000cae:	4b95      	ldr	r3, [pc, #596]	; (8000f04 <LCD_State_PLAYERS+0x338>)
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4999      	ldr	r1, [pc, #612]	; (8000f1c <LCD_State_PLAYERS+0x350>)
 8000cb6:	489a      	ldr	r0, [pc, #616]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000cb8:	f008 fcde 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(10, 60,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	4a98      	ldr	r2, [pc, #608]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000cc0:	213c      	movs	r1, #60	; 0x3c
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f002 fd9e 	bl	8003804 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[1].mL);
 8000cc8:	4b8e      	ldr	r3, [pc, #568]	; (8000f04 <LCD_State_PLAYERS+0x338>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4993      	ldr	r1, [pc, #588]	; (8000f1c <LCD_State_PLAYERS+0x350>)
 8000cd0:	4893      	ldr	r0, [pc, #588]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000cd2:	f008 fcd1 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 60,(uint8_t *)lcd_handler.mLs_of_players_print, RIGHT_MODE);
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	4a91      	ldr	r2, [pc, #580]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000cda:	213c      	movs	r1, #60	; 0x3c
 8000cdc:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000ce0:	f002 fd90 	bl	8003804 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font16);
 8000ce4:	488f      	ldr	r0, [pc, #572]	; (8000f24 <LCD_State_PLAYERS+0x358>)
 8000ce6:	f002 fcf1 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 8000cea:	2301      	movs	r3, #1
 8000cec:	4a8e      	ldr	r2, [pc, #568]	; (8000f28 <LCD_State_PLAYERS+0x35c>)
 8000cee:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f002 fd86 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	4a8c      	ldr	r2, [pc, #560]	; (8000f2c <LCD_State_PLAYERS+0x360>)
 8000cfc:	f240 1127 	movw	r1, #295	; 0x127
 8000d00:	2000      	movs	r0, #0
 8000d02:	f002 fd7f 	bl	8003804 <BSP_LCD_DisplayStringAt>

			break;
 8000d06:	f000 bc28 	b.w	800155a <LCD_State_PLAYERS+0x98e>

		case 3:
			switch(lcd_handler.game_state){
 8000d0a:	4b7e      	ldr	r3, [pc, #504]	; (8000f04 <LCD_State_PLAYERS+0x338>)
 8000d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d046      	beq.n	8000da2 <LCD_State_PLAYERS+0x1d6>
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	dc70      	bgt.n	8000dfa <LCD_State_PLAYERS+0x22e>
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d002      	beq.n	8000d22 <LCD_State_PLAYERS+0x156>
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d01d      	beq.n	8000d5c <LCD_State_PLAYERS+0x190>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2-60,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-25);
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
					break;
				default:
					break;
 8000d20:	e06b      	b.n	8000dfa <LCD_State_PLAYERS+0x22e>
					BSP_LCD_Clear(BGCOLOR);
 8000d22:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000d26:	f002 fd01 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000d2a:	4877      	ldr	r0, [pc, #476]	; (8000f08 <LCD_State_PLAYERS+0x33c>)
 8000d2c:	f002 fcb6 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000d30:	f002 fc28 	bl	8003584 <BSP_LCD_GetXSize>
 8000d34:	4603      	mov	r3, r0
 8000d36:	085b      	lsrs	r3, r3, #1
 8000d38:	b29c      	uxth	r4, r3
 8000d3a:	f002 fc2f 	bl	800359c <BSP_LCD_GetYSize>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	085b      	lsrs	r3, r3, #1
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	3b14      	subs	r3, #20
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4622      	mov	r2, r4
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f002 fe2f 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d52:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000d56:	f002 fca1 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8000d5a:	e04f      	b.n	8000dfc <LCD_State_PLAYERS+0x230>
					BSP_LCD_Clear(BGCOLOR);
 8000d5c:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000d60:	f002 fce4 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000d64:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000d68:	f002 fc98 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000d6c:	f002 fc0a 	bl	8003584 <BSP_LCD_GetXSize>
 8000d70:	4603      	mov	r3, r0
 8000d72:	085b      	lsrs	r3, r3, #1
 8000d74:	b29c      	uxth	r4, r3
 8000d76:	f002 fc05 	bl	8003584 <BSP_LCD_GetXSize>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	085b      	lsrs	r3, r3, #1
 8000d7e:	b29d      	uxth	r5, r3
 8000d80:	f002 fc0c 	bl	800359c <BSP_LCD_GetYSize>
 8000d84:	4603      	mov	r3, r0
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	3b14      	subs	r3, #20
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	462a      	mov	r2, r5
 8000d90:	2100      	movs	r1, #0
 8000d92:	4620      	mov	r0, r4
 8000d94:	f002 fe0c 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d98:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000d9c:	f002 fc7e 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8000da0:	e02c      	b.n	8000dfc <LCD_State_PLAYERS+0x230>
					BSP_LCD_Clear(BGCOLOR);
 8000da2:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000da6:	f002 fcc1 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000daa:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8000dae:	f002 fc75 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2-60,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-25);
 8000db2:	f002 fbe7 	bl	8003584 <BSP_LCD_GetXSize>
 8000db6:	4603      	mov	r3, r0
 8000db8:	085b      	lsrs	r3, r3, #1
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	3b3c      	subs	r3, #60	; 0x3c
 8000dbe:	b29c      	uxth	r4, r3
 8000dc0:	f002 fbec 	bl	800359c <BSP_LCD_GetYSize>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	085b      	lsrs	r3, r3, #1
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	3b14      	subs	r3, #20
 8000dcc:	b29d      	uxth	r5, r3
 8000dce:	f002 fbd9 	bl	8003584 <BSP_LCD_GetXSize>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	b29e      	uxth	r6, r3
 8000dd8:	f002 fbe0 	bl	800359c <BSP_LCD_GetYSize>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	3b19      	subs	r3, #25
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	4632      	mov	r2, r6
 8000de8:	4629      	mov	r1, r5
 8000dea:	4620      	mov	r0, r4
 8000dec:	f002 fde0 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000df0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000df4:	f002 fc52 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8000df8:	e000      	b.n	8000dfc <LCD_State_PLAYERS+0x230>
					break;
 8000dfa:	bf00      	nop

			}
			BSP_LCD_SetFont(&Font20);
 8000dfc:	4843      	ldr	r0, [pc, #268]	; (8000f0c <LCD_State_PLAYERS+0x340>)
 8000dfe:	f002 fc65 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8000e02:	2303      	movs	r3, #3
 8000e04:	4a42      	ldr	r2, [pc, #264]	; (8000f10 <LCD_State_PLAYERS+0x344>)
 8000e06:	210a      	movs	r1, #10
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f002 fcfb 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8000e0e:	2302      	movs	r3, #2
 8000e10:	4a40      	ldr	r2, [pc, #256]	; (8000f14 <LCD_State_PLAYERS+0x348>)
 8000e12:	210a      	movs	r1, #10
 8000e14:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000e18:	f002 fcf4 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)"igrac 3", CENTER_MODE);
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	4a44      	ldr	r2, [pc, #272]	; (8000f30 <LCD_State_PLAYERS+0x364>)
 8000e20:	2196      	movs	r1, #150	; 0x96
 8000e22:	2000      	movs	r0, #0
 8000e24:	f002 fcee 	bl	8003804 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font24);
 8000e28:	483b      	ldr	r0, [pc, #236]	; (8000f18 <LCD_State_PLAYERS+0x34c>)
 8000e2a:	f002 fc4f 	bl	80036cc <BSP_LCD_SetFont>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[0].mL);
 8000e2e:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <LCD_State_PLAYERS+0x338>)
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4939      	ldr	r1, [pc, #228]	; (8000f1c <LCD_State_PLAYERS+0x350>)
 8000e36:	483a      	ldr	r0, [pc, #232]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000e38:	f008 fc1e 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(10, 60,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	4a38      	ldr	r2, [pc, #224]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000e40:	213c      	movs	r1, #60	; 0x3c
 8000e42:	200a      	movs	r0, #10
 8000e44:	f002 fcde 	bl	8003804 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[1].mL);
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <LCD_State_PLAYERS+0x338>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4933      	ldr	r1, [pc, #204]	; (8000f1c <LCD_State_PLAYERS+0x350>)
 8000e50:	4833      	ldr	r0, [pc, #204]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000e52:	f008 fc11 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 60,(uint8_t *)lcd_handler.mLs_of_players_print, RIGHT_MODE);
 8000e56:	2302      	movs	r3, #2
 8000e58:	4a31      	ldr	r2, [pc, #196]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000e5a:	213c      	movs	r1, #60	; 0x3c
 8000e5c:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000e60:	f002 fcd0 	bl	8003804 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[2].mL);
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <LCD_State_PLAYERS+0x338>)
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	492c      	ldr	r1, [pc, #176]	; (8000f1c <LCD_State_PLAYERS+0x350>)
 8000e6c:	482c      	ldr	r0, [pc, #176]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000e6e:	f008 fc03 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(0, 200,(uint8_t *)lcd_handler.mLs_of_players_print, CENTER_MODE);
 8000e72:	2301      	movs	r3, #1
 8000e74:	4a2a      	ldr	r2, [pc, #168]	; (8000f20 <LCD_State_PLAYERS+0x354>)
 8000e76:	21c8      	movs	r1, #200	; 0xc8
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f002 fcc3 	bl	8003804 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font16);
 8000e7e:	4829      	ldr	r0, [pc, #164]	; (8000f24 <LCD_State_PLAYERS+0x358>)
 8000e80:	f002 fc24 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 8000e84:	2301      	movs	r3, #1
 8000e86:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <LCD_State_PLAYERS+0x35c>)
 8000e88:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f002 fcb9 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8000e92:	2301      	movs	r3, #1
 8000e94:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <LCD_State_PLAYERS+0x360>)
 8000e96:	f240 1127 	movw	r1, #295	; 0x127
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f002 fcb2 	bl	8003804 <BSP_LCD_DisplayStringAt>

			break;
 8000ea0:	e35b      	b.n	800155a <LCD_State_PLAYERS+0x98e>

		case 4:
			switch(lcd_handler.game_state){
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <LCD_State_PLAYERS+0x338>)
 8000ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	f200 80b3 	bhi.w	8001016 <LCD_State_PLAYERS+0x44a>
 8000eb0:	a201      	add	r2, pc, #4	; (adr r2, 8000eb8 <LCD_State_PLAYERS+0x2ec>)
 8000eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb6:	bf00      	nop
 8000eb8:	08000ec9 	.word	0x08000ec9
 8000ebc:	08000f35 	.word	0x08000f35
 8000ec0:	08000f7b 	.word	0x08000f7b
 8000ec4:	08000fc5 	.word	0x08000fc5
				case PLAYER1:
					BSP_LCD_Clear(BGCOLOR);
 8000ec8:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000ecc:	f002 fc2e 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LCD_State_PLAYERS+0x33c>)
 8000ed2:	f002 fbe3 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000ed6:	f002 fb55 	bl	8003584 <BSP_LCD_GetXSize>
 8000eda:	4603      	mov	r3, r0
 8000edc:	085b      	lsrs	r3, r3, #1
 8000ede:	b29c      	uxth	r4, r3
 8000ee0:	f002 fb5c 	bl	800359c <BSP_LCD_GetYSize>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3b14      	subs	r3, #20
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4622      	mov	r2, r4
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f002 fd5c 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000ef8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000efc:	f002 fbce 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8000f00:	e08a      	b.n	8001018 <LCD_State_PLAYERS+0x44c>
 8000f02:	bf00      	nop
 8000f04:	200002a4 	.word	0x200002a4
 8000f08:	ffff0000 	.word	0xffff0000
 8000f0c:	20000048 	.word	0x20000048
 8000f10:	08009fb0 	.word	0x08009fb0
 8000f14:	08009fb8 	.word	0x08009fb8
 8000f18:	20000040 	.word	0x20000040
 8000f1c:	08009fc0 	.word	0x08009fc0
 8000f20:	200002a7 	.word	0x200002a7
 8000f24:	20000050 	.word	0x20000050
 8000f28:	08009fc8 	.word	0x08009fc8
 8000f2c:	08009fd8 	.word	0x08009fd8
 8000f30:	08009fe8 	.word	0x08009fe8
				case PLAYER2:
					BSP_LCD_Clear(BGCOLOR);
 8000f34:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000f38:	f002 fbf8 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000f3c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000f40:	f002 fbac 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000f44:	f002 fb1e 	bl	8003584 <BSP_LCD_GetXSize>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	085b      	lsrs	r3, r3, #1
 8000f4c:	b29c      	uxth	r4, r3
 8000f4e:	f002 fb19 	bl	8003584 <BSP_LCD_GetXSize>
 8000f52:	4603      	mov	r3, r0
 8000f54:	085b      	lsrs	r3, r3, #1
 8000f56:	b29d      	uxth	r5, r3
 8000f58:	f002 fb20 	bl	800359c <BSP_LCD_GetYSize>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	085b      	lsrs	r3, r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	3b14      	subs	r3, #20
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	462a      	mov	r2, r5
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f002 fd20 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f70:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f74:	f002 fb92 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8000f78:	e04e      	b.n	8001018 <LCD_State_PLAYERS+0x44c>
				case PLAYER3:
					BSP_LCD_Clear(BGCOLOR);
 8000f7a:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000f7e:	f002 fbd5 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000f82:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8000f86:	f002 fb89 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000f8a:	f002 fb07 	bl	800359c <BSP_LCD_GetYSize>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	085b      	lsrs	r3, r3, #1
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3b14      	subs	r3, #20
 8000f96:	b29c      	uxth	r4, r3
 8000f98:	f002 faf4 	bl	8003584 <BSP_LCD_GetXSize>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	b29d      	uxth	r5, r3
 8000fa2:	f002 fafb 	bl	800359c <BSP_LCD_GetYSize>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	085b      	lsrs	r3, r3, #1
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3b14      	subs	r3, #20
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	462a      	mov	r2, r5
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f002 fcfb 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fbe:	f002 fb6d 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8000fc2:	e029      	b.n	8001018 <LCD_State_PLAYERS+0x44c>
				case PLAYER4:
					BSP_LCD_Clear(BGCOLOR);
 8000fc4:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000fc8:	f002 fbb0 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8000fcc:	48c9      	ldr	r0, [pc, #804]	; (80012f4 <LCD_State_PLAYERS+0x728>)
 8000fce:	f002 fb65 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000fd2:	f002 fad7 	bl	8003584 <BSP_LCD_GetXSize>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	085b      	lsrs	r3, r3, #1
 8000fda:	b29c      	uxth	r4, r3
 8000fdc:	f002 fade 	bl	800359c <BSP_LCD_GetYSize>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	085b      	lsrs	r3, r3, #1
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3b14      	subs	r3, #20
 8000fe8:	b29d      	uxth	r5, r3
 8000fea:	f002 facb 	bl	8003584 <BSP_LCD_GetXSize>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	085b      	lsrs	r3, r3, #1
 8000ff2:	b29e      	uxth	r6, r3
 8000ff4:	f002 fad2 	bl	800359c <BSP_LCD_GetYSize>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	085b      	lsrs	r3, r3, #1
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3b14      	subs	r3, #20
 8001000:	b29b      	uxth	r3, r3
 8001002:	4632      	mov	r2, r6
 8001004:	4629      	mov	r1, r5
 8001006:	4620      	mov	r0, r4
 8001008:	f002 fcd2 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800100c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001010:	f002 fb44 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8001014:	e000      	b.n	8001018 <LCD_State_PLAYERS+0x44c>

				default:
					break;
 8001016:	bf00      	nop
			}

			BSP_LCD_SetFont(&Font20);
 8001018:	48b7      	ldr	r0, [pc, #732]	; (80012f8 <LCD_State_PLAYERS+0x72c>)
 800101a:	f002 fb57 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 800101e:	2303      	movs	r3, #3
 8001020:	4ab6      	ldr	r2, [pc, #728]	; (80012fc <LCD_State_PLAYERS+0x730>)
 8001022:	210a      	movs	r1, #10
 8001024:	200a      	movs	r0, #10
 8001026:	f002 fbed 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 800102a:	2302      	movs	r3, #2
 800102c:	4ab4      	ldr	r2, [pc, #720]	; (8001300 <LCD_State_PLAYERS+0x734>)
 800102e:	210a      	movs	r1, #10
 8001030:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001034:	f002 fbe6 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(10, 150, (uint8_t *)"igrac 3", LEFT_MODE);
 8001038:	2303      	movs	r3, #3
 800103a:	4ab2      	ldr	r2, [pc, #712]	; (8001304 <LCD_State_PLAYERS+0x738>)
 800103c:	2196      	movs	r1, #150	; 0x96
 800103e:	200a      	movs	r0, #10
 8001040:	f002 fbe0 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 150, (uint8_t *)"igrac 4", RIGHT_MODE);
 8001044:	2302      	movs	r3, #2
 8001046:	4ab0      	ldr	r2, [pc, #704]	; (8001308 <LCD_State_PLAYERS+0x73c>)
 8001048:	2196      	movs	r1, #150	; 0x96
 800104a:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 800104e:	f002 fbd9 	bl	8003804 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font24);
 8001052:	48ae      	ldr	r0, [pc, #696]	; (800130c <LCD_State_PLAYERS+0x740>)
 8001054:	f002 fb3a 	bl	80036cc <BSP_LCD_SetFont>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[0].mL);
 8001058:	4bad      	ldr	r3, [pc, #692]	; (8001310 <LCD_State_PLAYERS+0x744>)
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	461a      	mov	r2, r3
 800105e:	49ad      	ldr	r1, [pc, #692]	; (8001314 <LCD_State_PLAYERS+0x748>)
 8001060:	48ad      	ldr	r0, [pc, #692]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 8001062:	f008 fb09 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(10, 60,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 8001066:	2303      	movs	r3, #3
 8001068:	4aab      	ldr	r2, [pc, #684]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 800106a:	213c      	movs	r1, #60	; 0x3c
 800106c:	200a      	movs	r0, #10
 800106e:	f002 fbc9 	bl	8003804 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[1].mL);
 8001072:	4ba7      	ldr	r3, [pc, #668]	; (8001310 <LCD_State_PLAYERS+0x744>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	461a      	mov	r2, r3
 8001078:	49a6      	ldr	r1, [pc, #664]	; (8001314 <LCD_State_PLAYERS+0x748>)
 800107a:	48a7      	ldr	r0, [pc, #668]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 800107c:	f008 fafc 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 60,(uint8_t *)lcd_handler.mLs_of_players_print, RIGHT_MODE);
 8001080:	2302      	movs	r3, #2
 8001082:	4aa5      	ldr	r2, [pc, #660]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 8001084:	213c      	movs	r1, #60	; 0x3c
 8001086:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 800108a:	f002 fbbb 	bl	8003804 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[2].mL);
 800108e:	4ba0      	ldr	r3, [pc, #640]	; (8001310 <LCD_State_PLAYERS+0x744>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	461a      	mov	r2, r3
 8001094:	499f      	ldr	r1, [pc, #636]	; (8001314 <LCD_State_PLAYERS+0x748>)
 8001096:	48a0      	ldr	r0, [pc, #640]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 8001098:	f008 faee 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(10, 200,(uint8_t *)lcd_handler.mLs_of_players_print, LEFT_MODE);
 800109c:	2303      	movs	r3, #3
 800109e:	4a9e      	ldr	r2, [pc, #632]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 80010a0:	21c8      	movs	r1, #200	; 0xc8
 80010a2:	200a      	movs	r0, #10
 80010a4:	f002 fbae 	bl	8003804 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[3].mL);
 80010a8:	4b99      	ldr	r3, [pc, #612]	; (8001310 <LCD_State_PLAYERS+0x744>)
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	461a      	mov	r2, r3
 80010ae:	4999      	ldr	r1, [pc, #612]	; (8001314 <LCD_State_PLAYERS+0x748>)
 80010b0:	4899      	ldr	r0, [pc, #612]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 80010b2:	f008 fae1 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 200,(uint8_t *)lcd_handler.mLs_of_players_print, RIGHT_MODE);
 80010b6:	2302      	movs	r3, #2
 80010b8:	4a97      	ldr	r2, [pc, #604]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 80010ba:	21c8      	movs	r1, #200	; 0xc8
 80010bc:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 80010c0:	f002 fba0 	bl	8003804 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font16);
 80010c4:	4895      	ldr	r0, [pc, #596]	; (800131c <LCD_State_PLAYERS+0x750>)
 80010c6:	f002 fb01 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 80010ca:	2301      	movs	r3, #1
 80010cc:	4a94      	ldr	r2, [pc, #592]	; (8001320 <LCD_State_PLAYERS+0x754>)
 80010ce:	f44f 718c 	mov.w	r1, #280	; 0x118
 80010d2:	2000      	movs	r0, #0
 80010d4:	f002 fb96 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 80010d8:	2301      	movs	r3, #1
 80010da:	4a92      	ldr	r2, [pc, #584]	; (8001324 <LCD_State_PLAYERS+0x758>)
 80010dc:	f240 1127 	movw	r1, #295	; 0x127
 80010e0:	2000      	movs	r0, #0
 80010e2:	f002 fb8f 	bl	8003804 <BSP_LCD_DisplayStringAt>

			break;
 80010e6:	e238      	b.n	800155a <LCD_State_PLAYERS+0x98e>

		case 5:
			switch(lcd_handler.game_state){
 80010e8:	4b89      	ldr	r3, [pc, #548]	; (8001310 <LCD_State_PLAYERS+0x744>)
 80010ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ee:	3b02      	subs	r3, #2
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d869      	bhi.n	80011c8 <LCD_State_PLAYERS+0x5fc>
 80010f4:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <LCD_State_PLAYERS+0x530>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	08001111 	.word	0x08001111
 8001100:	08001135 	.word	0x08001135
 8001104:	0800115b 	.word	0x0800115b
 8001108:	08001181 	.word	0x08001181
 800110c:	080011a5 	.word	0x080011a5
				case PLAYER1:
					BSP_LCD_Clear(BGCOLOR);
 8001110:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001114:	f002 fb0a 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001118:	4883      	ldr	r0, [pc, #524]	; (8001328 <LCD_State_PLAYERS+0x75c>)
 800111a:	f002 fabf 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,120, 80);
 800111e:	2350      	movs	r3, #80	; 0x50
 8001120:	2278      	movs	r2, #120	; 0x78
 8001122:	2100      	movs	r1, #0
 8001124:	2000      	movs	r0, #0
 8001126:	f002 fc43 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800112a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800112e:	f002 fab5 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8001132:	e04a      	b.n	80011ca <LCD_State_PLAYERS+0x5fe>
				case PLAYER2:
					BSP_LCD_Clear(BGCOLOR);
 8001134:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001138:	f002 faf8 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800113c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001140:	f002 faac 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,0,120, 80);
 8001144:	2350      	movs	r3, #80	; 0x50
 8001146:	2278      	movs	r2, #120	; 0x78
 8001148:	2100      	movs	r1, #0
 800114a:	2078      	movs	r0, #120	; 0x78
 800114c:	f002 fc30 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001150:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001154:	f002 faa2 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8001158:	e037      	b.n	80011ca <LCD_State_PLAYERS+0x5fe>
				case PLAYER3:
					BSP_LCD_Clear(BGCOLOR);
 800115a:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800115e:	f002 fae5 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001162:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001166:	f002 fa99 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,80+10,120, 80);
 800116a:	2350      	movs	r3, #80	; 0x50
 800116c:	2278      	movs	r2, #120	; 0x78
 800116e:	215a      	movs	r1, #90	; 0x5a
 8001170:	2000      	movs	r0, #0
 8001172:	f002 fc1d 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001176:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800117a:	f002 fa8f 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 800117e:	e024      	b.n	80011ca <LCD_State_PLAYERS+0x5fe>
				case PLAYER4:
					BSP_LCD_Clear(BGCOLOR);
 8001180:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001184:	f002 fad2 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001188:	485a      	ldr	r0, [pc, #360]	; (80012f4 <LCD_State_PLAYERS+0x728>)
 800118a:	f002 fa87 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,80+10,120, 80);
 800118e:	2350      	movs	r3, #80	; 0x50
 8001190:	2278      	movs	r2, #120	; 0x78
 8001192:	215a      	movs	r1, #90	; 0x5a
 8001194:	2078      	movs	r0, #120	; 0x78
 8001196:	f002 fc0b 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800119a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800119e:	f002 fa7d 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 80011a2:	e012      	b.n	80011ca <LCD_State_PLAYERS+0x5fe>
				case PLAYER5:
					BSP_LCD_Clear(BGCOLOR);
 80011a4:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80011a8:	f002 fac0 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80011ac:	485f      	ldr	r0, [pc, #380]	; (800132c <LCD_State_PLAYERS+0x760>)
 80011ae:	f002 fa75 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(60,160+20,120, 80);
 80011b2:	2350      	movs	r3, #80	; 0x50
 80011b4:	2278      	movs	r2, #120	; 0x78
 80011b6:	21b4      	movs	r1, #180	; 0xb4
 80011b8:	203c      	movs	r0, #60	; 0x3c
 80011ba:	f002 fbf9 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011be:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011c2:	f002 fa6b 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 80011c6:	e000      	b.n	80011ca <LCD_State_PLAYERS+0x5fe>

				default:
					break;
 80011c8:	bf00      	nop
			}


			BSP_LCD_SetFont(&Font16);
 80011ca:	4854      	ldr	r0, [pc, #336]	; (800131c <LCD_State_PLAYERS+0x750>)
 80011cc:	f002 fa7e 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 80011d0:	2303      	movs	r3, #3
 80011d2:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <LCD_State_PLAYERS+0x730>)
 80011d4:	210a      	movs	r1, #10
 80011d6:	200a      	movs	r0, #10
 80011d8:	f002 fb14 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 80011dc:	2302      	movs	r3, #2
 80011de:	4a48      	ldr	r2, [pc, #288]	; (8001300 <LCD_State_PLAYERS+0x734>)
 80011e0:	210a      	movs	r1, #10
 80011e2:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 80011e6:	f002 fb0d 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(10, 100, (uint8_t *)"igrac 3", LEFT_MODE);
 80011ea:	2303      	movs	r3, #3
 80011ec:	4a45      	ldr	r2, [pc, #276]	; (8001304 <LCD_State_PLAYERS+0x738>)
 80011ee:	2164      	movs	r1, #100	; 0x64
 80011f0:	200a      	movs	r0, #10
 80011f2:	f002 fb07 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 100, (uint8_t *)"igrac 4", RIGHT_MODE);
 80011f6:	2302      	movs	r3, #2
 80011f8:	4a43      	ldr	r2, [pc, #268]	; (8001308 <LCD_State_PLAYERS+0x73c>)
 80011fa:	2164      	movs	r1, #100	; 0x64
 80011fc:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001200:	f002 fb00 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 190, (uint8_t *)"igrac 5", CENTER_MODE);
 8001204:	2301      	movs	r3, #1
 8001206:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <LCD_State_PLAYERS+0x764>)
 8001208:	21be      	movs	r1, #190	; 0xbe
 800120a:	2000      	movs	r0, #0
 800120c:	f002 fafa 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetFont(&Font24);
 8001210:	483e      	ldr	r0, [pc, #248]	; (800130c <LCD_State_PLAYERS+0x740>)
 8001212:	f002 fa5b 	bl	80036cc <BSP_LCD_SetFont>

			for(uint32_t i =1; i<= lcd_handler.num_of_players-1; i=i+2){
 8001216:	2301      	movs	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	e01c      	b.n	8001256 <LCD_State_PLAYERS+0x68a>
				sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[i-1].mL);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3b01      	subs	r3, #1
 8001220:	4a3b      	ldr	r2, [pc, #236]	; (8001310 <LCD_State_PLAYERS+0x744>)
 8001222:	3301      	adds	r3, #1
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	461a      	mov	r2, r3
 800122c:	4939      	ldr	r1, [pc, #228]	; (8001314 <LCD_State_PLAYERS+0x748>)
 800122e:	483a      	ldr	r0, [pc, #232]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 8001230:	f008 fa22 	bl	8009678 <siprintf>
				BSP_LCD_DisplayStringAt(10, 10+90*(i-1)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	225a      	movs	r2, #90	; 0x5a
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	3b5a      	subs	r3, #90	; 0x5a
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	b29b      	uxth	r3, r3
 8001242:	332d      	adds	r3, #45	; 0x2d
 8001244:	b299      	uxth	r1, r3
 8001246:	2303      	movs	r3, #3
 8001248:	4a33      	ldr	r2, [pc, #204]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 800124a:	200a      	movs	r0, #10
 800124c:	f002 fada 	bl	8003804 <BSP_LCD_DisplayStringAt>
			for(uint32_t i =1; i<= lcd_handler.num_of_players-1; i=i+2){
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3302      	adds	r3, #2
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <LCD_State_PLAYERS+0x744>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	3b01      	subs	r3, #1
 800125c:	461a      	mov	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4293      	cmp	r3, r2
 8001262:	d9db      	bls.n	800121c <LCD_State_PLAYERS+0x650>
			}

			for(uint32_t i = 2; i<= lcd_handler.num_of_players-1; i=i+2){
 8001264:	2302      	movs	r3, #2
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	e01d      	b.n	80012a6 <LCD_State_PLAYERS+0x6da>
				sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[i-1].mL);
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	3b01      	subs	r3, #1
 800126e:	4a28      	ldr	r2, [pc, #160]	; (8001310 <LCD_State_PLAYERS+0x744>)
 8001270:	3301      	adds	r3, #1
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	461a      	mov	r2, r3
 800127a:	4926      	ldr	r1, [pc, #152]	; (8001314 <LCD_State_PLAYERS+0x748>)
 800127c:	4826      	ldr	r0, [pc, #152]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 800127e:	f008 f9fb 	bl	8009678 <siprintf>
				BSP_LCD_DisplayStringAt(-10, 10+90*(i-2)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,RIGHT_MODE);
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	225a      	movs	r2, #90	; 0x5a
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	3bb4      	subs	r3, #180	; 0xb4
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	b29b      	uxth	r3, r3
 8001290:	332d      	adds	r3, #45	; 0x2d
 8001292:	b299      	uxth	r1, r3
 8001294:	2302      	movs	r3, #2
 8001296:	4a20      	ldr	r2, [pc, #128]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 8001298:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 800129c:	f002 fab2 	bl	8003804 <BSP_LCD_DisplayStringAt>
			for(uint32_t i = 2; i<= lcd_handler.num_of_players-1; i=i+2){
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3302      	adds	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <LCD_State_PLAYERS+0x744>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	461a      	mov	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d9da      	bls.n	800126a <LCD_State_PLAYERS+0x69e>
			}

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[4].mL);
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <LCD_State_PLAYERS+0x744>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	461a      	mov	r2, r3
 80012ba:	4916      	ldr	r1, [pc, #88]	; (8001314 <LCD_State_PLAYERS+0x748>)
 80012bc:	4816      	ldr	r0, [pc, #88]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 80012be:	f008 f9db 	bl	8009678 <siprintf>
			BSP_LCD_DisplayStringAt(0, 10+90*(6-2)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,CENTER_MODE);
 80012c2:	2301      	movs	r3, #1
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <LCD_State_PLAYERS+0x74c>)
 80012c6:	21e1      	movs	r1, #225	; 0xe1
 80012c8:	2000      	movs	r0, #0
 80012ca:	f002 fa9b 	bl	8003804 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font16);
 80012ce:	4813      	ldr	r0, [pc, #76]	; (800131c <LCD_State_PLAYERS+0x750>)
 80012d0:	f002 f9fc 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 80012d4:	2301      	movs	r3, #1
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <LCD_State_PLAYERS+0x754>)
 80012d8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80012dc:	2000      	movs	r0, #0
 80012de:	f002 fa91 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 80012e2:	2301      	movs	r3, #1
 80012e4:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <LCD_State_PLAYERS+0x758>)
 80012e6:	f240 1127 	movw	r1, #295	; 0x127
 80012ea:	2000      	movs	r0, #0
 80012ec:	f002 fa8a 	bl	8003804 <BSP_LCD_DisplayStringAt>

		break;
 80012f0:	e133      	b.n	800155a <LCD_State_PLAYERS+0x98e>
 80012f2:	bf00      	nop
 80012f4:	ffffa500 	.word	0xffffa500
 80012f8:	20000048 	.word	0x20000048
 80012fc:	08009fb0 	.word	0x08009fb0
 8001300:	08009fb8 	.word	0x08009fb8
 8001304:	08009fe8 	.word	0x08009fe8
 8001308:	08009ff0 	.word	0x08009ff0
 800130c:	20000040 	.word	0x20000040
 8001310:	200002a4 	.word	0x200002a4
 8001314:	08009fc0 	.word	0x08009fc0
 8001318:	200002a7 	.word	0x200002a7
 800131c:	20000050 	.word	0x20000050
 8001320:	08009fc8 	.word	0x08009fc8
 8001324:	08009fd8 	.word	0x08009fd8
 8001328:	ffff0000 	.word	0xffff0000
 800132c:	ff0000ff 	.word	0xff0000ff
 8001330:	08009ff8 	.word	0x08009ff8

		case 6:
			switch(lcd_handler.game_state){
 8001334:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <LCD_State_PLAYERS+0x998>)
 8001336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800133a:	3b02      	subs	r3, #2
 800133c:	2b05      	cmp	r3, #5
 800133e:	d87e      	bhi.n	800143e <LCD_State_PLAYERS+0x872>
 8001340:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <LCD_State_PLAYERS+0x77c>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	08001361 	.word	0x08001361
 800134c:	08001385 	.word	0x08001385
 8001350:	080013ab 	.word	0x080013ab
 8001354:	080013d1 	.word	0x080013d1
 8001358:	080013f5 	.word	0x080013f5
 800135c:	08001419 	.word	0x08001419
				case PLAYER1:
					BSP_LCD_Clear(BGCOLOR);
 8001360:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001364:	f002 f9e2 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001368:	487f      	ldr	r0, [pc, #508]	; (8001568 <LCD_State_PLAYERS+0x99c>)
 800136a:	f002 f997 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,120, 80);
 800136e:	2350      	movs	r3, #80	; 0x50
 8001370:	2278      	movs	r2, #120	; 0x78
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f002 fb1b 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800137a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800137e:	f002 f98d 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8001382:	e05d      	b.n	8001440 <LCD_State_PLAYERS+0x874>
				case PLAYER2:
					BSP_LCD_Clear(BGCOLOR);
 8001384:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001388:	f002 f9d0 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800138c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001390:	f002 f984 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,0,120, 80);
 8001394:	2350      	movs	r3, #80	; 0x50
 8001396:	2278      	movs	r2, #120	; 0x78
 8001398:	2100      	movs	r1, #0
 800139a:	2078      	movs	r0, #120	; 0x78
 800139c:	f002 fb08 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013a0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013a4:	f002 f97a 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 80013a8:	e04a      	b.n	8001440 <LCD_State_PLAYERS+0x874>
				case PLAYER3:
					BSP_LCD_Clear(BGCOLOR);
 80013aa:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80013ae:	f002 f9bd 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 80013b2:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 80013b6:	f002 f971 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,80+10,120, 80);
 80013ba:	2350      	movs	r3, #80	; 0x50
 80013bc:	2278      	movs	r2, #120	; 0x78
 80013be:	215a      	movs	r1, #90	; 0x5a
 80013c0:	2000      	movs	r0, #0
 80013c2:	f002 faf5 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013c6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013ca:	f002 f967 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 80013ce:	e037      	b.n	8001440 <LCD_State_PLAYERS+0x874>
				case PLAYER4:
					BSP_LCD_Clear(BGCOLOR);
 80013d0:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80013d4:	f002 f9aa 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80013d8:	4864      	ldr	r0, [pc, #400]	; (800156c <LCD_State_PLAYERS+0x9a0>)
 80013da:	f002 f95f 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,80+10,120, 80);
 80013de:	2350      	movs	r3, #80	; 0x50
 80013e0:	2278      	movs	r2, #120	; 0x78
 80013e2:	215a      	movs	r1, #90	; 0x5a
 80013e4:	2078      	movs	r0, #120	; 0x78
 80013e6:	f002 fae3 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013ee:	f002 f955 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 80013f2:	e025      	b.n	8001440 <LCD_State_PLAYERS+0x874>
				case PLAYER5:
					BSP_LCD_Clear(BGCOLOR);
 80013f4:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80013f8:	f002 f998 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80013fc:	485c      	ldr	r0, [pc, #368]	; (8001570 <LCD_State_PLAYERS+0x9a4>)
 80013fe:	f002 f94d 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,160+20,120, 80);
 8001402:	2350      	movs	r3, #80	; 0x50
 8001404:	2278      	movs	r2, #120	; 0x78
 8001406:	21b4      	movs	r1, #180	; 0xb4
 8001408:	2000      	movs	r0, #0
 800140a:	f002 fad1 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800140e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001412:	f002 f943 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 8001416:	e013      	b.n	8001440 <LCD_State_PLAYERS+0x874>
				case PLAYER6:
					BSP_LCD_Clear(BGCOLOR);
 8001418:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800141c:	f002 f986 	bl	800372c <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001420:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001424:	f002 f93a 	bl	800369c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,160+20,120, 80);
 8001428:	2350      	movs	r3, #80	; 0x50
 800142a:	2278      	movs	r2, #120	; 0x78
 800142c:	21b4      	movs	r1, #180	; 0xb4
 800142e:	2078      	movs	r0, #120	; 0x78
 8001430:	f002 fabe 	bl	80039b0 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001434:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001438:	f002 f930 	bl	800369c <BSP_LCD_SetTextColor>
					break;
 800143c:	e000      	b.n	8001440 <LCD_State_PLAYERS+0x874>

				default:
					break;
 800143e:	bf00      	nop
			}

			BSP_LCD_SetFont(&Font16);
 8001440:	484c      	ldr	r0, [pc, #304]	; (8001574 <LCD_State_PLAYERS+0x9a8>)
 8001442:	f002 f943 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8001446:	2303      	movs	r3, #3
 8001448:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <LCD_State_PLAYERS+0x9ac>)
 800144a:	210a      	movs	r1, #10
 800144c:	200a      	movs	r0, #10
 800144e:	f002 f9d9 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8001452:	2302      	movs	r3, #2
 8001454:	4a49      	ldr	r2, [pc, #292]	; (800157c <LCD_State_PLAYERS+0x9b0>)
 8001456:	210a      	movs	r1, #10
 8001458:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 800145c:	f002 f9d2 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(10, 100, (uint8_t *)"igrac 3", LEFT_MODE);
 8001460:	2303      	movs	r3, #3
 8001462:	4a47      	ldr	r2, [pc, #284]	; (8001580 <LCD_State_PLAYERS+0x9b4>)
 8001464:	2164      	movs	r1, #100	; 0x64
 8001466:	200a      	movs	r0, #10
 8001468:	f002 f9cc 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 100, (uint8_t *)"igrac 4", RIGHT_MODE);
 800146c:	2302      	movs	r3, #2
 800146e:	4a45      	ldr	r2, [pc, #276]	; (8001584 <LCD_State_PLAYERS+0x9b8>)
 8001470:	2164      	movs	r1, #100	; 0x64
 8001472:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001476:	f002 f9c5 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(10, 190, (uint8_t *)"igrac 5", LEFT_MODE);
 800147a:	2303      	movs	r3, #3
 800147c:	4a42      	ldr	r2, [pc, #264]	; (8001588 <LCD_State_PLAYERS+0x9bc>)
 800147e:	21be      	movs	r1, #190	; 0xbe
 8001480:	200a      	movs	r0, #10
 8001482:	f002 f9bf 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 190, (uint8_t *)"igrac 6", RIGHT_MODE);
 8001486:	2302      	movs	r3, #2
 8001488:	4a40      	ldr	r2, [pc, #256]	; (800158c <LCD_State_PLAYERS+0x9c0>)
 800148a:	21be      	movs	r1, #190	; 0xbe
 800148c:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001490:	f002 f9b8 	bl	8003804 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font24);
 8001494:	483e      	ldr	r0, [pc, #248]	; (8001590 <LCD_State_PLAYERS+0x9c4>)
 8001496:	f002 f919 	bl	80036cc <BSP_LCD_SetFont>

			for(uint32_t i =1; i<= lcd_handler.num_of_players; i=i+2){
 800149a:	2301      	movs	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	e01c      	b.n	80014da <LCD_State_PLAYERS+0x90e>
				sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[i-1].mL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <LCD_State_PLAYERS+0x998>)
 80014a6:	3301      	adds	r3, #1
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4938      	ldr	r1, [pc, #224]	; (8001594 <LCD_State_PLAYERS+0x9c8>)
 80014b2:	4839      	ldr	r0, [pc, #228]	; (8001598 <LCD_State_PLAYERS+0x9cc>)
 80014b4:	f008 f8e0 	bl	8009678 <siprintf>
				BSP_LCD_DisplayStringAt(10, 10+90*(i-1)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	225a      	movs	r2, #90	; 0x5a
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	3b5a      	subs	r3, #90	; 0x5a
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	332d      	adds	r3, #45	; 0x2d
 80014c8:	b299      	uxth	r1, r3
 80014ca:	2303      	movs	r3, #3
 80014cc:	4a32      	ldr	r2, [pc, #200]	; (8001598 <LCD_State_PLAYERS+0x9cc>)
 80014ce:	200a      	movs	r0, #10
 80014d0:	f002 f998 	bl	8003804 <BSP_LCD_DisplayStringAt>
			for(uint32_t i =1; i<= lcd_handler.num_of_players; i=i+2){
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3302      	adds	r3, #2
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b22      	ldr	r3, [pc, #136]	; (8001564 <LCD_State_PLAYERS+0x998>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d9dc      	bls.n	80014a0 <LCD_State_PLAYERS+0x8d4>
			}

			for(uint32_t i = 2; i<= lcd_handler.num_of_players; i=i+2){
 80014e6:	2302      	movs	r3, #2
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	e01d      	b.n	8001528 <LCD_State_PLAYERS+0x95c>
				sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[i-1].mL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <LCD_State_PLAYERS+0x998>)
 80014f2:	3301      	adds	r3, #1
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4925      	ldr	r1, [pc, #148]	; (8001594 <LCD_State_PLAYERS+0x9c8>)
 80014fe:	4826      	ldr	r0, [pc, #152]	; (8001598 <LCD_State_PLAYERS+0x9cc>)
 8001500:	f008 f8ba 	bl	8009678 <siprintf>
				BSP_LCD_DisplayStringAt(-10, 10+90*(i-2)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,RIGHT_MODE);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	225a      	movs	r2, #90	; 0x5a
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	3bb4      	subs	r3, #180	; 0xb4
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	332d      	adds	r3, #45	; 0x2d
 8001514:	b299      	uxth	r1, r3
 8001516:	2302      	movs	r3, #2
 8001518:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <LCD_State_PLAYERS+0x9cc>)
 800151a:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 800151e:	f002 f971 	bl	8003804 <BSP_LCD_DisplayStringAt>
			for(uint32_t i = 2; i<= lcd_handler.num_of_players; i=i+2){
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3302      	adds	r3, #2
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <LCD_State_PLAYERS+0x998>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	4293      	cmp	r3, r2
 8001532:	d9db      	bls.n	80014ec <LCD_State_PLAYERS+0x920>
			}


			BSP_LCD_SetFont(&Font16);
 8001534:	480f      	ldr	r0, [pc, #60]	; (8001574 <LCD_State_PLAYERS+0x9a8>)
 8001536:	f002 f8c9 	bl	80036cc <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 800153a:	2301      	movs	r3, #1
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <LCD_State_PLAYERS+0x9d0>)
 800153e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001542:	2000      	movs	r0, #0
 8001544:	f002 f95e 	bl	8003804 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8001548:	2301      	movs	r3, #1
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <LCD_State_PLAYERS+0x9d4>)
 800154c:	f240 1127 	movw	r1, #295	; 0x127
 8001550:	2000      	movs	r0, #0
 8001552:	f002 f957 	bl	8003804 <BSP_LCD_DisplayStringAt>

			break;
 8001556:	e000      	b.n	800155a <LCD_State_PLAYERS+0x98e>
	default:
		break;
 8001558:	bf00      	nop
	}
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001562:	bf00      	nop
 8001564:	200002a4 	.word	0x200002a4
 8001568:	ffff0000 	.word	0xffff0000
 800156c:	ffffa500 	.word	0xffffa500
 8001570:	ff0000ff 	.word	0xff0000ff
 8001574:	20000050 	.word	0x20000050
 8001578:	08009fb0 	.word	0x08009fb0
 800157c:	08009fb8 	.word	0x08009fb8
 8001580:	08009fe8 	.word	0x08009fe8
 8001584:	08009ff0 	.word	0x08009ff0
 8001588:	08009ff8 	.word	0x08009ff8
 800158c:	0800a000 	.word	0x0800a000
 8001590:	20000040 	.word	0x20000040
 8001594:	08009fc0 	.word	0x08009fc0
 8001598:	200002a7 	.word	0x200002a7
 800159c:	08009fc8 	.word	0x08009fc8
 80015a0:	08009fd8 	.word	0x08009fd8

080015a4 <MDL_leds_init>:
void send();

struct LED_handler ledHandler;


void MDL_leds_init() {
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MDL_leds_init+0x3c>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_LEDS; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	e00a      	b.n	80015cc <MDL_leds_init+0x28>
		ledHandler.led[i] = i;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	b2d9      	uxtb	r1, r3
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <MDL_leds_init+0x3c>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	3301      	adds	r3, #1
 80015c2:	460a      	mov	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_LEDS; i++) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3301      	adds	r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	ddf1      	ble.n	80015b6 <MDL_leds_init+0x12>
	}
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	200002e8 	.word	0x200002e8

080015e4 <set_LED>:

void set_LED(uint8_t LEDnum, uint8_t Red, uint8_t Green, uint8_t Blue) {
 80015e4:	b490      	push	{r4, r7}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4604      	mov	r4, r0
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4623      	mov	r3, r4
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	4603      	mov	r3, r0
 80015f8:	71bb      	strb	r3, [r7, #6]
 80015fa:	460b      	mov	r3, r1
 80015fc:	717b      	strb	r3, [r7, #5]
 80015fe:	4613      	mov	r3, r2
 8001600:	713b      	strb	r3, [r7, #4]
	ledHandler.LED_Data[LEDnum][0] = LEDnum;
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <set_LED+0x58>)
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	71da      	strb	r2, [r3, #7]
	ledHandler.LED_Data[LEDnum][1] = Red;
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <set_LED+0x58>)
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	79ba      	ldrb	r2, [r7, #6]
 8001618:	721a      	strb	r2, [r3, #8]
	ledHandler.LED_Data[LEDnum][2] = Green;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <set_LED+0x58>)
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	797a      	ldrb	r2, [r7, #5]
 8001624:	725a      	strb	r2, [r3, #9]
	ledHandler.LED_Data[LEDnum][3] = Blue;
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <set_LED+0x58>)
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	793a      	ldrb	r2, [r7, #4]
 8001630:	729a      	strb	r2, [r3, #10]
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bc90      	pop	{r4, r7}
 800163a:	4770      	bx	lr
 800163c:	200002e8 	.word	0x200002e8

08001640 <send>:

void send(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
	uint32_t index = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
	uint32_t color;

	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	72fb      	strb	r3, [r7, #11]
 800164e:	e039      	b.n	80016c4 <send+0x84>
		color = ((ledHandler.LED_Data[i][1] << 16) | (ledHandler.LED_Data[i][2] << 8) | (ledHandler.LED_Data[i][3]));
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	4a31      	ldr	r2, [pc, #196]	; (8001718 <send+0xd8>)
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	7a1b      	ldrb	r3, [r3, #8]
 800165a:	041a      	lsls	r2, r3, #16
 800165c:	7afb      	ldrb	r3, [r7, #11]
 800165e:	492e      	ldr	r1, [pc, #184]	; (8001718 <send+0xd8>)
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	7a5b      	ldrb	r3, [r3, #9]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	431a      	orrs	r2, r3
 800166a:	7afb      	ldrb	r3, [r7, #11]
 800166c:	492a      	ldr	r1, [pc, #168]	; (8001718 <send+0xd8>)
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	7a9b      	ldrb	r3, [r3, #10]
 8001674:	4313      	orrs	r3, r2
 8001676:	607b      	str	r3, [r7, #4]

		for (uint8_t i = 24; i > 0; i--) {
 8001678:	2318      	movs	r3, #24
 800167a:	72bb      	strb	r3, [r7, #10]
 800167c:	e01c      	b.n	80016b8 <send+0x78>
			if (color & (1 << (i - 1)))
 800167e:	7abb      	ldrb	r3, [r7, #10]
 8001680:	3b01      	subs	r3, #1
 8001682:	2201      	movs	r2, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <send+0x60>
				ledHandler.pwmData[index] = 60;
 8001692:	4a21      	ldr	r2, [pc, #132]	; (8001718 <send+0xd8>)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3310      	adds	r3, #16
 8001698:	213c      	movs	r1, #60	; 0x3c
 800169a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800169e:	e005      	b.n	80016ac <send+0x6c>
			else
				ledHandler.pwmData[index] = 30;
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <send+0xd8>)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3310      	adds	r3, #16
 80016a6:	211e      	movs	r1, #30
 80016a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			index++;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 24; i > 0; i--) {
 80016b2:	7abb      	ldrb	r3, [r7, #10]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	72bb      	strb	r3, [r7, #10]
 80016b8:	7abb      	ldrb	r3, [r7, #10]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1df      	bne.n	800167e <send+0x3e>
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 80016be:	7afb      	ldrb	r3, [r7, #11]
 80016c0:	3301      	adds	r3, #1
 80016c2:	72fb      	strb	r3, [r7, #11]
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d9c2      	bls.n	8001650 <send+0x10>
		}
	}

	for (uint8_t i = 0; i < 50; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	727b      	strb	r3, [r7, #9]
 80016ce:	e00b      	b.n	80016e8 <send+0xa8>
		ledHandler.pwmData[index] = 0;
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <send+0xd8>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3310      	adds	r3, #16
 80016d6:	2100      	movs	r1, #0
 80016d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		index++;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 50; i++) {
 80016e2:	7a7b      	ldrb	r3, [r7, #9]
 80016e4:	3301      	adds	r3, #1
 80016e6:	727b      	strb	r3, [r7, #9]
 80016e8:	7a7b      	ldrb	r3, [r7, #9]
 80016ea:	2b31      	cmp	r3, #49	; 0x31
 80016ec:	d9f0      	bls.n	80016d0 <send+0x90>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*) ledHandler.pwmData, index);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <send+0xdc>)
 80016f4:	2100      	movs	r1, #0
 80016f6:	480a      	ldr	r0, [pc, #40]	; (8001720 <send+0xe0>)
 80016f8:	f006 feb0 	bl	800845c <HAL_TIM_PWM_Start_DMA>
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <send+0xd8>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
	while (ledHandler.datasentflag == TRANSFER_NOT_FINISHED) {};
 8001702:	bf00      	nop
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <send+0xd8>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d0fb      	beq.n	8001704 <send+0xc4>

}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200002e8 	.word	0x200002e8
 800171c:	20000308 	.word	0x20000308
 8001720:	20000740 	.word	0x20000740

08001724 <MDL_leds_scored>:
	set_LED(ledHandler.led[5], 0, 0, 255);
	send();

}

void MDL_leds_scored(uint8_t sensorNum) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	uint8_t index;
	uint8_t points = 25;  // plava
 800172e:	2319      	movs	r3, #25
 8001730:	73bb      	strb	r3, [r7, #14]
	uint8_t color = 3;
 8001732:	2303      	movs	r3, #3
 8001734:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 8001736:	2300      	movs	r3, #0
 8001738:	733b      	strb	r3, [r7, #12]
 800173a:	e00b      	b.n	8001754 <MDL_leds_scored+0x30>
		if (ledHandler.led[i] == sensorNum) index = i;
 800173c:	7b3b      	ldrb	r3, [r7, #12]
 800173e:	4a2d      	ldr	r2, [pc, #180]	; (80017f4 <MDL_leds_scored+0xd0>)
 8001740:	4413      	add	r3, r2
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	429a      	cmp	r2, r3
 8001748:	d101      	bne.n	800174e <MDL_leds_scored+0x2a>
 800174a:	7b3b      	ldrb	r3, [r7, #12]
 800174c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 800174e:	7b3b      	ldrb	r3, [r7, #12]
 8001750:	3301      	adds	r3, #1
 8001752:	733b      	strb	r3, [r7, #12]
 8001754:	7b3b      	ldrb	r3, [r7, #12]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d9f0      	bls.n	800173c <MDL_leds_scored+0x18>
	}

	if (index == 0) {  // crvena
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d104      	bne.n	800176a <MDL_leds_scored+0x46>
		color = 1;
 8001760:	2301      	movs	r3, #1
 8001762:	737b      	strb	r3, [r7, #13]
		points = 100;
 8001764:	2364      	movs	r3, #100	; 0x64
 8001766:	73bb      	strb	r3, [r7, #14]
 8001768:	e009      	b.n	800177e <MDL_leds_scored+0x5a>
	}
	else if (index == 1 || index == 2) { //zelena
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d002      	beq.n	8001776 <MDL_leds_scored+0x52>
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d103      	bne.n	800177e <MDL_leds_scored+0x5a>
		color = 2;
 8001776:	2302      	movs	r3, #2
 8001778:	737b      	strb	r3, [r7, #13]
		points = 50;
 800177a:	2332      	movs	r3, #50	; 0x32
 800177c:	73bb      	strb	r3, [r7, #14]
	}

	for (uint8_t j = 0; j < 3; j++) {
 800177e:	2300      	movs	r3, #0
 8001780:	72fb      	strb	r3, [r7, #11]
 8001782:	e02c      	b.n	80017de <MDL_leds_scored+0xba>
		set_LED(sensorNum, 0, 0, 0);
 8001784:	79f8      	ldrb	r0, [r7, #7]
 8001786:	2300      	movs	r3, #0
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	f7ff ff2a 	bl	80015e4 <set_LED>
		send();
 8001790:	f7ff ff56 	bl	8001640 <send>
		HAL_Delay(100);
 8001794:	2064      	movs	r0, #100	; 0x64
 8001796:	f002 fd9f 	bl	80042d8 <HAL_Delay>
		if (color == 1)	set_LED(sensorNum, 255, 0, 0);
 800179a:	7b7b      	ldrb	r3, [r7, #13]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <MDL_leds_scored+0x8a>
 80017a0:	79f8      	ldrb	r0, [r7, #7]
 80017a2:	2300      	movs	r3, #0
 80017a4:	2200      	movs	r2, #0
 80017a6:	21ff      	movs	r1, #255	; 0xff
 80017a8:	f7ff ff1c 	bl	80015e4 <set_LED>
 80017ac:	e00f      	b.n	80017ce <MDL_leds_scored+0xaa>
		else if (color == 2) set_LED(sensorNum, 0, 255, 0);
 80017ae:	7b7b      	ldrb	r3, [r7, #13]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d106      	bne.n	80017c2 <MDL_leds_scored+0x9e>
 80017b4:	79f8      	ldrb	r0, [r7, #7]
 80017b6:	2300      	movs	r3, #0
 80017b8:	22ff      	movs	r2, #255	; 0xff
 80017ba:	2100      	movs	r1, #0
 80017bc:	f7ff ff12 	bl	80015e4 <set_LED>
 80017c0:	e005      	b.n	80017ce <MDL_leds_scored+0xaa>
		else set_LED(sensorNum, 0, 0, 255);
 80017c2:	79f8      	ldrb	r0, [r7, #7]
 80017c4:	23ff      	movs	r3, #255	; 0xff
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	f7ff ff0b 	bl	80015e4 <set_LED>
		send();
 80017ce:	f7ff ff37 	bl	8001640 <send>
		HAL_Delay(100);
 80017d2:	2064      	movs	r0, #100	; 0x64
 80017d4:	f002 fd80 	bl	80042d8 <HAL_Delay>
	for (uint8_t j = 0; j < 3; j++) {
 80017d8:	7afb      	ldrb	r3, [r7, #11]
 80017da:	3301      	adds	r3, #1
 80017dc:	72fb      	strb	r3, [r7, #11]
 80017de:	7afb      	ldrb	r3, [r7, #11]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d9cf      	bls.n	8001784 <MDL_leds_scored+0x60>

	}

	MDL_LCD_Hit_Update(points);
 80017e4:	7bbb      	ldrb	r3, [r7, #14]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe ffb0 	bl	800074c <MDL_LCD_Hit_Update>
//	dispenzer(points); dodati include .h i odkomentirari points

}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200002e8 	.word	0x200002e8

080017f8 <HAL_TIM_PWM_PulseFinishedCallback>:

}



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	ledHandler.datasentflag = TRANSFER_FINISHED;
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	200002e8 	.word	0x200002e8

08001818 <MDL_sensors_init>:

//************************************************************************************

//*******************************PUBLIC FUNCTIONS*************************************

void MDL_sensors_init() {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
	sensors_handler.state = START_CALIBRATION;
 800181e:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MDL_sensors_init+0x84>)
 8001820:	2205      	movs	r2, #5
 8001822:	701a      	strb	r2, [r3, #0]
	sensors_handler.ordinalNumOfMeasurement = 0;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MDL_sensors_init+0x84>)
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	sensors_handler.ordinalNumOfMeasurementForCalibration = 0;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <MDL_sensors_init+0x84>)
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	e00e      	b.n	8001858 <MDL_sensors_init+0x40>
		sensors_handler.sensors[i].currentState = GPIO_PIN_RESET;
 800183a:	4a18      	ldr	r2, [pc, #96]	; (800189c <MDL_sensors_init+0x84>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	2200      	movs	r2, #0
 8001844:	719a      	strb	r2, [r3, #6]
		sensors_handler.sensors[i].wantedState = GPIO_PIN_RESET;
 8001846:	4a15      	ldr	r2, [pc, #84]	; (800189c <MDL_sensors_init+0x84>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	2200      	movs	r2, #0
 8001850:	71da      	strb	r2, [r3, #7]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b05      	cmp	r3, #5
 800185c:	dded      	ble.n	800183a <MDL_sensors_init+0x22>
	}

	sensors_handler.sensors[0].gpio_pin = GPIO_PIN_13;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MDL_sensors_init+0x84>)
 8001860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001864:	809a      	strh	r2, [r3, #4]
	sensors_handler.sensors[1].gpio_pin = GPIO_PIN_15;
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <MDL_sensors_init+0x84>)
 8001868:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800186c:	819a      	strh	r2, [r3, #12]
	sensors_handler.sensors[2].gpio_pin = GPIO_PIN_13;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MDL_sensors_init+0x84>)
 8001870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001874:	829a      	strh	r2, [r3, #20]
	sensors_handler.sensors[3].gpio_pin = GPIO_PIN_15;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MDL_sensors_init+0x84>)
 8001878:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800187c:	839a      	strh	r2, [r3, #28]
	sensors_handler.sensors[4].gpio_pin = GPIO_PIN_13;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <MDL_sensors_init+0x84>)
 8001880:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001884:	849a      	strh	r2, [r3, #36]	; 0x24
	sensors_handler.sensors[5].gpio_pin = GPIO_PIN_15;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <MDL_sensors_init+0x84>)
 8001888:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800188c:	859a      	strh	r2, [r3, #44]	; 0x2c

}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000048c 	.word	0x2000048c

080018a0 <MDL_sensors_handler>:

void MDL_sensors_handler() {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

	switch (sensors_handler.state) {
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <MDL_sensors_handler+0x8c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d83c      	bhi.n	8001928 <MDL_sensors_handler+0x88>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <MDL_sensors_handler+0x14>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	080018d9 	.word	0x080018d9
 80018b8:	080018eb 	.word	0x080018eb
 80018bc:	080018ef 	.word	0x080018ef
 80018c0:	080018f5 	.word	0x080018f5
 80018c4:	080018fb 	.word	0x080018fb
 80018c8:	08001901 	.word	0x08001901
 80018cc:	08001919 	.word	0x08001919
 80018d0:	0800191d 	.word	0x0800191d
 80018d4:	08001923 	.word	0x08001923
	case GETTING_DATA:
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensors_handler.buffer,
 80018d8:	2206      	movs	r2, #6
 80018da:	4915      	ldr	r1, [pc, #84]	; (8001930 <MDL_sensors_handler+0x90>)
 80018dc:	4815      	ldr	r0, [pc, #84]	; (8001934 <MDL_sensors_handler+0x94>)
 80018de:	f002 fd95 	bl	800440c <HAL_ADC_Start_DMA>
		NUM_OF_SENSORS);
		sensors_handler.state = WAITING_FOR_DATA;
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <MDL_sensors_handler+0x8c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
		break;
 80018e8:	e01e      	b.n	8001928 <MDL_sensors_handler+0x88>
	case WAITING_FOR_DATA:
		__NOP();
 80018ea:	bf00      	nop
		break;
 80018ec:	e01c      	b.n	8001928 <MDL_sensors_handler+0x88>
	case CALCULATING_DATA:
		sensors_calculateCurrentData();
 80018ee:	f000 f919 	bl	8001b24 <sensors_calculateCurrentData>
		break;
 80018f2:	e019      	b.n	8001928 <MDL_sensors_handler+0x88>
	case DETERMINING_SENSOR_STATE:
		sensors_determineIfSensorsDetectedObject();
 80018f4:	f000 f896 	bl	8001a24 <sensors_determineIfSensorsDetectedObject>
		break;
 80018f8:	e016      	b.n	8001928 <MDL_sensors_handler+0x88>
	case CHECKING_SENSOR_STATE:
		sensors_checkSensorState();
 80018fa:	f000 f8cd 	bl	8001a98 <sensors_checkSensorState>
		break;
 80018fe:	e013      	b.n	8001928 <MDL_sensors_handler+0x88>
	case START_CALIBRATION:
		HAL_ADC_Stop(&hadc1);
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <MDL_sensors_handler+0x94>)
 8001902:	f002 fd50 	bl	80043a6 <HAL_ADC_Stop>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensors_handler.buffer, NUM_OF_SENSORS);
 8001906:	2206      	movs	r2, #6
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <MDL_sensors_handler+0x90>)
 800190a:	480a      	ldr	r0, [pc, #40]	; (8001934 <MDL_sensors_handler+0x94>)
 800190c:	f002 fd7e 	bl	800440c <HAL_ADC_Start_DMA>
		sensors_handler.state = WAITING_FOR_CALIBRATION_DATA;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MDL_sensors_handler+0x8c>)
 8001912:	2206      	movs	r2, #6
 8001914:	701a      	strb	r2, [r3, #0]
		break;
 8001916:	e007      	b.n	8001928 <MDL_sensors_handler+0x88>
	case WAITING_FOR_CALIBRATION_DATA:
		__NOP();
 8001918:	bf00      	nop
		break;
 800191a:	e005      	b.n	8001928 <MDL_sensors_handler+0x88>
	case CALCULATING_DATA_FOR_CALIBRATION:
		sensors_calculateCurrentDataForCalibration();
 800191c:	f000 f846 	bl	80019ac <sensors_calculateCurrentDataForCalibration>
		break;
 8001920:	e002      	b.n	8001928 <MDL_sensors_handler+0x88>
	case CALIBRATING:
		sensors_calibrateSensors();
 8001922:	f000 f809 	bl	8001938 <sensors_calibrateSensors>
		break;
 8001926:	bf00      	nop
	}
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000048c 	.word	0x2000048c
 8001930:	200004c0 	.word	0x200004c0
 8001934:	200004d0 	.word	0x200004d0

08001938 <sensors_calibrateSensors>:

//************************************************************************************

//**********************PRIVATE FUNCTION DEFINITIONS**********************************

void sensors_calibrateSensors() {
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
	uint32_t minMeasuredData = MAX_INT16;
 800193e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001942:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001944:	2300      	movs	r3, #0
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	e018      	b.n	800197c <sensors_calibrateSensors+0x44>
		if (sensors_handler.sensors[i].sumOfDistances / NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION < minMeasuredData) {
 800194a:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <sensors_calibrateSensors+0x6c>)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <sensors_calibrateSensors+0x70>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	d909      	bls.n	8001976 <sensors_calibrateSensors+0x3e>
			minMeasuredData = sensors_handler.sensors[i].sumOfDistances / NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION;
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <sensors_calibrateSensors+0x6c>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4413      	add	r3, r2
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <sensors_calibrateSensors+0x70>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b05      	cmp	r3, #5
 8001980:	dde3      	ble.n	800194a <sensors_calibrateSensors+0x12>
		}
	}

	sensors_handler.threshold = minMeasuredData - THRESHOLD_REDUCER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	3b32      	subs	r3, #50	; 0x32
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <sensors_calibrateSensors+0x6c>)
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	sensors_handler.state = GETTING_DATA;
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <sensors_calibrateSensors+0x6c>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000048c 	.word	0x2000048c
 80019a8:	51eb851f 	.word	0x51eb851f

080019ac <sensors_calculateCurrentDataForCalibration>:

void sensors_calculateCurrentDataForCalibration() {
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	e015      	b.n	80019e4 <sensors_calculateCurrentDataForCalibration+0x38>
		sensors_handler.sensors[i].sumOfDistances += sensors_handler.buffer[i];
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <sensors_calculateCurrentDataForCalibration+0x74>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3318      	adds	r3, #24
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	889b      	ldrh	r3, [r3, #4]
 80019c4:	b299      	uxth	r1, r3
 80019c6:	4a16      	ldr	r2, [pc, #88]	; (8001a20 <sensors_calculateCurrentDataForCalibration+0x74>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	460a      	mov	r2, r1
 80019d2:	441a      	add	r2, r3
 80019d4:	4912      	ldr	r1, [pc, #72]	; (8001a20 <sensors_calculateCurrentDataForCalibration+0x74>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3301      	adds	r3, #1
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	dde6      	ble.n	80019b8 <sensors_calculateCurrentDataForCalibration+0xc>
	}

	if (++sensors_handler.ordinalNumOfMeasurementForCalibration == NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION) {
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <sensors_calculateCurrentDataForCalibration+0x74>)
 80019ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019f0:	3301      	adds	r3, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <sensors_calculateCurrentDataForCalibration+0x74>)
 80019f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <sensors_calculateCurrentDataForCalibration+0x74>)
 80019fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a00:	2b64      	cmp	r3, #100	; 0x64
 8001a02:	d103      	bne.n	8001a0c <sensors_calculateCurrentDataForCalibration+0x60>
		sensors_handler.state = CALIBRATING;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <sensors_calculateCurrentDataForCalibration+0x74>)
 8001a06:	2208      	movs	r2, #8
 8001a08:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = START_CALIBRATION;
	}

}
 8001a0a:	e002      	b.n	8001a12 <sensors_calculateCurrentDataForCalibration+0x66>
		sensors_handler.state = START_CALIBRATION;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <sensors_calculateCurrentDataForCalibration+0x74>)
 8001a0e:	2205      	movs	r2, #5
 8001a10:	701a      	strb	r2, [r3, #0]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000048c 	.word	0x2000048c

08001a24 <sensors_determineIfSensorsDetectedObject>:

void sensors_determineIfSensorsDetectedObject() {
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e023      	b.n	8001a78 <sensors_determineIfSensorsDetectedObject+0x54>
		if (sensors_handler.sensors[i].sumOfDistances
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	689b      	ldr	r3, [r3, #8]
				/ NUM_OF_REQUIRED_MEASURMENTS < sensors_handler.threshold) {
 8001a3a:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <sensors_determineIfSensorsDetectedObject+0x70>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001a44:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
		if (sensors_handler.sensors[i].sumOfDistances
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d206      	bcs.n	8001a5a <sensors_determineIfSensorsDetectedObject+0x36>
			sensors_handler.sensors[i].wantedState = GPIO_PIN_SET;
 8001a4c:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	2201      	movs	r2, #1
 8001a56:	71da      	strb	r2, [r3, #7]
 8001a58:	e005      	b.n	8001a66 <sensors_determineIfSensorsDetectedObject+0x42>
		} else {
			sensors_handler.sensors[i].wantedState = GPIO_PIN_RESET;
 8001a5a:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	71da      	strb	r2, [r3, #7]
		}

		sensors_handler.sensors[i].sumOfDistances = 0;
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3301      	adds	r3, #1
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	ddd8      	ble.n	8001a30 <sensors_determineIfSensorsDetectedObject+0xc>
	}

	sensors_handler.state = CHECKING_SENSOR_STATE;
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001a80:	2204      	movs	r2, #4
 8001a82:	701a      	strb	r2, [r3, #0]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	2000048c 	.word	0x2000048c
 8001a94:	cccccccd 	.word	0xcccccccd

08001a98 <sensors_checkSensorState>:

void sensors_checkSensorState() {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	e02c      	b.n	8001afe <sensors_checkSensorState+0x66>
		if (sensors_handler.sensors[i].currentState
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <sensors_checkSensorState+0x84>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	799a      	ldrb	r2, [r3, #6]
				!= sensors_handler.sensors[i].wantedState) {
 8001aae:	491b      	ldr	r1, [pc, #108]	; (8001b1c <sensors_checkSensorState+0x84>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	79db      	ldrb	r3, [r3, #7]
		if (sensors_handler.sensors[i].currentState
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d01d      	beq.n	8001af8 <sensors_checkSensorState+0x60>
			HAL_GPIO_WritePin(GPIOG, sensors_handler.sensors[i].gpio_pin,
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <sensors_checkSensorState+0x84>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	8899      	ldrh	r1, [r3, #4]
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <sensors_checkSensorState+0x84>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	79db      	ldrb	r3, [r3, #7]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4813      	ldr	r0, [pc, #76]	; (8001b20 <sensors_checkSensorState+0x88>)
 8001ad4:	f004 fa92 	bl	8005ffc <HAL_GPIO_WritePin>
					sensors_handler.sensors[i].wantedState);
			sensors_handler.sensors[i].currentState =
					sensors_handler.sensors[i].wantedState;
 8001ad8:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <sensors_checkSensorState+0x84>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	79d9      	ldrb	r1, [r3, #7]
			sensors_handler.sensors[i].currentState =
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <sensors_checkSensorState+0x84>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	460a      	mov	r2, r1
 8001aec:	719a      	strb	r2, [r3, #6]

			MDL_leds_scored(i);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fe16 	bl	8001724 <MDL_leds_scored>
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3301      	adds	r3, #1
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	ddcf      	ble.n	8001aa4 <sensors_checkSensorState+0xc>

		}
	}

	sensors_handler.state = GETTING_DATA;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <sensors_checkSensorState+0x84>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
	sensors_handler.ordinalNumOfMeasurement = 0;
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <sensors_checkSensorState+0x84>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000048c 	.word	0x2000048c
 8001b20:	40021800 	.word	0x40021800

08001b24 <sensors_calculateCurrentData>:

void sensors_calculateCurrentData() {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	e015      	b.n	8001b5c <sensors_calculateCurrentData+0x38>
		sensors_handler.sensors[i].sumOfDistances += sensors_handler.buffer[i];
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <sensors_calculateCurrentData+0x74>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3318      	adds	r3, #24
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	889b      	ldrh	r3, [r3, #4]
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <sensors_calculateCurrentData+0x74>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	460a      	mov	r2, r1
 8001b4a:	441a      	add	r2, r3
 8001b4c:	4912      	ldr	r1, [pc, #72]	; (8001b98 <sensors_calculateCurrentData+0x74>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	440b      	add	r3, r1
 8001b54:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	dde6      	ble.n	8001b30 <sensors_calculateCurrentData+0xc>
	}

	if (++sensors_handler.ordinalNumOfMeasurement == NUM_OF_REQUIRED_MEASURMENTS) {
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <sensors_calculateCurrentData+0x74>)
 8001b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b68:	3301      	adds	r3, #1
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <sensors_calculateCurrentData+0x74>)
 8001b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <sensors_calculateCurrentData+0x74>)
 8001b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d103      	bne.n	8001b84 <sensors_calculateCurrentData+0x60>
		sensors_handler.state = DETERMINING_SENSOR_STATE;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <sensors_calculateCurrentData+0x74>)
 8001b7e:	2203      	movs	r2, #3
 8001b80:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = GETTING_DATA;
	}

}
 8001b82:	e002      	b.n	8001b8a <sensors_calculateCurrentData+0x66>
		sensors_handler.state = GETTING_DATA;
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <sensors_calculateCurrentData+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	2000048c 	.word	0x2000048c

08001b9c <HAL_ADC_ConvCpltCallback>:

//************************************************************************************

// when DMA finishes transferring data this function is called

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]


	if (sensors_handler.state == WAITING_FOR_CALIBRATION_DATA) {
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d103      	bne.n	8001bb6 <HAL_ADC_ConvCpltCallback+0x1a>
		sensors_handler.state = CALCULATING_DATA_FOR_CALIBRATION;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = CALCULATING_DATA;
	}
}
 8001bb4:	e002      	b.n	8001bbc <HAL_ADC_ConvCpltCallback+0x20>
		sensors_handler.state = CALCULATING_DATA;
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	701a      	strb	r2, [r3, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	2000048c 	.word	0x2000048c

08001bcc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bde:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001be0:	4a44      	ldr	r2, [pc, #272]	; (8001cf4 <MX_ADC1_Init+0x128>)
 8001be2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001be6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bec:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c06:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c0c:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c0e:	4a3a      	ldr	r2, [pc, #232]	; (8001cf8 <MX_ADC1_Init+0x12c>)
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c1a:	2206      	movs	r2, #6
 8001c1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c26:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c2c:	4830      	ldr	r0, [pc, #192]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c2e:	f002 fb77 	bl	8004320 <HAL_ADC_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c38:	f000 fe62 	bl	8002900 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c4e:	f002 fd01 	bl	8004654 <HAL_ADC_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c58:	f000 fe52 	bl	8002900 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c60:	2302      	movs	r3, #2
 8001c62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c64:	463b      	mov	r3, r7
 8001c66:	4619      	mov	r1, r3
 8001c68:	4821      	ldr	r0, [pc, #132]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c6a:	f002 fcf3 	bl	8004654 <HAL_ADC_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001c74:	f000 fe44 	bl	8002900 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001c78:	230b      	movs	r3, #11
 8001c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c80:	463b      	mov	r3, r7
 8001c82:	4619      	mov	r1, r3
 8001c84:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001c86:	f002 fce5 	bl	8004654 <HAL_ADC_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001c90:	f000 fe36 	bl	8002900 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001c94:	230c      	movs	r3, #12
 8001c96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4813      	ldr	r0, [pc, #76]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001ca2:	f002 fcd7 	bl	8004654 <HAL_ADC_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001cac:	f000 fe28 	bl	8002900 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001cb0:	230d      	movs	r3, #13
 8001cb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001cb4:	2305      	movs	r3, #5
 8001cb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb8:	463b      	mov	r3, r7
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001cbe:	f002 fcc9 	bl	8004654 <HAL_ADC_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001cc8:	f000 fe1a 	bl	8002900 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001ccc:	230e      	movs	r3, #14
 8001cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_ADC1_Init+0x124>)
 8001cda:	f002 fcbb 	bl	8004654 <HAL_ADC_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001ce4:	f000 fe0c 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200004d0 	.word	0x200004d0
 8001cf4:	40012000 	.word	0x40012000
 8001cf8:	0f000001 	.word	0x0f000001

08001cfc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a3c      	ldr	r2, [pc, #240]	; (8001e0c <HAL_ADC_MspInit+0x110>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d172      	bne.n	8001e04 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_ADC_MspInit+0x114>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <HAL_ADC_MspInit+0x114>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <HAL_ADC_MspInit+0x114>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_ADC_MspInit+0x114>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <HAL_ADC_MspInit+0x114>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_ADC_MspInit+0x114>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_ADC_MspInit+0x114>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a2c      	ldr	r2, [pc, #176]	; (8001e10 <HAL_ADC_MspInit+0x114>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_ADC_MspInit+0x114>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001d72:	231e      	movs	r3, #30
 8001d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d76:	2303      	movs	r3, #3
 8001d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <HAL_ADC_MspInit+0x118>)
 8001d86:	f003 fe81 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d8a:	23a0      	movs	r3, #160	; 0xa0
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481e      	ldr	r0, [pc, #120]	; (8001e18 <HAL_ADC_MspInit+0x11c>)
 8001d9e:	f003 fe75 	bl	8005a8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <HAL_ADC_MspInit+0x124>)
 8001da6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001da8:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001dcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001ddc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001de0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001dea:	f002 fff5 	bl	8004dd8 <HAL_DMA_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8001df4:	f000 fd84 	bl	8002900 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_ADC_MspInit+0x120>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40012000 	.word	0x40012000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	20000518 	.word	0x20000518
 8001e20:	40026470 	.word	0x40026470

08001e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <MX_DMA_Init+0x68>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <MX_DMA_Init+0x68>)
 8001e34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <MX_DMA_Init+0x68>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_DMA_Init+0x68>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <MX_DMA_Init+0x68>)
 8001e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <MX_DMA_Init+0x68>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	200b      	movs	r0, #11
 8001e68:	f002 ff7f 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e6c:	200b      	movs	r0, #11
 8001e6e:	f002 ff98 	bl	8004da2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	203c      	movs	r0, #60	; 0x3c
 8001e78:	f002 ff77 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001e7c:	203c      	movs	r0, #60	; 0x3c
 8001e7e:	f002 ff90 	bl	8004da2 <HAL_NVIC_EnableIRQ>

}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001e96:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <MX_DMA2D_Init+0x60>)
 8001e98:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001ec6:	f003 fb55 	bl	8005574 <HAL_DMA2D_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001ed0:	f000 fd16 	bl	8002900 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_DMA2D_Init+0x5c>)
 8001ed8:	f003 fcaa 	bl	8005830 <HAL_DMA2D_ConfigLayer>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001ee2:	f000 fd0d 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000578 	.word	0x20000578
 8001ef0:	4002b000 	.word	0x4002b000

08001ef4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_DMA2D_MspInit+0x3c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10d      	bne.n	8001f22 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_DMA2D_MspInit+0x40>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_DMA2D_MspInit+0x40>)
 8001f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_DMA2D_MspInit+0x40>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	4002b000 	.word	0x4002b000
 8001f34:	40023800 	.word	0x40023800

08001f38 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f52:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <MX_FMC_Init+0x98>)
 8001f54:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <MX_FMC_Init+0x94>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001f92:	2310      	movs	r3, #16
 8001f94:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001f96:	2310      	movs	r3, #16
 8001f98:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001fa6:	2310      	movs	r3, #16
 8001fa8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001faa:	2310      	movs	r3, #16
 8001fac:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <MX_FMC_Init+0x94>)
 8001fb4:	f005 fb3a 	bl	800762c <HAL_SDRAM_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001fbe:	f000 fc9f 	bl	8002900 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200005b8 	.word	0x200005b8
 8001fd0:	a0000140 	.word	0xa0000140

08001fd4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_FMC_MspInit+0x104>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d16f      	bne.n	80020d0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001ff0:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_FMC_MspInit+0x104>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_FMC_MspInit+0x108>)
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	4a37      	ldr	r2, [pc, #220]	; (80020dc <HAL_FMC_MspInit+0x108>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6393      	str	r3, [r2, #56]	; 0x38
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_FMC_MspInit+0x108>)
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002012:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002016:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002024:	230c      	movs	r3, #12
 8002026:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	4619      	mov	r1, r3
 800202c:	482c      	ldr	r0, [pc, #176]	; (80020e0 <HAL_FMC_MspInit+0x10c>)
 800202e:	f003 fd2d 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002032:	2301      	movs	r3, #1
 8002034:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002042:	230c      	movs	r3, #12
 8002044:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4826      	ldr	r0, [pc, #152]	; (80020e4 <HAL_FMC_MspInit+0x110>)
 800204c:	f003 fd1e 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8002050:	f248 1311 	movw	r3, #33041	; 0x8111
 8002054:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002062:	230c      	movs	r3, #12
 8002064:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	4619      	mov	r1, r3
 800206a:	481f      	ldr	r0, [pc, #124]	; (80020e8 <HAL_FMC_MspInit+0x114>)
 800206c:	f003 fd0e 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002070:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002082:	230c      	movs	r3, #12
 8002084:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4818      	ldr	r0, [pc, #96]	; (80020ec <HAL_FMC_MspInit+0x118>)
 800208c:	f003 fcfe 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8002090:	f24c 0303 	movw	r3, #49155	; 0xc003
 8002094:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020a2:	230c      	movs	r3, #12
 80020a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <HAL_FMC_MspInit+0x11c>)
 80020ac:	f003 fcee 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80020b0:	2360      	movs	r3, #96	; 0x60
 80020b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020c0:	230c      	movs	r3, #12
 80020c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	480a      	ldr	r0, [pc, #40]	; (80020f4 <HAL_FMC_MspInit+0x120>)
 80020ca:	f003 fcdf 	bl	8005a8c <HAL_GPIO_Init>
 80020ce:	e000      	b.n	80020d2 <HAL_FMC_MspInit+0xfe>
    return;
 80020d0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200000ec 	.word	0x200000ec
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40021400 	.word	0x40021400
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40021800 	.word	0x40021800
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40020c00 	.word	0x40020c00
 80020f4:	40020400 	.word	0x40020400

080020f8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002100:	f7ff ff68 	bl	8001fd4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	4b43      	ldr	r3, [pc, #268]	; (8002234 <MX_GPIO_Init+0x128>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a42      	ldr	r2, [pc, #264]	; (8002234 <MX_GPIO_Init+0x128>)
 800212c:	f043 0320 	orr.w	r3, r3, #32
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b40      	ldr	r3, [pc, #256]	; (8002234 <MX_GPIO_Init+0x128>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <MX_GPIO_Init+0x128>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a3b      	ldr	r2, [pc, #236]	; (8002234 <MX_GPIO_Init+0x128>)
 8002148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <MX_GPIO_Init+0x128>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	4b35      	ldr	r3, [pc, #212]	; (8002234 <MX_GPIO_Init+0x128>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a34      	ldr	r2, [pc, #208]	; (8002234 <MX_GPIO_Init+0x128>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <MX_GPIO_Init+0x128>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <MX_GPIO_Init+0x128>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <MX_GPIO_Init+0x128>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <MX_GPIO_Init+0x128>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b27      	ldr	r3, [pc, #156]	; (8002234 <MX_GPIO_Init+0x128>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <MX_GPIO_Init+0x128>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <MX_GPIO_Init+0x128>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <MX_GPIO_Init+0x128>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <MX_GPIO_Init+0x128>)
 80021b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <MX_GPIO_Init+0x128>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b19      	ldr	r3, [pc, #100]	; (8002234 <MX_GPIO_Init+0x128>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a18      	ldr	r2, [pc, #96]	; (8002234 <MX_GPIO_Init+0x128>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <MX_GPIO_Init+0x128>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <MX_GPIO_Init+0x128>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <MX_GPIO_Init+0x128>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <MX_GPIO_Init+0x128>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002208:	480b      	ldr	r0, [pc, #44]	; (8002238 <MX_GPIO_Init+0x12c>)
 800220a:	f003 fef7 	bl	8005ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800220e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221c:	2302      	movs	r3, #2
 800221e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	4804      	ldr	r0, [pc, #16]	; (8002238 <MX_GPIO_Init+0x12c>)
 8002228:	f003 fc30 	bl	8005a8c <HAL_GPIO_Init>

}
 800222c:	bf00      	nop
 800222e:	3738      	adds	r7, #56	; 0x38
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	40021800 	.word	0x40021800

0800223c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002240:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <MX_I2C3_Init+0x74>)
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <MX_I2C3_Init+0x78>)
 8002244:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <MX_I2C3_Init+0x74>)
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <MX_I2C3_Init+0x7c>)
 800224a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <MX_I2C3_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <MX_I2C3_Init+0x74>)
 8002254:	2200      	movs	r2, #0
 8002256:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <MX_I2C3_Init+0x74>)
 800225a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800225e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <MX_I2C3_Init+0x74>)
 8002262:	2200      	movs	r2, #0
 8002264:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <MX_I2C3_Init+0x74>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <MX_I2C3_Init+0x74>)
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MX_I2C3_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002278:	480d      	ldr	r0, [pc, #52]	; (80022b0 <MX_I2C3_Init+0x74>)
 800227a:	f003 fed9 	bl	8006030 <HAL_I2C_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002284:	f000 fb3c 	bl	8002900 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002288:	2100      	movs	r1, #0
 800228a:	4809      	ldr	r0, [pc, #36]	; (80022b0 <MX_I2C3_Init+0x74>)
 800228c:	f004 f814 	bl	80062b8 <HAL_I2CEx_ConfigAnalogFilter>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002296:	f000 fb33 	bl	8002900 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800229a:	2100      	movs	r1, #0
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <MX_I2C3_Init+0x74>)
 800229e:	f004 f847 	bl	8006330 <HAL_I2CEx_ConfigDigitalFilter>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80022a8:	f000 fb2a 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200005ec 	.word	0x200005ec
 80022b4:	40005c00 	.word	0x40005c00
 80022b8:	000186a0 	.word	0x000186a0

080022bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_I2C_MspInit+0xc4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d14b      	bne.n	8002376 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_I2C_MspInit+0xc8>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_I2C_MspInit+0xc8>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_I2C_MspInit+0xc8>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <HAL_I2C_MspInit+0xc8>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a20      	ldr	r2, [pc, #128]	; (8002384 <HAL_I2C_MspInit+0xc8>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_I2C_MspInit+0xc8>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231c:	2312      	movs	r3, #18
 800231e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002328:	2304      	movs	r3, #4
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	4815      	ldr	r0, [pc, #84]	; (8002388 <HAL_I2C_MspInit+0xcc>)
 8002334:	f003 fbaa 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800233e:	2312      	movs	r3, #18
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2303      	movs	r3, #3
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800234a:	2304      	movs	r3, #4
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0314 	add.w	r3, r7, #20
 8002352:	4619      	mov	r1, r3
 8002354:	480d      	ldr	r0, [pc, #52]	; (800238c <HAL_I2C_MspInit+0xd0>)
 8002356:	f003 fb99 	bl	8005a8c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_I2C_MspInit+0xc8>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_I2C_MspInit+0xc8>)
 8002364:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_I2C_MspInit+0xc8>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40005c00 	.word	0x40005c00
 8002384:	40023800 	.word	0x40023800
 8002388:	40020800 	.word	0x40020800
 800238c:	40020000 	.word	0x40020000

08002390 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b09a      	sub	sp, #104	; 0x68
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800239a:	2234      	movs	r2, #52	; 0x34
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f007 f962 	bl	8009668 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80023a4:	463b      	mov	r3, r7
 80023a6:	2234      	movs	r2, #52	; 0x34
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f007 f95c 	bl	8009668 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80023b0:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023b2:	4a4e      	ldr	r2, [pc, #312]	; (80024ec <MX_LTDC_Init+0x15c>)
 80023b4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80023b6:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80023bc:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80023c2:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023c8:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80023d4:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023d6:	2203      	movs	r2, #3
 80023d8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80023da:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023dc:	220e      	movs	r2, #14
 80023de:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80023e0:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023e2:	2205      	movs	r2, #5
 80023e4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 80023e6:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023e8:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 80023ee:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023f0:	22f5      	movs	r2, #245	; 0xf5
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 80023f4:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023f6:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 80023fc:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <MX_LTDC_Init+0x158>)
 80023fe:	22f7      	movs	r2, #247	; 0xf7
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <MX_LTDC_Init+0x158>)
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800240a:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <MX_LTDC_Init+0x158>)
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002412:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <MX_LTDC_Init+0x158>)
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800241a:	4833      	ldr	r0, [pc, #204]	; (80024e8 <MX_LTDC_Init+0x158>)
 800241c:	f003 ffc8 	bl	80063b0 <HAL_LTDC_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 8002426:	f000 fa6b 	bl	8002900 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800243a:	2300      	movs	r3, #0
 800243c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800244c:	2305      	movs	r3, #5
 800244e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800246e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002472:	2200      	movs	r2, #0
 8002474:	4619      	mov	r1, r3
 8002476:	481c      	ldr	r0, [pc, #112]	; (80024e8 <MX_LTDC_Init+0x158>)
 8002478:	f004 f86a 	bl	8006550 <HAL_LTDC_ConfigLayer>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 8002482:	f000 fa3d 	bl	8002900 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80024a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80024a8:	2305      	movs	r3, #5
 80024aa:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80024ca:	463b      	mov	r3, r7
 80024cc:	2201      	movs	r2, #1
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_LTDC_Init+0x158>)
 80024d2:	f004 f83d 	bl	8006550 <HAL_LTDC_ConfigLayer>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 80024dc:	f000 fa10 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80024e0:	bf00      	nop
 80024e2:	3768      	adds	r7, #104	; 0x68
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000640 	.word	0x20000640
 80024ec:	40016800 	.word	0x40016800

080024f0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b09a      	sub	sp, #104	; 0x68
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250c:	2230      	movs	r2, #48	; 0x30
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f007 f8a9 	bl	8009668 <memset>
  if(ltdcHandle->Instance==LTDC)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a78      	ldr	r2, [pc, #480]	; (80026fc <HAL_LTDC_MspInit+0x20c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	f040 80e9 	bne.w	80026f4 <HAL_LTDC_MspInit+0x204>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002522:	2308      	movs	r3, #8
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002526:	2332      	movs	r3, #50	; 0x32
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800252a:	2304      	movs	r3, #4
 800252c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800252e:	2300      	movs	r3, #0
 8002530:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002536:	4618      	mov	r0, r3
 8002538:	f004 feba 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002542:	f000 f9dd 	bl	8002900 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
 800254a:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a6c      	ldr	r2, [pc, #432]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 8002550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	4b66      	ldr	r3, [pc, #408]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a65      	ldr	r2, [pc, #404]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 800256c:	f043 0320 	orr.w	r3, r3, #32
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a5e      	ldr	r2, [pc, #376]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	4b58      	ldr	r3, [pc, #352]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a57      	ldr	r2, [pc, #348]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b55      	ldr	r3, [pc, #340]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a50      	ldr	r2, [pc, #320]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a49      	ldr	r2, [pc, #292]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a42      	ldr	r2, [pc, #264]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b40      	ldr	r3, [pc, #256]	; (8002700 <HAL_LTDC_MspInit+0x210>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> LTDC_R5
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800260a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800261c:	230e      	movs	r3, #14
 800261e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002620:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002624:	4619      	mov	r1, r3
 8002626:	4837      	ldr	r0, [pc, #220]	; (8002704 <HAL_LTDC_MspInit+0x214>)
 8002628:	f003 fa30 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 800262c:	f641 0358 	movw	r3, #6232	; 0x1858
 8002630:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800263e:	230e      	movs	r3, #14
 8002640:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002646:	4619      	mov	r1, r3
 8002648:	482f      	ldr	r0, [pc, #188]	; (8002708 <HAL_LTDC_MspInit+0x218>)
 800264a:	f003 fa1f 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800264e:	2303      	movs	r3, #3
 8002650:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800265e:	2309      	movs	r3, #9
 8002660:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002662:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002666:	4619      	mov	r1, r3
 8002668:	4828      	ldr	r0, [pc, #160]	; (800270c <HAL_LTDC_MspInit+0x21c>)
 800266a:	f003 fa0f 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800266e:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002680:	230e      	movs	r3, #14
 8002682:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002684:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002688:	4619      	mov	r1, r3
 800268a:	4821      	ldr	r0, [pc, #132]	; (8002710 <HAL_LTDC_MspInit+0x220>)
 800268c:	f003 f9fe 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002690:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002694:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026a2:	230e      	movs	r3, #14
 80026a4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026aa:	4619      	mov	r1, r3
 80026ac:	4817      	ldr	r0, [pc, #92]	; (800270c <HAL_LTDC_MspInit+0x21c>)
 80026ae:	f003 f9ed 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80026b2:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80026b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026c4:	230e      	movs	r3, #14
 80026c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026cc:	4619      	mov	r1, r3
 80026ce:	4811      	ldr	r0, [pc, #68]	; (8002714 <HAL_LTDC_MspInit+0x224>)
 80026d0:	f003 f9dc 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026d4:	23c0      	movs	r3, #192	; 0xc0
 80026d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026e4:	230e      	movs	r3, #14
 80026e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ec:	4619      	mov	r1, r3
 80026ee:	480a      	ldr	r0, [pc, #40]	; (8002718 <HAL_LTDC_MspInit+0x228>)
 80026f0:	f003 f9cc 	bl	8005a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80026f4:	bf00      	nop
 80026f6:	3768      	adds	r7, #104	; 0x68
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40016800 	.word	0x40016800
 8002700:	40023800 	.word	0x40023800
 8002704:	40021400 	.word	0x40021400
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40021000 	.word	0x40021000
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40020800 	.word	0x40020800

0800271c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002720:	f001 fd68 	bl	80041f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002724:	f000 f87c 	bl	8002820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002728:	f7ff fcf0 	bl	800210c <MX_GPIO_Init>
  MX_DMA_Init();
 800272c:	f7ff fb7a 	bl	8001e24 <MX_DMA_Init>
  MX_ADC1_Init();
 8002730:	f7ff fa4c 	bl	8001bcc <MX_ADC1_Init>
  MX_TIM4_Init();
 8002734:	f000 fa34 	bl	8002ba0 <MX_TIM4_Init>
  MX_DMA2D_Init();
 8002738:	f7ff fbaa 	bl	8001e90 <MX_DMA2D_Init>
  MX_FMC_Init();
 800273c:	f7ff fbfc 	bl	8001f38 <MX_FMC_Init>
  MX_I2C3_Init();
 8002740:	f7ff fd7c 	bl	800223c <MX_I2C3_Init>
  MX_LTDC_Init();
 8002744:	f7ff fe24 	bl	8002390 <MX_LTDC_Init>
  MX_SPI5_Init();
 8002748:	f000 f8e0 	bl	800290c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  MDL_sensors_init();
 800274c:	f7ff f864 	bl	8001818 <MDL_sensors_init>
  MDL_leds_init();
 8002750:	f7fe ff28 	bl	80015a4 <MDL_leds_init>
  MDL_LCD_Init();
 8002754:	f7fe f8b2 	bl	80008bc <MDL_LCD_Init>
  HAL_Delay(1000);
 8002758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800275c:	f001 fdbc 	bl	80042d8 <HAL_Delay>

    MDL_LCD_Bttn_Pressed(START);
 8002760:	2000      	movs	r0, #0
 8002762:	f7fd ff11 	bl	8000588 <MDL_LCD_Bttn_Pressed>
    HAL_Delay(1000);
 8002766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800276a:	f001 fdb5 	bl	80042d8 <HAL_Delay>

    MDL_LCD_Bttn_Pressed(PLUS);
 800276e:	2001      	movs	r0, #1
 8002770:	f7fd ff0a 	bl	8000588 <MDL_LCD_Bttn_Pressed>
    MDL_LCD_Bttn_Pressed(PLUS);
 8002774:	2001      	movs	r0, #1
 8002776:	f7fd ff07 	bl	8000588 <MDL_LCD_Bttn_Pressed>
    MDL_LCD_Bttn_Pressed(PLUS);
 800277a:	2001      	movs	r0, #1
 800277c:	f7fd ff04 	bl	8000588 <MDL_LCD_Bttn_Pressed>
    //MDL_LCD_Bttn_Pressed(PLUS);
    //MDL_LCD_Bttn_Pressed(PLUS);
    HAL_Delay(1000);
 8002780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002784:	f001 fda8 	bl	80042d8 <HAL_Delay>

  	  MDL_LCD_Bttn_Pressed(START);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fd fefd 	bl	8000588 <MDL_LCD_Bttn_Pressed>
  	  MDL_LCD_Hit_Update(200);
 800278e:	20c8      	movs	r0, #200	; 0xc8
 8002790:	f7fd ffdc 	bl	800074c <MDL_LCD_Hit_Update>
  	  HAL_Delay(1000);
 8002794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002798:	f001 fd9e 	bl	80042d8 <HAL_Delay>
  	  MDL_LCD_Bttn_Pressed(TOCI);
 800279c:	2003      	movs	r0, #3
 800279e:	f7fd fef3 	bl	8000588 <MDL_LCD_Bttn_Pressed>
  	  MDL_LCD_Hit_Update(200);
 80027a2:	20c8      	movs	r0, #200	; 0xc8
 80027a4:	f7fd ffd2 	bl	800074c <MDL_LCD_Hit_Update>
  	  HAL_Delay(1000);
 80027a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ac:	f001 fd94 	bl	80042d8 <HAL_Delay>
  	  MDL_LCD_Bttn_Pressed(TOCI);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f7fd fee9 	bl	8000588 <MDL_LCD_Bttn_Pressed>
  	  HAL_Delay(1000);
 80027b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ba:	f001 fd8d 	bl	80042d8 <HAL_Delay>
  	  MDL_LCD_Hit_Update(200);
 80027be:	20c8      	movs	r0, #200	; 0xc8
 80027c0:	f7fd ffc4 	bl	800074c <MDL_LCD_Hit_Update>
  	  HAL_Delay(1000);
 80027c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027c8:	f001 fd86 	bl	80042d8 <HAL_Delay>
  	  MDL_LCD_Bttn_Pressed(TOCI);
 80027cc:	2003      	movs	r0, #3
 80027ce:	f7fd fedb 	bl	8000588 <MDL_LCD_Bttn_Pressed>
  	  MDL_LCD_Hit_Update(200);
 80027d2:	20c8      	movs	r0, #200	; 0xc8
 80027d4:	f7fd ffba 	bl	800074c <MDL_LCD_Hit_Update>
  	  HAL_Delay(1000);
 80027d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027dc:	f001 fd7c 	bl	80042d8 <HAL_Delay>
  	  MDL_LCD_Bttn_Pressed(TOCI);
 80027e0:	2003      	movs	r0, #3
 80027e2:	f7fd fed1 	bl	8000588 <MDL_LCD_Bttn_Pressed>
  	  MDL_LCD_Hit_Update(200);
 80027e6:	20c8      	movs	r0, #200	; 0xc8
 80027e8:	f7fd ffb0 	bl	800074c <MDL_LCD_Hit_Update>
  	MDL_LCD_Hit_Update(1000);
 80027ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027f0:	f7fd ffac 	bl	800074c <MDL_LCD_Hit_Update>
  	  HAL_Delay(1000);
 80027f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027f8:	f001 fd6e 	bl	80042d8 <HAL_Delay>
  	 MDL_LCD_Bttn_Pressed(TOCI);
 80027fc:	2003      	movs	r0, #3
 80027fe:	f7fd fec3 	bl	8000588 <MDL_LCD_Bttn_Pressed>
  	MDL_LCD_Hit_Update(200);
 8002802:	20c8      	movs	r0, #200	; 0xc8
 8002804:	f7fd ffa2 	bl	800074c <MDL_LCD_Hit_Update>
  	  HAL_Delay(1000000);
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <main+0x100>)
 800280a:	f001 fd65 	bl	80042d8 <HAL_Delay>
  	  MDL_LCD_Hit_Update(1000);
 800280e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002812:	f7fd ff9b 	bl	800074c <MDL_LCD_Hit_Update>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		MDL_sensors_handler();
 8002816:	f7ff f843 	bl	80018a0 <MDL_sensors_handler>
 800281a:	e7fc      	b.n	8002816 <main+0xfa>
 800281c:	000f4240 	.word	0x000f4240

08002820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b094      	sub	sp, #80	; 0x50
 8002824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002826:	f107 0320 	add.w	r3, r7, #32
 800282a:	2230      	movs	r2, #48	; 0x30
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f006 ff1a 	bl	8009668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <SystemClock_Config+0xd8>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <SystemClock_Config+0xd8>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	6413      	str	r3, [r2, #64]	; 0x40
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <SystemClock_Config+0xd8>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002860:	2300      	movs	r3, #0
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <SystemClock_Config+0xdc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a24      	ldr	r2, [pc, #144]	; (80028fc <SystemClock_Config+0xdc>)
 800286a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <SystemClock_Config+0xdc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800287c:	2301      	movs	r3, #1
 800287e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002880:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002886:	2302      	movs	r3, #2
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800288a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800288e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002890:	2304      	movs	r3, #4
 8002892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002894:	23b4      	movs	r3, #180	; 0xb4
 8002896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002898:	2302      	movs	r3, #2
 800289a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800289c:	2304      	movs	r3, #4
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028a0:	f107 0320 	add.w	r3, r7, #32
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 f8a3 	bl	80069f0 <HAL_RCC_OscConfig>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80028b0:	f000 f826 	bl	8002900 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028b4:	f004 f84c 	bl	8006950 <HAL_PWREx_EnableOverDrive>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80028be:	f000 f81f 	bl	8002900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c2:	230f      	movs	r3, #15
 80028c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c6:	2302      	movs	r3, #2
 80028c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	2105      	movs	r1, #5
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 fafd 	bl	8006ee0 <HAL_RCC_ClockConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80028ec:	f000 f808 	bl	8002900 <Error_Handler>
  }
}
 80028f0:	bf00      	nop
 80028f2:	3750      	adds	r7, #80	; 0x50
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40007000 	.word	0x40007000

08002900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002904:	b672      	cpsid	i
}
 8002906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002908:	e7fe      	b.n	8002908 <Error_Handler+0x8>
	...

0800290c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002910:	4b17      	ldr	r3, [pc, #92]	; (8002970 <MX_SPI5_Init+0x64>)
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <MX_SPI5_Init+0x68>)
 8002914:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <MX_SPI5_Init+0x64>)
 8002918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800291c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <MX_SPI5_Init+0x64>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <MX_SPI5_Init+0x64>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <MX_SPI5_Init+0x64>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <MX_SPI5_Init+0x64>)
 8002932:	2200      	movs	r2, #0
 8002934:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <MX_SPI5_Init+0x64>)
 8002938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_SPI5_Init+0x64>)
 8002940:	2200      	movs	r2, #0
 8002942:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002944:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <MX_SPI5_Init+0x64>)
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_SPI5_Init+0x64>)
 800294c:	2200      	movs	r2, #0
 800294e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <MX_SPI5_Init+0x64>)
 8002952:	2200      	movs	r2, #0
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <MX_SPI5_Init+0x64>)
 8002958:	220a      	movs	r2, #10
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800295c:	4804      	ldr	r0, [pc, #16]	; (8002970 <MX_SPI5_Init+0x64>)
 800295e:	f004 fef6 	bl	800774e <HAL_SPI_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002968:	f7ff ffca 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200006e8 	.word	0x200006e8
 8002974:	40015000 	.word	0x40015000

08002978 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_SPI_MspInit+0x84>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d12c      	bne.n	80029f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_SPI_MspInit+0x88>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <HAL_SPI_MspInit+0x88>)
 80029a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a8:	6453      	str	r3, [r2, #68]	; 0x44
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_SPI_MspInit+0x88>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_SPI_MspInit+0x88>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <HAL_SPI_MspInit+0x88>)
 80029c0:	f043 0320 	orr.w	r3, r3, #32
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_SPI_MspInit+0x88>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80029d2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80029e4:	2305      	movs	r3, #5
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <HAL_SPI_MspInit+0x8c>)
 80029f0:	f003 f84c 	bl	8005a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40015000 	.word	0x40015000
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40021400 	.word	0x40021400

08002a08 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <HAL_SPI_MspDeInit+0x30>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10a      	bne.n	8002a30 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_SPI_MspDeInit+0x34>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <HAL_SPI_MspDeInit+0x34>)
 8002a20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a24:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8002a26:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002a2a:	4805      	ldr	r0, [pc, #20]	; (8002a40 <HAL_SPI_MspDeInit+0x38>)
 8002a2c:	f003 f9da 	bl	8005de4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40015000 	.word	0x40015000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40021400 	.word	0x40021400

08002a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	603b      	str	r3, [r7, #0]
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_MspInit+0x4c>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <NMI_Handler+0x4>

08002a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <HardFault_Handler+0x4>

08002aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <MemManage_Handler+0x4>

08002aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <BusFault_Handler+0x4>

08002aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <UsageFault_Handler+0x4>

08002ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae0:	f001 fbda 	bl	8004298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <DMA1_Stream0_IRQHandler+0x10>)
 8002aee:	f002 fad7 	bl	80050a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000788 	.word	0x20000788

08002afc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <DMA2_Stream4_IRQHandler+0x10>)
 8002b02:	f002 facd 	bl	80050a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000518 	.word	0x20000518

08002b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <_sbrk+0x5c>)
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <_sbrk+0x60>)
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <_sbrk+0x64>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <_sbrk+0x64>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <_sbrk+0x68>)
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d207      	bcs.n	8002b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b40:	f006 fd68 	bl	8009614 <__errno>
 8002b44:	4603      	mov	r3, r0
 8002b46:	220c      	movs	r2, #12
 8002b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4e:	e009      	b.n	8002b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <_sbrk+0x64>)
 8002b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20030000 	.word	0x20030000
 8002b70:	00000400 	.word	0x00000400
 8002b74:	200000f0 	.word	0x200000f0
 8002b78:	200008a8 	.word	0x200008a8

08002b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <SystemInit+0x20>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <SystemInit+0x20>)
 8002b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08e      	sub	sp, #56	; 0x38
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb4:	f107 0320 	add.w	r3, r7, #32
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
 8002bcc:	615a      	str	r2, [r3, #20]
 8002bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002bd2:	4a2d      	ldr	r2, [pc, #180]	; (8002c88 <MX_TIM4_Init+0xe8>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bdc:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 89;
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002be4:	2259      	movs	r2, #89	; 0x59
 8002be6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be8:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002bf4:	4823      	ldr	r0, [pc, #140]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002bf6:	f005 fb89 	bl	800830c <HAL_TIM_Base_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002c00:	f7ff fe7e 	bl	8002900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c0e:	4619      	mov	r1, r3
 8002c10:	481c      	ldr	r0, [pc, #112]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002c12:	f005 fead 	bl	8008970 <HAL_TIM_ConfigClockSource>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002c1c:	f7ff fe70 	bl	8002900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c20:	4818      	ldr	r0, [pc, #96]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002c22:	f005 fbc2 	bl	80083aa <HAL_TIM_PWM_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002c2c:	f7ff fe68 	bl	8002900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c38:	f107 0320 	add.w	r3, r7, #32
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4811      	ldr	r0, [pc, #68]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002c40:	f006 fb52 	bl	80092e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002c4a:	f7ff fe59 	bl	8002900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c4e:	2360      	movs	r3, #96	; 0x60
 8002c50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2200      	movs	r2, #0
 8002c62:	4619      	mov	r1, r3
 8002c64:	4807      	ldr	r0, [pc, #28]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002c66:	f005 fdc1 	bl	80087ec <HAL_TIM_PWM_ConfigChannel>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002c70:	f7ff fe46 	bl	8002900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c74:	4803      	ldr	r0, [pc, #12]	; (8002c84 <MX_TIM4_Init+0xe4>)
 8002c76:	f000 f85d 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 8002c7a:	bf00      	nop
 8002c7c:	3738      	adds	r7, #56	; 0x38
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000740 	.word	0x20000740
 8002c88:	40000800 	.word	0x40000800

08002c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <HAL_TIM_Base_MspInit+0x98>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d13d      	bne.n	8002d1a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_TIM_Base_MspInit+0x9c>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a20      	ldr	r2, [pc, #128]	; (8002d28 <HAL_TIM_Base_MspInit+0x9c>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_TIM_Base_MspInit+0x9c>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002cba:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002cbc:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_TIM_Base_MspInit+0xa4>)
 8002cbe:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002cc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cc6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cc8:	4b18      	ldr	r3, [pc, #96]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002cca:	2240      	movs	r2, #64	; 0x40
 8002ccc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cda:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002cde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cea:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002cfe:	480b      	ldr	r0, [pc, #44]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002d00:	f002 f86a 	bl	8004dd8 <HAL_DMA_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002d0a:	f7ff fdf9 	bl	8002900 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24
 8002d14:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <HAL_TIM_Base_MspInit+0xa0>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	20000788 	.word	0x20000788
 8002d30:	40026010 	.word	0x40026010

08002d34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <HAL_TIM_MspPostInit+0x68>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d11e      	bne.n	8002d94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_TIM_MspPostInit+0x6c>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <HAL_TIM_MspPostInit+0x6c>)
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_TIM_MspPostInit+0x6c>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d84:	2302      	movs	r3, #2
 8002d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4805      	ldr	r0, [pc, #20]	; (8002da4 <HAL_TIM_MspPostInit+0x70>)
 8002d90:	f002 fe7c 	bl	8005a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002d94:	bf00      	nop
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40020c00 	.word	0x40020c00

08002da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dac:	480d      	ldr	r0, [pc, #52]	; (8002de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dae:	490e      	ldr	r1, [pc, #56]	; (8002de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002db0:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db4:	e002      	b.n	8002dbc <LoopCopyDataInit>

08002db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dba:	3304      	adds	r3, #4

08002dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc0:	d3f9      	bcc.n	8002db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dc4:	4c0b      	ldr	r4, [pc, #44]	; (8002df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc8:	e001      	b.n	8002dce <LoopFillZerobss>

08002dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dcc:	3204      	adds	r2, #4

08002dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd0:	d3fb      	bcc.n	8002dca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dd2:	f7ff fed3 	bl	8002b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dd6:	f006 fc23 	bl	8009620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dda:	f7ff fc9f 	bl	800271c <main>
  bx  lr    
 8002dde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002de0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8002dec:	0800dab0 	.word	0x0800dab0
  ldr r2, =_sbss
 8002df0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002df4:	200008a8 	.word	0x200008a8

08002df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df8:	e7fe      	b.n	8002df8 <ADC_IRQHandler>

08002dfa <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002dfe:	f000 fa5d 	bl	80032bc <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002e02:	20ca      	movs	r0, #202	; 0xca
 8002e04:	f000 f95d 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002e08:	20c3      	movs	r0, #195	; 0xc3
 8002e0a:	f000 f967 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002e0e:	2008      	movs	r0, #8
 8002e10:	f000 f964 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002e14:	2050      	movs	r0, #80	; 0x50
 8002e16:	f000 f961 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002e1a:	20cf      	movs	r0, #207	; 0xcf
 8002e1c:	f000 f951 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f000 f95b 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002e26:	20c1      	movs	r0, #193	; 0xc1
 8002e28:	f000 f958 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002e2c:	2030      	movs	r0, #48	; 0x30
 8002e2e:	f000 f955 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002e32:	20ed      	movs	r0, #237	; 0xed
 8002e34:	f000 f945 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002e38:	2064      	movs	r0, #100	; 0x64
 8002e3a:	f000 f94f 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002e3e:	2003      	movs	r0, #3
 8002e40:	f000 f94c 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002e44:	2012      	movs	r0, #18
 8002e46:	f000 f949 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002e4a:	2081      	movs	r0, #129	; 0x81
 8002e4c:	f000 f946 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002e50:	20e8      	movs	r0, #232	; 0xe8
 8002e52:	f000 f936 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002e56:	2085      	movs	r0, #133	; 0x85
 8002e58:	f000 f940 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f000 f93d 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002e62:	2078      	movs	r0, #120	; 0x78
 8002e64:	f000 f93a 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002e68:	20cb      	movs	r0, #203	; 0xcb
 8002e6a:	f000 f92a 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002e6e:	2039      	movs	r0, #57	; 0x39
 8002e70:	f000 f934 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002e74:	202c      	movs	r0, #44	; 0x2c
 8002e76:	f000 f931 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f000 f92e 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002e80:	2034      	movs	r0, #52	; 0x34
 8002e82:	f000 f92b 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002e86:	2002      	movs	r0, #2
 8002e88:	f000 f928 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002e8c:	20f7      	movs	r0, #247	; 0xf7
 8002e8e:	f000 f918 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002e92:	2020      	movs	r0, #32
 8002e94:	f000 f922 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002e98:	20ea      	movs	r0, #234	; 0xea
 8002e9a:	f000 f912 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f000 f91c 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f000 f919 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002eaa:	20b1      	movs	r0, #177	; 0xb1
 8002eac:	f000 f909 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f000 f913 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002eb6:	201b      	movs	r0, #27
 8002eb8:	f000 f910 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002ebc:	20b6      	movs	r0, #182	; 0xb6
 8002ebe:	f000 f900 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002ec2:	200a      	movs	r0, #10
 8002ec4:	f000 f90a 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002ec8:	20a2      	movs	r0, #162	; 0xa2
 8002eca:	f000 f907 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002ece:	20c0      	movs	r0, #192	; 0xc0
 8002ed0:	f000 f8f7 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002ed4:	2010      	movs	r0, #16
 8002ed6:	f000 f901 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002eda:	20c1      	movs	r0, #193	; 0xc1
 8002edc:	f000 f8f1 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002ee0:	2010      	movs	r0, #16
 8002ee2:	f000 f8fb 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002ee6:	20c5      	movs	r0, #197	; 0xc5
 8002ee8:	f000 f8eb 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002eec:	2045      	movs	r0, #69	; 0x45
 8002eee:	f000 f8f5 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002ef2:	2015      	movs	r0, #21
 8002ef4:	f000 f8f2 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002ef8:	20c7      	movs	r0, #199	; 0xc7
 8002efa:	f000 f8e2 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002efe:	2090      	movs	r0, #144	; 0x90
 8002f00:	f000 f8ec 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002f04:	2036      	movs	r0, #54	; 0x36
 8002f06:	f000 f8dc 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002f0a:	20c8      	movs	r0, #200	; 0xc8
 8002f0c:	f000 f8e6 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002f10:	20f2      	movs	r0, #242	; 0xf2
 8002f12:	f000 f8d6 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f000 f8e0 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002f1c:	20b0      	movs	r0, #176	; 0xb0
 8002f1e:	f000 f8d0 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002f22:	20c2      	movs	r0, #194	; 0xc2
 8002f24:	f000 f8da 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002f28:	20b6      	movs	r0, #182	; 0xb6
 8002f2a:	f000 f8ca 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002f2e:	200a      	movs	r0, #10
 8002f30:	f000 f8d4 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002f34:	20a7      	movs	r0, #167	; 0xa7
 8002f36:	f000 f8d1 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002f3a:	2027      	movs	r0, #39	; 0x27
 8002f3c:	f000 f8ce 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002f40:	2004      	movs	r0, #4
 8002f42:	f000 f8cb 	bl	80030dc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002f46:	202a      	movs	r0, #42	; 0x2a
 8002f48:	f000 f8bb 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f000 f8c5 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f000 f8c2 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f000 f8bf 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002f5e:	20ef      	movs	r0, #239	; 0xef
 8002f60:	f000 f8bc 	bl	80030dc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002f64:	202b      	movs	r0, #43	; 0x2b
 8002f66:	f000 f8ac 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f000 f8b6 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f000 f8b3 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002f76:	2001      	movs	r0, #1
 8002f78:	f000 f8b0 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002f7c:	203f      	movs	r0, #63	; 0x3f
 8002f7e:	f000 f8ad 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002f82:	20f6      	movs	r0, #246	; 0xf6
 8002f84:	f000 f89d 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f000 f8a7 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f000 f8a4 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002f94:	2006      	movs	r0, #6
 8002f96:	f000 f8a1 	bl	80030dc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002f9a:	202c      	movs	r0, #44	; 0x2c
 8002f9c:	f000 f891 	bl	80030c2 <ili9341_WriteReg>
  LCD_Delay(200);
 8002fa0:	20c8      	movs	r0, #200	; 0xc8
 8002fa2:	f000 fa79 	bl	8003498 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002fa6:	2026      	movs	r0, #38	; 0x26
 8002fa8:	f000 f88b 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002fac:	2001      	movs	r0, #1
 8002fae:	f000 f895 	bl	80030dc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002fb2:	20e0      	movs	r0, #224	; 0xe0
 8002fb4:	f000 f885 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002fb8:	200f      	movs	r0, #15
 8002fba:	f000 f88f 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002fbe:	2029      	movs	r0, #41	; 0x29
 8002fc0:	f000 f88c 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002fc4:	2024      	movs	r0, #36	; 0x24
 8002fc6:	f000 f889 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002fca:	200c      	movs	r0, #12
 8002fcc:	f000 f886 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002fd0:	200e      	movs	r0, #14
 8002fd2:	f000 f883 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002fd6:	2009      	movs	r0, #9
 8002fd8:	f000 f880 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002fdc:	204e      	movs	r0, #78	; 0x4e
 8002fde:	f000 f87d 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002fe2:	2078      	movs	r0, #120	; 0x78
 8002fe4:	f000 f87a 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002fe8:	203c      	movs	r0, #60	; 0x3c
 8002fea:	f000 f877 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002fee:	2009      	movs	r0, #9
 8002ff0:	f000 f874 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002ff4:	2013      	movs	r0, #19
 8002ff6:	f000 f871 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	f000 f86e 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003000:	2017      	movs	r0, #23
 8003002:	f000 f86b 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003006:	2011      	movs	r0, #17
 8003008:	f000 f868 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f000 f865 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003012:	20e1      	movs	r0, #225	; 0xe1
 8003014:	f000 f855 	bl	80030c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f000 f85f 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800301e:	2016      	movs	r0, #22
 8003020:	f000 f85c 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003024:	201b      	movs	r0, #27
 8003026:	f000 f859 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800302a:	2004      	movs	r0, #4
 800302c:	f000 f856 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003030:	2011      	movs	r0, #17
 8003032:	f000 f853 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003036:	2007      	movs	r0, #7
 8003038:	f000 f850 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800303c:	2031      	movs	r0, #49	; 0x31
 800303e:	f000 f84d 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003042:	2033      	movs	r0, #51	; 0x33
 8003044:	f000 f84a 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003048:	2042      	movs	r0, #66	; 0x42
 800304a:	f000 f847 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800304e:	2005      	movs	r0, #5
 8003050:	f000 f844 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003054:	200c      	movs	r0, #12
 8003056:	f000 f841 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800305a:	200a      	movs	r0, #10
 800305c:	f000 f83e 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003060:	2028      	movs	r0, #40	; 0x28
 8003062:	f000 f83b 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003066:	202f      	movs	r0, #47	; 0x2f
 8003068:	f000 f838 	bl	80030dc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800306c:	200f      	movs	r0, #15
 800306e:	f000 f835 	bl	80030dc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003072:	2011      	movs	r0, #17
 8003074:	f000 f825 	bl	80030c2 <ili9341_WriteReg>
  LCD_Delay(200);
 8003078:	20c8      	movs	r0, #200	; 0xc8
 800307a:	f000 fa0d 	bl	8003498 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800307e:	2029      	movs	r0, #41	; 0x29
 8003080:	f000 f81f 	bl	80030c2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003084:	202c      	movs	r0, #44	; 0x2c
 8003086:	f000 f81c 	bl	80030c2 <ili9341_WriteReg>
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}

0800308e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003092:	f000 f913 	bl	80032bc <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8003096:	2103      	movs	r1, #3
 8003098:	20d3      	movs	r0, #211	; 0xd3
 800309a:	f000 f82c 	bl	80030f6 <ili9341_ReadData>
 800309e:	4603      	mov	r3, r0
 80030a0:	b29b      	uxth	r3, r3
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80030aa:	2029      	movs	r0, #41	; 0x29
 80030ac:	f000 f809 	bl	80030c2 <ili9341_WriteReg>
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80030b8:	2028      	movs	r0, #40	; 0x28
 80030ba:	f000 f802 	bl	80030c2 <ili9341_WriteReg>
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f98e 	bl	80033f0 <LCD_IO_WriteReg>
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f95f 	bl	80033ac <LCD_IO_WriteData>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	460a      	mov	r2, r1
 8003100:	80fb      	strh	r3, [r7, #6]
 8003102:	4613      	mov	r3, r2
 8003104:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003106:	797a      	ldrb	r2, [r7, #5]
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f991 	bl	8003434 <LCD_IO_ReadData>
 8003112:	4603      	mov	r3, r0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003120:	23f0      	movs	r3, #240	; 0xf0
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003130:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003144:	4819      	ldr	r0, [pc, #100]	; (80031ac <SPIx_Init+0x6c>)
 8003146:	f004 ffa2 	bl	800808e <HAL_SPI_GetState>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d12b      	bne.n	80031a8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <SPIx_Init+0x6c>)
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <SPIx_Init+0x70>)
 8003154:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <SPIx_Init+0x6c>)
 8003158:	2218      	movs	r2, #24
 800315a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <SPIx_Init+0x6c>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003162:	4b12      	ldr	r3, [pc, #72]	; (80031ac <SPIx_Init+0x6c>)
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <SPIx_Init+0x6c>)
 800316a:	2200      	movs	r2, #0
 800316c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <SPIx_Init+0x6c>)
 8003170:	2200      	movs	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <SPIx_Init+0x6c>)
 8003176:	2207      	movs	r2, #7
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <SPIx_Init+0x6c>)
 800317c:	2200      	movs	r2, #0
 800317e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <SPIx_Init+0x6c>)
 8003182:	2200      	movs	r2, #0
 8003184:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <SPIx_Init+0x6c>)
 8003188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800318e:	4b07      	ldr	r3, [pc, #28]	; (80031ac <SPIx_Init+0x6c>)
 8003190:	2200      	movs	r2, #0
 8003192:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <SPIx_Init+0x6c>)
 8003196:	f44f 7282 	mov.w	r2, #260	; 0x104
 800319a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800319c:	4803      	ldr	r0, [pc, #12]	; (80031ac <SPIx_Init+0x6c>)
 800319e:	f000 f853 	bl	8003248 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80031a2:	4802      	ldr	r0, [pc, #8]	; (80031ac <SPIx_Init+0x6c>)
 80031a4:	f004 fad3 	bl	800774e <HAL_SPI_Init>
  } 
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	200000f4 	.word	0x200000f4
 80031b0:	40015000 	.word	0x40015000

080031b4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	4b09      	ldr	r3, [pc, #36]	; (80031ec <SPIx_Read+0x38>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f107 0108 	add.w	r1, r7, #8
 80031ce:	4808      	ldr	r0, [pc, #32]	; (80031f0 <SPIx_Read+0x3c>)
 80031d0:	f004 fcaa 	bl	8007b28 <HAL_SPI_Receive>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80031de:	f000 f827 	bl	8003230 <SPIx_Error>
  }
  
  return readvalue;
 80031e2:	68bb      	ldr	r3, [r7, #8]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	2000003c 	.word	0x2000003c
 80031f0:	200000f4 	.word	0x200000f4

080031f4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <SPIx_Write+0x34>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	1db9      	adds	r1, r7, #6
 8003208:	2201      	movs	r2, #1
 800320a:	4808      	ldr	r0, [pc, #32]	; (800322c <SPIx_Write+0x38>)
 800320c:	f004 fb50 	bl	80078b0 <HAL_SPI_Transmit>
 8003210:	4603      	mov	r3, r0
 8003212:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800321a:	f000 f809 	bl	8003230 <SPIx_Error>
  }
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000003c 	.word	0x2000003c
 800322c:	200000f4 	.word	0x200000f4

08003230 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003234:	4803      	ldr	r0, [pc, #12]	; (8003244 <SPIx_Error+0x14>)
 8003236:	f004 fb13 	bl	8007860 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800323a:	f7ff ff81 	bl	8003140 <SPIx_Init>
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200000f4 	.word	0x200000f4

08003248 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <SPIx_MspInit+0x6c>)
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <SPIx_MspInit+0x6c>)
 800325a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325e:	6453      	str	r3, [r2, #68]	; 0x44
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <SPIx_MspInit+0x6c>)
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <SPIx_MspInit+0x6c>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <SPIx_MspInit+0x6c>)
 8003276:	f043 0320 	orr.w	r3, r3, #32
 800327a:	6313      	str	r3, [r2, #48]	; 0x30
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <SPIx_MspInit+0x6c>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003288:	f44f 7360 	mov.w	r3, #896	; 0x380
 800328c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003292:	2302      	movs	r3, #2
 8003294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003296:	2301      	movs	r3, #1
 8003298:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800329a:	2305      	movs	r3, #5
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	4619      	mov	r1, r3
 80032a4:	4804      	ldr	r0, [pc, #16]	; (80032b8 <SPIx_MspInit+0x70>)
 80032a6:	f002 fbf1 	bl	8005a8c <HAL_GPIO_Init>
}
 80032aa:	bf00      	nop
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40021400 	.word	0x40021400

080032bc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80032c2:	4b36      	ldr	r3, [pc, #216]	; (800339c <LCD_IO_Init+0xe0>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d164      	bne.n	8003394 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80032ca:	4b34      	ldr	r3, [pc, #208]	; (800339c <LCD_IO_Init+0xe0>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <LCD_IO_Init+0xe4>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <LCD_IO_Init+0xe4>)
 80032da:	f043 0308 	orr.w	r3, r3, #8
 80032de:	6313      	str	r3, [r2, #48]	; 0x30
 80032e0:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <LCD_IO_Init+0xe4>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80032ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80032f2:	2301      	movs	r3, #1
 80032f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80032fa:	2302      	movs	r3, #2
 80032fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80032fe:	f107 030c 	add.w	r3, r7, #12
 8003302:	4619      	mov	r1, r3
 8003304:	4827      	ldr	r0, [pc, #156]	; (80033a4 <LCD_IO_Init+0xe8>)
 8003306:	f002 fbc1 	bl	8005a8c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <LCD_IO_Init+0xe4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a23      	ldr	r2, [pc, #140]	; (80033a0 <LCD_IO_Init+0xe4>)
 8003314:	f043 0308 	orr.w	r3, r3, #8
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <LCD_IO_Init+0xe4>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800332c:	2301      	movs	r3, #1
 800332e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003334:	2302      	movs	r3, #2
 8003336:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	4619      	mov	r1, r3
 800333e:	4819      	ldr	r0, [pc, #100]	; (80033a4 <LCD_IO_Init+0xe8>)
 8003340:	f002 fba4 	bl	8005a8c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003344:	2300      	movs	r3, #0
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <LCD_IO_Init+0xe4>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <LCD_IO_Init+0xe4>)
 800334e:	f043 0304 	orr.w	r3, r3, #4
 8003352:	6313      	str	r3, [r2, #48]	; 0x30
 8003354:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <LCD_IO_Init+0xe4>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003360:	2304      	movs	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003364:	2301      	movs	r3, #1
 8003366:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800336c:	2302      	movs	r3, #2
 800336e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003370:	f107 030c 	add.w	r3, r7, #12
 8003374:	4619      	mov	r1, r3
 8003376:	480c      	ldr	r0, [pc, #48]	; (80033a8 <LCD_IO_Init+0xec>)
 8003378:	f002 fb88 	bl	8005a8c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800337c:	2200      	movs	r2, #0
 800337e:	2104      	movs	r1, #4
 8003380:	4809      	ldr	r0, [pc, #36]	; (80033a8 <LCD_IO_Init+0xec>)
 8003382:	f002 fe3b 	bl	8005ffc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003386:	2201      	movs	r2, #1
 8003388:	2104      	movs	r1, #4
 800338a:	4807      	ldr	r0, [pc, #28]	; (80033a8 <LCD_IO_Init+0xec>)
 800338c:	f002 fe36 	bl	8005ffc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003390:	f7ff fed6 	bl	8003140 <SPIx_Init>
  }
}
 8003394:	bf00      	nop
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	2000014c 	.word	0x2000014c
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40020c00 	.word	0x40020c00
 80033a8:	40020800 	.word	0x40020800

080033ac <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80033b6:	2201      	movs	r2, #1
 80033b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033bc:	480a      	ldr	r0, [pc, #40]	; (80033e8 <LCD_IO_WriteData+0x3c>)
 80033be:	f002 fe1d 	bl	8005ffc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80033c2:	2200      	movs	r2, #0
 80033c4:	2104      	movs	r1, #4
 80033c6:	4809      	ldr	r0, [pc, #36]	; (80033ec <LCD_IO_WriteData+0x40>)
 80033c8:	f002 fe18 	bl	8005ffc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff10 	bl	80031f4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80033d4:	2201      	movs	r2, #1
 80033d6:	2104      	movs	r1, #4
 80033d8:	4804      	ldr	r0, [pc, #16]	; (80033ec <LCD_IO_WriteData+0x40>)
 80033da:	f002 fe0f 	bl	8005ffc <HAL_GPIO_WritePin>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40020c00 	.word	0x40020c00
 80033ec:	40020800 	.word	0x40020800

080033f0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80033fa:	2200      	movs	r2, #0
 80033fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003400:	480a      	ldr	r0, [pc, #40]	; (800342c <LCD_IO_WriteReg+0x3c>)
 8003402:	f002 fdfb 	bl	8005ffc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003406:	2200      	movs	r2, #0
 8003408:	2104      	movs	r1, #4
 800340a:	4809      	ldr	r0, [pc, #36]	; (8003430 <LCD_IO_WriteReg+0x40>)
 800340c:	f002 fdf6 	bl	8005ffc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	b29b      	uxth	r3, r3
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff feed 	bl	80031f4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800341a:	2201      	movs	r2, #1
 800341c:	2104      	movs	r1, #4
 800341e:	4804      	ldr	r0, [pc, #16]	; (8003430 <LCD_IO_WriteReg+0x40>)
 8003420:	f002 fdec 	bl	8005ffc <HAL_GPIO_WritePin>
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40020c00 	.word	0x40020c00
 8003430:	40020800 	.word	0x40020800

08003434 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	460a      	mov	r2, r1
 800343e:	80fb      	strh	r3, [r7, #6]
 8003440:	4613      	mov	r3, r2
 8003442:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003448:	2200      	movs	r2, #0
 800344a:	2104      	movs	r1, #4
 800344c:	4810      	ldr	r0, [pc, #64]	; (8003490 <LCD_IO_ReadData+0x5c>)
 800344e:	f002 fdd5 	bl	8005ffc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003452:	2200      	movs	r2, #0
 8003454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003458:	480e      	ldr	r0, [pc, #56]	; (8003494 <LCD_IO_ReadData+0x60>)
 800345a:	f002 fdcf 	bl	8005ffc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fec7 	bl	80031f4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003466:	797b      	ldrb	r3, [r7, #5]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fea3 	bl	80031b4 <SPIx_Read>
 800346e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003470:	2201      	movs	r2, #1
 8003472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003476:	4807      	ldr	r0, [pc, #28]	; (8003494 <LCD_IO_ReadData+0x60>)
 8003478:	f002 fdc0 	bl	8005ffc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800347c:	2201      	movs	r2, #1
 800347e:	2104      	movs	r1, #4
 8003480:	4803      	ldr	r0, [pc, #12]	; (8003490 <LCD_IO_ReadData+0x5c>)
 8003482:	f002 fdbb 	bl	8005ffc <HAL_GPIO_WritePin>
  
  return readvalue;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40020800 	.word	0x40020800
 8003494:	40020c00 	.word	0x40020c00

08003498 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 ff19 	bl	80042d8 <HAL_Delay>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80034b4:	4b2d      	ldr	r3, [pc, #180]	; (800356c <BSP_LCD_Init+0xbc>)
 80034b6:	4a2e      	ldr	r2, [pc, #184]	; (8003570 <BSP_LCD_Init+0xc0>)
 80034b8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80034ba:	4b2c      	ldr	r3, [pc, #176]	; (800356c <BSP_LCD_Init+0xbc>)
 80034bc:	2209      	movs	r2, #9
 80034be:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80034c0:	4b2a      	ldr	r3, [pc, #168]	; (800356c <BSP_LCD_Init+0xbc>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80034c6:	4b29      	ldr	r3, [pc, #164]	; (800356c <BSP_LCD_Init+0xbc>)
 80034c8:	221d      	movs	r2, #29
 80034ca:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <BSP_LCD_Init+0xbc>)
 80034ce:	2203      	movs	r2, #3
 80034d0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <BSP_LCD_Init+0xbc>)
 80034d4:	f240 120d 	movw	r2, #269	; 0x10d
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <BSP_LCD_Init+0xbc>)
 80034dc:	f240 1243 	movw	r2, #323	; 0x143
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80034e2:	4b22      	ldr	r3, [pc, #136]	; (800356c <BSP_LCD_Init+0xbc>)
 80034e4:	f240 1217 	movw	r2, #279	; 0x117
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <BSP_LCD_Init+0xbc>)
 80034ec:	f240 1247 	movw	r2, #327	; 0x147
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <BSP_LCD_Init+0xbc>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <BSP_LCD_Init+0xbc>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <BSP_LCD_Init+0xbc>)
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <BSP_LCD_Init+0xc4>)
 800350c:	2208      	movs	r2, #8
 800350e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <BSP_LCD_Init+0xc4>)
 8003512:	22c0      	movs	r2, #192	; 0xc0
 8003514:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003516:	4b17      	ldr	r3, [pc, #92]	; (8003574 <BSP_LCD_Init+0xc4>)
 8003518:	2204      	movs	r2, #4
 800351a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800351c:	4b15      	ldr	r3, [pc, #84]	; (8003574 <BSP_LCD_Init+0xc4>)
 800351e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003522:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003524:	4813      	ldr	r0, [pc, #76]	; (8003574 <BSP_LCD_Init+0xc4>)
 8003526:	f003 fec3 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <BSP_LCD_Init+0xbc>)
 800352c:	2200      	movs	r2, #0
 800352e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <BSP_LCD_Init+0xbc>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <BSP_LCD_Init+0xbc>)
 8003538:	2200      	movs	r2, #0
 800353a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <BSP_LCD_Init+0xbc>)
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003542:	f000 fa9f 	bl	8003a84 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003546:	4809      	ldr	r0, [pc, #36]	; (800356c <BSP_LCD_Init+0xbc>)
 8003548:	f002 ff32 	bl	80063b0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <BSP_LCD_Init+0xc8>)
 800354e:	4a0b      	ldr	r2, [pc, #44]	; (800357c <BSP_LCD_Init+0xcc>)
 8003550:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <BSP_LCD_Init+0xc8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800355a:	f000 fc81 	bl	8003e60 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800355e:	4808      	ldr	r0, [pc, #32]	; (8003580 <BSP_LCD_Init+0xd0>)
 8003560:	f000 f8b4 	bl	80036cc <BSP_LCD_SetFont>

  return LCD_OK;
 8003564:	2300      	movs	r3, #0
}  
 8003566:	4618      	mov	r0, r3
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200007e8 	.word	0x200007e8
 8003570:	40016800 	.word	0x40016800
 8003574:	20000190 	.word	0x20000190
 8003578:	20000890 	.word	0x20000890
 800357c:	20000004 	.word	0x20000004
 8003580:	20000040 	.word	0x20000040

08003584 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003588:	4b03      	ldr	r3, [pc, #12]	; (8003598 <BSP_LCD_GetXSize+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	4798      	blx	r3
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000890 	.word	0x20000890

0800359c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <BSP_LCD_GetYSize+0x14>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	4798      	blx	r3
 80035a8:	4603      	mov	r3, r0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000890 	.word	0x20000890

080035b4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b090      	sub	sp, #64	; 0x40
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80035c4:	f7ff ffde 	bl	8003584 <BSP_LCD_GetXSize>
 80035c8:	4603      	mov	r3, r0
 80035ca:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80035d0:	f7ff ffe4 	bl	800359c <BSP_LCD_GetYSize>
 80035d4:	4603      	mov	r3, r0
 80035d6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80035e0:	23ff      	movs	r3, #255	; 0xff
 80035e2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80035fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003600:	2307      	movs	r3, #7
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003604:	f7ff ffbe 	bl	8003584 <BSP_LCD_GetXSize>
 8003608:	4603      	mov	r3, r0
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800360c:	f7ff ffc6 	bl	800359c <BSP_LCD_GetYSize>
 8003610:	4603      	mov	r3, r0
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003614:	88fa      	ldrh	r2, [r7, #6]
 8003616:	f107 030c 	add.w	r3, r7, #12
 800361a:	4619      	mov	r1, r3
 800361c:	4814      	ldr	r0, [pc, #80]	; (8003670 <BSP_LCD_LayerDefaultInit+0xbc>)
 800361e:	f002 ff97 	bl	8006550 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	4913      	ldr	r1, [pc, #76]	; (8003674 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3304      	adds	r3, #4
 8003632:	f04f 32ff 	mov.w	r2, #4294967295
 8003636:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	490e      	ldr	r1, [pc, #56]	; (8003674 <BSP_LCD_LayerDefaultInit+0xc0>)
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3308      	adds	r3, #8
 8003648:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <BSP_LCD_LayerDefaultInit+0xc4>)
 800364a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	4909      	ldr	r1, [pc, #36]	; (8003674 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800365e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003660:	4803      	ldr	r0, [pc, #12]	; (8003670 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003662:	f002 ffb3 	bl	80065cc <HAL_LTDC_EnableDither>
}
 8003666:	bf00      	nop
 8003668:	3740      	adds	r7, #64	; 0x40
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200007e8 	.word	0x200007e8
 8003674:	200001c4 	.word	0x200001c4
 8003678:	20000040 	.word	0x20000040

0800367c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003684:	4a04      	ldr	r2, [pc, #16]	; (8003698 <BSP_LCD_SelectLayer+0x1c>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6013      	str	r3, [r2, #0]
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	200001c0 	.word	0x200001c0

0800369c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <BSP_LCD_SetTextColor+0x28>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4907      	ldr	r1, [pc, #28]	; (80036c8 <BSP_LCD_SetTextColor+0x2c>)
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	601a      	str	r2, [r3, #0]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	200001c0 	.word	0x200001c0
 80036c8:	200001c4 	.word	0x200001c4

080036cc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <BSP_LCD_SetFont+0x2c>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4908      	ldr	r1, [pc, #32]	; (80036fc <BSP_LCD_SetFont+0x30>)
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3308      	adds	r3, #8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	200001c0 	.word	0x200001c0
 80036fc:	200001c4 	.word	0x200001c4

08003700 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <BSP_LCD_GetFont+0x24>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4907      	ldr	r1, [pc, #28]	; (8003728 <BSP_LCD_GetFont+0x28>)
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3308      	adds	r3, #8
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	200001c0 	.word	0x200001c0
 8003728:	200001c4 	.word	0x200001c4

0800372c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800372c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372e:	b085      	sub	sp, #20
 8003730:	af02      	add	r7, sp, #8
 8003732:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <BSP_LCD_Clear+0x48>)
 8003736:	681c      	ldr	r4, [r3, #0]
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <BSP_LCD_Clear+0x48>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <BSP_LCD_Clear+0x4c>)
 800373e:	2134      	movs	r1, #52	; 0x34
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	335c      	adds	r3, #92	; 0x5c
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461e      	mov	r6, r3
 800374c:	f7ff ff1a 	bl	8003584 <BSP_LCD_GetXSize>
 8003750:	4605      	mov	r5, r0
 8003752:	f7ff ff23 	bl	800359c <BSP_LCD_GetYSize>
 8003756:	4602      	mov	r2, r0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	2300      	movs	r3, #0
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	462a      	mov	r2, r5
 8003764:	4631      	mov	r1, r6
 8003766:	4620      	mov	r0, r4
 8003768:	f000 fb42 	bl	8003df0 <FillBuffer>
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003774:	200001c0 	.word	0x200001c0
 8003778:	200007e8 	.word	0x200007e8

0800377c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]
 8003786:	460b      	mov	r3, r1
 8003788:	80bb      	strh	r3, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800378e:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <BSP_LCD_DisplayChar+0x80>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	491b      	ldr	r1, [pc, #108]	; (8003800 <BSP_LCD_DisplayChar+0x84>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3308      	adds	r3, #8
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <BSP_LCD_DisplayChar+0x80>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4c14      	ldr	r4, [pc, #80]	; (8003800 <BSP_LCD_DisplayChar+0x84>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4423      	add	r3, r4
 80037ba:	3308      	adds	r3, #8
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80037c0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80037c4:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <BSP_LCD_DisplayChar+0x80>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <BSP_LCD_DisplayChar+0x84>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4423      	add	r3, r4
 80037d4:	3308      	adds	r3, #8
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	889b      	ldrh	r3, [r3, #4]
 80037da:	3307      	adds	r3, #7
 80037dc:	2b00      	cmp	r3, #0
 80037de:	da00      	bge.n	80037e2 <BSP_LCD_DisplayChar+0x66>
 80037e0:	3307      	adds	r3, #7
 80037e2:	10db      	asrs	r3, r3, #3
 80037e4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80037e8:	18ca      	adds	r2, r1, r3
 80037ea:	88b9      	ldrh	r1, [r7, #4]
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fa44 	bl	8003c7c <DrawChar>
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd90      	pop	{r4, r7, pc}
 80037fc:	200001c0 	.word	0x200001c0
 8003800:	200001c4 	.word	0x200001c4

08003804 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003804:	b5b0      	push	{r4, r5, r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	60ba      	str	r2, [r7, #8]
 800380c:	461a      	mov	r2, r3
 800380e:	4603      	mov	r3, r0
 8003810:	81fb      	strh	r3, [r7, #14]
 8003812:	460b      	mov	r3, r1
 8003814:	81bb      	strh	r3, [r7, #12]
 8003816:	4613      	mov	r3, r2
 8003818:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800381a:	2301      	movs	r3, #1
 800381c:	83fb      	strh	r3, [r7, #30]
 800381e:	2300      	movs	r3, #0
 8003820:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800382e:	e002      	b.n	8003836 <BSP_LCD_DisplayStringAt+0x32>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	3301      	adds	r3, #1
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	617a      	str	r2, [r7, #20]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f6      	bne.n	8003830 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003842:	f7ff fe9f 	bl	8003584 <BSP_LCD_GetXSize>
 8003846:	4601      	mov	r1, r0
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <BSP_LCD_DisplayStringAt+0x174>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	484b      	ldr	r0, [pc, #300]	; (800397c <BSP_LCD_DisplayStringAt+0x178>)
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4403      	add	r3, r0
 8003858:	3308      	adds	r3, #8
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	889b      	ldrh	r3, [r3, #4]
 800385e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003862:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d01c      	beq.n	80038a4 <BSP_LCD_DisplayStringAt+0xa0>
 800386a:	2b03      	cmp	r3, #3
 800386c:	dc33      	bgt.n	80038d6 <BSP_LCD_DisplayStringAt+0xd2>
 800386e:	2b01      	cmp	r3, #1
 8003870:	d002      	beq.n	8003878 <BSP_LCD_DisplayStringAt+0x74>
 8003872:	2b02      	cmp	r3, #2
 8003874:	d019      	beq.n	80038aa <BSP_LCD_DisplayStringAt+0xa6>
 8003876:	e02e      	b.n	80038d6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	1ad1      	subs	r1, r2, r3
 800387e:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <BSP_LCD_DisplayStringAt+0x174>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	483e      	ldr	r0, [pc, #248]	; (800397c <BSP_LCD_DisplayStringAt+0x178>)
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4403      	add	r3, r0
 800388e:	3308      	adds	r3, #8
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	889b      	ldrh	r3, [r3, #4]
 8003894:	fb03 f301 	mul.w	r3, r3, r1
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	89fb      	ldrh	r3, [r7, #14]
 800389e:	4413      	add	r3, r2
 80038a0:	83fb      	strh	r3, [r7, #30]
      break;
 80038a2:	e01b      	b.n	80038dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80038a4:	89fb      	ldrh	r3, [r7, #14]
 80038a6:	83fb      	strh	r3, [r7, #30]
      break;
 80038a8:	e018      	b.n	80038dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	b299      	uxth	r1, r3
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <BSP_LCD_DisplayStringAt+0x174>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4831      	ldr	r0, [pc, #196]	; (800397c <BSP_LCD_DisplayStringAt+0x178>)
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4403      	add	r3, r0
 80038c2:	3308      	adds	r3, #8
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	889b      	ldrh	r3, [r3, #4]
 80038c8:	fb11 f303 	smulbb	r3, r1, r3
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	89fb      	ldrh	r3, [r7, #14]
 80038d0:	4413      	add	r3, r2
 80038d2:	83fb      	strh	r3, [r7, #30]
      break;
 80038d4:	e002      	b.n	80038dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80038d6:	89fb      	ldrh	r3, [r7, #14]
 80038d8:	83fb      	strh	r3, [r7, #30]
      break;
 80038da:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80038dc:	e01a      	b.n	8003914 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	89b9      	ldrh	r1, [r7, #12]
 80038e4:	8bfb      	ldrh	r3, [r7, #30]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff48 	bl	800377c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80038ec:	4b22      	ldr	r3, [pc, #136]	; (8003978 <BSP_LCD_DisplayStringAt+0x174>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4922      	ldr	r1, [pc, #136]	; (800397c <BSP_LCD_DisplayStringAt+0x178>)
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3308      	adds	r3, #8
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	889a      	ldrh	r2, [r3, #4]
 8003902:	8bfb      	ldrh	r3, [r7, #30]
 8003904:	4413      	add	r3, r2
 8003906:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
    i++;
 800390e:	8bbb      	ldrh	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2dc      	uxtb	r4, r3
 8003922:	f7ff fe2f 	bl	8003584 <BSP_LCD_GetXSize>
 8003926:	8bb9      	ldrh	r1, [r7, #28]
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <BSP_LCD_DisplayStringAt+0x174>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4d13      	ldr	r5, [pc, #76]	; (800397c <BSP_LCD_DisplayStringAt+0x178>)
 800392e:	4613      	mov	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	442b      	add	r3, r5
 8003938:	3308      	adds	r3, #8
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	889b      	ldrh	r3, [r3, #4]
 800393e:	fb03 f301 	mul.w	r3, r3, r1
 8003942:	1ac3      	subs	r3, r0, r3
 8003944:	b299      	uxth	r1, r3
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <BSP_LCD_DisplayStringAt+0x174>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	480c      	ldr	r0, [pc, #48]	; (800397c <BSP_LCD_DisplayStringAt+0x178>)
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4403      	add	r3, r0
 8003956:	3308      	adds	r3, #8
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	889b      	ldrh	r3, [r3, #4]
 800395c:	4299      	cmp	r1, r3
 800395e:	bf2c      	ite	cs
 8003960:	2301      	movcs	r3, #1
 8003962:	2300      	movcc	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4023      	ands	r3, r4
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1b7      	bne.n	80038de <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bdb0      	pop	{r4, r5, r7, pc}
 8003978:	200001c0 	.word	0x200001c0
 800397c:	200001c4 	.word	0x200001c4

08003980 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, CENTER_MODE);
 800398c:	f7ff feb8 	bl	8003700 <BSP_LCD_GetFont>
 8003990:	4603      	mov	r3, r0
 8003992:	88db      	ldrh	r3, [r3, #6]
 8003994:	88fa      	ldrh	r2, [r7, #6]
 8003996:	fb12 f303 	smulbb	r3, r2, r3
 800399a:	b299      	uxth	r1, r3
 800399c:	2301      	movs	r3, #1
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7ff ff2f 	bl	8003804 <BSP_LCD_DisplayStringAt>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80039b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af02      	add	r7, sp, #8
 80039b8:	4604      	mov	r4, r0
 80039ba:	4608      	mov	r0, r1
 80039bc:	4611      	mov	r1, r2
 80039be:	461a      	mov	r2, r3
 80039c0:	4623      	mov	r3, r4
 80039c2:	80fb      	strh	r3, [r7, #6]
 80039c4:	4603      	mov	r3, r0
 80039c6:	80bb      	strh	r3, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
 80039cc:	4613      	mov	r3, r2
 80039ce:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80039d4:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <BSP_LCD_FillRect+0xa8>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4920      	ldr	r1, [pc, #128]	; (8003a5c <BSP_LCD_FillRect+0xac>)
 80039da:	4613      	mov	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fe58 	bl	800369c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80039ec:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <BSP_LCD_FillRect+0xa8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <BSP_LCD_FillRect+0xb0>)
 80039f2:	2134      	movs	r1, #52	; 0x34
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	335c      	adds	r3, #92	; 0x5c
 80039fc:	681c      	ldr	r4, [r3, #0]
 80039fe:	f7ff fdc1 	bl	8003584 <BSP_LCD_GetXSize>
 8003a02:	4602      	mov	r2, r0
 8003a04:	88bb      	ldrh	r3, [r7, #4]
 8003a06:	fb03 f202 	mul.w	r2, r3, r2
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4423      	add	r3, r4
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <BSP_LCD_FillRect+0xa8>)
 8003a16:	681c      	ldr	r4, [r3, #0]
 8003a18:	68fd      	ldr	r5, [r7, #12]
 8003a1a:	887e      	ldrh	r6, [r7, #2]
 8003a1c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003a20:	f7ff fdb0 	bl	8003584 <BSP_LCD_GetXSize>
 8003a24:	4602      	mov	r2, r0
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	1ad1      	subs	r1, r2, r3
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <BSP_LCD_FillRect+0xa8>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	480b      	ldr	r0, [pc, #44]	; (8003a5c <BSP_LCD_FillRect+0xac>)
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4403      	add	r3, r0
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	9100      	str	r1, [sp, #0]
 8003a40:	4643      	mov	r3, r8
 8003a42:	4632      	mov	r2, r6
 8003a44:	4629      	mov	r1, r5
 8003a46:	4620      	mov	r0, r4
 8003a48:	f000 f9d2 	bl	8003df0 <FillBuffer>
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a56:	bf00      	nop
 8003a58:	200001c0 	.word	0x200001c0
 8003a5c:	200001c4 	.word	0x200001c4
 8003a60:	200007e8 	.word	0x200007e8

08003a64 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <BSP_LCD_DisplayOn+0x1c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003a72:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <BSP_LCD_DisplayOn+0x1c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4798      	blx	r3
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000890 	.word	0x20000890

08003a84 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08e      	sub	sp, #56	; 0x38
 8003a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	623b      	str	r3, [r7, #32]
 8003a8e:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	4a60      	ldr	r2, [pc, #384]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a98:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9a:	4b5e      	ldr	r3, [pc, #376]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa2:	623b      	str	r3, [r7, #32]
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a59      	ldr	r2, [pc, #356]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b57      	ldr	r3, [pc, #348]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	4b4c      	ldr	r3, [pc, #304]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a4b      	ldr	r2, [pc, #300]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	4b45      	ldr	r3, [pc, #276]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	4a44      	ldr	r2, [pc, #272]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0a:	4b42      	ldr	r3, [pc, #264]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a3d      	ldr	r2, [pc, #244]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b20:	f043 0308 	orr.w	r3, r3, #8
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a36      	ldr	r2, [pc, #216]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b3c:	f043 0320 	orr.w	r3, r3, #32
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b34      	ldr	r3, [pc, #208]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a2f      	ldr	r2, [pc, #188]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b2d      	ldr	r3, [pc, #180]	; (8003c14 <BSP_LCD_MspInit+0x190>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003b6a:	f641 0358 	movw	r3, #6232	; 0x1858
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003b70:	2302      	movs	r3, #2
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003b7c:	230e      	movs	r3, #14
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b84:	4619      	mov	r1, r3
 8003b86:	4824      	ldr	r0, [pc, #144]	; (8003c18 <BSP_LCD_MspInit+0x194>)
 8003b88:	f001 ff80 	bl	8005a8c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003b8c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b96:	4619      	mov	r1, r3
 8003b98:	4820      	ldr	r0, [pc, #128]	; (8003c1c <BSP_LCD_MspInit+0x198>)
 8003b9a:	f001 ff77 	bl	8005a8c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003b9e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba8:	4619      	mov	r1, r3
 8003baa:	481d      	ldr	r0, [pc, #116]	; (8003c20 <BSP_LCD_MspInit+0x19c>)
 8003bac:	f001 ff6e 	bl	8005a8c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003bb0:	2348      	movs	r3, #72	; 0x48
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	481a      	ldr	r0, [pc, #104]	; (8003c24 <BSP_LCD_MspInit+0x1a0>)
 8003bbc:	f001 ff66 	bl	8005a8c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4816      	ldr	r0, [pc, #88]	; (8003c28 <BSP_LCD_MspInit+0x1a4>)
 8003bce:	f001 ff5d 	bl	8005a8c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003bd2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4813      	ldr	r0, [pc, #76]	; (8003c2c <BSP_LCD_MspInit+0x1a8>)
 8003be0:	f001 ff54 	bl	8005a8c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003be4:	2303      	movs	r3, #3
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003be8:	2309      	movs	r3, #9
 8003bea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	480a      	ldr	r0, [pc, #40]	; (8003c1c <BSP_LCD_MspInit+0x198>)
 8003bf4:	f001 ff4a 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003bf8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c02:	4619      	mov	r1, r3
 8003c04:	4809      	ldr	r0, [pc, #36]	; (8003c2c <BSP_LCD_MspInit+0x1a8>)
 8003c06:	f001 ff41 	bl	8005a8c <HAL_GPIO_Init>
}
 8003c0a:	bf00      	nop
 8003c0c:	3738      	adds	r7, #56	; 0x38
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40020000 	.word	0x40020000
 8003c1c:	40020400 	.word	0x40020400
 8003c20:	40020800 	.word	0x40020800
 8003c24:	40020c00 	.word	0x40020c00
 8003c28:	40021400 	.word	0x40021400
 8003c2c:	40021800 	.word	0x40021800

08003c30 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	603a      	str	r2, [r7, #0]
 8003c3a:	80fb      	strh	r3, [r7, #6]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <BSP_LCD_DrawPixel+0x44>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <BSP_LCD_DrawPixel+0x48>)
 8003c46:	2134      	movs	r1, #52	; 0x34
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	335c      	adds	r3, #92	; 0x5c
 8003c50:	681c      	ldr	r4, [r3, #0]
 8003c52:	88bd      	ldrh	r5, [r7, #4]
 8003c54:	f7ff fc96 	bl	8003584 <BSP_LCD_GetXSize>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	fb03 f205 	mul.w	r2, r3, r5
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4423      	add	r3, r4
 8003c66:	461a      	mov	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bdb0      	pop	{r4, r5, r7, pc}
 8003c74:	200001c0 	.word	0x200001c0
 8003c78:	200007e8 	.word	0x200007e8

08003c7c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	603a      	str	r2, [r7, #0]
 8003c86:	80fb      	strh	r3, [r7, #6]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	2300      	movs	r3, #0
 8003c92:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <DrawChar+0x16c>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4953      	ldr	r1, [pc, #332]	; (8003dec <DrawChar+0x170>)
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3308      	adds	r3, #8
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	88db      	ldrh	r3, [r3, #6]
 8003cae:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003cb0:	4b4d      	ldr	r3, [pc, #308]	; (8003de8 <DrawChar+0x16c>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	494d      	ldr	r1, [pc, #308]	; (8003dec <DrawChar+0x170>)
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	889b      	ldrh	r3, [r3, #4]
 8003cc6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003cc8:	8a3b      	ldrh	r3, [r7, #16]
 8003cca:	3307      	adds	r3, #7
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	da00      	bge.n	8003cd2 <DrawChar+0x56>
 8003cd0:	3307      	adds	r3, #7
 8003cd2:	10db      	asrs	r3, r3, #3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	8a3b      	ldrh	r3, [r7, #16]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e076      	b.n	8003dd6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003ce8:	8a3b      	ldrh	r3, [r7, #16]
 8003cea:	3307      	adds	r3, #7
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da00      	bge.n	8003cf2 <DrawChar+0x76>
 8003cf0:	3307      	adds	r3, #7
 8003cf2:	10db      	asrs	r3, r3, #3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	fb03 f302 	mul.w	r3, r3, r2
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003d02:	8a3b      	ldrh	r3, [r7, #16]
 8003d04:	3307      	adds	r3, #7
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da00      	bge.n	8003d0c <DrawChar+0x90>
 8003d0a:	3307      	adds	r3, #7
 8003d0c:	10db      	asrs	r3, r3, #3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d002      	beq.n	8003d18 <DrawChar+0x9c>
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d004      	beq.n	8003d20 <DrawChar+0xa4>
 8003d16:	e00c      	b.n	8003d32 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	617b      	str	r3, [r7, #20]
      break;
 8003d1e:	e016      	b.n	8003d4e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	3201      	adds	r2, #1
 8003d2a:	7812      	ldrb	r2, [r2, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
      break;
 8003d30:	e00d      	b.n	8003d4e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	041a      	lsls	r2, r3, #16
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	4313      	orrs	r3, r2
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	3202      	adds	r2, #2
 8003d46:	7812      	ldrb	r2, [r2, #0]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
      break;
 8003d4c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e036      	b.n	8003dc2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003d54:	8a3a      	ldrh	r2, [r7, #16]
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	1ad2      	subs	r2, r2, r3
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	2201      	movs	r2, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d012      	beq.n	8003d96 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	4413      	add	r3, r2
 8003d78:	b298      	uxth	r0, r3
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <DrawChar+0x16c>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	491b      	ldr	r1, [pc, #108]	; (8003dec <DrawChar+0x170>)
 8003d80:	4613      	mov	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	88bb      	ldrh	r3, [r7, #4]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7ff ff4e 	bl	8003c30 <BSP_LCD_DrawPixel>
 8003d94:	e012      	b.n	8003dbc <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b298      	uxth	r0, r3
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <DrawChar+0x16c>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4911      	ldr	r1, [pc, #68]	; (8003dec <DrawChar+0x170>)
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	3304      	adds	r3, #4
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	88bb      	ldrh	r3, [r7, #4]
 8003db6:	4619      	mov	r1, r3
 8003db8:	f7ff ff3a 	bl	8003c30 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	8a3b      	ldrh	r3, [r7, #16]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3c4      	bcc.n	8003d54 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003dca:	88bb      	ldrh	r3, [r7, #4]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	8a7b      	ldrh	r3, [r7, #18]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d384      	bcc.n	8003ce8 <DrawChar+0x6c>
  }
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	200001c0 	.word	0x200001c0
 8003dec:	200001c4 	.word	0x200001c4

08003df0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <FillBuffer+0x68>)
 8003e00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e04:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <FillBuffer+0x68>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003e0c:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <FillBuffer+0x68>)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <FillBuffer+0x68>)
 8003e14:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <FillBuffer+0x6c>)
 8003e16:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003e18:	480f      	ldr	r0, [pc, #60]	; (8003e58 <FillBuffer+0x68>)
 8003e1a:	f001 fbab 	bl	8005574 <HAL_DMA2D_Init>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d115      	bne.n	8003e50 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003e24:	68f9      	ldr	r1, [r7, #12]
 8003e26:	480c      	ldr	r0, [pc, #48]	; (8003e58 <FillBuffer+0x68>)
 8003e28:	f001 fd02 	bl	8005830 <HAL_DMA2D_ConfigLayer>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10e      	bne.n	8003e50 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69f9      	ldr	r1, [r7, #28]
 8003e3c:	4806      	ldr	r0, [pc, #24]	; (8003e58 <FillBuffer+0x68>)
 8003e3e:	f001 fbe2 	bl	8005606 <HAL_DMA2D_Start>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d103      	bne.n	8003e50 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003e48:	210a      	movs	r1, #10
 8003e4a:	4803      	ldr	r0, [pc, #12]	; (8003e58 <FillBuffer+0x68>)
 8003e4c:	f001 fc06 	bl	800565c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000150 	.word	0x20000150
 8003e5c:	4002b000 	.word	0x4002b000

08003e60 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003e64:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003e66:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <BSP_SDRAM_Init+0xb0>)
 8003e68:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003e6a:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <BSP_SDRAM_Init+0xb4>)
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003e70:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <BSP_SDRAM_Init+0xb4>)
 8003e72:	2207      	movs	r2, #7
 8003e74:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003e76:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <BSP_SDRAM_Init+0xb4>)
 8003e78:	2204      	movs	r2, #4
 8003e7a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <BSP_SDRAM_Init+0xb4>)
 8003e7e:	2207      	movs	r2, #7
 8003e80:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003e82:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <BSP_SDRAM_Init+0xb4>)
 8003e84:	2202      	movs	r2, #2
 8003e86:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003e88:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <BSP_SDRAM_Init+0xb4>)
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003e8e:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <BSP_SDRAM_Init+0xb4>)
 8003e90:	2202      	movs	r2, #2
 8003e92:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003e94:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003e9a:	4b1c      	ldr	r3, [pc, #112]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003ea6:	4b19      	ldr	r3, [pc, #100]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003eb4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003eb8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003ec8:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003ed0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ed4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	480c      	ldr	r0, [pc, #48]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003eda:	f000 f87f 	bl	8003fdc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003ede:	490d      	ldr	r1, [pc, #52]	; (8003f14 <BSP_SDRAM_Init+0xb4>)
 8003ee0:	480a      	ldr	r0, [pc, #40]	; (8003f0c <BSP_SDRAM_Init+0xac>)
 8003ee2:	f003 fba3 	bl	800762c <HAL_SDRAM_Init>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <BSP_SDRAM_Init+0xb8>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e002      	b.n	8003efa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <BSP_SDRAM_Init+0xb8>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003efa:	f240 506a 	movw	r0, #1386	; 0x56a
 8003efe:	f000 f80d 	bl	8003f1c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <BSP_SDRAM_Init+0xb8>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	200001dc 	.word	0x200001dc
 8003f10:	a0000140 	.word	0xa0000140
 8003f14:	20000210 	.word	0x20000210
 8003f18:	20000060 	.word	0x20000060

08003f1c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003f28:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f2e:	4b29      	ldr	r3, [pc, #164]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f30:	2208      	movs	r2, #8
 8003f32:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f34:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f44:	4923      	ldr	r1, [pc, #140]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f46:	4824      	ldr	r0, [pc, #144]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f48:	f003 fba4 	bl	8007694 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	f000 f9c3 	bl	80042d8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f54:	2202      	movs	r2, #2
 8003f56:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f6e:	4919      	ldr	r1, [pc, #100]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f70:	4819      	ldr	r0, [pc, #100]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f72:	f003 fb8f 	bl	8007694 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f78:	2203      	movs	r2, #3
 8003f7a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f7e:	2208      	movs	r2, #8
 8003f80:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f84:	2204      	movs	r2, #4
 8003f86:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f88:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f92:	4910      	ldr	r1, [pc, #64]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f94:	4810      	ldr	r0, [pc, #64]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f96:	f003 fb7d 	bl	8007694 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003f9a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003f9e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fa8:	2208      	movs	r2, #8
 8003faa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fb6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fbc:	4905      	ldr	r1, [pc, #20]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fbe:	4806      	ldr	r0, [pc, #24]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fc0:	f003 fb68 	bl	8007694 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4804      	ldr	r0, [pc, #16]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fc8:	f003 fb99 	bl	80076fe <HAL_SDRAM_ProgramRefreshRate>
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	2000022c 	.word	0x2000022c
 8003fd8:	200001dc 	.word	0x200001dc

08003fdc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b090      	sub	sp, #64	; 0x40
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80ec 	beq.w	80041c6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff2:	4b77      	ldr	r3, [pc, #476]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	4a76      	ldr	r2, [pc, #472]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6393      	str	r3, [r2, #56]	; 0x38
 8003ffe:	4b74      	ldr	r3, [pc, #464]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	4b70      	ldr	r3, [pc, #448]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4a6f      	ldr	r2, [pc, #444]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004018:	6313      	str	r3, [r2, #48]	; 0x30
 800401a:	4b6d      	ldr	r3, [pc, #436]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4a68      	ldr	r2, [pc, #416]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	6313      	str	r3, [r2, #48]	; 0x30
 8004036:	4b66      	ldr	r3, [pc, #408]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	623b      	str	r3, [r7, #32]
 8004040:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	4b62      	ldr	r3, [pc, #392]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a61      	ldr	r2, [pc, #388]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 800404c:	f043 0304 	orr.w	r3, r3, #4
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b5f      	ldr	r3, [pc, #380]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	4b5b      	ldr	r3, [pc, #364]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	4a5a      	ldr	r2, [pc, #360]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004068:	f043 0308 	orr.w	r3, r3, #8
 800406c:	6313      	str	r3, [r2, #48]	; 0x30
 800406e:	4b58      	ldr	r3, [pc, #352]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	4b54      	ldr	r3, [pc, #336]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a53      	ldr	r2, [pc, #332]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 8004084:	f043 0310 	orr.w	r3, r3, #16
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	4b4d      	ldr	r3, [pc, #308]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a4c      	ldr	r2, [pc, #304]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 80040a0:	f043 0320 	orr.w	r3, r3, #32
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	4b46      	ldr	r3, [pc, #280]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a45      	ldr	r2, [pc, #276]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 80040bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b43      	ldr	r3, [pc, #268]	; (80041d0 <BSP_SDRAM_MspInit+0x1f4>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80040ce:	2302      	movs	r3, #2
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80040d2:	2302      	movs	r3, #2
 80040d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80040da:	230c      	movs	r3, #12
 80040dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80040de:	2360      	movs	r3, #96	; 0x60
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80040e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040e6:	4619      	mov	r1, r3
 80040e8:	483a      	ldr	r0, [pc, #232]	; (80041d4 <BSP_SDRAM_MspInit+0x1f8>)
 80040ea:	f001 fccf 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80040ee:	2301      	movs	r3, #1
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80040f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f6:	4619      	mov	r1, r3
 80040f8:	4837      	ldr	r0, [pc, #220]	; (80041d8 <BSP_SDRAM_MspInit+0x1fc>)
 80040fa:	f001 fcc7 	bl	8005a8c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80040fe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004108:	4619      	mov	r1, r3
 800410a:	4834      	ldr	r0, [pc, #208]	; (80041dc <BSP_SDRAM_MspInit+0x200>)
 800410c:	f001 fcbe 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004110:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800411a:	4619      	mov	r1, r3
 800411c:	4830      	ldr	r0, [pc, #192]	; (80041e0 <BSP_SDRAM_MspInit+0x204>)
 800411e:	f001 fcb5 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004122:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800412c:	4619      	mov	r1, r3
 800412e:	482d      	ldr	r0, [pc, #180]	; (80041e4 <BSP_SDRAM_MspInit+0x208>)
 8004130:	f001 fcac 	bl	8005a8c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004134:	f248 1333 	movw	r3, #33075	; 0x8133
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800413a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800413e:	4619      	mov	r1, r3
 8004140:	4829      	ldr	r0, [pc, #164]	; (80041e8 <BSP_SDRAM_MspInit+0x20c>)
 8004142:	f001 fca3 	bl	8005a8c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004146:	4b29      	ldr	r3, [pc, #164]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 8004148:	2200      	movs	r2, #0
 800414a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800414c:	4b27      	ldr	r3, [pc, #156]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 800414e:	2280      	movs	r2, #128	; 0x80
 8004150:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004152:	4b26      	ldr	r3, [pc, #152]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 8004154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004158:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 800415c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004160:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004162:	4b22      	ldr	r3, [pc, #136]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 8004164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004168:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800416a:	4b20      	ldr	r3, [pc, #128]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 800416c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004170:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 8004174:	2200      	movs	r2, #0
 8004176:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004178:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 800417a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800417e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004180:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 8004182:	2200      	movs	r2, #0
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004186:	4b19      	ldr	r3, [pc, #100]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 8004188:	2203      	movs	r2, #3
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800418c:	4b17      	ldr	r3, [pc, #92]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 800418e:	2200      	movs	r2, #0
 8004190:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004192:	4b16      	ldr	r3, [pc, #88]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004198:	4b14      	ldr	r3, [pc, #80]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 800419a:	4a15      	ldr	r2, [pc, #84]	; (80041f0 <BSP_SDRAM_MspInit+0x214>)
 800419c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a12      	ldr	r2, [pc, #72]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
 80041a4:	4a11      	ldr	r2, [pc, #68]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80041aa:	4810      	ldr	r0, [pc, #64]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 80041ac:	f000 fec2 	bl	8004f34 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80041b0:	480e      	ldr	r0, [pc, #56]	; (80041ec <BSP_SDRAM_MspInit+0x210>)
 80041b2:	f000 fe11 	bl	8004dd8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80041b6:	2200      	movs	r2, #0
 80041b8:	210f      	movs	r1, #15
 80041ba:	2038      	movs	r0, #56	; 0x38
 80041bc:	f000 fdd5 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80041c0:	2038      	movs	r0, #56	; 0x38
 80041c2:	f000 fdee 	bl	8004da2 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80041c6:	bf00      	nop
 80041c8:	3740      	adds	r7, #64	; 0x40
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40020400 	.word	0x40020400
 80041d8:	40020800 	.word	0x40020800
 80041dc:	40020c00 	.word	0x40020c00
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40021400 	.word	0x40021400
 80041e8:	40021800 	.word	0x40021800
 80041ec:	2000023c 	.word	0x2000023c
 80041f0:	40026410 	.word	0x40026410

080041f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <HAL_Init+0x40>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <HAL_Init+0x40>)
 80041fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_Init+0x40>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_Init+0x40>)
 800420a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800420e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <HAL_Init+0x40>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a07      	ldr	r2, [pc, #28]	; (8004234 <HAL_Init+0x40>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800421c:	2003      	movs	r0, #3
 800421e:	f000 fd99 	bl	8004d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004222:	200f      	movs	r0, #15
 8004224:	f000 f808 	bl	8004238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004228:	f7fe fc0c 	bl	8002a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023c00 	.word	0x40023c00

08004238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <HAL_InitTick+0x54>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_InitTick+0x58>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	4619      	mov	r1, r3
 800424a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fdb1 	bl	8004dbe <HAL_SYSTICK_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e00e      	b.n	8004284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b0f      	cmp	r3, #15
 800426a:	d80a      	bhi.n	8004282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800426c:	2200      	movs	r2, #0
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	f000 fd79 	bl	8004d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004278:	4a06      	ldr	r2, [pc, #24]	; (8004294 <HAL_InitTick+0x5c>)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000000 	.word	0x20000000
 8004290:	20000068 	.word	0x20000068
 8004294:	20000064 	.word	0x20000064

08004298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_IncTick+0x20>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_IncTick+0x24>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <HAL_IncTick+0x24>)
 80042aa:	6013      	str	r3, [r2, #0]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000068 	.word	0x20000068
 80042bc:	20000894 	.word	0x20000894

080042c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return uwTick;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_GetTick+0x14>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000894 	.word	0x20000894

080042d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042e0:	f7ff ffee 	bl	80042c0 <HAL_GetTick>
 80042e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d005      	beq.n	80042fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_Delay+0x44>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042fe:	bf00      	nop
 8004300:	f7ff ffde 	bl	80042c0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	429a      	cmp	r2, r3
 800430e:	d8f7      	bhi.n	8004300 <HAL_Delay+0x28>
  {
  }
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000068 	.word	0x20000068

08004320 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e033      	b.n	800439e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd fcdc 	bl	8001cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b00      	cmp	r3, #0
 800435c:	d118      	bne.n	8004390 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004366:	f023 0302 	bic.w	r3, r3, #2
 800436a:	f043 0202 	orr.w	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 faa0 	bl	80048b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	f043 0201 	orr.w	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
 800438e:	e001      	b.n	8004394 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_ADC_Stop+0x16>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e021      	b.n	8004400 <HAL_ADC_Stop+0x5a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	f043 0201 	orr.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_ADC_Start_DMA+0x1e>
 8004426:	2302      	movs	r3, #2
 8004428:	e0e9      	b.n	80045fe <HAL_ADC_Start_DMA+0x1f2>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d018      	beq.n	8004472 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004450:	4b6d      	ldr	r3, [pc, #436]	; (8004608 <HAL_ADC_Start_DMA+0x1fc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6d      	ldr	r2, [pc, #436]	; (800460c <HAL_ADC_Start_DMA+0x200>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	0c9a      	lsrs	r2, r3, #18
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004464:	e002      	b.n	800446c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3b01      	subs	r3, #1
 800446a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f9      	bne.n	8004466 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004480:	d107      	bne.n	8004492 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004490:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	f040 80a1 	bne.w	80045e4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e0:	d106      	bne.n	80044f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f023 0206 	bic.w	r2, r3, #6
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
 80044ee:	e002      	b.n	80044f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044fe:	4b44      	ldr	r3, [pc, #272]	; (8004610 <HAL_ADC_Start_DMA+0x204>)
 8004500:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	4a43      	ldr	r2, [pc, #268]	; (8004614 <HAL_ADC_Start_DMA+0x208>)
 8004508:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	4a42      	ldr	r2, [pc, #264]	; (8004618 <HAL_ADC_Start_DMA+0x20c>)
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	4a41      	ldr	r2, [pc, #260]	; (800461c <HAL_ADC_Start_DMA+0x210>)
 8004518:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004522:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004532:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004542:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	334c      	adds	r3, #76	; 0x4c
 800454e:	4619      	mov	r1, r3
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f000 fd4c 	bl	8004ff0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2b00      	cmp	r3, #0
 8004562:	d12a      	bne.n	80045ba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2d      	ldr	r2, [pc, #180]	; (8004620 <HAL_ADC_Start_DMA+0x214>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d015      	beq.n	800459a <HAL_ADC_Start_DMA+0x18e>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2c      	ldr	r2, [pc, #176]	; (8004624 <HAL_ADC_Start_DMA+0x218>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d105      	bne.n	8004584 <HAL_ADC_Start_DMA+0x178>
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_ADC_Start_DMA+0x204>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a27      	ldr	r2, [pc, #156]	; (8004628 <HAL_ADC_Start_DMA+0x21c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d136      	bne.n	80045fc <HAL_ADC_Start_DMA+0x1f0>
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_ADC_Start_DMA+0x204>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d130      	bne.n	80045fc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d129      	bne.n	80045fc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	e020      	b.n	80045fc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_ADC_Start_DMA+0x214>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d11b      	bne.n	80045fc <HAL_ADC_Start_DMA+0x1f0>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d114      	bne.n	80045fc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045e0:	609a      	str	r2, [r3, #8]
 80045e2:	e00b      	b.n	80045fc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f043 0210 	orr.w	r2, r3, #16
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	f043 0201 	orr.w	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000000 	.word	0x20000000
 800460c:	431bde83 	.word	0x431bde83
 8004610:	40012300 	.word	0x40012300
 8004614:	08004ab1 	.word	0x08004ab1
 8004618:	08004b6b 	.word	0x08004b6b
 800461c:	08004b87 	.word	0x08004b87
 8004620:	40012000 	.word	0x40012000
 8004624:	40012100 	.word	0x40012100
 8004628:	40012200 	.word	0x40012200

0800462c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x1c>
 800466c:	2302      	movs	r3, #2
 800466e:	e113      	b.n	8004898 <HAL_ADC_ConfigChannel+0x244>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b09      	cmp	r3, #9
 800467e:	d925      	bls.n	80046cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68d9      	ldr	r1, [r3, #12]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	3b1e      	subs	r3, #30
 8004696:	2207      	movs	r2, #7
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43da      	mvns	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	400a      	ands	r2, r1
 80046a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68d9      	ldr	r1, [r3, #12]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	4618      	mov	r0, r3
 80046b8:	4603      	mov	r3, r0
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4403      	add	r3, r0
 80046be:	3b1e      	subs	r3, #30
 80046c0:	409a      	lsls	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	e022      	b.n	8004712 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6919      	ldr	r1, [r3, #16]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	2207      	movs	r2, #7
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	400a      	ands	r2, r1
 80046ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6919      	ldr	r1, [r3, #16]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	4618      	mov	r0, r3
 8004702:	4603      	mov	r3, r0
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	4403      	add	r3, r0
 8004708:	409a      	lsls	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d824      	bhi.n	8004764 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	3b05      	subs	r3, #5
 800472c:	221f      	movs	r2, #31
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	400a      	ands	r2, r1
 800473a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	4618      	mov	r0, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	3b05      	subs	r3, #5
 8004756:	fa00 f203 	lsl.w	r2, r0, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	635a      	str	r2, [r3, #52]	; 0x34
 8004762:	e04c      	b.n	80047fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d824      	bhi.n	80047b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	3b23      	subs	r3, #35	; 0x23
 800477e:	221f      	movs	r2, #31
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43da      	mvns	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	400a      	ands	r2, r1
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	4618      	mov	r0, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	3b23      	subs	r3, #35	; 0x23
 80047a8:	fa00 f203 	lsl.w	r2, r0, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
 80047b4:	e023      	b.n	80047fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	3b41      	subs	r3, #65	; 0x41
 80047c8:	221f      	movs	r2, #31
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43da      	mvns	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	400a      	ands	r2, r1
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4618      	mov	r0, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	3b41      	subs	r3, #65	; 0x41
 80047f2:	fa00 f203 	lsl.w	r2, r0, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047fe:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <HAL_ADC_ConfigChannel+0x250>)
 8004800:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a28      	ldr	r2, [pc, #160]	; (80048a8 <HAL_ADC_ConfigChannel+0x254>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10f      	bne.n	800482c <HAL_ADC_ConfigChannel+0x1d8>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b12      	cmp	r3, #18
 8004812:	d10b      	bne.n	800482c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <HAL_ADC_ConfigChannel+0x254>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d12b      	bne.n	800488e <HAL_ADC_ConfigChannel+0x23a>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <HAL_ADC_ConfigChannel+0x258>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <HAL_ADC_ConfigChannel+0x1f4>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b11      	cmp	r3, #17
 8004846:	d122      	bne.n	800488e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a11      	ldr	r2, [pc, #68]	; (80048ac <HAL_ADC_ConfigChannel+0x258>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d111      	bne.n	800488e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800486a:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <HAL_ADC_ConfigChannel+0x25c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <HAL_ADC_ConfigChannel+0x260>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	0c9a      	lsrs	r2, r3, #18
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004880:	e002      	b.n	8004888 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	3b01      	subs	r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f9      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012300 	.word	0x40012300
 80048a8:	40012000 	.word	0x40012000
 80048ac:	10000012 	.word	0x10000012
 80048b0:	20000000 	.word	0x20000000
 80048b4:	431bde83 	.word	0x431bde83

080048b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048c0:	4b79      	ldr	r3, [pc, #484]	; (8004aa8 <ADC_Init+0x1f0>)
 80048c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	021a      	lsls	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6899      	ldr	r1, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	4a58      	ldr	r2, [pc, #352]	; (8004aac <ADC_Init+0x1f4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800495e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6899      	ldr	r1, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6899      	ldr	r1, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	e00f      	b.n	80049b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0202 	bic.w	r2, r2, #2
 80049c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6899      	ldr	r1, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	7e1b      	ldrb	r3, [r3, #24]
 80049d0:	005a      	lsls	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01b      	beq.n	8004a1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	035a      	lsls	r2, r3, #13
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	e007      	b.n	8004a2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	051a      	lsls	r2, r3, #20
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6899      	ldr	r1, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a6e:	025a      	lsls	r2, r3, #9
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6899      	ldr	r1, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	029a      	lsls	r2, r3, #10
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40012300 	.word	0x40012300
 8004aac:	0f000001 	.word	0x0f000001

08004ab0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d13c      	bne.n	8004b44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d12b      	bne.n	8004b3c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d127      	bne.n	8004b3c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d119      	bne.n	8004b3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0220 	bic.w	r2, r2, #32
 8004b16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f043 0201 	orr.w	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7fd f82d 	bl	8001b9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b42:	e00e      	b.n	8004b62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff fd75 	bl	8004640 <HAL_ADC_ErrorCallback>
}
 8004b56:	e004      	b.n	8004b62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff fd57 	bl	800462c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2240      	movs	r2, #64	; 0x40
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f7ff fd4a 	bl	8004640 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004be6:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	60d3      	str	r3, [r2, #12]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <__NVIC_GetPriorityGrouping+0x18>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	f003 0307 	and.w	r3, r3, #7
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	db0b      	blt.n	8004c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	f003 021f 	and.w	r2, r3, #31
 8004c30:	4907      	ldr	r1, [pc, #28]	; (8004c50 <__NVIC_EnableIRQ+0x38>)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	2001      	movs	r0, #1
 8004c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000e100 	.word	0xe000e100

08004c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	6039      	str	r1, [r7, #0]
 8004c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	db0a      	blt.n	8004c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	490c      	ldr	r1, [pc, #48]	; (8004ca0 <__NVIC_SetPriority+0x4c>)
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	0112      	lsls	r2, r2, #4
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	440b      	add	r3, r1
 8004c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c7c:	e00a      	b.n	8004c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	4908      	ldr	r1, [pc, #32]	; (8004ca4 <__NVIC_SetPriority+0x50>)
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	0112      	lsls	r2, r2, #4
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	440b      	add	r3, r1
 8004c92:	761a      	strb	r2, [r3, #24]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	e000e100 	.word	0xe000e100
 8004ca4:	e000ed00 	.word	0xe000ed00

08004ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	; 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f1c3 0307 	rsb	r3, r3, #7
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	bf28      	it	cs
 8004cc6:	2304      	movcs	r3, #4
 8004cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d902      	bls.n	8004cd8 <NVIC_EncodePriority+0x30>
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	3b03      	subs	r3, #3
 8004cd6:	e000      	b.n	8004cda <NVIC_EncodePriority+0x32>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	401a      	ands	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	43d9      	mvns	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d00:	4313      	orrs	r3, r2
         );
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3724      	adds	r7, #36	; 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d20:	d301      	bcc.n	8004d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d22:	2301      	movs	r3, #1
 8004d24:	e00f      	b.n	8004d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d26:	4a0a      	ldr	r2, [pc, #40]	; (8004d50 <SysTick_Config+0x40>)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d2e:	210f      	movs	r1, #15
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	f7ff ff8e 	bl	8004c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <SysTick_Config+0x40>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <SysTick_Config+0x40>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	e000e010 	.word	0xe000e010

08004d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff29 	bl	8004bb4 <__NVIC_SetPriorityGrouping>
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d7c:	f7ff ff3e 	bl	8004bfc <__NVIC_GetPriorityGrouping>
 8004d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	6978      	ldr	r0, [r7, #20]
 8004d88:	f7ff ff8e 	bl	8004ca8 <NVIC_EncodePriority>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d92:	4611      	mov	r1, r2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff5d 	bl	8004c54 <__NVIC_SetPriority>
}
 8004d9a:	bf00      	nop
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	4603      	mov	r3, r0
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ff31 	bl	8004c18 <__NVIC_EnableIRQ>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ffa2 	bl	8004d10 <SysTick_Config>
 8004dcc:	4603      	mov	r3, r0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004de4:	f7ff fa6c 	bl	80042c0 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e099      	b.n	8004f28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e14:	e00f      	b.n	8004e36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e16:	f7ff fa53 	bl	80042c0 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b05      	cmp	r3, #5
 8004e22:	d908      	bls.n	8004e36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e078      	b.n	8004f28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e8      	bne.n	8004e16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <HAL_DMA_Init+0x158>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d107      	bne.n	8004ea0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0307 	bic.w	r3, r3, #7
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d117      	bne.n	8004efa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00e      	beq.n	8004efa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 facd 	bl	800547c <DMA_CheckFifoParam>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2240      	movs	r2, #64	; 0x40
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e016      	b.n	8004f28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa84 	bl	8005410 <DMA_CalcBaseAndBitshift>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f10:	223f      	movs	r2, #63	; 0x3f
 8004f12:	409a      	lsls	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	f010803f 	.word	0xf010803f

08004f34 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e050      	b.n	8004fe8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d101      	bne.n	8004f56 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004f52:	2302      	movs	r3, #2
 8004f54:	e048      	b.n	8004fe8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2221      	movs	r2, #33	; 0x21
 8004f94:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa3a 	bl	8005410 <DMA_CalcBaseAndBitshift>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc8:	223f      	movs	r2, #63	; 0x3f
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005006:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_DMA_Start_IT+0x26>
 8005012:	2302      	movs	r3, #2
 8005014:	e040      	b.n	8005098 <HAL_DMA_Start_IT+0xa8>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b01      	cmp	r3, #1
 8005028:	d12f      	bne.n	800508a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f9b8 	bl	80053b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005048:	223f      	movs	r2, #63	; 0x3f
 800504a:	409a      	lsls	r2, r3
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0216 	orr.w	r2, r2, #22
 800505e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0208 	orr.w	r2, r2, #8
 8005076:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e005      	b.n	8005096 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005092:	2302      	movs	r3, #2
 8005094:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050ac:	4b92      	ldr	r3, [pc, #584]	; (80052f8 <HAL_DMA_IRQHandler+0x258>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a92      	ldr	r2, [pc, #584]	; (80052fc <HAL_DMA_IRQHandler+0x25c>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	0a9b      	lsrs	r3, r3, #10
 80050b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ca:	2208      	movs	r2, #8
 80050cc:	409a      	lsls	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01a      	beq.n	800510c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0204 	bic.w	r2, r2, #4
 80050f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f8:	2208      	movs	r2, #8
 80050fa:	409a      	lsls	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f043 0201 	orr.w	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	2201      	movs	r2, #1
 8005112:	409a      	lsls	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d012      	beq.n	8005142 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00b      	beq.n	8005142 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512e:	2201      	movs	r2, #1
 8005130:	409a      	lsls	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f043 0202 	orr.w	r2, r3, #2
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005146:	2204      	movs	r2, #4
 8005148:	409a      	lsls	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d012      	beq.n	8005178 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005164:	2204      	movs	r2, #4
 8005166:	409a      	lsls	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005170:	f043 0204 	orr.w	r2, r3, #4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517c:	2210      	movs	r2, #16
 800517e:	409a      	lsls	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d043      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d03c      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519a:	2210      	movs	r2, #16
 800519c:	409a      	lsls	r2, r3
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d018      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d108      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d024      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
 80051ce:	e01f      	b.n	8005210 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
 80051e0:	e016      	b.n	8005210 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d107      	bne.n	8005200 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0208 	bic.w	r2, r2, #8
 80051fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005214:	2220      	movs	r2, #32
 8005216:	409a      	lsls	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 808e 	beq.w	800533e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8086 	beq.w	800533e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005236:	2220      	movs	r2, #32
 8005238:	409a      	lsls	r2, r3
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b05      	cmp	r3, #5
 8005248:	d136      	bne.n	80052b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0216 	bic.w	r2, r2, #22
 8005258:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005268:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d103      	bne.n	800527a <HAL_DMA_IRQHandler+0x1da>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0208 	bic.w	r2, r2, #8
 8005288:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528e:	223f      	movs	r2, #63	; 0x3f
 8005290:	409a      	lsls	r2, r3
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d07d      	beq.n	80053aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
        }
        return;
 80052b6:	e078      	b.n	80053aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01c      	beq.n	8005300 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d108      	bne.n	80052e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d030      	beq.n	800533e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	4798      	blx	r3
 80052e4:	e02b      	b.n	800533e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d027      	beq.n	800533e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	4798      	blx	r3
 80052f6:	e022      	b.n	800533e <HAL_DMA_IRQHandler+0x29e>
 80052f8:	20000000 	.word	0x20000000
 80052fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10f      	bne.n	800532e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0210 	bic.w	r2, r2, #16
 800531c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	2b00      	cmp	r3, #0
 8005344:	d032      	beq.n	80053ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d022      	beq.n	8005398 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2205      	movs	r2, #5
 8005356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	3301      	adds	r3, #1
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	429a      	cmp	r2, r3
 8005374:	d307      	bcc.n	8005386 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f2      	bne.n	800536a <HAL_DMA_IRQHandler+0x2ca>
 8005384:	e000      	b.n	8005388 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005386:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
 80053a8:	e000      	b.n	80053ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80053aa:	bf00      	nop
    }
  }
}
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop

080053b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d108      	bne.n	80053f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053f2:	e007      	b.n	8005404 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	60da      	str	r2, [r3, #12]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	3b10      	subs	r3, #16
 8005420:	4a14      	ldr	r2, [pc, #80]	; (8005474 <DMA_CalcBaseAndBitshift+0x64>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	091b      	lsrs	r3, r3, #4
 8005428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800542a:	4a13      	ldr	r2, [pc, #76]	; (8005478 <DMA_CalcBaseAndBitshift+0x68>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b03      	cmp	r3, #3
 800543c:	d909      	bls.n	8005452 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	1d1a      	adds	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	659a      	str	r2, [r3, #88]	; 0x58
 8005450:	e007      	b.n	8005462 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	aaaaaaab 	.word	0xaaaaaaab
 8005478:	0800da04 	.word	0x0800da04

0800547c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11f      	bne.n	80054d6 <DMA_CheckFifoParam+0x5a>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d856      	bhi.n	800554a <DMA_CheckFifoParam+0xce>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <DMA_CheckFifoParam+0x28>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054b5 	.word	0x080054b5
 80054a8:	080054c7 	.word	0x080054c7
 80054ac:	080054b5 	.word	0x080054b5
 80054b0:	0800554b 	.word	0x0800554b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d046      	beq.n	800554e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c4:	e043      	b.n	800554e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054ce:	d140      	bne.n	8005552 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d4:	e03d      	b.n	8005552 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054de:	d121      	bne.n	8005524 <DMA_CheckFifoParam+0xa8>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d837      	bhi.n	8005556 <DMA_CheckFifoParam+0xda>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <DMA_CheckFifoParam+0x70>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	080054fd 	.word	0x080054fd
 80054f0:	08005503 	.word	0x08005503
 80054f4:	080054fd 	.word	0x080054fd
 80054f8:	08005515 	.word	0x08005515
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005500:	e030      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d025      	beq.n	800555a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005512:	e022      	b.n	800555a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800551c:	d11f      	bne.n	800555e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005522:	e01c      	b.n	800555e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d903      	bls.n	8005532 <DMA_CheckFifoParam+0xb6>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d003      	beq.n	8005538 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005530:	e018      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
      break;
 8005536:	e015      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e00b      	b.n	8005562 <DMA_CheckFifoParam+0xe6>
      break;
 800554a:	bf00      	nop
 800554c:	e00a      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 800554e:	bf00      	nop
 8005550:	e008      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 8005552:	bf00      	nop
 8005554:	e006      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 8005556:	bf00      	nop
 8005558:	e004      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;   
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 8005562:	bf00      	nop
    }
  } 
  
  return status; 
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop

08005574 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e03b      	b.n	80055fe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fc fcaa 	bl	8001ef4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	f023 0107 	bic.w	r1, r3, #7
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68d1      	ldr	r1, [r2, #12]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6812      	ldr	r2, [r2, #0]
 80055ea:	430b      	orrs	r3, r1
 80055ec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af02      	add	r7, sp, #8
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_DMA2D_Start+0x1c>
 800561e:	2302      	movs	r3, #2
 8005620:	e018      	b.n	8005654 <HAL_DMA2D_Start+0x4e>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2202      	movs	r2, #2
 800562e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f989 	bl	8005954 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d056      	beq.n	8005726 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005678:	f7fe fe22 	bl	80042c0 <HAL_GetTick>
 800567c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800567e:	e04b      	b.n	8005718 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800568e:	2b00      	cmp	r3, #0
 8005690:	d023      	beq.n	80056da <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a0:	f043 0202 	orr.w	r2, r3, #2
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b6:	f043 0201 	orr.w	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2221      	movs	r2, #33	; 0x21
 80056c4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2204      	movs	r2, #4
 80056ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e0a5      	b.n	8005826 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d01a      	beq.n	8005718 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056e2:	f7fe fded 	bl	80042c0 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <HAL_DMA2D_PollForTransfer+0x9c>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10f      	bne.n	8005718 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fc:	f043 0220 	orr.w	r2, r3, #32
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2203      	movs	r2, #3
 8005708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e086      	b.n	8005826 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0ac      	beq.n	8005680 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d061      	beq.n	800580c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005748:	f7fe fdba 	bl	80042c0 <HAL_GetTick>
 800574c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800574e:	e056      	b.n	80057fe <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800575e:	2b00      	cmp	r3, #0
 8005760:	d02e      	beq.n	80057c0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 0308 	and.w	r3, r3, #8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	f043 0204 	orr.w	r2, r3, #4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	f043 0202 	orr.w	r2, r3, #2
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	f043 0201 	orr.w	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2229      	movs	r2, #41	; 0x29
 80057aa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2204      	movs	r2, #4
 80057b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e032      	b.n	8005826 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d01a      	beq.n	80057fe <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057c8:	f7fe fd7a 	bl	80042c0 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <HAL_DMA2D_PollForTransfer+0x182>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	f043 0220 	orr.w	r2, r3, #32
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2203      	movs	r2, #3
 80057ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e013      	b.n	8005826 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0a1      	beq.n	8005750 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2212      	movs	r2, #18
 8005812:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_DMA2D_ConfigLayer+0x20>
 800584c:	2302      	movs	r3, #2
 800584e:	e079      	b.n	8005944 <HAL_DMA2D_ConfigLayer+0x114>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	3318      	adds	r3, #24
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800587a:	4b35      	ldr	r3, [pc, #212]	; (8005950 <HAL_DMA2D_ConfigLayer+0x120>)
 800587c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b0a      	cmp	r3, #10
 8005884:	d003      	beq.n	800588e <HAL_DMA2D_ConfigLayer+0x5e>
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b09      	cmp	r3, #9
 800588c:	d107      	bne.n	800589e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e005      	b.n	80058aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	061b      	lsls	r3, r3, #24
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d120      	bne.n	80058f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	ea02 0103 	and.w	r1, r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b0a      	cmp	r3, #10
 80058d8:	d003      	beq.n	80058e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b09      	cmp	r3, #9
 80058e0:	d127      	bne.n	8005932 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
 80058f0:	e01f      	b.n	8005932 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	43db      	mvns	r3, r3
 80058fc:	ea02 0103 	and.w	r1, r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	430a      	orrs	r2, r1
 8005908:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b0a      	cmp	r3, #10
 800591a:	d003      	beq.n	8005924 <HAL_DMA2D_ConfigLayer+0xf4>
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b09      	cmp	r3, #9
 8005922:	d106      	bne.n	8005932 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005930:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	ff03000f 	.word	0xff03000f

08005954 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005954:	b480      	push	{r7}
 8005956:	b08b      	sub	sp, #44	; 0x2c
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005968:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	041a      	lsls	r2, r3, #16
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	431a      	orrs	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800598c:	d174      	bne.n	8005a78 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005994:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800599c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059a4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d108      	bne.n	80059c6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	4313      	orrs	r3, r2
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
 80059c4:	e053      	b.n	8005a6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d106      	bne.n	80059dc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
 80059da:	e048      	b.n	8005a6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d111      	bne.n	8005a08 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	0cdb      	lsrs	r3, r3, #19
 80059e8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	0a9b      	lsrs	r3, r3, #10
 80059ee:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	08db      	lsrs	r3, r3, #3
 80059f4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	02db      	lsls	r3, r3, #11
 80059fe:	4313      	orrs	r3, r2
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
 8005a06:	e032      	b.n	8005a6e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d117      	bne.n	8005a40 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	0fdb      	lsrs	r3, r3, #31
 8005a14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	0cdb      	lsrs	r3, r3, #19
 8005a1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	0adb      	lsrs	r3, r3, #11
 8005a20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	08db      	lsrs	r3, r3, #3
 8005a26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	029b      	lsls	r3, r3, #10
 8005a30:	431a      	orrs	r2, r3
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	03db      	lsls	r3, r3, #15
 8005a36:	4313      	orrs	r3, r2
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3e:	e016      	b.n	8005a6e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	0f1b      	lsrs	r3, r3, #28
 8005a44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	0d1b      	lsrs	r3, r3, #20
 8005a4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	0b1b      	lsrs	r3, r3, #12
 8005a50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	011a      	lsls	r2, r3, #4
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	431a      	orrs	r2, r3
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	031b      	lsls	r3, r3, #12
 8005a66:	4313      	orrs	r3, r2
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005a76:	e003      	b.n	8005a80 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	60da      	str	r2, [r3, #12]
}
 8005a80:	bf00      	nop
 8005a82:	372c      	adds	r7, #44	; 0x2c
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	; 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61fb      	str	r3, [r7, #28]
 8005aa6:	e177      	b.n	8005d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	f040 8166 	bne.w	8005d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d005      	beq.n	8005ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d130      	bne.n	8005b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	2203      	movs	r2, #3
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b14:	2201      	movs	r2, #1
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	091b      	lsrs	r3, r3, #4
 8005b2a:	f003 0201 	and.w	r2, r3, #1
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d017      	beq.n	8005b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	2203      	movs	r2, #3
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4013      	ands	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d123      	bne.n	8005bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	08da      	lsrs	r2, r3, #3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3208      	adds	r2, #8
 8005b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	220f      	movs	r2, #15
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	08da      	lsrs	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3208      	adds	r2, #8
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	2203      	movs	r2, #3
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	43db      	mvns	r3, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4013      	ands	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 0203 	and.w	r2, r3, #3
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80c0 	beq.w	8005d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	4b66      	ldr	r3, [pc, #408]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1a:	4a65      	ldr	r2, [pc, #404]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c20:	6453      	str	r3, [r2, #68]	; 0x44
 8005c22:	4b63      	ldr	r3, [pc, #396]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c2e:	4a61      	ldr	r2, [pc, #388]	; (8005db4 <HAL_GPIO_Init+0x328>)
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	089b      	lsrs	r3, r3, #2
 8005c34:	3302      	adds	r3, #2
 8005c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	220f      	movs	r2, #15
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a58      	ldr	r2, [pc, #352]	; (8005db8 <HAL_GPIO_Init+0x32c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d037      	beq.n	8005cca <HAL_GPIO_Init+0x23e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a57      	ldr	r2, [pc, #348]	; (8005dbc <HAL_GPIO_Init+0x330>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d031      	beq.n	8005cc6 <HAL_GPIO_Init+0x23a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a56      	ldr	r2, [pc, #344]	; (8005dc0 <HAL_GPIO_Init+0x334>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d02b      	beq.n	8005cc2 <HAL_GPIO_Init+0x236>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a55      	ldr	r2, [pc, #340]	; (8005dc4 <HAL_GPIO_Init+0x338>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d025      	beq.n	8005cbe <HAL_GPIO_Init+0x232>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a54      	ldr	r2, [pc, #336]	; (8005dc8 <HAL_GPIO_Init+0x33c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01f      	beq.n	8005cba <HAL_GPIO_Init+0x22e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a53      	ldr	r2, [pc, #332]	; (8005dcc <HAL_GPIO_Init+0x340>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d019      	beq.n	8005cb6 <HAL_GPIO_Init+0x22a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a52      	ldr	r2, [pc, #328]	; (8005dd0 <HAL_GPIO_Init+0x344>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_GPIO_Init+0x226>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a51      	ldr	r2, [pc, #324]	; (8005dd4 <HAL_GPIO_Init+0x348>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00d      	beq.n	8005cae <HAL_GPIO_Init+0x222>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a50      	ldr	r2, [pc, #320]	; (8005dd8 <HAL_GPIO_Init+0x34c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <HAL_GPIO_Init+0x21e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a4f      	ldr	r2, [pc, #316]	; (8005ddc <HAL_GPIO_Init+0x350>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <HAL_GPIO_Init+0x21a>
 8005ca2:	2309      	movs	r3, #9
 8005ca4:	e012      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005ca6:	230a      	movs	r3, #10
 8005ca8:	e010      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005caa:	2308      	movs	r3, #8
 8005cac:	e00e      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cae:	2307      	movs	r3, #7
 8005cb0:	e00c      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cb2:	2306      	movs	r3, #6
 8005cb4:	e00a      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cb6:	2305      	movs	r3, #5
 8005cb8:	e008      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cba:	2304      	movs	r3, #4
 8005cbc:	e006      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e004      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e002      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <HAL_GPIO_Init+0x240>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	f002 0203 	and.w	r2, r2, #3
 8005cd2:	0092      	lsls	r2, r2, #2
 8005cd4:	4093      	lsls	r3, r2
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cdc:	4935      	ldr	r1, [pc, #212]	; (8005db4 <HAL_GPIO_Init+0x328>)
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	089b      	lsrs	r3, r3, #2
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cea:	4b3d      	ldr	r3, [pc, #244]	; (8005de0 <HAL_GPIO_Init+0x354>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d0e:	4a34      	ldr	r2, [pc, #208]	; (8005de0 <HAL_GPIO_Init+0x354>)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d14:	4b32      	ldr	r3, [pc, #200]	; (8005de0 <HAL_GPIO_Init+0x354>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d38:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <HAL_GPIO_Init+0x354>)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d3e:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <HAL_GPIO_Init+0x354>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	43db      	mvns	r3, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d62:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <HAL_GPIO_Init+0x354>)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d68:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <HAL_GPIO_Init+0x354>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d8c:	4a14      	ldr	r2, [pc, #80]	; (8005de0 <HAL_GPIO_Init+0x354>)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3301      	adds	r3, #1
 8005d96:	61fb      	str	r3, [r7, #28]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	2b0f      	cmp	r3, #15
 8005d9c:	f67f ae84 	bls.w	8005aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	3724      	adds	r7, #36	; 0x24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40023800 	.word	0x40023800
 8005db4:	40013800 	.word	0x40013800
 8005db8:	40020000 	.word	0x40020000
 8005dbc:	40020400 	.word	0x40020400
 8005dc0:	40020800 	.word	0x40020800
 8005dc4:	40020c00 	.word	0x40020c00
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	40021400 	.word	0x40021400
 8005dd0:	40021800 	.word	0x40021800
 8005dd4:	40021c00 	.word	0x40021c00
 8005dd8:	40022000 	.word	0x40022000
 8005ddc:	40022400 	.word	0x40022400
 8005de0:	40013c00 	.word	0x40013c00

08005de4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	e0d9      	b.n	8005fb4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e00:	2201      	movs	r2, #1
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	f040 80c9 	bne.w	8005fae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005e1c:	4a6b      	ldr	r2, [pc, #428]	; (8005fcc <HAL_GPIO_DeInit+0x1e8>)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	3302      	adds	r3, #2
 8005e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e28:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	220f      	movs	r2, #15
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a63      	ldr	r2, [pc, #396]	; (8005fd0 <HAL_GPIO_DeInit+0x1ec>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d037      	beq.n	8005eb6 <HAL_GPIO_DeInit+0xd2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a62      	ldr	r2, [pc, #392]	; (8005fd4 <HAL_GPIO_DeInit+0x1f0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d031      	beq.n	8005eb2 <HAL_GPIO_DeInit+0xce>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a61      	ldr	r2, [pc, #388]	; (8005fd8 <HAL_GPIO_DeInit+0x1f4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d02b      	beq.n	8005eae <HAL_GPIO_DeInit+0xca>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a60      	ldr	r2, [pc, #384]	; (8005fdc <HAL_GPIO_DeInit+0x1f8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d025      	beq.n	8005eaa <HAL_GPIO_DeInit+0xc6>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a5f      	ldr	r2, [pc, #380]	; (8005fe0 <HAL_GPIO_DeInit+0x1fc>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01f      	beq.n	8005ea6 <HAL_GPIO_DeInit+0xc2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a5e      	ldr	r2, [pc, #376]	; (8005fe4 <HAL_GPIO_DeInit+0x200>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d019      	beq.n	8005ea2 <HAL_GPIO_DeInit+0xbe>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a5d      	ldr	r2, [pc, #372]	; (8005fe8 <HAL_GPIO_DeInit+0x204>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <HAL_GPIO_DeInit+0xba>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a5c      	ldr	r2, [pc, #368]	; (8005fec <HAL_GPIO_DeInit+0x208>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00d      	beq.n	8005e9a <HAL_GPIO_DeInit+0xb6>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a5b      	ldr	r2, [pc, #364]	; (8005ff0 <HAL_GPIO_DeInit+0x20c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d007      	beq.n	8005e96 <HAL_GPIO_DeInit+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a5a      	ldr	r2, [pc, #360]	; (8005ff4 <HAL_GPIO_DeInit+0x210>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d101      	bne.n	8005e92 <HAL_GPIO_DeInit+0xae>
 8005e8e:	2309      	movs	r3, #9
 8005e90:	e012      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005e92:	230a      	movs	r3, #10
 8005e94:	e010      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005e96:	2308      	movs	r3, #8
 8005e98:	e00e      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005e9a:	2307      	movs	r3, #7
 8005e9c:	e00c      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005e9e:	2306      	movs	r3, #6
 8005ea0:	e00a      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005ea2:	2305      	movs	r3, #5
 8005ea4:	e008      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	e006      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e004      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e002      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <HAL_GPIO_DeInit+0xd4>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	f002 0203 	and.w	r2, r2, #3
 8005ebe:	0092      	lsls	r2, r2, #2
 8005ec0:	4093      	lsls	r3, r2
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d132      	bne.n	8005f2e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005ec8:	4b4b      	ldr	r3, [pc, #300]	; (8005ff8 <HAL_GPIO_DeInit+0x214>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	4949      	ldr	r1, [pc, #292]	; (8005ff8 <HAL_GPIO_DeInit+0x214>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005ed6:	4b48      	ldr	r3, [pc, #288]	; (8005ff8 <HAL_GPIO_DeInit+0x214>)
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	4946      	ldr	r1, [pc, #280]	; (8005ff8 <HAL_GPIO_DeInit+0x214>)
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ee4:	4b44      	ldr	r3, [pc, #272]	; (8005ff8 <HAL_GPIO_DeInit+0x214>)
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	43db      	mvns	r3, r3
 8005eec:	4942      	ldr	r1, [pc, #264]	; (8005ff8 <HAL_GPIO_DeInit+0x214>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ef2:	4b41      	ldr	r3, [pc, #260]	; (8005ff8 <HAL_GPIO_DeInit+0x214>)
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	493f      	ldr	r1, [pc, #252]	; (8005ff8 <HAL_GPIO_DeInit+0x214>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	220f      	movs	r2, #15
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005f10:	4a2e      	ldr	r2, [pc, #184]	; (8005fcc <HAL_GPIO_DeInit+0x1e8>)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	089b      	lsrs	r3, r3, #2
 8005f16:	3302      	adds	r3, #2
 8005f18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	43da      	mvns	r2, r3
 8005f20:	482a      	ldr	r0, [pc, #168]	; (8005fcc <HAL_GPIO_DeInit+0x1e8>)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	089b      	lsrs	r3, r3, #2
 8005f26:	400a      	ands	r2, r1
 8005f28:	3302      	adds	r3, #2
 8005f2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	2103      	movs	r1, #3
 8005f38:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	401a      	ands	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	08da      	lsrs	r2, r3, #3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3208      	adds	r2, #8
 8005f4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	220f      	movs	r2, #15
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	43db      	mvns	r3, r3
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	08d2      	lsrs	r2, r2, #3
 8005f64:	4019      	ands	r1, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3208      	adds	r2, #8
 8005f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	2103      	movs	r1, #3
 8005f78:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	401a      	ands	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	2101      	movs	r1, #1
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	401a      	ands	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	2103      	movs	r1, #3
 8005fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	401a      	ands	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b0f      	cmp	r3, #15
 8005fb8:	f67f af22 	bls.w	8005e00 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	40020000 	.word	0x40020000
 8005fd4:	40020400 	.word	0x40020400
 8005fd8:	40020800 	.word	0x40020800
 8005fdc:	40020c00 	.word	0x40020c00
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	40021400 	.word	0x40021400
 8005fe8:	40021800 	.word	0x40021800
 8005fec:	40021c00 	.word	0x40021c00
 8005ff0:	40022000 	.word	0x40022000
 8005ff4:	40022400 	.word	0x40022400
 8005ff8:	40013c00 	.word	0x40013c00

08005ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	807b      	strh	r3, [r7, #2]
 8006008:	4613      	mov	r3, r2
 800600a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800600c:	787b      	ldrb	r3, [r7, #1]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006012:	887a      	ldrh	r2, [r7, #2]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006018:	e003      	b.n	8006022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800601a:	887b      	ldrh	r3, [r7, #2]
 800601c:	041a      	lsls	r2, r3, #16
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	619a      	str	r2, [r3, #24]
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e12b      	b.n	800629a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fc f930 	bl	80022bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	; 0x24
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006094:	f001 f8f8 	bl	8007288 <HAL_RCC_GetPCLK1Freq>
 8006098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4a81      	ldr	r2, [pc, #516]	; (80062a4 <HAL_I2C_Init+0x274>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d807      	bhi.n	80060b4 <HAL_I2C_Init+0x84>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4a80      	ldr	r2, [pc, #512]	; (80062a8 <HAL_I2C_Init+0x278>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	bf94      	ite	ls
 80060ac:	2301      	movls	r3, #1
 80060ae:	2300      	movhi	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e006      	b.n	80060c2 <HAL_I2C_Init+0x92>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a7d      	ldr	r2, [pc, #500]	; (80062ac <HAL_I2C_Init+0x27c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	bf94      	ite	ls
 80060bc:	2301      	movls	r3, #1
 80060be:	2300      	movhi	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e0e7      	b.n	800629a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a78      	ldr	r2, [pc, #480]	; (80062b0 <HAL_I2C_Init+0x280>)
 80060ce:	fba2 2303 	umull	r2, r3, r2, r3
 80060d2:	0c9b      	lsrs	r3, r3, #18
 80060d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4a6a      	ldr	r2, [pc, #424]	; (80062a4 <HAL_I2C_Init+0x274>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d802      	bhi.n	8006104 <HAL_I2C_Init+0xd4>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3301      	adds	r3, #1
 8006102:	e009      	b.n	8006118 <HAL_I2C_Init+0xe8>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800610a:	fb02 f303 	mul.w	r3, r2, r3
 800610e:	4a69      	ldr	r2, [pc, #420]	; (80062b4 <HAL_I2C_Init+0x284>)
 8006110:	fba2 2303 	umull	r2, r3, r2, r3
 8006114:	099b      	lsrs	r3, r3, #6
 8006116:	3301      	adds	r3, #1
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	430b      	orrs	r3, r1
 800611e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800612a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	495c      	ldr	r1, [pc, #368]	; (80062a4 <HAL_I2C_Init+0x274>)
 8006134:	428b      	cmp	r3, r1
 8006136:	d819      	bhi.n	800616c <HAL_I2C_Init+0x13c>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	1e59      	subs	r1, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	fbb1 f3f3 	udiv	r3, r1, r3
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	f640 73fc 	movw	r3, #4092	; 0xffc
 800614c:	400b      	ands	r3, r1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <HAL_I2C_Init+0x138>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1e59      	subs	r1, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006160:	3301      	adds	r3, #1
 8006162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006166:	e051      	b.n	800620c <HAL_I2C_Init+0x1dc>
 8006168:	2304      	movs	r3, #4
 800616a:	e04f      	b.n	800620c <HAL_I2C_Init+0x1dc>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d111      	bne.n	8006198 <HAL_I2C_Init+0x168>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	1e58      	subs	r0, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6859      	ldr	r1, [r3, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	440b      	add	r3, r1
 8006182:	fbb0 f3f3 	udiv	r3, r0, r3
 8006186:	3301      	adds	r3, #1
 8006188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e012      	b.n	80061be <HAL_I2C_Init+0x18e>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1e58      	subs	r0, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	0099      	lsls	r1, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ae:	3301      	adds	r3, #1
 80061b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_I2C_Init+0x196>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e022      	b.n	800620c <HAL_I2C_Init+0x1dc>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10e      	bne.n	80061ec <HAL_I2C_Init+0x1bc>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1e58      	subs	r0, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6859      	ldr	r1, [r3, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	440b      	add	r3, r1
 80061dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e0:	3301      	adds	r3, #1
 80061e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ea:	e00f      	b.n	800620c <HAL_I2C_Init+0x1dc>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1e58      	subs	r0, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6859      	ldr	r1, [r3, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	0099      	lsls	r1, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006202:	3301      	adds	r3, #1
 8006204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	6809      	ldr	r1, [r1, #0]
 8006210:	4313      	orrs	r3, r2
 8006212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69da      	ldr	r2, [r3, #28]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800623a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6911      	ldr	r1, [r2, #16]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68d2      	ldr	r2, [r2, #12]
 8006246:	4311      	orrs	r1, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	430b      	orrs	r3, r1
 800624e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	000186a0 	.word	0x000186a0
 80062a8:	001e847f 	.word	0x001e847f
 80062ac:	003d08ff 	.word	0x003d08ff
 80062b0:	431bde83 	.word	0x431bde83
 80062b4:	10624dd3 	.word	0x10624dd3

080062b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d129      	bne.n	8006322 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2224      	movs	r2, #36	; 0x24
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0210 	bic.w	r2, r2, #16
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	e000      	b.n	8006324 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006322:	2302      	movs	r3, #2
  }
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b20      	cmp	r3, #32
 8006348:	d12a      	bne.n	80063a0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2224      	movs	r2, #36	; 0x24
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0201 	bic.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800636a:	89fb      	ldrh	r3, [r7, #14]
 800636c:	f023 030f 	bic.w	r3, r3, #15
 8006370:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	b29a      	uxth	r2, r3
 8006376:	89fb      	ldrh	r3, [r7, #14]
 8006378:	4313      	orrs	r3, r2
 800637a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	89fa      	ldrh	r2, [r7, #14]
 8006382:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e0bf      	b.n	8006542 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fc f88a 	bl	80024f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80063f2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6999      	ldr	r1, [r3, #24]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006408:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6899      	ldr	r1, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b4a      	ldr	r3, [pc, #296]	; (800654c <HAL_LTDC_Init+0x19c>)
 8006424:	400b      	ands	r3, r1
 8006426:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	041b      	lsls	r3, r3, #16
 800642e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6899      	ldr	r1, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68d9      	ldr	r1, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	4b3e      	ldr	r3, [pc, #248]	; (800654c <HAL_LTDC_Init+0x19c>)
 8006452:	400b      	ands	r3, r1
 8006454:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	041b      	lsls	r3, r3, #16
 800645c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68d9      	ldr	r1, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6919      	ldr	r1, [r3, #16]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4b33      	ldr	r3, [pc, #204]	; (800654c <HAL_LTDC_Init+0x19c>)
 8006480:	400b      	ands	r3, r1
 8006482:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	041b      	lsls	r3, r3, #16
 800648a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6919      	ldr	r1, [r3, #16]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6959      	ldr	r1, [r3, #20]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	4b27      	ldr	r3, [pc, #156]	; (800654c <HAL_LTDC_Init+0x19c>)
 80064ae:	400b      	ands	r3, r1
 80064b0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6959      	ldr	r1, [r3, #20]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80064e0:	041b      	lsls	r3, r3, #16
 80064e2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80064f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0206 	orr.w	r2, r2, #6
 800651e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	f000f800 	.word	0xf000f800

08006550 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006550:	b5b0      	push	{r4, r5, r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_LTDC_ConfigLayer+0x1a>
 8006566:	2302      	movs	r3, #2
 8006568:	e02c      	b.n	80065c4 <HAL_LTDC_ConfigLayer+0x74>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2134      	movs	r1, #52	; 0x34
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	4413      	add	r3, r2
 8006586:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	4614      	mov	r4, r2
 800658e:	461d      	mov	r5, r3
 8006590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800659a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f83b 	bl	8006620 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2201      	movs	r2, #1
 80065b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bdb0      	pop	{r4, r5, r7, pc}

080065cc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_LTDC_EnableDither+0x16>
 80065de:	2302      	movs	r3, #2
 80065e0:	e016      	b.n	8006610 <HAL_LTDC_EnableDither+0x44>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <HAL_LTDC_EnableDither+0x50>)
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <HAL_LTDC_EnableDither+0x50>)
 80065f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40016800 	.word	0x40016800

08006620 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006620:	b480      	push	{r7}
 8006622:	b089      	sub	sp, #36	; 0x24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800663c:	4413      	add	r3, r2
 800663e:	041b      	lsls	r3, r3, #16
 8006640:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	01db      	lsls	r3, r3, #7
 800664c:	4413      	add	r3, r2
 800664e:	3384      	adds	r3, #132	; 0x84
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	4611      	mov	r1, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	01d2      	lsls	r2, r2, #7
 800665c:	440a      	add	r2, r1
 800665e:	3284      	adds	r2, #132	; 0x84
 8006660:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006664:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006676:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006678:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4619      	mov	r1, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	01db      	lsls	r3, r3, #7
 8006684:	440b      	add	r3, r1
 8006686:	3384      	adds	r3, #132	; 0x84
 8006688:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800668e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800669e:	4413      	add	r3, r2
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	01db      	lsls	r3, r3, #7
 80066ae:	4413      	add	r3, r2
 80066b0:	3384      	adds	r3, #132	; 0x84
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	4611      	mov	r1, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	01d2      	lsls	r2, r2, #7
 80066be:	440a      	add	r2, r1
 80066c0:	3284      	adds	r2, #132	; 0x84
 80066c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80066c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066d6:	4413      	add	r3, r2
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4619      	mov	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	01db      	lsls	r3, r3, #7
 80066e4:	440b      	add	r3, r1
 80066e6:	3384      	adds	r3, #132	; 0x84
 80066e8:	4619      	mov	r1, r3
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	01db      	lsls	r3, r3, #7
 80066fa:	4413      	add	r3, r2
 80066fc:	3384      	adds	r3, #132	; 0x84
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	6812      	ldr	r2, [r2, #0]
 8006704:	4611      	mov	r1, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	01d2      	lsls	r2, r2, #7
 800670a:	440a      	add	r2, r1
 800670c:	3284      	adds	r2, #132	; 0x84
 800670e:	f023 0307 	bic.w	r3, r3, #7
 8006712:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	01db      	lsls	r3, r3, #7
 800671e:	4413      	add	r3, r2
 8006720:	3384      	adds	r3, #132	; 0x84
 8006722:	461a      	mov	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006730:	021b      	lsls	r3, r3, #8
 8006732:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	01db      	lsls	r3, r3, #7
 8006750:	4413      	add	r3, r2
 8006752:	3384      	adds	r3, #132	; 0x84
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	01db      	lsls	r3, r3, #7
 8006760:	4413      	add	r3, r2
 8006762:	3384      	adds	r3, #132	; 0x84
 8006764:	461a      	mov	r2, r3
 8006766:	2300      	movs	r3, #0
 8006768:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006770:	461a      	mov	r2, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	431a      	orrs	r2, r3
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	431a      	orrs	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4619      	mov	r1, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	01db      	lsls	r3, r3, #7
 8006784:	440b      	add	r3, r1
 8006786:	3384      	adds	r3, #132	; 0x84
 8006788:	4619      	mov	r1, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	01db      	lsls	r3, r3, #7
 800679a:	4413      	add	r3, r2
 800679c:	3384      	adds	r3, #132	; 0x84
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	4611      	mov	r1, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	01d2      	lsls	r2, r2, #7
 80067aa:	440a      	add	r2, r1
 80067ac:	3284      	adds	r2, #132	; 0x84
 80067ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	01db      	lsls	r3, r3, #7
 80067be:	4413      	add	r3, r2
 80067c0:	3384      	adds	r3, #132	; 0x84
 80067c2:	461a      	mov	r2, r3
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	01db      	lsls	r3, r3, #7
 80067d4:	4413      	add	r3, r2
 80067d6:	3384      	adds	r3, #132	; 0x84
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	4611      	mov	r1, r2
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	01d2      	lsls	r2, r2, #7
 80067e4:	440a      	add	r2, r1
 80067e6:	3284      	adds	r2, #132	; 0x84
 80067e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80067ec:	f023 0307 	bic.w	r3, r3, #7
 80067f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	69da      	ldr	r2, [r3, #28]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	6809      	ldr	r1, [r1, #0]
 80067fe:	4608      	mov	r0, r1
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	01c9      	lsls	r1, r1, #7
 8006804:	4401      	add	r1, r0
 8006806:	3184      	adds	r1, #132	; 0x84
 8006808:	4313      	orrs	r3, r2
 800680a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	01db      	lsls	r3, r3, #7
 8006816:	4413      	add	r3, r2
 8006818:	3384      	adds	r3, #132	; 0x84
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	01db      	lsls	r3, r3, #7
 8006826:	4413      	add	r3, r2
 8006828:	3384      	adds	r3, #132	; 0x84
 800682a:	461a      	mov	r2, r3
 800682c:	2300      	movs	r3, #0
 800682e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	01db      	lsls	r3, r3, #7
 800683a:	4413      	add	r3, r2
 800683c:	3384      	adds	r3, #132	; 0x84
 800683e:	461a      	mov	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800684e:	2304      	movs	r3, #4
 8006850:	61fb      	str	r3, [r7, #28]
 8006852:	e01b      	b.n	800688c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d102      	bne.n	8006862 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800685c:	2303      	movs	r3, #3
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e014      	b.n	800688c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b04      	cmp	r3, #4
 8006868:	d00b      	beq.n	8006882 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800686e:	2b02      	cmp	r3, #2
 8006870:	d007      	beq.n	8006882 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006876:	2b03      	cmp	r3, #3
 8006878:	d003      	beq.n	8006882 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800687e:	2b07      	cmp	r3, #7
 8006880:	d102      	bne.n	8006888 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006882:	2302      	movs	r3, #2
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	e001      	b.n	800688c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006888:	2301      	movs	r3, #1
 800688a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	01db      	lsls	r3, r3, #7
 8006896:	4413      	add	r3, r2
 8006898:	3384      	adds	r3, #132	; 0x84
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	4611      	mov	r1, r2
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	01d2      	lsls	r2, r2, #7
 80068a6:	440a      	add	r2, r1
 80068a8:	3284      	adds	r2, #132	; 0x84
 80068aa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80068ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
 80068ba:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6859      	ldr	r1, [r3, #4]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	1acb      	subs	r3, r1, r3
 80068c6:	69f9      	ldr	r1, [r7, #28]
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	6809      	ldr	r1, [r1, #0]
 80068d2:	4608      	mov	r0, r1
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	01c9      	lsls	r1, r1, #7
 80068d8:	4401      	add	r1, r0
 80068da:	3184      	adds	r1, #132	; 0x84
 80068dc:	4313      	orrs	r3, r2
 80068de:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	01db      	lsls	r3, r3, #7
 80068ea:	4413      	add	r3, r2
 80068ec:	3384      	adds	r3, #132	; 0x84
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	4611      	mov	r1, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	01d2      	lsls	r2, r2, #7
 80068fa:	440a      	add	r2, r1
 80068fc:	3284      	adds	r2, #132	; 0x84
 80068fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006902:	f023 0307 	bic.w	r3, r3, #7
 8006906:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	01db      	lsls	r3, r3, #7
 8006912:	4413      	add	r3, r2
 8006914:	3384      	adds	r3, #132	; 0x84
 8006916:	461a      	mov	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	01db      	lsls	r3, r3, #7
 8006928:	4413      	add	r3, r2
 800692a:	3384      	adds	r3, #132	; 0x84
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	4611      	mov	r1, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	01d2      	lsls	r2, r2, #7
 8006938:	440a      	add	r2, r1
 800693a:	3284      	adds	r2, #132	; 0x84
 800693c:	f043 0301 	orr.w	r3, r3, #1
 8006940:	6013      	str	r3, [r2, #0]
}
 8006942:	bf00      	nop
 8006944:	3724      	adds	r7, #36	; 0x24
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006968:	6413      	str	r3, [r2, #64]	; 0x40
 800696a:	4b1d      	ldr	r3, [pc, #116]	; (80069e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006976:	4b1b      	ldr	r3, [pc, #108]	; (80069e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006978:	2201      	movs	r2, #1
 800697a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800697c:	f7fd fca0 	bl	80042c0 <HAL_GetTick>
 8006980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006982:	e009      	b.n	8006998 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006984:	f7fd fc9c 	bl	80042c0 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006992:	d901      	bls.n	8006998 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e01f      	b.n	80069d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006998:	4b13      	ldr	r3, [pc, #76]	; (80069e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a4:	d1ee      	bne.n	8006984 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80069a6:	4b11      	ldr	r3, [pc, #68]	; (80069ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069ac:	f7fd fc88 	bl	80042c0 <HAL_GetTick>
 80069b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069b2:	e009      	b.n	80069c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80069b4:	f7fd fc84 	bl	80042c0 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c2:	d901      	bls.n	80069c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e007      	b.n	80069d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069c8:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069d4:	d1ee      	bne.n	80069b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40023800 	.word	0x40023800
 80069e4:	420e0040 	.word	0x420e0040
 80069e8:	40007000 	.word	0x40007000
 80069ec:	420e0044 	.word	0x420e0044

080069f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e264      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d075      	beq.n	8006afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a0e:	4ba3      	ldr	r3, [pc, #652]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d00c      	beq.n	8006a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a1a:	4ba0      	ldr	r3, [pc, #640]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d112      	bne.n	8006a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a26:	4b9d      	ldr	r3, [pc, #628]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a32:	d10b      	bne.n	8006a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a34:	4b99      	ldr	r3, [pc, #612]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d05b      	beq.n	8006af8 <HAL_RCC_OscConfig+0x108>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d157      	bne.n	8006af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e23f      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a54:	d106      	bne.n	8006a64 <HAL_RCC_OscConfig+0x74>
 8006a56:	4b91      	ldr	r3, [pc, #580]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a90      	ldr	r2, [pc, #576]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e01d      	b.n	8006aa0 <HAL_RCC_OscConfig+0xb0>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a6c:	d10c      	bne.n	8006a88 <HAL_RCC_OscConfig+0x98>
 8006a6e:	4b8b      	ldr	r3, [pc, #556]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a8a      	ldr	r2, [pc, #552]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	4b88      	ldr	r3, [pc, #544]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a87      	ldr	r2, [pc, #540]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e00b      	b.n	8006aa0 <HAL_RCC_OscConfig+0xb0>
 8006a88:	4b84      	ldr	r3, [pc, #528]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a83      	ldr	r2, [pc, #524]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	4b81      	ldr	r3, [pc, #516]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a80      	ldr	r2, [pc, #512]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d013      	beq.n	8006ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa8:	f7fd fc0a 	bl	80042c0 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ab0:	f7fd fc06 	bl	80042c0 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b64      	cmp	r3, #100	; 0x64
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e204      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ac2:	4b76      	ldr	r3, [pc, #472]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f0      	beq.n	8006ab0 <HAL_RCC_OscConfig+0xc0>
 8006ace:	e014      	b.n	8006afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad0:	f7fd fbf6 	bl	80042c0 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ad8:	f7fd fbf2 	bl	80042c0 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b64      	cmp	r3, #100	; 0x64
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e1f0      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aea:	4b6c      	ldr	r3, [pc, #432]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0xe8>
 8006af6:	e000      	b.n	8006afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d063      	beq.n	8006bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b06:	4b65      	ldr	r3, [pc, #404]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 030c 	and.w	r3, r3, #12
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b12:	4b62      	ldr	r3, [pc, #392]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	d11c      	bne.n	8006b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1e:	4b5f      	ldr	r3, [pc, #380]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d116      	bne.n	8006b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b2a:	4b5c      	ldr	r3, [pc, #368]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_RCC_OscConfig+0x152>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d001      	beq.n	8006b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e1c4      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b42:	4b56      	ldr	r3, [pc, #344]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	4952      	ldr	r1, [pc, #328]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b56:	e03a      	b.n	8006bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d020      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b60:	4b4f      	ldr	r3, [pc, #316]	; (8006ca0 <HAL_RCC_OscConfig+0x2b0>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b66:	f7fd fbab 	bl	80042c0 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b6e:	f7fd fba7 	bl	80042c0 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e1a5      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b80:	4b46      	ldr	r3, [pc, #280]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8c:	4b43      	ldr	r3, [pc, #268]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	4940      	ldr	r1, [pc, #256]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	600b      	str	r3, [r1, #0]
 8006ba0:	e015      	b.n	8006bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ba2:	4b3f      	ldr	r3, [pc, #252]	; (8006ca0 <HAL_RCC_OscConfig+0x2b0>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba8:	f7fd fb8a 	bl	80042c0 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bb0:	f7fd fb86 	bl	80042c0 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e184      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc2:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1f0      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d030      	beq.n	8006c3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d016      	beq.n	8006c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006be2:	4b30      	ldr	r3, [pc, #192]	; (8006ca4 <HAL_RCC_OscConfig+0x2b4>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fd fb6a 	bl	80042c0 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bf0:	f7fd fb66 	bl	80042c0 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e164      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c02:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0f0      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x200>
 8006c0e:	e015      	b.n	8006c3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c10:	4b24      	ldr	r3, [pc, #144]	; (8006ca4 <HAL_RCC_OscConfig+0x2b4>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c16:	f7fd fb53 	bl	80042c0 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c1e:	f7fd fb4f 	bl	80042c0 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e14d      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c30:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f0      	bne.n	8006c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 80a0 	beq.w	8006d8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10f      	bne.n	8006c7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	4a0e      	ldr	r2, [pc, #56]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c68:	6413      	str	r3, [r2, #64]	; 0x40
 8006c6a:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <HAL_RCC_OscConfig+0x2ac>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c76:	2301      	movs	r3, #1
 8006c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <HAL_RCC_OscConfig+0x2b8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d121      	bne.n	8006cca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c86:	4b08      	ldr	r3, [pc, #32]	; (8006ca8 <HAL_RCC_OscConfig+0x2b8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a07      	ldr	r2, [pc, #28]	; (8006ca8 <HAL_RCC_OscConfig+0x2b8>)
 8006c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c92:	f7fd fb15 	bl	80042c0 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c98:	e011      	b.n	8006cbe <HAL_RCC_OscConfig+0x2ce>
 8006c9a:	bf00      	nop
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	42470000 	.word	0x42470000
 8006ca4:	42470e80 	.word	0x42470e80
 8006ca8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cac:	f7fd fb08 	bl	80042c0 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e106      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cbe:	4b85      	ldr	r3, [pc, #532]	; (8006ed4 <HAL_RCC_OscConfig+0x4e4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f0      	beq.n	8006cac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d106      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x2f0>
 8006cd2:	4b81      	ldr	r3, [pc, #516]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	4a80      	ldr	r2, [pc, #512]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006cde:	e01c      	b.n	8006d1a <HAL_RCC_OscConfig+0x32a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	2b05      	cmp	r3, #5
 8006ce6:	d10c      	bne.n	8006d02 <HAL_RCC_OscConfig+0x312>
 8006ce8:	4b7b      	ldr	r3, [pc, #492]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cec:	4a7a      	ldr	r2, [pc, #488]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006cee:	f043 0304 	orr.w	r3, r3, #4
 8006cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf4:	4b78      	ldr	r3, [pc, #480]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf8:	4a77      	ldr	r2, [pc, #476]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006cfa:	f043 0301 	orr.w	r3, r3, #1
 8006cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006d00:	e00b      	b.n	8006d1a <HAL_RCC_OscConfig+0x32a>
 8006d02:	4b75      	ldr	r3, [pc, #468]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	4a74      	ldr	r2, [pc, #464]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d0e:	4b72      	ldr	r3, [pc, #456]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	4a71      	ldr	r2, [pc, #452]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006d14:	f023 0304 	bic.w	r3, r3, #4
 8006d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d015      	beq.n	8006d4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d22:	f7fd facd 	bl	80042c0 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d28:	e00a      	b.n	8006d40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d2a:	f7fd fac9 	bl	80042c0 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e0c5      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d40:	4b65      	ldr	r3, [pc, #404]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0ee      	beq.n	8006d2a <HAL_RCC_OscConfig+0x33a>
 8006d4c:	e014      	b.n	8006d78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d4e:	f7fd fab7 	bl	80042c0 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d54:	e00a      	b.n	8006d6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d56:	f7fd fab3 	bl	80042c0 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e0af      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d6c:	4b5a      	ldr	r3, [pc, #360]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1ee      	bne.n	8006d56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d105      	bne.n	8006d8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d7e:	4b56      	ldr	r3, [pc, #344]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	4a55      	ldr	r2, [pc, #340]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 809b 	beq.w	8006eca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d94:	4b50      	ldr	r3, [pc, #320]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 030c 	and.w	r3, r3, #12
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d05c      	beq.n	8006e5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d141      	bne.n	8006e2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da8:	4b4c      	ldr	r3, [pc, #304]	; (8006edc <HAL_RCC_OscConfig+0x4ec>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dae:	f7fd fa87 	bl	80042c0 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db6:	f7fd fa83 	bl	80042c0 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e081      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc8:	4b43      	ldr	r3, [pc, #268]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f0      	bne.n	8006db6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	019b      	lsls	r3, r3, #6
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	3b01      	subs	r3, #1
 8006dee:	041b      	lsls	r3, r3, #16
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	061b      	lsls	r3, r3, #24
 8006df8:	4937      	ldr	r1, [pc, #220]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dfe:	4b37      	ldr	r3, [pc, #220]	; (8006edc <HAL_RCC_OscConfig+0x4ec>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e04:	f7fd fa5c 	bl	80042c0 <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0a:	e008      	b.n	8006e1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e0c:	f7fd fa58 	bl	80042c0 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e056      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e1e:	4b2e      	ldr	r3, [pc, #184]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0f0      	beq.n	8006e0c <HAL_RCC_OscConfig+0x41c>
 8006e2a:	e04e      	b.n	8006eca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e2c:	4b2b      	ldr	r3, [pc, #172]	; (8006edc <HAL_RCC_OscConfig+0x4ec>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e32:	f7fd fa45 	bl	80042c0 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e3a:	f7fd fa41 	bl	80042c0 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e03f      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4c:	4b22      	ldr	r3, [pc, #136]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f0      	bne.n	8006e3a <HAL_RCC_OscConfig+0x44a>
 8006e58:	e037      	b.n	8006eca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e032      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e66:	4b1c      	ldr	r3, [pc, #112]	; (8006ed8 <HAL_RCC_OscConfig+0x4e8>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d028      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d121      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d11a      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e96:	4013      	ands	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d111      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d107      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d001      	beq.n	8006eca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40007000 	.word	0x40007000
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	42470060 	.word	0x42470060

08006ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0cc      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef4:	4b68      	ldr	r3, [pc, #416]	; (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 030f 	and.w	r3, r3, #15
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d90c      	bls.n	8006f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f02:	4b65      	ldr	r3, [pc, #404]	; (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f0a:	4b63      	ldr	r3, [pc, #396]	; (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d001      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e0b8      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d020      	beq.n	8006f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f34:	4b59      	ldr	r3, [pc, #356]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	4a58      	ldr	r2, [pc, #352]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f4c:	4b53      	ldr	r3, [pc, #332]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	4a52      	ldr	r2, [pc, #328]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f58:	4b50      	ldr	r3, [pc, #320]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	494d      	ldr	r1, [pc, #308]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d044      	beq.n	8007000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d107      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f7e:	4b47      	ldr	r3, [pc, #284]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d119      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e07f      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d003      	beq.n	8006f9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d107      	bne.n	8006fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9e:	4b3f      	ldr	r3, [pc, #252]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e06f      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fae:	4b3b      	ldr	r3, [pc, #236]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e067      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fbe:	4b37      	ldr	r3, [pc, #220]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f023 0203 	bic.w	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4934      	ldr	r1, [pc, #208]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fd0:	f7fd f976 	bl	80042c0 <HAL_GetTick>
 8006fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd6:	e00a      	b.n	8006fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fd8:	f7fd f972 	bl	80042c0 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e04f      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fee:	4b2b      	ldr	r3, [pc, #172]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 020c 	and.w	r2, r3, #12
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d1eb      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007000:	4b25      	ldr	r3, [pc, #148]	; (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d20c      	bcs.n	8007028 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800700e:	4b22      	ldr	r3, [pc, #136]	; (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007016:	4b20      	ldr	r3, [pc, #128]	; (8007098 <HAL_RCC_ClockConfig+0x1b8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d001      	beq.n	8007028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e032      	b.n	800708e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007034:	4b19      	ldr	r3, [pc, #100]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4916      	ldr	r1, [pc, #88]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8007042:	4313      	orrs	r3, r2
 8007044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007052:	4b12      	ldr	r3, [pc, #72]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	490e      	ldr	r1, [pc, #56]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	4313      	orrs	r3, r2
 8007064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007066:	f000 f821 	bl	80070ac <HAL_RCC_GetSysClockFreq>
 800706a:	4602      	mov	r2, r0
 800706c:	4b0b      	ldr	r3, [pc, #44]	; (800709c <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	091b      	lsrs	r3, r3, #4
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	490a      	ldr	r1, [pc, #40]	; (80070a0 <HAL_RCC_ClockConfig+0x1c0>)
 8007078:	5ccb      	ldrb	r3, [r1, r3]
 800707a:	fa22 f303 	lsr.w	r3, r2, r3
 800707e:	4a09      	ldr	r2, [pc, #36]	; (80070a4 <HAL_RCC_ClockConfig+0x1c4>)
 8007080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <HAL_RCC_ClockConfig+0x1c8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7fd f8d6 	bl	8004238 <HAL_InitTick>

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40023c00 	.word	0x40023c00
 800709c:	40023800 	.word	0x40023800
 80070a0:	0800a008 	.word	0x0800a008
 80070a4:	20000000 	.word	0x20000000
 80070a8:	20000064 	.word	0x20000064

080070ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	607b      	str	r3, [r7, #4]
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	2300      	movs	r3, #0
 80070be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070c4:	4b67      	ldr	r3, [pc, #412]	; (8007264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 030c 	and.w	r3, r3, #12
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d00d      	beq.n	80070ec <HAL_RCC_GetSysClockFreq+0x40>
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	f200 80bd 	bhi.w	8007250 <HAL_RCC_GetSysClockFreq+0x1a4>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0x34>
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d003      	beq.n	80070e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80070de:	e0b7      	b.n	8007250 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070e0:	4b61      	ldr	r3, [pc, #388]	; (8007268 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070e2:	60bb      	str	r3, [r7, #8]
       break;
 80070e4:	e0b7      	b.n	8007256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070e6:	4b61      	ldr	r3, [pc, #388]	; (800726c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80070e8:	60bb      	str	r3, [r7, #8]
      break;
 80070ea:	e0b4      	b.n	8007256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070ec:	4b5d      	ldr	r3, [pc, #372]	; (8007264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070f6:	4b5b      	ldr	r3, [pc, #364]	; (8007264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d04d      	beq.n	800719e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007102:	4b58      	ldr	r3, [pc, #352]	; (8007264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	461a      	mov	r2, r3
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007112:	f04f 0100 	mov.w	r1, #0
 8007116:	ea02 0800 	and.w	r8, r2, r0
 800711a:	ea03 0901 	and.w	r9, r3, r1
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	014b      	lsls	r3, r1, #5
 800712c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007130:	0142      	lsls	r2, r0, #5
 8007132:	4610      	mov	r0, r2
 8007134:	4619      	mov	r1, r3
 8007136:	ebb0 0008 	subs.w	r0, r0, r8
 800713a:	eb61 0109 	sbc.w	r1, r1, r9
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	018b      	lsls	r3, r1, #6
 8007148:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800714c:	0182      	lsls	r2, r0, #6
 800714e:	1a12      	subs	r2, r2, r0
 8007150:	eb63 0301 	sbc.w	r3, r3, r1
 8007154:	f04f 0000 	mov.w	r0, #0
 8007158:	f04f 0100 	mov.w	r1, #0
 800715c:	00d9      	lsls	r1, r3, #3
 800715e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007162:	00d0      	lsls	r0, r2, #3
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	eb12 0208 	adds.w	r2, r2, r8
 800716c:	eb43 0309 	adc.w	r3, r3, r9
 8007170:	f04f 0000 	mov.w	r0, #0
 8007174:	f04f 0100 	mov.w	r1, #0
 8007178:	0259      	lsls	r1, r3, #9
 800717a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800717e:	0250      	lsls	r0, r2, #9
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4610      	mov	r0, r2
 8007186:	4619      	mov	r1, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	461a      	mov	r2, r3
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	f7f9 f87e 	bl	8000290 <__aeabi_uldivmod>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4613      	mov	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	e04a      	b.n	8007234 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800719e:	4b31      	ldr	r3, [pc, #196]	; (8007264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	099b      	lsrs	r3, r3, #6
 80071a4:	461a      	mov	r2, r3
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071ae:	f04f 0100 	mov.w	r1, #0
 80071b2:	ea02 0400 	and.w	r4, r2, r0
 80071b6:	ea03 0501 	and.w	r5, r3, r1
 80071ba:	4620      	mov	r0, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	f04f 0200 	mov.w	r2, #0
 80071c2:	f04f 0300 	mov.w	r3, #0
 80071c6:	014b      	lsls	r3, r1, #5
 80071c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071cc:	0142      	lsls	r2, r0, #5
 80071ce:	4610      	mov	r0, r2
 80071d0:	4619      	mov	r1, r3
 80071d2:	1b00      	subs	r0, r0, r4
 80071d4:	eb61 0105 	sbc.w	r1, r1, r5
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	018b      	lsls	r3, r1, #6
 80071e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071e6:	0182      	lsls	r2, r0, #6
 80071e8:	1a12      	subs	r2, r2, r0
 80071ea:	eb63 0301 	sbc.w	r3, r3, r1
 80071ee:	f04f 0000 	mov.w	r0, #0
 80071f2:	f04f 0100 	mov.w	r1, #0
 80071f6:	00d9      	lsls	r1, r3, #3
 80071f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071fc:	00d0      	lsls	r0, r2, #3
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	1912      	adds	r2, r2, r4
 8007204:	eb45 0303 	adc.w	r3, r5, r3
 8007208:	f04f 0000 	mov.w	r0, #0
 800720c:	f04f 0100 	mov.w	r1, #0
 8007210:	0299      	lsls	r1, r3, #10
 8007212:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007216:	0290      	lsls	r0, r2, #10
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4610      	mov	r0, r2
 800721e:	4619      	mov	r1, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	461a      	mov	r2, r3
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	f7f9 f832 	bl	8000290 <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4613      	mov	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007234:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	0c1b      	lsrs	r3, r3, #16
 800723a:	f003 0303 	and.w	r3, r3, #3
 800723e:	3301      	adds	r3, #1
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	60bb      	str	r3, [r7, #8]
      break;
 800724e:	e002      	b.n	8007256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007252:	60bb      	str	r3, [r7, #8]
      break;
 8007254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007256:	68bb      	ldr	r3, [r7, #8]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007262:	bf00      	nop
 8007264:	40023800 	.word	0x40023800
 8007268:	00f42400 	.word	0x00f42400
 800726c:	007a1200 	.word	0x007a1200

08007270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007274:	4b03      	ldr	r3, [pc, #12]	; (8007284 <HAL_RCC_GetHCLKFreq+0x14>)
 8007276:	681b      	ldr	r3, [r3, #0]
}
 8007278:	4618      	mov	r0, r3
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000000 	.word	0x20000000

08007288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800728c:	f7ff fff0 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 8007290:	4602      	mov	r2, r0
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	0a9b      	lsrs	r3, r3, #10
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	4903      	ldr	r1, [pc, #12]	; (80072ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800729e:	5ccb      	ldrb	r3, [r1, r3]
 80072a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40023800 	.word	0x40023800
 80072ac:	0800a018 	.word	0x0800a018

080072b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10b      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d105      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d075      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072e4:	4bad      	ldr	r3, [pc, #692]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072ea:	f7fc ffe9 	bl	80042c0 <HAL_GetTick>
 80072ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072f0:	e008      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072f2:	f7fc ffe5 	bl	80042c0 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e18b      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007304:	4ba6      	ldr	r3, [pc, #664]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1f0      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d009      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	019a      	lsls	r2, r3, #6
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	071b      	lsls	r3, r3, #28
 8007328:	499d      	ldr	r1, [pc, #628]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01f      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800733c:	4b98      	ldr	r3, [pc, #608]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800733e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007342:	0f1b      	lsrs	r3, r3, #28
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	019a      	lsls	r2, r3, #6
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	061b      	lsls	r3, r3, #24
 8007356:	431a      	orrs	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	071b      	lsls	r3, r3, #28
 800735c:	4990      	ldr	r1, [pc, #576]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007364:	4b8e      	ldr	r3, [pc, #568]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736a:	f023 021f 	bic.w	r2, r3, #31
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	3b01      	subs	r3, #1
 8007374:	498a      	ldr	r1, [pc, #552]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00d      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	019a      	lsls	r2, r3, #6
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	061b      	lsls	r3, r3, #24
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	071b      	lsls	r3, r3, #28
 800739c:	4980      	ldr	r1, [pc, #512]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073a4:	4b7d      	ldr	r3, [pc, #500]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073aa:	f7fc ff89 	bl	80042c0 <HAL_GetTick>
 80073ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073b0:	e008      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073b2:	f7fc ff85 	bl	80042c0 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e12b      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073c4:	4b76      	ldr	r3, [pc, #472]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0f0      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d105      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d079      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073e8:	4b6e      	ldr	r3, [pc, #440]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073ee:	f7fc ff67 	bl	80042c0 <HAL_GetTick>
 80073f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073f4:	e008      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80073f6:	f7fc ff63 	bl	80042c0 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d901      	bls.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e109      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007408:	4b65      	ldr	r3, [pc, #404]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007414:	d0ef      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d020      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007422:	4b5f      	ldr	r3, [pc, #380]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007428:	0f1b      	lsrs	r3, r3, #28
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	019a      	lsls	r2, r3, #6
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	061b      	lsls	r3, r3, #24
 800743c:	431a      	orrs	r2, r3
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	071b      	lsls	r3, r3, #28
 8007442:	4957      	ldr	r1, [pc, #348]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800744a:	4b55      	ldr	r3, [pc, #340]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800744c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007450:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	3b01      	subs	r3, #1
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	4950      	ldr	r1, [pc, #320]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01e      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007470:	4b4b      	ldr	r3, [pc, #300]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007476:	0e1b      	lsrs	r3, r3, #24
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	019a      	lsls	r2, r3, #6
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	061b      	lsls	r3, r3, #24
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	071b      	lsls	r3, r3, #28
 8007490:	4943      	ldr	r1, [pc, #268]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007498:	4b41      	ldr	r3, [pc, #260]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800749a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800749e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	493e      	ldr	r1, [pc, #248]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074ae:	4b3d      	ldr	r3, [pc, #244]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074b4:	f7fc ff04 	bl	80042c0 <HAL_GetTick>
 80074b8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074ba:	e008      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80074bc:	f7fc ff00 	bl	80042c0 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d901      	bls.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e0a6      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074ce:	4b34      	ldr	r3, [pc, #208]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074da:	d1ef      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 808d 	beq.w	8007604 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	4b2c      	ldr	r3, [pc, #176]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	4a2b      	ldr	r2, [pc, #172]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f8:	6413      	str	r3, [r2, #64]	; 0x40
 80074fa:	4b29      	ldr	r3, [pc, #164]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007506:	4b28      	ldr	r3, [pc, #160]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a27      	ldr	r2, [pc, #156]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800750c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007510:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007512:	f7fc fed5 	bl	80042c0 <HAL_GetTick>
 8007516:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007518:	e008      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800751a:	f7fc fed1 	bl	80042c0 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e077      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800752c:	4b1e      	ldr	r3, [pc, #120]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0f0      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007538:	4b19      	ldr	r3, [pc, #100]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800753a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007540:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d039      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	429a      	cmp	r2, r3
 8007554:	d032      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007556:	4b12      	ldr	r3, [pc, #72]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800755e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007560:	4b12      	ldr	r3, [pc, #72]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007562:	2201      	movs	r2, #1
 8007564:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800756c:	4a0c      	ldr	r2, [pc, #48]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007572:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d11e      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800757e:	f7fc fe9f 	bl	80042c0 <HAL_GetTick>
 8007582:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007584:	e014      	b.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007586:	f7fc fe9b 	bl	80042c0 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	f241 3288 	movw	r2, #5000	; 0x1388
 8007594:	4293      	cmp	r3, r2
 8007596:	d90b      	bls.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e03f      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800759c:	42470068 	.word	0x42470068
 80075a0:	40023800 	.word	0x40023800
 80075a4:	42470070 	.word	0x42470070
 80075a8:	40007000 	.word	0x40007000
 80075ac:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b0:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0e4      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c8:	d10d      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80075ca:	4b16      	ldr	r3, [pc, #88]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80075da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075de:	4911      	ldr	r1, [pc, #68]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	608b      	str	r3, [r1, #8]
 80075e4:	e005      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80075e6:	4b0f      	ldr	r3, [pc, #60]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	4a0e      	ldr	r2, [pc, #56]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80075f0:	6093      	str	r3, [r2, #8]
 80075f2:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075fe:	4909      	ldr	r1, [pc, #36]	; (8007624 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007600:	4313      	orrs	r3, r2
 8007602:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0310 	and.w	r3, r3, #16
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007616:	4b04      	ldr	r3, [pc, #16]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007618:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40023800 	.word	0x40023800
 8007628:	424711e0 	.word	0x424711e0

0800762c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e025      	b.n	800768c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fa fd4f 	bl	80020f8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2202      	movs	r2, #2
 800765e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3304      	adds	r3, #4
 800766a:	4619      	mov	r1, r3
 800766c:	4610      	mov	r0, r2
 800766e:	f001 feb7 	bl	80093e0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	461a      	mov	r2, r3
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	f001 ff0c 	bl	800949a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076a6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d101      	bne.n	80076b2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80076ae:	2302      	movs	r3, #2
 80076b0:	e021      	b.n	80076f6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d002      	beq.n	80076be <HAL_SDRAM_SendCommand+0x2a>
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d118      	bne.n	80076f0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2202      	movs	r2, #2
 80076c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 ff4c 	bl	800956c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d104      	bne.n	80076e6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2205      	movs	r2, #5
 80076e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80076e4:	e006      	b.n	80076f4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80076ee:	e001      	b.n	80076f4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e000      	b.n	80076f6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d101      	bne.n	8007718 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007714:	2302      	movs	r3, #2
 8007716:	e016      	b.n	8007746 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b01      	cmp	r3, #1
 8007722:	d10f      	bne.n	8007744 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	4618      	mov	r0, r3
 8007734:	f001 ff57 	bl	80095e6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	e000      	b.n	8007746 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e07b      	b.n	8007858 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d108      	bne.n	800777a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007770:	d009      	beq.n	8007786 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	61da      	str	r2, [r3, #28]
 8007778:	e005      	b.n	8007786 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fb f8e9 	bl	8002978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2202      	movs	r2, #2
 80077aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780a:	ea42 0103 	orr.w	r1, r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	0c1b      	lsrs	r3, r3, #16
 8007824:	f003 0104 	and.w	r1, r3, #4
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	f003 0210 	and.w	r2, r3, #16
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007846:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e01a      	b.n	80078a8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007888:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fb f8bc 	bl	8002a08 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	4613      	mov	r3, r2
 80078be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d101      	bne.n	80078d2 <HAL_SPI_Transmit+0x22>
 80078ce:	2302      	movs	r3, #2
 80078d0:	e126      	b.n	8007b20 <HAL_SPI_Transmit+0x270>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078da:	f7fc fcf1 	bl	80042c0 <HAL_GetTick>
 80078de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d002      	beq.n	80078f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
 80078f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078f4:	e10b      	b.n	8007b0e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <HAL_SPI_Transmit+0x52>
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007906:	e102      	b.n	8007b0e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2203      	movs	r2, #3
 800790c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	88fa      	ldrh	r2, [r7, #6]
 8007926:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800794e:	d10f      	bne.n	8007970 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800795e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800796e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	d007      	beq.n	800798e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800798c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007996:	d14b      	bne.n	8007a30 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <HAL_SPI_Transmit+0xf6>
 80079a0:	8afb      	ldrh	r3, [r7, #22]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d13e      	bne.n	8007a24 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	881a      	ldrh	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	1c9a      	adds	r2, r3, #2
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079ca:	e02b      	b.n	8007a24 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d112      	bne.n	8007a00 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	881a      	ldrh	r2, [r3, #0]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	1c9a      	adds	r2, r3, #2
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80079fe:	e011      	b.n	8007a24 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a00:	f7fc fc5e 	bl	80042c0 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d803      	bhi.n	8007a18 <HAL_SPI_Transmit+0x168>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a16:	d102      	bne.n	8007a1e <HAL_SPI_Transmit+0x16e>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a22:	e074      	b.n	8007b0e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1ce      	bne.n	80079cc <HAL_SPI_Transmit+0x11c>
 8007a2e:	e04c      	b.n	8007aca <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_SPI_Transmit+0x18e>
 8007a38:	8afb      	ldrh	r3, [r7, #22]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d140      	bne.n	8007ac0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	330c      	adds	r3, #12
 8007a48:	7812      	ldrb	r2, [r2, #0]
 8007a4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a64:	e02c      	b.n	8007ac0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d113      	bne.n	8007a9c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	7812      	ldrb	r2, [r2, #0]
 8007a80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a9a:	e011      	b.n	8007ac0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a9c:	f7fc fc10 	bl	80042c0 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d803      	bhi.n	8007ab4 <HAL_SPI_Transmit+0x204>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab2:	d102      	bne.n	8007aba <HAL_SPI_Transmit+0x20a>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d102      	bne.n	8007ac0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007abe:	e026      	b.n	8007b0e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1cd      	bne.n	8007a66 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fbda 	bl	8008288 <SPI_EndRxTxTransaction>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2220      	movs	r2, #32
 8007ade:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ae8:	2300      	movs	r3, #0
 8007aea:	613b      	str	r3, [r7, #16]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	77fb      	strb	r3, [r7, #31]
 8007b0a:	e000      	b.n	8007b0e <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af02      	add	r7, sp, #8
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	4613      	mov	r3, r2
 8007b36:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b44:	d112      	bne.n	8007b6c <HAL_SPI_Receive+0x44>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10e      	bne.n	8007b6c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2204      	movs	r2, #4
 8007b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b56:	88fa      	ldrh	r2, [r7, #6]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	68b9      	ldr	r1, [r7, #8]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f8f1 	bl	8007d4a <HAL_SPI_TransmitReceive>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	e0ea      	b.n	8007d42 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <HAL_SPI_Receive+0x52>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e0e3      	b.n	8007d42 <HAL_SPI_Receive+0x21a>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b82:	f7fc fb9d 	bl	80042c0 <HAL_GetTick>
 8007b86:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d002      	beq.n	8007b9a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b94:	2302      	movs	r3, #2
 8007b96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b98:	e0ca      	b.n	8007d30 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <HAL_SPI_Receive+0x7e>
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007baa:	e0c1      	b.n	8007d30 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2204      	movs	r2, #4
 8007bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	88fa      	ldrh	r2, [r7, #6]
 8007bc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	88fa      	ldrh	r2, [r7, #6]
 8007bca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bf2:	d10f      	bne.n	8007c14 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1e:	2b40      	cmp	r3, #64	; 0x40
 8007c20:	d007      	beq.n	8007c32 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d162      	bne.n	8007d00 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c3a:	e02e      	b.n	8007c9a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d115      	bne.n	8007c76 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f103 020c 	add.w	r2, r3, #12
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	7812      	ldrb	r2, [r2, #0]
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c74:	e011      	b.n	8007c9a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c76:	f7fc fb23 	bl	80042c0 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d803      	bhi.n	8007c8e <HAL_SPI_Receive+0x166>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8c:	d102      	bne.n	8007c94 <HAL_SPI_Receive+0x16c>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c98:	e04a      	b.n	8007d30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1cb      	bne.n	8007c3c <HAL_SPI_Receive+0x114>
 8007ca4:	e031      	b.n	8007d0a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d113      	bne.n	8007cdc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	b292      	uxth	r2, r2
 8007cc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	1c9a      	adds	r2, r3, #2
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cda:	e011      	b.n	8007d00 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cdc:	f7fc faf0 	bl	80042c0 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d803      	bhi.n	8007cf4 <HAL_SPI_Receive+0x1cc>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf2:	d102      	bne.n	8007cfa <HAL_SPI_Receive+0x1d2>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d102      	bne.n	8007d00 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cfe:	e017      	b.n	8007d30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1cd      	bne.n	8007ca6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 fa54 	bl	80081bc <SPI_EndRxTransaction>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
 8007d2c:	e000      	b.n	8007d30 <HAL_SPI_Receive+0x208>
  }

error :
 8007d2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b08c      	sub	sp, #48	; 0x30
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_SPI_TransmitReceive+0x26>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e18a      	b.n	8008086 <HAL_SPI_TransmitReceive+0x33c>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d78:	f7fc faa2 	bl	80042c0 <HAL_GetTick>
 8007d7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d8e:	887b      	ldrh	r3, [r7, #2]
 8007d90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d00f      	beq.n	8007dba <HAL_SPI_TransmitReceive+0x70>
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da0:	d107      	bne.n	8007db2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <HAL_SPI_TransmitReceive+0x68>
 8007daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d003      	beq.n	8007dba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007db2:	2302      	movs	r3, #2
 8007db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007db8:	e15b      	b.n	8008072 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_SPI_TransmitReceive+0x82>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <HAL_SPI_TransmitReceive+0x82>
 8007dc6:	887b      	ldrh	r3, [r7, #2]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d103      	bne.n	8007dd4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dd2:	e14e      	b.n	8008072 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d003      	beq.n	8007de8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2205      	movs	r2, #5
 8007de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	887a      	ldrh	r2, [r7, #2]
 8007df8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	887a      	ldrh	r2, [r7, #2]
 8007dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	887a      	ldrh	r2, [r7, #2]
 8007e0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	887a      	ldrh	r2, [r7, #2]
 8007e10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	d007      	beq.n	8007e3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e44:	d178      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <HAL_SPI_TransmitReceive+0x10a>
 8007e4e:	8b7b      	ldrh	r3, [r7, #26]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d166      	bne.n	8007f22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	881a      	ldrh	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e64:	1c9a      	adds	r2, r3, #2
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e78:	e053      	b.n	8007f22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d11b      	bne.n	8007ec0 <HAL_SPI_TransmitReceive+0x176>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d016      	beq.n	8007ec0 <HAL_SPI_TransmitReceive+0x176>
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d113      	bne.n	8007ec0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9c:	881a      	ldrh	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea8:	1c9a      	adds	r2, r3, #2
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d119      	bne.n	8007f02 <HAL_SPI_TransmitReceive+0x1b8>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d014      	beq.n	8007f02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	b292      	uxth	r2, r2
 8007ee4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	1c9a      	adds	r2, r3, #2
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007efe:	2301      	movs	r3, #1
 8007f00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f02:	f7fc f9dd 	bl	80042c0 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d807      	bhi.n	8007f22 <HAL_SPI_TransmitReceive+0x1d8>
 8007f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f18:	d003      	beq.n	8007f22 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f20:	e0a7      	b.n	8008072 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1a6      	bne.n	8007e7a <HAL_SPI_TransmitReceive+0x130>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1a1      	bne.n	8007e7a <HAL_SPI_TransmitReceive+0x130>
 8007f36:	e07c      	b.n	8008032 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <HAL_SPI_TransmitReceive+0x1fc>
 8007f40:	8b7b      	ldrh	r3, [r7, #26]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d16b      	bne.n	800801e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	330c      	adds	r3, #12
 8007f50:	7812      	ldrb	r2, [r2, #0]
 8007f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f6c:	e057      	b.n	800801e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d11c      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x26c>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d017      	beq.n	8007fb6 <HAL_SPI_TransmitReceive+0x26c>
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d114      	bne.n	8007fb6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	7812      	ldrb	r2, [r2, #0]
 8007f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d119      	bne.n	8007ff8 <HAL_SPI_TransmitReceive+0x2ae>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d014      	beq.n	8007ff8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	b2d2      	uxtb	r2, r2
 8007fda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ff8:	f7fc f962 	bl	80042c0 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008004:	429a      	cmp	r2, r3
 8008006:	d803      	bhi.n	8008010 <HAL_SPI_TransmitReceive+0x2c6>
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800e:	d102      	bne.n	8008016 <HAL_SPI_TransmitReceive+0x2cc>
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	2b00      	cmp	r3, #0
 8008014:	d103      	bne.n	800801e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800801c:	e029      	b.n	8008072 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008022:	b29b      	uxth	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1a2      	bne.n	8007f6e <HAL_SPI_TransmitReceive+0x224>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800802c:	b29b      	uxth	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d19d      	bne.n	8007f6e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008034:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f926 	bl	8008288 <SPI_EndRxTxTransaction>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d006      	beq.n	8008050 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2220      	movs	r2, #32
 800804c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800804e:	e010      	b.n	8008072 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10b      	bne.n	8008070 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008058:	2300      	movs	r3, #0
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	e000      	b.n	8008072 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008070:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008086:	4618      	mov	r0, r3
 8008088:	3730      	adds	r7, #48	; 0x30
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800809c:	b2db      	uxtb	r3, r3
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
	...

080080ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	4613      	mov	r3, r2
 80080ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080bc:	f7fc f900 	bl	80042c0 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	1a9b      	subs	r3, r3, r2
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4413      	add	r3, r2
 80080ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080cc:	f7fc f8f8 	bl	80042c0 <HAL_GetTick>
 80080d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080d2:	4b39      	ldr	r3, [pc, #228]	; (80081b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	015b      	lsls	r3, r3, #5
 80080d8:	0d1b      	lsrs	r3, r3, #20
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	fb02 f303 	mul.w	r3, r2, r3
 80080e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080e2:	e054      	b.n	800818e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d050      	beq.n	800818e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080ec:	f7fc f8e8 	bl	80042c0 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d902      	bls.n	8008102 <SPI_WaitFlagStateUntilTimeout+0x56>
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d13d      	bne.n	800817e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008110:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800811a:	d111      	bne.n	8008140 <SPI_WaitFlagStateUntilTimeout+0x94>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008124:	d004      	beq.n	8008130 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800812e:	d107      	bne.n	8008140 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800813e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008148:	d10f      	bne.n	800816a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008168:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e017      	b.n	80081ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	3b01      	subs	r3, #1
 800818c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4013      	ands	r3, r2
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	429a      	cmp	r2, r3
 800819c:	bf0c      	ite	eq
 800819e:	2301      	moveq	r3, #1
 80081a0:	2300      	movne	r3, #0
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	461a      	mov	r2, r3
 80081a6:	79fb      	ldrb	r3, [r7, #7]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d19b      	bne.n	80080e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3720      	adds	r7, #32
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000000 	.word	0x20000000

080081bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081d0:	d111      	bne.n	80081f6 <SPI_EndRxTransaction+0x3a>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081da:	d004      	beq.n	80081e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e4:	d107      	bne.n	80081f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081fe:	d12a      	bne.n	8008256 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008208:	d012      	beq.n	8008230 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2200      	movs	r2, #0
 8008212:	2180      	movs	r1, #128	; 0x80
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f7ff ff49 	bl	80080ac <SPI_WaitFlagStateUntilTimeout>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d02d      	beq.n	800827c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008224:	f043 0220 	orr.w	r2, r3, #32
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e026      	b.n	800827e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2200      	movs	r2, #0
 8008238:	2101      	movs	r1, #1
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f7ff ff36 	bl	80080ac <SPI_WaitFlagStateUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d01a      	beq.n	800827c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824a:	f043 0220 	orr.w	r2, r3, #32
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e013      	b.n	800827e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2200      	movs	r2, #0
 800825e:	2101      	movs	r1, #1
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f7ff ff23 	bl	80080ac <SPI_WaitFlagStateUntilTimeout>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008270:	f043 0220 	orr.w	r2, r3, #32
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e000      	b.n	800827e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af02      	add	r7, sp, #8
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008294:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <SPI_EndRxTxTransaction+0x7c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a1b      	ldr	r2, [pc, #108]	; (8008308 <SPI_EndRxTxTransaction+0x80>)
 800829a:	fba2 2303 	umull	r2, r3, r2, r3
 800829e:	0d5b      	lsrs	r3, r3, #21
 80082a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
 80082a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082b2:	d112      	bne.n	80082da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2200      	movs	r2, #0
 80082bc:	2180      	movs	r1, #128	; 0x80
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7ff fef4 	bl	80080ac <SPI_WaitFlagStateUntilTimeout>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d016      	beq.n	80082f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ce:	f043 0220 	orr.w	r2, r3, #32
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e00f      	b.n	80082fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00a      	beq.n	80082f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f0:	2b80      	cmp	r3, #128	; 0x80
 80082f2:	d0f2      	beq.n	80082da <SPI_EndRxTxTransaction+0x52>
 80082f4:	e000      	b.n	80082f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80082f6:	bf00      	nop
  }

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000000 	.word	0x20000000
 8008308:	165e9f81 	.word	0x165e9f81

0800830c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e041      	b.n	80083a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7fa fcaa 	bl	8002c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3304      	adds	r3, #4
 8008348:	4619      	mov	r1, r3
 800834a:	4610      	mov	r0, r2
 800834c:	f000 fcbc 	bl	8008cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e041      	b.n	8008440 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d106      	bne.n	80083d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f839 	bl	8008448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2202      	movs	r2, #2
 80083da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	4610      	mov	r0, r2
 80083ea:	f000 fc6d 	bl	8008cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d109      	bne.n	8008488 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	bf0c      	ite	eq
 8008480:	2301      	moveq	r3, #1
 8008482:	2300      	movne	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	e022      	b.n	80084ce <HAL_TIM_PWM_Start_DMA+0x72>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b04      	cmp	r3, #4
 800848c:	d109      	bne.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x46>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	bf0c      	ite	eq
 800849a:	2301      	moveq	r3, #1
 800849c:	2300      	movne	r3, #0
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	e015      	b.n	80084ce <HAL_TIM_PWM_Start_DMA+0x72>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d109      	bne.n	80084bc <HAL_TIM_PWM_Start_DMA+0x60>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	bf0c      	ite	eq
 80084b4:	2301      	moveq	r3, #1
 80084b6:	2300      	movne	r3, #0
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	e008      	b.n	80084ce <HAL_TIM_PWM_Start_DMA+0x72>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	bf0c      	ite	eq
 80084c8:	2301      	moveq	r3, #1
 80084ca:	2300      	movne	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80084d2:	2302      	movs	r3, #2
 80084d4:	e171      	b.n	80087ba <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d109      	bne.n	80084f0 <HAL_TIM_PWM_Start_DMA+0x94>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	bf0c      	ite	eq
 80084e8:	2301      	moveq	r3, #1
 80084ea:	2300      	movne	r3, #0
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	e022      	b.n	8008536 <HAL_TIM_PWM_Start_DMA+0xda>
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d109      	bne.n	800850a <HAL_TIM_PWM_Start_DMA+0xae>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b01      	cmp	r3, #1
 8008500:	bf0c      	ite	eq
 8008502:	2301      	moveq	r3, #1
 8008504:	2300      	movne	r3, #0
 8008506:	b2db      	uxtb	r3, r3
 8008508:	e015      	b.n	8008536 <HAL_TIM_PWM_Start_DMA+0xda>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b08      	cmp	r3, #8
 800850e:	d109      	bne.n	8008524 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b01      	cmp	r3, #1
 800851a:	bf0c      	ite	eq
 800851c:	2301      	moveq	r3, #1
 800851e:	2300      	movne	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	e008      	b.n	8008536 <HAL_TIM_PWM_Start_DMA+0xda>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b01      	cmp	r3, #1
 800852e:	bf0c      	ite	eq
 8008530:	2301      	moveq	r3, #1
 8008532:	2300      	movne	r3, #0
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d024      	beq.n	8008584 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d104      	bne.n	800854a <HAL_TIM_PWM_Start_DMA+0xee>
 8008540:	887b      	ldrh	r3, [r7, #2]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e137      	b.n	80087ba <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d104      	bne.n	800855a <HAL_TIM_PWM_Start_DMA+0xfe>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2202      	movs	r2, #2
 8008554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008558:	e016      	b.n	8008588 <HAL_TIM_PWM_Start_DMA+0x12c>
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b04      	cmp	r3, #4
 800855e:	d104      	bne.n	800856a <HAL_TIM_PWM_Start_DMA+0x10e>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008568:	e00e      	b.n	8008588 <HAL_TIM_PWM_Start_DMA+0x12c>
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2b08      	cmp	r3, #8
 800856e:	d104      	bne.n	800857a <HAL_TIM_PWM_Start_DMA+0x11e>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008578:	e006      	b.n	8008588 <HAL_TIM_PWM_Start_DMA+0x12c>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2202      	movs	r2, #2
 800857e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008582:	e001      	b.n	8008588 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e118      	b.n	80087ba <HAL_TIM_PWM_Start_DMA+0x35e>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b0c      	cmp	r3, #12
 800858c:	f200 80ae 	bhi.w	80086ec <HAL_TIM_PWM_Start_DMA+0x290>
 8008590:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008596:	bf00      	nop
 8008598:	080085cd 	.word	0x080085cd
 800859c:	080086ed 	.word	0x080086ed
 80085a0:	080086ed 	.word	0x080086ed
 80085a4:	080086ed 	.word	0x080086ed
 80085a8:	08008615 	.word	0x08008615
 80085ac:	080086ed 	.word	0x080086ed
 80085b0:	080086ed 	.word	0x080086ed
 80085b4:	080086ed 	.word	0x080086ed
 80085b8:	0800865d 	.word	0x0800865d
 80085bc:	080086ed 	.word	0x080086ed
 80085c0:	080086ed 	.word	0x080086ed
 80085c4:	080086ed 	.word	0x080086ed
 80085c8:	080086a5 	.word	0x080086a5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	4a7c      	ldr	r2, [pc, #496]	; (80087c4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80085d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	4a7b      	ldr	r2, [pc, #492]	; (80087c8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80085da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	4a7a      	ldr	r2, [pc, #488]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x370>)
 80085e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3334      	adds	r3, #52	; 0x34
 80085f0:	461a      	mov	r2, r3
 80085f2:	887b      	ldrh	r3, [r7, #2]
 80085f4:	f7fc fcfc 	bl	8004ff0 <HAL_DMA_Start_IT>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e0db      	b.n	80087ba <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008610:	60da      	str	r2, [r3, #12]
      break;
 8008612:	e06e      	b.n	80086f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	4a6a      	ldr	r2, [pc, #424]	; (80087c4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800861a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008620:	4a69      	ldr	r2, [pc, #420]	; (80087c8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008628:	4a68      	ldr	r2, [pc, #416]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x370>)
 800862a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3338      	adds	r3, #56	; 0x38
 8008638:	461a      	mov	r2, r3
 800863a:	887b      	ldrh	r3, [r7, #2]
 800863c:	f7fc fcd8 	bl	8004ff0 <HAL_DMA_Start_IT>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e0b7      	b.n	80087ba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008658:	60da      	str	r2, [r3, #12]
      break;
 800865a:	e04a      	b.n	80086f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	4a58      	ldr	r2, [pc, #352]	; (80087c4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008662:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	4a57      	ldr	r2, [pc, #348]	; (80087c8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800866a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	4a56      	ldr	r2, [pc, #344]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x370>)
 8008672:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	333c      	adds	r3, #60	; 0x3c
 8008680:	461a      	mov	r2, r3
 8008682:	887b      	ldrh	r3, [r7, #2]
 8008684:	f7fc fcb4 	bl	8004ff0 <HAL_DMA_Start_IT>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e093      	b.n	80087ba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086a0:	60da      	str	r2, [r3, #12]
      break;
 80086a2:	e026      	b.n	80086f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	4a46      	ldr	r2, [pc, #280]	; (80087c4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80086aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b0:	4a45      	ldr	r2, [pc, #276]	; (80087c8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80086b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b8:	4a44      	ldr	r2, [pc, #272]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x370>)
 80086ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3340      	adds	r3, #64	; 0x40
 80086c8:	461a      	mov	r2, r3
 80086ca:	887b      	ldrh	r3, [r7, #2]
 80086cc:	f7fc fc90 	bl	8004ff0 <HAL_DMA_Start_IT>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e06f      	b.n	80087ba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68da      	ldr	r2, [r3, #12]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086e8:	60da      	str	r2, [r3, #12]
      break;
 80086ea:	e002      	b.n	80086f2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
      break;
 80086f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d15f      	bne.n	80087b8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2201      	movs	r2, #1
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fdcb 	bl	800929c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a31      	ldr	r2, [pc, #196]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d004      	beq.n	800871a <HAL_TIM_PWM_Start_DMA+0x2be>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a2f      	ldr	r2, [pc, #188]	; (80087d4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d101      	bne.n	800871e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800871a:	2301      	movs	r3, #1
 800871c:	e000      	b.n	8008720 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800871e:	2300      	movs	r3, #0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d007      	beq.n	8008734 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008732:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a25      	ldr	r2, [pc, #148]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d022      	beq.n	8008784 <HAL_TIM_PWM_Start_DMA+0x328>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008746:	d01d      	beq.n	8008784 <HAL_TIM_PWM_Start_DMA+0x328>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a22      	ldr	r2, [pc, #136]	; (80087d8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d018      	beq.n	8008784 <HAL_TIM_PWM_Start_DMA+0x328>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a21      	ldr	r2, [pc, #132]	; (80087dc <HAL_TIM_PWM_Start_DMA+0x380>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d013      	beq.n	8008784 <HAL_TIM_PWM_Start_DMA+0x328>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a1f      	ldr	r2, [pc, #124]	; (80087e0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d00e      	beq.n	8008784 <HAL_TIM_PWM_Start_DMA+0x328>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a1a      	ldr	r2, [pc, #104]	; (80087d4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_TIM_PWM_Start_DMA+0x328>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1b      	ldr	r2, [pc, #108]	; (80087e4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <HAL_TIM_PWM_Start_DMA+0x328>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a1a      	ldr	r2, [pc, #104]	; (80087e8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d111      	bne.n	80087a8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f003 0307 	and.w	r3, r3, #7
 800878e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2b06      	cmp	r3, #6
 8008794:	d010      	beq.n	80087b8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f042 0201 	orr.w	r2, r2, #1
 80087a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087a6:	e007      	b.n	80087b8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f042 0201 	orr.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	08008bb9 	.word	0x08008bb9
 80087c8:	08008c61 	.word	0x08008c61
 80087cc:	08008b27 	.word	0x08008b27
 80087d0:	40010000 	.word	0x40010000
 80087d4:	40010400 	.word	0x40010400
 80087d8:	40000400 	.word	0x40000400
 80087dc:	40000800 	.word	0x40000800
 80087e0:	40000c00 	.word	0x40000c00
 80087e4:	40014000 	.word	0x40014000
 80087e8:	40001800 	.word	0x40001800

080087ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008806:	2302      	movs	r3, #2
 8008808:	e0ae      	b.n	8008968 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b0c      	cmp	r3, #12
 8008816:	f200 809f 	bhi.w	8008958 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800881a:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	08008855 	.word	0x08008855
 8008824:	08008959 	.word	0x08008959
 8008828:	08008959 	.word	0x08008959
 800882c:	08008959 	.word	0x08008959
 8008830:	08008895 	.word	0x08008895
 8008834:	08008959 	.word	0x08008959
 8008838:	08008959 	.word	0x08008959
 800883c:	08008959 	.word	0x08008959
 8008840:	080088d7 	.word	0x080088d7
 8008844:	08008959 	.word	0x08008959
 8008848:	08008959 	.word	0x08008959
 800884c:	08008959 	.word	0x08008959
 8008850:	08008917 	.word	0x08008917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68b9      	ldr	r1, [r7, #8]
 800885a:	4618      	mov	r0, r3
 800885c:	f000 fad4 	bl	8008e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699a      	ldr	r2, [r3, #24]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0208 	orr.w	r2, r2, #8
 800886e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	699a      	ldr	r2, [r3, #24]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0204 	bic.w	r2, r2, #4
 800887e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6999      	ldr	r1, [r3, #24]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	430a      	orrs	r2, r1
 8008890:	619a      	str	r2, [r3, #24]
      break;
 8008892:	e064      	b.n	800895e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fb24 	bl	8008ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	699a      	ldr	r2, [r3, #24]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699a      	ldr	r2, [r3, #24]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6999      	ldr	r1, [r3, #24]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	021a      	lsls	r2, r3, #8
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	430a      	orrs	r2, r1
 80088d2:	619a      	str	r2, [r3, #24]
      break;
 80088d4:	e043      	b.n	800895e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68b9      	ldr	r1, [r7, #8]
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 fb79 	bl	8008fd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f042 0208 	orr.w	r2, r2, #8
 80088f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69da      	ldr	r2, [r3, #28]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 0204 	bic.w	r2, r2, #4
 8008900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69d9      	ldr	r1, [r3, #28]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	61da      	str	r2, [r3, #28]
      break;
 8008914:	e023      	b.n	800895e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68b9      	ldr	r1, [r7, #8]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fbcd 	bl	80090bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69da      	ldr	r2, [r3, #28]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69da      	ldr	r2, [r3, #28]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	69d9      	ldr	r1, [r3, #28]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	021a      	lsls	r2, r3, #8
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	61da      	str	r2, [r3, #28]
      break;
 8008956:	e002      	b.n	800895e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	75fb      	strb	r3, [r7, #23]
      break;
 800895c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_TIM_ConfigClockSource+0x1c>
 8008988:	2302      	movs	r3, #2
 800898a:	e0b4      	b.n	8008af6 <HAL_TIM_ConfigClockSource+0x186>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089c4:	d03e      	beq.n	8008a44 <HAL_TIM_ConfigClockSource+0xd4>
 80089c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ca:	f200 8087 	bhi.w	8008adc <HAL_TIM_ConfigClockSource+0x16c>
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d2:	f000 8086 	beq.w	8008ae2 <HAL_TIM_ConfigClockSource+0x172>
 80089d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089da:	d87f      	bhi.n	8008adc <HAL_TIM_ConfigClockSource+0x16c>
 80089dc:	2b70      	cmp	r3, #112	; 0x70
 80089de:	d01a      	beq.n	8008a16 <HAL_TIM_ConfigClockSource+0xa6>
 80089e0:	2b70      	cmp	r3, #112	; 0x70
 80089e2:	d87b      	bhi.n	8008adc <HAL_TIM_ConfigClockSource+0x16c>
 80089e4:	2b60      	cmp	r3, #96	; 0x60
 80089e6:	d050      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x11a>
 80089e8:	2b60      	cmp	r3, #96	; 0x60
 80089ea:	d877      	bhi.n	8008adc <HAL_TIM_ConfigClockSource+0x16c>
 80089ec:	2b50      	cmp	r3, #80	; 0x50
 80089ee:	d03c      	beq.n	8008a6a <HAL_TIM_ConfigClockSource+0xfa>
 80089f0:	2b50      	cmp	r3, #80	; 0x50
 80089f2:	d873      	bhi.n	8008adc <HAL_TIM_ConfigClockSource+0x16c>
 80089f4:	2b40      	cmp	r3, #64	; 0x40
 80089f6:	d058      	beq.n	8008aaa <HAL_TIM_ConfigClockSource+0x13a>
 80089f8:	2b40      	cmp	r3, #64	; 0x40
 80089fa:	d86f      	bhi.n	8008adc <HAL_TIM_ConfigClockSource+0x16c>
 80089fc:	2b30      	cmp	r3, #48	; 0x30
 80089fe:	d064      	beq.n	8008aca <HAL_TIM_ConfigClockSource+0x15a>
 8008a00:	2b30      	cmp	r3, #48	; 0x30
 8008a02:	d86b      	bhi.n	8008adc <HAL_TIM_ConfigClockSource+0x16c>
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	d060      	beq.n	8008aca <HAL_TIM_ConfigClockSource+0x15a>
 8008a08:	2b20      	cmp	r3, #32
 8008a0a:	d867      	bhi.n	8008adc <HAL_TIM_ConfigClockSource+0x16c>
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d05c      	beq.n	8008aca <HAL_TIM_ConfigClockSource+0x15a>
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	d05a      	beq.n	8008aca <HAL_TIM_ConfigClockSource+0x15a>
 8008a14:	e062      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	6899      	ldr	r1, [r3, #8]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f000 fc19 	bl	800925c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	609a      	str	r2, [r3, #8]
      break;
 8008a42:	e04f      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	6899      	ldr	r1, [r3, #8]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685a      	ldr	r2, [r3, #4]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f000 fc02 	bl	800925c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689a      	ldr	r2, [r3, #8]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a66:	609a      	str	r2, [r3, #8]
      break;
 8008a68:	e03c      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6818      	ldr	r0, [r3, #0]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	6859      	ldr	r1, [r3, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	461a      	mov	r2, r3
 8008a78:	f000 fb76 	bl	8009168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2150      	movs	r1, #80	; 0x50
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fbcf 	bl	8009226 <TIM_ITRx_SetConfig>
      break;
 8008a88:	e02c      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	6859      	ldr	r1, [r3, #4]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	461a      	mov	r2, r3
 8008a98:	f000 fb95 	bl	80091c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2160      	movs	r1, #96	; 0x60
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 fbbf 	bl	8009226 <TIM_ITRx_SetConfig>
      break;
 8008aa8:	e01c      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6818      	ldr	r0, [r3, #0]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	6859      	ldr	r1, [r3, #4]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f000 fb56 	bl	8009168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2140      	movs	r1, #64	; 0x40
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fbaf 	bl	8009226 <TIM_ITRx_SetConfig>
      break;
 8008ac8:	e00c      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	f000 fba6 	bl	8009226 <TIM_ITRx_SetConfig>
      break;
 8008ada:	e003      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae0:	e000      	b.n	8008ae4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d107      	bne.n	8008b4e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b4c:	e02a      	b.n	8008ba4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d107      	bne.n	8008b68 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b66:	e01d      	b.n	8008ba4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d107      	bne.n	8008b82 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2204      	movs	r2, #4
 8008b76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b80:	e010      	b.n	8008ba4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d107      	bne.n	8008b9c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2208      	movs	r2, #8
 8008b90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b9a:	e003      	b.n	8008ba4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff ffb4 	bl	8008b12 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	771a      	strb	r2, [r3, #28]
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d10b      	bne.n	8008be8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d136      	bne.n	8008c4c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008be6:	e031      	b.n	8008c4c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d10b      	bne.n	8008c0a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d125      	bne.n	8008c4c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c08:	e020      	b.n	8008c4c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d10b      	bne.n	8008c2c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2204      	movs	r2, #4
 8008c18:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	69db      	ldr	r3, [r3, #28]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d114      	bne.n	8008c4c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c2a:	e00f      	b.n	8008c4c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d10a      	bne.n	8008c4c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2208      	movs	r2, #8
 8008c3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d103      	bne.n	8008c4c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f7f8 fdd3 	bl	80017f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	771a      	strb	r2, [r3, #28]
}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d103      	bne.n	8008c80 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	771a      	strb	r2, [r3, #28]
 8008c7e:	e019      	b.n	8008cb4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d103      	bne.n	8008c92 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	771a      	strb	r2, [r3, #28]
 8008c90:	e010      	b.n	8008cb4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d103      	bne.n	8008ca4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	771a      	strb	r2, [r3, #28]
 8008ca2:	e007      	b.n	8008cb4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d102      	bne.n	8008cb4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2208      	movs	r2, #8
 8008cb2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f7ff ff22 	bl	8008afe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	771a      	strb	r2, [r3, #28]
}
 8008cc0:	bf00      	nop
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a40      	ldr	r2, [pc, #256]	; (8008ddc <TIM_Base_SetConfig+0x114>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d013      	beq.n	8008d08 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce6:	d00f      	beq.n	8008d08 <TIM_Base_SetConfig+0x40>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a3d      	ldr	r2, [pc, #244]	; (8008de0 <TIM_Base_SetConfig+0x118>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d00b      	beq.n	8008d08 <TIM_Base_SetConfig+0x40>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a3c      	ldr	r2, [pc, #240]	; (8008de4 <TIM_Base_SetConfig+0x11c>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d007      	beq.n	8008d08 <TIM_Base_SetConfig+0x40>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a3b      	ldr	r2, [pc, #236]	; (8008de8 <TIM_Base_SetConfig+0x120>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d003      	beq.n	8008d08 <TIM_Base_SetConfig+0x40>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a3a      	ldr	r2, [pc, #232]	; (8008dec <TIM_Base_SetConfig+0x124>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d108      	bne.n	8008d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a2f      	ldr	r2, [pc, #188]	; (8008ddc <TIM_Base_SetConfig+0x114>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d02b      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d28:	d027      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2c      	ldr	r2, [pc, #176]	; (8008de0 <TIM_Base_SetConfig+0x118>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d023      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a2b      	ldr	r2, [pc, #172]	; (8008de4 <TIM_Base_SetConfig+0x11c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d01f      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a2a      	ldr	r2, [pc, #168]	; (8008de8 <TIM_Base_SetConfig+0x120>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d01b      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a29      	ldr	r2, [pc, #164]	; (8008dec <TIM_Base_SetConfig+0x124>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d017      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a28      	ldr	r2, [pc, #160]	; (8008df0 <TIM_Base_SetConfig+0x128>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d013      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a27      	ldr	r2, [pc, #156]	; (8008df4 <TIM_Base_SetConfig+0x12c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00f      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a26      	ldr	r2, [pc, #152]	; (8008df8 <TIM_Base_SetConfig+0x130>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00b      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a25      	ldr	r2, [pc, #148]	; (8008dfc <TIM_Base_SetConfig+0x134>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d007      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a24      	ldr	r2, [pc, #144]	; (8008e00 <TIM_Base_SetConfig+0x138>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d003      	beq.n	8008d7a <TIM_Base_SetConfig+0xb2>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a23      	ldr	r2, [pc, #140]	; (8008e04 <TIM_Base_SetConfig+0x13c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d108      	bne.n	8008d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <TIM_Base_SetConfig+0x114>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d003      	beq.n	8008dc0 <TIM_Base_SetConfig+0xf8>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a0c      	ldr	r2, [pc, #48]	; (8008dec <TIM_Base_SetConfig+0x124>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d103      	bne.n	8008dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	691a      	ldr	r2, [r3, #16]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	615a      	str	r2, [r3, #20]
}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40010000 	.word	0x40010000
 8008de0:	40000400 	.word	0x40000400
 8008de4:	40000800 	.word	0x40000800
 8008de8:	40000c00 	.word	0x40000c00
 8008dec:	40010400 	.word	0x40010400
 8008df0:	40014000 	.word	0x40014000
 8008df4:	40014400 	.word	0x40014400
 8008df8:	40014800 	.word	0x40014800
 8008dfc:	40001800 	.word	0x40001800
 8008e00:	40001c00 	.word	0x40001c00
 8008e04:	40002000 	.word	0x40002000

08008e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	f023 0201 	bic.w	r2, r3, #1
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f023 0302 	bic.w	r3, r3, #2
 8008e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a20      	ldr	r2, [pc, #128]	; (8008ee0 <TIM_OC1_SetConfig+0xd8>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d003      	beq.n	8008e6c <TIM_OC1_SetConfig+0x64>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a1f      	ldr	r2, [pc, #124]	; (8008ee4 <TIM_OC1_SetConfig+0xdc>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d10c      	bne.n	8008e86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f023 0308 	bic.w	r3, r3, #8
 8008e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f023 0304 	bic.w	r3, r3, #4
 8008e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a15      	ldr	r2, [pc, #84]	; (8008ee0 <TIM_OC1_SetConfig+0xd8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d003      	beq.n	8008e96 <TIM_OC1_SetConfig+0x8e>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a14      	ldr	r2, [pc, #80]	; (8008ee4 <TIM_OC1_SetConfig+0xdc>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d111      	bne.n	8008eba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	621a      	str	r2, [r3, #32]
}
 8008ed4:	bf00      	nop
 8008ed6:	371c      	adds	r7, #28
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	40010000 	.word	0x40010000
 8008ee4:	40010400 	.word	0x40010400

08008ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	f023 0210 	bic.w	r2, r3, #16
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	699b      	ldr	r3, [r3, #24]
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f023 0320 	bic.w	r3, r3, #32
 8008f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a22      	ldr	r2, [pc, #136]	; (8008fcc <TIM_OC2_SetConfig+0xe4>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d003      	beq.n	8008f50 <TIM_OC2_SetConfig+0x68>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a21      	ldr	r2, [pc, #132]	; (8008fd0 <TIM_OC2_SetConfig+0xe8>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d10d      	bne.n	8008f6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	011b      	lsls	r3, r3, #4
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a17      	ldr	r2, [pc, #92]	; (8008fcc <TIM_OC2_SetConfig+0xe4>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d003      	beq.n	8008f7c <TIM_OC2_SetConfig+0x94>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a16      	ldr	r2, [pc, #88]	; (8008fd0 <TIM_OC2_SetConfig+0xe8>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d113      	bne.n	8008fa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	621a      	str	r2, [r3, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	371c      	adds	r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	40010000 	.word	0x40010000
 8008fd0:	40010400 	.word	0x40010400

08008fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a1b      	ldr	r3, [r3, #32]
 8008fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f023 0303 	bic.w	r3, r3, #3
 800900a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	4313      	orrs	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800901c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	4313      	orrs	r3, r2
 8009028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a21      	ldr	r2, [pc, #132]	; (80090b4 <TIM_OC3_SetConfig+0xe0>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d003      	beq.n	800903a <TIM_OC3_SetConfig+0x66>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a20      	ldr	r2, [pc, #128]	; (80090b8 <TIM_OC3_SetConfig+0xe4>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d10d      	bne.n	8009056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	4313      	orrs	r3, r2
 800904c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a16      	ldr	r2, [pc, #88]	; (80090b4 <TIM_OC3_SetConfig+0xe0>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d003      	beq.n	8009066 <TIM_OC3_SetConfig+0x92>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <TIM_OC3_SetConfig+0xe4>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d113      	bne.n	800908e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800906c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	621a      	str	r2, [r3, #32]
}
 80090a8:	bf00      	nop
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	40010000 	.word	0x40010000
 80090b8:	40010400 	.word	0x40010400

080090bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	031b      	lsls	r3, r3, #12
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	4313      	orrs	r3, r2
 8009112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a12      	ldr	r2, [pc, #72]	; (8009160 <TIM_OC4_SetConfig+0xa4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_OC4_SetConfig+0x68>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a11      	ldr	r2, [pc, #68]	; (8009164 <TIM_OC4_SetConfig+0xa8>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d109      	bne.n	8009138 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800912a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	019b      	lsls	r3, r3, #6
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	621a      	str	r2, [r3, #32]
}
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	40010000 	.word	0x40010000
 8009164:	40010400 	.word	0x40010400

08009168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	f023 0201 	bic.w	r2, r3, #1
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	011b      	lsls	r3, r3, #4
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	4313      	orrs	r3, r2
 800919c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f023 030a 	bic.w	r3, r3, #10
 80091a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	621a      	str	r2, [r3, #32]
}
 80091ba:	bf00      	nop
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b087      	sub	sp, #28
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	60b9      	str	r1, [r7, #8]
 80091d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	f023 0210 	bic.w	r2, r3, #16
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	031b      	lsls	r3, r3, #12
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	011b      	lsls	r3, r3, #4
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	4313      	orrs	r3, r2
 800920c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	621a      	str	r2, [r3, #32]
}
 800921a:	bf00      	nop
 800921c:	371c      	adds	r7, #28
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009226:	b480      	push	{r7}
 8009228:	b085      	sub	sp, #20
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	f043 0307 	orr.w	r3, r3, #7
 8009248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	609a      	str	r2, [r3, #8]
}
 8009250:	bf00      	nop
 8009252:	3714      	adds	r7, #20
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	021a      	lsls	r2, r3, #8
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	431a      	orrs	r2, r3
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	4313      	orrs	r3, r2
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	4313      	orrs	r3, r2
 8009288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	609a      	str	r2, [r3, #8]
}
 8009290:	bf00      	nop
 8009292:	371c      	adds	r7, #28
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f003 031f 	and.w	r3, r3, #31
 80092ae:	2201      	movs	r2, #1
 80092b0:	fa02 f303 	lsl.w	r3, r2, r3
 80092b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6a1a      	ldr	r2, [r3, #32]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	43db      	mvns	r3, r3
 80092be:	401a      	ands	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a1a      	ldr	r2, [r3, #32]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f003 031f 	and.w	r3, r3, #31
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	fa01 f303 	lsl.w	r3, r1, r3
 80092d4:	431a      	orrs	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	621a      	str	r2, [r3, #32]
}
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
	...

080092e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d101      	bne.n	8009300 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092fc:	2302      	movs	r3, #2
 80092fe:	e05a      	b.n	80093b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2202      	movs	r2, #2
 800930c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	4313      	orrs	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a21      	ldr	r2, [pc, #132]	; (80093c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d022      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800934c:	d01d      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1d      	ldr	r2, [pc, #116]	; (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d018      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a1b      	ldr	r2, [pc, #108]	; (80093cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d013      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a1a      	ldr	r2, [pc, #104]	; (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00e      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a18      	ldr	r2, [pc, #96]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d009      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a17      	ldr	r2, [pc, #92]	; (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d004      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a15      	ldr	r2, [pc, #84]	; (80093dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d10c      	bne.n	80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	4313      	orrs	r3, r2
 800939a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	40010000 	.word	0x40010000
 80093c8:	40000400 	.word	0x40000400
 80093cc:	40000800 	.word	0x40000800
 80093d0:	40000c00 	.word	0x40000c00
 80093d4:	40010400 	.word	0x40010400
 80093d8:	40014000 	.word	0x40014000
 80093dc:	40001800 	.word	0x40001800

080093e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d123      	bne.n	800943a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80093fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	6851      	ldr	r1, [r2, #4]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	6892      	ldr	r2, [r2, #8]
 8009406:	4311      	orrs	r1, r2
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	68d2      	ldr	r2, [r2, #12]
 800940c:	4311      	orrs	r1, r2
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	6912      	ldr	r2, [r2, #16]
 8009412:	4311      	orrs	r1, r2
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	6952      	ldr	r2, [r2, #20]
 8009418:	4311      	orrs	r1, r2
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	6992      	ldr	r2, [r2, #24]
 800941e:	4311      	orrs	r1, r2
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	69d2      	ldr	r2, [r2, #28]
 8009424:	4311      	orrs	r1, r2
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	6a12      	ldr	r2, [r2, #32]
 800942a:	4311      	orrs	r1, r2
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009430:	430a      	orrs	r2, r1
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	e028      	b.n	800948c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	69d9      	ldr	r1, [r3, #28]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	4319      	orrs	r1, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	430b      	orrs	r3, r1
 8009452:	431a      	orrs	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009460:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	6851      	ldr	r1, [r2, #4]
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	6892      	ldr	r2, [r2, #8]
 800946c:	4311      	orrs	r1, r2
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	68d2      	ldr	r2, [r2, #12]
 8009472:	4311      	orrs	r1, r2
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	6912      	ldr	r2, [r2, #16]
 8009478:	4311      	orrs	r1, r2
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	6952      	ldr	r2, [r2, #20]
 800947e:	4311      	orrs	r1, r2
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	6992      	ldr	r2, [r2, #24]
 8009484:	430a      	orrs	r2, r1
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800949a:	b480      	push	{r7}
 800949c:	b085      	sub	sp, #20
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d128      	bne.n	80094fe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	1e59      	subs	r1, r3, #1
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	3b01      	subs	r3, #1
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	4319      	orrs	r1, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	021b      	lsls	r3, r3, #8
 80094cc:	4319      	orrs	r1, r3
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	031b      	lsls	r3, r3, #12
 80094d6:	4319      	orrs	r1, r3
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	3b01      	subs	r3, #1
 80094de:	041b      	lsls	r3, r3, #16
 80094e0:	4319      	orrs	r1, r3
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	051b      	lsls	r3, r3, #20
 80094ea:	4319      	orrs	r1, r3
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	061b      	lsls	r3, r3, #24
 80094f4:	430b      	orrs	r3, r1
 80094f6:	431a      	orrs	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	609a      	str	r2, [r3, #8]
 80094fc:	e02f      	b.n	800955e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	68d2      	ldr	r2, [r2, #12]
 800950e:	3a01      	subs	r2, #1
 8009510:	0311      	lsls	r1, r2, #12
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	6952      	ldr	r2, [r2, #20]
 8009516:	3a01      	subs	r2, #1
 8009518:	0512      	lsls	r2, r2, #20
 800951a:	430a      	orrs	r2, r1
 800951c:	431a      	orrs	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	1e59      	subs	r1, r3, #1
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	3b01      	subs	r3, #1
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	4319      	orrs	r1, r3
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	3b01      	subs	r3, #1
 8009540:	021b      	lsls	r3, r3, #8
 8009542:	4319      	orrs	r1, r3
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	3b01      	subs	r3, #1
 800954a:	041b      	lsls	r3, r3, #16
 800954c:	4319      	orrs	r1, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	3b01      	subs	r3, #1
 8009554:	061b      	lsls	r3, r3, #24
 8009556:	430b      	orrs	r3, r1
 8009558:	431a      	orrs	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	0d9b      	lsrs	r3, r3, #22
 8009582:	059b      	lsls	r3, r3, #22
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	6811      	ldr	r1, [r2, #0]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	6852      	ldr	r2, [r2, #4]
 800958c:	4311      	orrs	r1, r2
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	6892      	ldr	r2, [r2, #8]
 8009592:	3a01      	subs	r2, #1
 8009594:	0152      	lsls	r2, r2, #5
 8009596:	4311      	orrs	r1, r2
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	68d2      	ldr	r2, [r2, #12]
 800959c:	0252      	lsls	r2, r2, #9
 800959e:	430a      	orrs	r2, r1
 80095a0:	431a      	orrs	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80095a6:	f7fa fe8b 	bl	80042c0 <HAL_GetTick>
 80095aa:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80095ac:	e010      	b.n	80095d0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d00c      	beq.n	80095d0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <FMC_SDRAM_SendCommand+0x60>
 80095bc:	f7fa fe80 	bl	80042c0 <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d201      	bcs.n	80095d0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e006      	b.n	80095de <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f003 0320 	and.w	r3, r3, #32
 80095d8:	2b20      	cmp	r3, #32
 80095da:	d0e8      	beq.n	80095ae <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80095f8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	0052      	lsls	r2, r2, #1
 8009600:	431a      	orrs	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <__errno>:
 8009614:	4b01      	ldr	r3, [pc, #4]	; (800961c <__errno+0x8>)
 8009616:	6818      	ldr	r0, [r3, #0]
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	2000006c 	.word	0x2000006c

08009620 <__libc_init_array>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	4d0d      	ldr	r5, [pc, #52]	; (8009658 <__libc_init_array+0x38>)
 8009624:	4c0d      	ldr	r4, [pc, #52]	; (800965c <__libc_init_array+0x3c>)
 8009626:	1b64      	subs	r4, r4, r5
 8009628:	10a4      	asrs	r4, r4, #2
 800962a:	2600      	movs	r6, #0
 800962c:	42a6      	cmp	r6, r4
 800962e:	d109      	bne.n	8009644 <__libc_init_array+0x24>
 8009630:	4d0b      	ldr	r5, [pc, #44]	; (8009660 <__libc_init_array+0x40>)
 8009632:	4c0c      	ldr	r4, [pc, #48]	; (8009664 <__libc_init_array+0x44>)
 8009634:	f000 fc4e 	bl	8009ed4 <_init>
 8009638:	1b64      	subs	r4, r4, r5
 800963a:	10a4      	asrs	r4, r4, #2
 800963c:	2600      	movs	r6, #0
 800963e:	42a6      	cmp	r6, r4
 8009640:	d105      	bne.n	800964e <__libc_init_array+0x2e>
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	f855 3b04 	ldr.w	r3, [r5], #4
 8009648:	4798      	blx	r3
 800964a:	3601      	adds	r6, #1
 800964c:	e7ee      	b.n	800962c <__libc_init_array+0xc>
 800964e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009652:	4798      	blx	r3
 8009654:	3601      	adds	r6, #1
 8009656:	e7f2      	b.n	800963e <__libc_init_array+0x1e>
 8009658:	0800daa8 	.word	0x0800daa8
 800965c:	0800daa8 	.word	0x0800daa8
 8009660:	0800daa8 	.word	0x0800daa8
 8009664:	0800daac 	.word	0x0800daac

08009668 <memset>:
 8009668:	4402      	add	r2, r0
 800966a:	4603      	mov	r3, r0
 800966c:	4293      	cmp	r3, r2
 800966e:	d100      	bne.n	8009672 <memset+0xa>
 8009670:	4770      	bx	lr
 8009672:	f803 1b01 	strb.w	r1, [r3], #1
 8009676:	e7f9      	b.n	800966c <memset+0x4>

08009678 <siprintf>:
 8009678:	b40e      	push	{r1, r2, r3}
 800967a:	b500      	push	{lr}
 800967c:	b09c      	sub	sp, #112	; 0x70
 800967e:	ab1d      	add	r3, sp, #116	; 0x74
 8009680:	9002      	str	r0, [sp, #8]
 8009682:	9006      	str	r0, [sp, #24]
 8009684:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009688:	4809      	ldr	r0, [pc, #36]	; (80096b0 <siprintf+0x38>)
 800968a:	9107      	str	r1, [sp, #28]
 800968c:	9104      	str	r1, [sp, #16]
 800968e:	4909      	ldr	r1, [pc, #36]	; (80096b4 <siprintf+0x3c>)
 8009690:	f853 2b04 	ldr.w	r2, [r3], #4
 8009694:	9105      	str	r1, [sp, #20]
 8009696:	6800      	ldr	r0, [r0, #0]
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	a902      	add	r1, sp, #8
 800969c:	f000 f912 	bl	80098c4 <_svfiprintf_r>
 80096a0:	9b02      	ldr	r3, [sp, #8]
 80096a2:	2200      	movs	r2, #0
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	b01c      	add	sp, #112	; 0x70
 80096a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096ac:	b003      	add	sp, #12
 80096ae:	4770      	bx	lr
 80096b0:	2000006c 	.word	0x2000006c
 80096b4:	ffff0208 	.word	0xffff0208

080096b8 <_free_r>:
 80096b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ba:	2900      	cmp	r1, #0
 80096bc:	d048      	beq.n	8009750 <_free_r+0x98>
 80096be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c2:	9001      	str	r0, [sp, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f1a1 0404 	sub.w	r4, r1, #4
 80096ca:	bfb8      	it	lt
 80096cc:	18e4      	addlt	r4, r4, r3
 80096ce:	f000 fbc7 	bl	8009e60 <__malloc_lock>
 80096d2:	4a20      	ldr	r2, [pc, #128]	; (8009754 <_free_r+0x9c>)
 80096d4:	9801      	ldr	r0, [sp, #4]
 80096d6:	6813      	ldr	r3, [r2, #0]
 80096d8:	4615      	mov	r5, r2
 80096da:	b933      	cbnz	r3, 80096ea <_free_r+0x32>
 80096dc:	6063      	str	r3, [r4, #4]
 80096de:	6014      	str	r4, [r2, #0]
 80096e0:	b003      	add	sp, #12
 80096e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096e6:	f000 bbc1 	b.w	8009e6c <__malloc_unlock>
 80096ea:	42a3      	cmp	r3, r4
 80096ec:	d90b      	bls.n	8009706 <_free_r+0x4e>
 80096ee:	6821      	ldr	r1, [r4, #0]
 80096f0:	1862      	adds	r2, r4, r1
 80096f2:	4293      	cmp	r3, r2
 80096f4:	bf04      	itt	eq
 80096f6:	681a      	ldreq	r2, [r3, #0]
 80096f8:	685b      	ldreq	r3, [r3, #4]
 80096fa:	6063      	str	r3, [r4, #4]
 80096fc:	bf04      	itt	eq
 80096fe:	1852      	addeq	r2, r2, r1
 8009700:	6022      	streq	r2, [r4, #0]
 8009702:	602c      	str	r4, [r5, #0]
 8009704:	e7ec      	b.n	80096e0 <_free_r+0x28>
 8009706:	461a      	mov	r2, r3
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	b10b      	cbz	r3, 8009710 <_free_r+0x58>
 800970c:	42a3      	cmp	r3, r4
 800970e:	d9fa      	bls.n	8009706 <_free_r+0x4e>
 8009710:	6811      	ldr	r1, [r2, #0]
 8009712:	1855      	adds	r5, r2, r1
 8009714:	42a5      	cmp	r5, r4
 8009716:	d10b      	bne.n	8009730 <_free_r+0x78>
 8009718:	6824      	ldr	r4, [r4, #0]
 800971a:	4421      	add	r1, r4
 800971c:	1854      	adds	r4, r2, r1
 800971e:	42a3      	cmp	r3, r4
 8009720:	6011      	str	r1, [r2, #0]
 8009722:	d1dd      	bne.n	80096e0 <_free_r+0x28>
 8009724:	681c      	ldr	r4, [r3, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	6053      	str	r3, [r2, #4]
 800972a:	4421      	add	r1, r4
 800972c:	6011      	str	r1, [r2, #0]
 800972e:	e7d7      	b.n	80096e0 <_free_r+0x28>
 8009730:	d902      	bls.n	8009738 <_free_r+0x80>
 8009732:	230c      	movs	r3, #12
 8009734:	6003      	str	r3, [r0, #0]
 8009736:	e7d3      	b.n	80096e0 <_free_r+0x28>
 8009738:	6825      	ldr	r5, [r4, #0]
 800973a:	1961      	adds	r1, r4, r5
 800973c:	428b      	cmp	r3, r1
 800973e:	bf04      	itt	eq
 8009740:	6819      	ldreq	r1, [r3, #0]
 8009742:	685b      	ldreq	r3, [r3, #4]
 8009744:	6063      	str	r3, [r4, #4]
 8009746:	bf04      	itt	eq
 8009748:	1949      	addeq	r1, r1, r5
 800974a:	6021      	streq	r1, [r4, #0]
 800974c:	6054      	str	r4, [r2, #4]
 800974e:	e7c7      	b.n	80096e0 <_free_r+0x28>
 8009750:	b003      	add	sp, #12
 8009752:	bd30      	pop	{r4, r5, pc}
 8009754:	2000029c 	.word	0x2000029c

08009758 <_malloc_r>:
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975a:	1ccd      	adds	r5, r1, #3
 800975c:	f025 0503 	bic.w	r5, r5, #3
 8009760:	3508      	adds	r5, #8
 8009762:	2d0c      	cmp	r5, #12
 8009764:	bf38      	it	cc
 8009766:	250c      	movcc	r5, #12
 8009768:	2d00      	cmp	r5, #0
 800976a:	4606      	mov	r6, r0
 800976c:	db01      	blt.n	8009772 <_malloc_r+0x1a>
 800976e:	42a9      	cmp	r1, r5
 8009770:	d903      	bls.n	800977a <_malloc_r+0x22>
 8009772:	230c      	movs	r3, #12
 8009774:	6033      	str	r3, [r6, #0]
 8009776:	2000      	movs	r0, #0
 8009778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800977a:	f000 fb71 	bl	8009e60 <__malloc_lock>
 800977e:	4921      	ldr	r1, [pc, #132]	; (8009804 <_malloc_r+0xac>)
 8009780:	680a      	ldr	r2, [r1, #0]
 8009782:	4614      	mov	r4, r2
 8009784:	b99c      	cbnz	r4, 80097ae <_malloc_r+0x56>
 8009786:	4f20      	ldr	r7, [pc, #128]	; (8009808 <_malloc_r+0xb0>)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	b923      	cbnz	r3, 8009796 <_malloc_r+0x3e>
 800978c:	4621      	mov	r1, r4
 800978e:	4630      	mov	r0, r6
 8009790:	f000 fb2c 	bl	8009dec <_sbrk_r>
 8009794:	6038      	str	r0, [r7, #0]
 8009796:	4629      	mov	r1, r5
 8009798:	4630      	mov	r0, r6
 800979a:	f000 fb27 	bl	8009dec <_sbrk_r>
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	d123      	bne.n	80097ea <_malloc_r+0x92>
 80097a2:	230c      	movs	r3, #12
 80097a4:	6033      	str	r3, [r6, #0]
 80097a6:	4630      	mov	r0, r6
 80097a8:	f000 fb60 	bl	8009e6c <__malloc_unlock>
 80097ac:	e7e3      	b.n	8009776 <_malloc_r+0x1e>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	1b5b      	subs	r3, r3, r5
 80097b2:	d417      	bmi.n	80097e4 <_malloc_r+0x8c>
 80097b4:	2b0b      	cmp	r3, #11
 80097b6:	d903      	bls.n	80097c0 <_malloc_r+0x68>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	441c      	add	r4, r3
 80097bc:	6025      	str	r5, [r4, #0]
 80097be:	e004      	b.n	80097ca <_malloc_r+0x72>
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	42a2      	cmp	r2, r4
 80097c4:	bf0c      	ite	eq
 80097c6:	600b      	streq	r3, [r1, #0]
 80097c8:	6053      	strne	r3, [r2, #4]
 80097ca:	4630      	mov	r0, r6
 80097cc:	f000 fb4e 	bl	8009e6c <__malloc_unlock>
 80097d0:	f104 000b 	add.w	r0, r4, #11
 80097d4:	1d23      	adds	r3, r4, #4
 80097d6:	f020 0007 	bic.w	r0, r0, #7
 80097da:	1ac2      	subs	r2, r0, r3
 80097dc:	d0cc      	beq.n	8009778 <_malloc_r+0x20>
 80097de:	1a1b      	subs	r3, r3, r0
 80097e0:	50a3      	str	r3, [r4, r2]
 80097e2:	e7c9      	b.n	8009778 <_malloc_r+0x20>
 80097e4:	4622      	mov	r2, r4
 80097e6:	6864      	ldr	r4, [r4, #4]
 80097e8:	e7cc      	b.n	8009784 <_malloc_r+0x2c>
 80097ea:	1cc4      	adds	r4, r0, #3
 80097ec:	f024 0403 	bic.w	r4, r4, #3
 80097f0:	42a0      	cmp	r0, r4
 80097f2:	d0e3      	beq.n	80097bc <_malloc_r+0x64>
 80097f4:	1a21      	subs	r1, r4, r0
 80097f6:	4630      	mov	r0, r6
 80097f8:	f000 faf8 	bl	8009dec <_sbrk_r>
 80097fc:	3001      	adds	r0, #1
 80097fe:	d1dd      	bne.n	80097bc <_malloc_r+0x64>
 8009800:	e7cf      	b.n	80097a2 <_malloc_r+0x4a>
 8009802:	bf00      	nop
 8009804:	2000029c 	.word	0x2000029c
 8009808:	200002a0 	.word	0x200002a0

0800980c <__ssputs_r>:
 800980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009810:	688e      	ldr	r6, [r1, #8]
 8009812:	429e      	cmp	r6, r3
 8009814:	4682      	mov	sl, r0
 8009816:	460c      	mov	r4, r1
 8009818:	4690      	mov	r8, r2
 800981a:	461f      	mov	r7, r3
 800981c:	d838      	bhi.n	8009890 <__ssputs_r+0x84>
 800981e:	898a      	ldrh	r2, [r1, #12]
 8009820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009824:	d032      	beq.n	800988c <__ssputs_r+0x80>
 8009826:	6825      	ldr	r5, [r4, #0]
 8009828:	6909      	ldr	r1, [r1, #16]
 800982a:	eba5 0901 	sub.w	r9, r5, r1
 800982e:	6965      	ldr	r5, [r4, #20]
 8009830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009838:	3301      	adds	r3, #1
 800983a:	444b      	add	r3, r9
 800983c:	106d      	asrs	r5, r5, #1
 800983e:	429d      	cmp	r5, r3
 8009840:	bf38      	it	cc
 8009842:	461d      	movcc	r5, r3
 8009844:	0553      	lsls	r3, r2, #21
 8009846:	d531      	bpl.n	80098ac <__ssputs_r+0xa0>
 8009848:	4629      	mov	r1, r5
 800984a:	f7ff ff85 	bl	8009758 <_malloc_r>
 800984e:	4606      	mov	r6, r0
 8009850:	b950      	cbnz	r0, 8009868 <__ssputs_r+0x5c>
 8009852:	230c      	movs	r3, #12
 8009854:	f8ca 3000 	str.w	r3, [sl]
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800985e:	81a3      	strh	r3, [r4, #12]
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009868:	6921      	ldr	r1, [r4, #16]
 800986a:	464a      	mov	r2, r9
 800986c:	f000 fad0 	bl	8009e10 <memcpy>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	6126      	str	r6, [r4, #16]
 800987e:	6165      	str	r5, [r4, #20]
 8009880:	444e      	add	r6, r9
 8009882:	eba5 0509 	sub.w	r5, r5, r9
 8009886:	6026      	str	r6, [r4, #0]
 8009888:	60a5      	str	r5, [r4, #8]
 800988a:	463e      	mov	r6, r7
 800988c:	42be      	cmp	r6, r7
 800988e:	d900      	bls.n	8009892 <__ssputs_r+0x86>
 8009890:	463e      	mov	r6, r7
 8009892:	4632      	mov	r2, r6
 8009894:	6820      	ldr	r0, [r4, #0]
 8009896:	4641      	mov	r1, r8
 8009898:	f000 fac8 	bl	8009e2c <memmove>
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	1b9b      	subs	r3, r3, r6
 80098a2:	4432      	add	r2, r6
 80098a4:	60a3      	str	r3, [r4, #8]
 80098a6:	6022      	str	r2, [r4, #0]
 80098a8:	2000      	movs	r0, #0
 80098aa:	e7db      	b.n	8009864 <__ssputs_r+0x58>
 80098ac:	462a      	mov	r2, r5
 80098ae:	f000 fae3 	bl	8009e78 <_realloc_r>
 80098b2:	4606      	mov	r6, r0
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d1e1      	bne.n	800987c <__ssputs_r+0x70>
 80098b8:	6921      	ldr	r1, [r4, #16]
 80098ba:	4650      	mov	r0, sl
 80098bc:	f7ff fefc 	bl	80096b8 <_free_r>
 80098c0:	e7c7      	b.n	8009852 <__ssputs_r+0x46>
	...

080098c4 <_svfiprintf_r>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	4698      	mov	r8, r3
 80098ca:	898b      	ldrh	r3, [r1, #12]
 80098cc:	061b      	lsls	r3, r3, #24
 80098ce:	b09d      	sub	sp, #116	; 0x74
 80098d0:	4607      	mov	r7, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	4614      	mov	r4, r2
 80098d6:	d50e      	bpl.n	80098f6 <_svfiprintf_r+0x32>
 80098d8:	690b      	ldr	r3, [r1, #16]
 80098da:	b963      	cbnz	r3, 80098f6 <_svfiprintf_r+0x32>
 80098dc:	2140      	movs	r1, #64	; 0x40
 80098de:	f7ff ff3b 	bl	8009758 <_malloc_r>
 80098e2:	6028      	str	r0, [r5, #0]
 80098e4:	6128      	str	r0, [r5, #16]
 80098e6:	b920      	cbnz	r0, 80098f2 <_svfiprintf_r+0x2e>
 80098e8:	230c      	movs	r3, #12
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295
 80098f0:	e0d1      	b.n	8009a96 <_svfiprintf_r+0x1d2>
 80098f2:	2340      	movs	r3, #64	; 0x40
 80098f4:	616b      	str	r3, [r5, #20]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	2320      	movs	r3, #32
 80098fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009900:	f8cd 800c 	str.w	r8, [sp, #12]
 8009904:	2330      	movs	r3, #48	; 0x30
 8009906:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ab0 <_svfiprintf_r+0x1ec>
 800990a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800990e:	f04f 0901 	mov.w	r9, #1
 8009912:	4623      	mov	r3, r4
 8009914:	469a      	mov	sl, r3
 8009916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800991a:	b10a      	cbz	r2, 8009920 <_svfiprintf_r+0x5c>
 800991c:	2a25      	cmp	r2, #37	; 0x25
 800991e:	d1f9      	bne.n	8009914 <_svfiprintf_r+0x50>
 8009920:	ebba 0b04 	subs.w	fp, sl, r4
 8009924:	d00b      	beq.n	800993e <_svfiprintf_r+0x7a>
 8009926:	465b      	mov	r3, fp
 8009928:	4622      	mov	r2, r4
 800992a:	4629      	mov	r1, r5
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff ff6d 	bl	800980c <__ssputs_r>
 8009932:	3001      	adds	r0, #1
 8009934:	f000 80aa 	beq.w	8009a8c <_svfiprintf_r+0x1c8>
 8009938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800993a:	445a      	add	r2, fp
 800993c:	9209      	str	r2, [sp, #36]	; 0x24
 800993e:	f89a 3000 	ldrb.w	r3, [sl]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80a2 	beq.w	8009a8c <_svfiprintf_r+0x1c8>
 8009948:	2300      	movs	r3, #0
 800994a:	f04f 32ff 	mov.w	r2, #4294967295
 800994e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009952:	f10a 0a01 	add.w	sl, sl, #1
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	9307      	str	r3, [sp, #28]
 800995a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800995e:	931a      	str	r3, [sp, #104]	; 0x68
 8009960:	4654      	mov	r4, sl
 8009962:	2205      	movs	r2, #5
 8009964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009968:	4851      	ldr	r0, [pc, #324]	; (8009ab0 <_svfiprintf_r+0x1ec>)
 800996a:	f7f6 fc41 	bl	80001f0 <memchr>
 800996e:	9a04      	ldr	r2, [sp, #16]
 8009970:	b9d8      	cbnz	r0, 80099aa <_svfiprintf_r+0xe6>
 8009972:	06d0      	lsls	r0, r2, #27
 8009974:	bf44      	itt	mi
 8009976:	2320      	movmi	r3, #32
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	0711      	lsls	r1, r2, #28
 800997e:	bf44      	itt	mi
 8009980:	232b      	movmi	r3, #43	; 0x2b
 8009982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009986:	f89a 3000 	ldrb.w	r3, [sl]
 800998a:	2b2a      	cmp	r3, #42	; 0x2a
 800998c:	d015      	beq.n	80099ba <_svfiprintf_r+0xf6>
 800998e:	9a07      	ldr	r2, [sp, #28]
 8009990:	4654      	mov	r4, sl
 8009992:	2000      	movs	r0, #0
 8009994:	f04f 0c0a 	mov.w	ip, #10
 8009998:	4621      	mov	r1, r4
 800999a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800999e:	3b30      	subs	r3, #48	; 0x30
 80099a0:	2b09      	cmp	r3, #9
 80099a2:	d94e      	bls.n	8009a42 <_svfiprintf_r+0x17e>
 80099a4:	b1b0      	cbz	r0, 80099d4 <_svfiprintf_r+0x110>
 80099a6:	9207      	str	r2, [sp, #28]
 80099a8:	e014      	b.n	80099d4 <_svfiprintf_r+0x110>
 80099aa:	eba0 0308 	sub.w	r3, r0, r8
 80099ae:	fa09 f303 	lsl.w	r3, r9, r3
 80099b2:	4313      	orrs	r3, r2
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	46a2      	mov	sl, r4
 80099b8:	e7d2      	b.n	8009960 <_svfiprintf_r+0x9c>
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	1d19      	adds	r1, r3, #4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	9103      	str	r1, [sp, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bfbb      	ittet	lt
 80099c6:	425b      	neglt	r3, r3
 80099c8:	f042 0202 	orrlt.w	r2, r2, #2
 80099cc:	9307      	strge	r3, [sp, #28]
 80099ce:	9307      	strlt	r3, [sp, #28]
 80099d0:	bfb8      	it	lt
 80099d2:	9204      	strlt	r2, [sp, #16]
 80099d4:	7823      	ldrb	r3, [r4, #0]
 80099d6:	2b2e      	cmp	r3, #46	; 0x2e
 80099d8:	d10c      	bne.n	80099f4 <_svfiprintf_r+0x130>
 80099da:	7863      	ldrb	r3, [r4, #1]
 80099dc:	2b2a      	cmp	r3, #42	; 0x2a
 80099de:	d135      	bne.n	8009a4c <_svfiprintf_r+0x188>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	1d1a      	adds	r2, r3, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	9203      	str	r2, [sp, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfb8      	it	lt
 80099ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80099f0:	3402      	adds	r4, #2
 80099f2:	9305      	str	r3, [sp, #20]
 80099f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ac0 <_svfiprintf_r+0x1fc>
 80099f8:	7821      	ldrb	r1, [r4, #0]
 80099fa:	2203      	movs	r2, #3
 80099fc:	4650      	mov	r0, sl
 80099fe:	f7f6 fbf7 	bl	80001f0 <memchr>
 8009a02:	b140      	cbz	r0, 8009a16 <_svfiprintf_r+0x152>
 8009a04:	2340      	movs	r3, #64	; 0x40
 8009a06:	eba0 000a 	sub.w	r0, r0, sl
 8009a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8009a0e:	9b04      	ldr	r3, [sp, #16]
 8009a10:	4303      	orrs	r3, r0
 8009a12:	3401      	adds	r4, #1
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1a:	4826      	ldr	r0, [pc, #152]	; (8009ab4 <_svfiprintf_r+0x1f0>)
 8009a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a20:	2206      	movs	r2, #6
 8009a22:	f7f6 fbe5 	bl	80001f0 <memchr>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d038      	beq.n	8009a9c <_svfiprintf_r+0x1d8>
 8009a2a:	4b23      	ldr	r3, [pc, #140]	; (8009ab8 <_svfiprintf_r+0x1f4>)
 8009a2c:	bb1b      	cbnz	r3, 8009a76 <_svfiprintf_r+0x1b2>
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	3307      	adds	r3, #7
 8009a32:	f023 0307 	bic.w	r3, r3, #7
 8009a36:	3308      	adds	r3, #8
 8009a38:	9303      	str	r3, [sp, #12]
 8009a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3c:	4433      	add	r3, r6
 8009a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a40:	e767      	b.n	8009912 <_svfiprintf_r+0x4e>
 8009a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a46:	460c      	mov	r4, r1
 8009a48:	2001      	movs	r0, #1
 8009a4a:	e7a5      	b.n	8009998 <_svfiprintf_r+0xd4>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	3401      	adds	r4, #1
 8009a50:	9305      	str	r3, [sp, #20]
 8009a52:	4619      	mov	r1, r3
 8009a54:	f04f 0c0a 	mov.w	ip, #10
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5e:	3a30      	subs	r2, #48	; 0x30
 8009a60:	2a09      	cmp	r2, #9
 8009a62:	d903      	bls.n	8009a6c <_svfiprintf_r+0x1a8>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d0c5      	beq.n	80099f4 <_svfiprintf_r+0x130>
 8009a68:	9105      	str	r1, [sp, #20]
 8009a6a:	e7c3      	b.n	80099f4 <_svfiprintf_r+0x130>
 8009a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a70:	4604      	mov	r4, r0
 8009a72:	2301      	movs	r3, #1
 8009a74:	e7f0      	b.n	8009a58 <_svfiprintf_r+0x194>
 8009a76:	ab03      	add	r3, sp, #12
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <_svfiprintf_r+0x1f8>)
 8009a7e:	a904      	add	r1, sp, #16
 8009a80:	4638      	mov	r0, r7
 8009a82:	f3af 8000 	nop.w
 8009a86:	1c42      	adds	r2, r0, #1
 8009a88:	4606      	mov	r6, r0
 8009a8a:	d1d6      	bne.n	8009a3a <_svfiprintf_r+0x176>
 8009a8c:	89ab      	ldrh	r3, [r5, #12]
 8009a8e:	065b      	lsls	r3, r3, #25
 8009a90:	f53f af2c 	bmi.w	80098ec <_svfiprintf_r+0x28>
 8009a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a96:	b01d      	add	sp, #116	; 0x74
 8009a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9c:	ab03      	add	r3, sp, #12
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	462a      	mov	r2, r5
 8009aa2:	4b06      	ldr	r3, [pc, #24]	; (8009abc <_svfiprintf_r+0x1f8>)
 8009aa4:	a904      	add	r1, sp, #16
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f000 f87a 	bl	8009ba0 <_printf_i>
 8009aac:	e7eb      	b.n	8009a86 <_svfiprintf_r+0x1c2>
 8009aae:	bf00      	nop
 8009ab0:	0800da0c 	.word	0x0800da0c
 8009ab4:	0800da16 	.word	0x0800da16
 8009ab8:	00000000 	.word	0x00000000
 8009abc:	0800980d 	.word	0x0800980d
 8009ac0:	0800da12 	.word	0x0800da12

08009ac4 <_printf_common>:
 8009ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac8:	4616      	mov	r6, r2
 8009aca:	4699      	mov	r9, r3
 8009acc:	688a      	ldr	r2, [r1, #8]
 8009ace:	690b      	ldr	r3, [r1, #16]
 8009ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	bfb8      	it	lt
 8009ad8:	4613      	movlt	r3, r2
 8009ada:	6033      	str	r3, [r6, #0]
 8009adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	b10a      	cbz	r2, 8009aea <_printf_common+0x26>
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	6033      	str	r3, [r6, #0]
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	0699      	lsls	r1, r3, #26
 8009aee:	bf42      	ittt	mi
 8009af0:	6833      	ldrmi	r3, [r6, #0]
 8009af2:	3302      	addmi	r3, #2
 8009af4:	6033      	strmi	r3, [r6, #0]
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	f015 0506 	ands.w	r5, r5, #6
 8009afc:	d106      	bne.n	8009b0c <_printf_common+0x48>
 8009afe:	f104 0a19 	add.w	sl, r4, #25
 8009b02:	68e3      	ldr	r3, [r4, #12]
 8009b04:	6832      	ldr	r2, [r6, #0]
 8009b06:	1a9b      	subs	r3, r3, r2
 8009b08:	42ab      	cmp	r3, r5
 8009b0a:	dc26      	bgt.n	8009b5a <_printf_common+0x96>
 8009b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b10:	1e13      	subs	r3, r2, #0
 8009b12:	6822      	ldr	r2, [r4, #0]
 8009b14:	bf18      	it	ne
 8009b16:	2301      	movne	r3, #1
 8009b18:	0692      	lsls	r2, r2, #26
 8009b1a:	d42b      	bmi.n	8009b74 <_printf_common+0xb0>
 8009b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b20:	4649      	mov	r1, r9
 8009b22:	4638      	mov	r0, r7
 8009b24:	47c0      	blx	r8
 8009b26:	3001      	adds	r0, #1
 8009b28:	d01e      	beq.n	8009b68 <_printf_common+0xa4>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	68e5      	ldr	r5, [r4, #12]
 8009b2e:	6832      	ldr	r2, [r6, #0]
 8009b30:	f003 0306 	and.w	r3, r3, #6
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	bf08      	it	eq
 8009b38:	1aad      	subeq	r5, r5, r2
 8009b3a:	68a3      	ldr	r3, [r4, #8]
 8009b3c:	6922      	ldr	r2, [r4, #16]
 8009b3e:	bf0c      	ite	eq
 8009b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b44:	2500      	movne	r5, #0
 8009b46:	4293      	cmp	r3, r2
 8009b48:	bfc4      	itt	gt
 8009b4a:	1a9b      	subgt	r3, r3, r2
 8009b4c:	18ed      	addgt	r5, r5, r3
 8009b4e:	2600      	movs	r6, #0
 8009b50:	341a      	adds	r4, #26
 8009b52:	42b5      	cmp	r5, r6
 8009b54:	d11a      	bne.n	8009b8c <_printf_common+0xc8>
 8009b56:	2000      	movs	r0, #0
 8009b58:	e008      	b.n	8009b6c <_printf_common+0xa8>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	4649      	mov	r1, r9
 8009b60:	4638      	mov	r0, r7
 8009b62:	47c0      	blx	r8
 8009b64:	3001      	adds	r0, #1
 8009b66:	d103      	bne.n	8009b70 <_printf_common+0xac>
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b70:	3501      	adds	r5, #1
 8009b72:	e7c6      	b.n	8009b02 <_printf_common+0x3e>
 8009b74:	18e1      	adds	r1, r4, r3
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	2030      	movs	r0, #48	; 0x30
 8009b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b7e:	4422      	add	r2, r4
 8009b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b88:	3302      	adds	r3, #2
 8009b8a:	e7c7      	b.n	8009b1c <_printf_common+0x58>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	4622      	mov	r2, r4
 8009b90:	4649      	mov	r1, r9
 8009b92:	4638      	mov	r0, r7
 8009b94:	47c0      	blx	r8
 8009b96:	3001      	adds	r0, #1
 8009b98:	d0e6      	beq.n	8009b68 <_printf_common+0xa4>
 8009b9a:	3601      	adds	r6, #1
 8009b9c:	e7d9      	b.n	8009b52 <_printf_common+0x8e>
	...

08009ba0 <_printf_i>:
 8009ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	4691      	mov	r9, r2
 8009ba8:	7e27      	ldrb	r7, [r4, #24]
 8009baa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bac:	2f78      	cmp	r7, #120	; 0x78
 8009bae:	4680      	mov	r8, r0
 8009bb0:	469a      	mov	sl, r3
 8009bb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bb6:	d807      	bhi.n	8009bc8 <_printf_i+0x28>
 8009bb8:	2f62      	cmp	r7, #98	; 0x62
 8009bba:	d80a      	bhi.n	8009bd2 <_printf_i+0x32>
 8009bbc:	2f00      	cmp	r7, #0
 8009bbe:	f000 80d8 	beq.w	8009d72 <_printf_i+0x1d2>
 8009bc2:	2f58      	cmp	r7, #88	; 0x58
 8009bc4:	f000 80a3 	beq.w	8009d0e <_printf_i+0x16e>
 8009bc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bd0:	e03a      	b.n	8009c48 <_printf_i+0xa8>
 8009bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bd6:	2b15      	cmp	r3, #21
 8009bd8:	d8f6      	bhi.n	8009bc8 <_printf_i+0x28>
 8009bda:	a001      	add	r0, pc, #4	; (adr r0, 8009be0 <_printf_i+0x40>)
 8009bdc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009be0:	08009c39 	.word	0x08009c39
 8009be4:	08009c4d 	.word	0x08009c4d
 8009be8:	08009bc9 	.word	0x08009bc9
 8009bec:	08009bc9 	.word	0x08009bc9
 8009bf0:	08009bc9 	.word	0x08009bc9
 8009bf4:	08009bc9 	.word	0x08009bc9
 8009bf8:	08009c4d 	.word	0x08009c4d
 8009bfc:	08009bc9 	.word	0x08009bc9
 8009c00:	08009bc9 	.word	0x08009bc9
 8009c04:	08009bc9 	.word	0x08009bc9
 8009c08:	08009bc9 	.word	0x08009bc9
 8009c0c:	08009d59 	.word	0x08009d59
 8009c10:	08009c7d 	.word	0x08009c7d
 8009c14:	08009d3b 	.word	0x08009d3b
 8009c18:	08009bc9 	.word	0x08009bc9
 8009c1c:	08009bc9 	.word	0x08009bc9
 8009c20:	08009d7b 	.word	0x08009d7b
 8009c24:	08009bc9 	.word	0x08009bc9
 8009c28:	08009c7d 	.word	0x08009c7d
 8009c2c:	08009bc9 	.word	0x08009bc9
 8009c30:	08009bc9 	.word	0x08009bc9
 8009c34:	08009d43 	.word	0x08009d43
 8009c38:	680b      	ldr	r3, [r1, #0]
 8009c3a:	1d1a      	adds	r2, r3, #4
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	600a      	str	r2, [r1, #0]
 8009c40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e0a3      	b.n	8009d94 <_printf_i+0x1f4>
 8009c4c:	6825      	ldr	r5, [r4, #0]
 8009c4e:	6808      	ldr	r0, [r1, #0]
 8009c50:	062e      	lsls	r6, r5, #24
 8009c52:	f100 0304 	add.w	r3, r0, #4
 8009c56:	d50a      	bpl.n	8009c6e <_printf_i+0xce>
 8009c58:	6805      	ldr	r5, [r0, #0]
 8009c5a:	600b      	str	r3, [r1, #0]
 8009c5c:	2d00      	cmp	r5, #0
 8009c5e:	da03      	bge.n	8009c68 <_printf_i+0xc8>
 8009c60:	232d      	movs	r3, #45	; 0x2d
 8009c62:	426d      	negs	r5, r5
 8009c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c68:	485e      	ldr	r0, [pc, #376]	; (8009de4 <_printf_i+0x244>)
 8009c6a:	230a      	movs	r3, #10
 8009c6c:	e019      	b.n	8009ca2 <_printf_i+0x102>
 8009c6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c72:	6805      	ldr	r5, [r0, #0]
 8009c74:	600b      	str	r3, [r1, #0]
 8009c76:	bf18      	it	ne
 8009c78:	b22d      	sxthne	r5, r5
 8009c7a:	e7ef      	b.n	8009c5c <_printf_i+0xbc>
 8009c7c:	680b      	ldr	r3, [r1, #0]
 8009c7e:	6825      	ldr	r5, [r4, #0]
 8009c80:	1d18      	adds	r0, r3, #4
 8009c82:	6008      	str	r0, [r1, #0]
 8009c84:	0628      	lsls	r0, r5, #24
 8009c86:	d501      	bpl.n	8009c8c <_printf_i+0xec>
 8009c88:	681d      	ldr	r5, [r3, #0]
 8009c8a:	e002      	b.n	8009c92 <_printf_i+0xf2>
 8009c8c:	0669      	lsls	r1, r5, #25
 8009c8e:	d5fb      	bpl.n	8009c88 <_printf_i+0xe8>
 8009c90:	881d      	ldrh	r5, [r3, #0]
 8009c92:	4854      	ldr	r0, [pc, #336]	; (8009de4 <_printf_i+0x244>)
 8009c94:	2f6f      	cmp	r7, #111	; 0x6f
 8009c96:	bf0c      	ite	eq
 8009c98:	2308      	moveq	r3, #8
 8009c9a:	230a      	movne	r3, #10
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ca2:	6866      	ldr	r6, [r4, #4]
 8009ca4:	60a6      	str	r6, [r4, #8]
 8009ca6:	2e00      	cmp	r6, #0
 8009ca8:	bfa2      	ittt	ge
 8009caa:	6821      	ldrge	r1, [r4, #0]
 8009cac:	f021 0104 	bicge.w	r1, r1, #4
 8009cb0:	6021      	strge	r1, [r4, #0]
 8009cb2:	b90d      	cbnz	r5, 8009cb8 <_printf_i+0x118>
 8009cb4:	2e00      	cmp	r6, #0
 8009cb6:	d04d      	beq.n	8009d54 <_printf_i+0x1b4>
 8009cb8:	4616      	mov	r6, r2
 8009cba:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cbe:	fb03 5711 	mls	r7, r3, r1, r5
 8009cc2:	5dc7      	ldrb	r7, [r0, r7]
 8009cc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cc8:	462f      	mov	r7, r5
 8009cca:	42bb      	cmp	r3, r7
 8009ccc:	460d      	mov	r5, r1
 8009cce:	d9f4      	bls.n	8009cba <_printf_i+0x11a>
 8009cd0:	2b08      	cmp	r3, #8
 8009cd2:	d10b      	bne.n	8009cec <_printf_i+0x14c>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	07df      	lsls	r7, r3, #31
 8009cd8:	d508      	bpl.n	8009cec <_printf_i+0x14c>
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	6861      	ldr	r1, [r4, #4]
 8009cde:	4299      	cmp	r1, r3
 8009ce0:	bfde      	ittt	le
 8009ce2:	2330      	movle	r3, #48	; 0x30
 8009ce4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ce8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cec:	1b92      	subs	r2, r2, r6
 8009cee:	6122      	str	r2, [r4, #16]
 8009cf0:	f8cd a000 	str.w	sl, [sp]
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	aa03      	add	r2, sp, #12
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f7ff fee2 	bl	8009ac4 <_printf_common>
 8009d00:	3001      	adds	r0, #1
 8009d02:	d14c      	bne.n	8009d9e <_printf_i+0x1fe>
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	b004      	add	sp, #16
 8009d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0e:	4835      	ldr	r0, [pc, #212]	; (8009de4 <_printf_i+0x244>)
 8009d10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	680e      	ldr	r6, [r1, #0]
 8009d18:	061f      	lsls	r7, r3, #24
 8009d1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d1e:	600e      	str	r6, [r1, #0]
 8009d20:	d514      	bpl.n	8009d4c <_printf_i+0x1ac>
 8009d22:	07d9      	lsls	r1, r3, #31
 8009d24:	bf44      	itt	mi
 8009d26:	f043 0320 	orrmi.w	r3, r3, #32
 8009d2a:	6023      	strmi	r3, [r4, #0]
 8009d2c:	b91d      	cbnz	r5, 8009d36 <_printf_i+0x196>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	f023 0320 	bic.w	r3, r3, #32
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	2310      	movs	r3, #16
 8009d38:	e7b0      	b.n	8009c9c <_printf_i+0xfc>
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	f043 0320 	orr.w	r3, r3, #32
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	2378      	movs	r3, #120	; 0x78
 8009d44:	4828      	ldr	r0, [pc, #160]	; (8009de8 <_printf_i+0x248>)
 8009d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d4a:	e7e3      	b.n	8009d14 <_printf_i+0x174>
 8009d4c:	065e      	lsls	r6, r3, #25
 8009d4e:	bf48      	it	mi
 8009d50:	b2ad      	uxthmi	r5, r5
 8009d52:	e7e6      	b.n	8009d22 <_printf_i+0x182>
 8009d54:	4616      	mov	r6, r2
 8009d56:	e7bb      	b.n	8009cd0 <_printf_i+0x130>
 8009d58:	680b      	ldr	r3, [r1, #0]
 8009d5a:	6826      	ldr	r6, [r4, #0]
 8009d5c:	6960      	ldr	r0, [r4, #20]
 8009d5e:	1d1d      	adds	r5, r3, #4
 8009d60:	600d      	str	r5, [r1, #0]
 8009d62:	0635      	lsls	r5, r6, #24
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	d501      	bpl.n	8009d6c <_printf_i+0x1cc>
 8009d68:	6018      	str	r0, [r3, #0]
 8009d6a:	e002      	b.n	8009d72 <_printf_i+0x1d2>
 8009d6c:	0671      	lsls	r1, r6, #25
 8009d6e:	d5fb      	bpl.n	8009d68 <_printf_i+0x1c8>
 8009d70:	8018      	strh	r0, [r3, #0]
 8009d72:	2300      	movs	r3, #0
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	4616      	mov	r6, r2
 8009d78:	e7ba      	b.n	8009cf0 <_printf_i+0x150>
 8009d7a:	680b      	ldr	r3, [r1, #0]
 8009d7c:	1d1a      	adds	r2, r3, #4
 8009d7e:	600a      	str	r2, [r1, #0]
 8009d80:	681e      	ldr	r6, [r3, #0]
 8009d82:	6862      	ldr	r2, [r4, #4]
 8009d84:	2100      	movs	r1, #0
 8009d86:	4630      	mov	r0, r6
 8009d88:	f7f6 fa32 	bl	80001f0 <memchr>
 8009d8c:	b108      	cbz	r0, 8009d92 <_printf_i+0x1f2>
 8009d8e:	1b80      	subs	r0, r0, r6
 8009d90:	6060      	str	r0, [r4, #4]
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	6123      	str	r3, [r4, #16]
 8009d96:	2300      	movs	r3, #0
 8009d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d9c:	e7a8      	b.n	8009cf0 <_printf_i+0x150>
 8009d9e:	6923      	ldr	r3, [r4, #16]
 8009da0:	4632      	mov	r2, r6
 8009da2:	4649      	mov	r1, r9
 8009da4:	4640      	mov	r0, r8
 8009da6:	47d0      	blx	sl
 8009da8:	3001      	adds	r0, #1
 8009daa:	d0ab      	beq.n	8009d04 <_printf_i+0x164>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	079b      	lsls	r3, r3, #30
 8009db0:	d413      	bmi.n	8009dda <_printf_i+0x23a>
 8009db2:	68e0      	ldr	r0, [r4, #12]
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	4298      	cmp	r0, r3
 8009db8:	bfb8      	it	lt
 8009dba:	4618      	movlt	r0, r3
 8009dbc:	e7a4      	b.n	8009d08 <_printf_i+0x168>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4632      	mov	r2, r6
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	47d0      	blx	sl
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d09b      	beq.n	8009d04 <_printf_i+0x164>
 8009dcc:	3501      	adds	r5, #1
 8009dce:	68e3      	ldr	r3, [r4, #12]
 8009dd0:	9903      	ldr	r1, [sp, #12]
 8009dd2:	1a5b      	subs	r3, r3, r1
 8009dd4:	42ab      	cmp	r3, r5
 8009dd6:	dcf2      	bgt.n	8009dbe <_printf_i+0x21e>
 8009dd8:	e7eb      	b.n	8009db2 <_printf_i+0x212>
 8009dda:	2500      	movs	r5, #0
 8009ddc:	f104 0619 	add.w	r6, r4, #25
 8009de0:	e7f5      	b.n	8009dce <_printf_i+0x22e>
 8009de2:	bf00      	nop
 8009de4:	0800da1d 	.word	0x0800da1d
 8009de8:	0800da2e 	.word	0x0800da2e

08009dec <_sbrk_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d06      	ldr	r5, [pc, #24]	; (8009e08 <_sbrk_r+0x1c>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	602b      	str	r3, [r5, #0]
 8009df8:	f7f8 fe8a 	bl	8002b10 <_sbrk>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_sbrk_r+0x1a>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_sbrk_r+0x1a>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	200008a4 	.word	0x200008a4

08009e0c <__retarget_lock_acquire_recursive>:
 8009e0c:	4770      	bx	lr

08009e0e <__retarget_lock_release_recursive>:
 8009e0e:	4770      	bx	lr

08009e10 <memcpy>:
 8009e10:	440a      	add	r2, r1
 8009e12:	4291      	cmp	r1, r2
 8009e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e18:	d100      	bne.n	8009e1c <memcpy+0xc>
 8009e1a:	4770      	bx	lr
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e26:	4291      	cmp	r1, r2
 8009e28:	d1f9      	bne.n	8009e1e <memcpy+0xe>
 8009e2a:	bd10      	pop	{r4, pc}

08009e2c <memmove>:
 8009e2c:	4288      	cmp	r0, r1
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	eb01 0402 	add.w	r4, r1, r2
 8009e34:	d902      	bls.n	8009e3c <memmove+0x10>
 8009e36:	4284      	cmp	r4, r0
 8009e38:	4623      	mov	r3, r4
 8009e3a:	d807      	bhi.n	8009e4c <memmove+0x20>
 8009e3c:	1e43      	subs	r3, r0, #1
 8009e3e:	42a1      	cmp	r1, r4
 8009e40:	d008      	beq.n	8009e54 <memmove+0x28>
 8009e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e4a:	e7f8      	b.n	8009e3e <memmove+0x12>
 8009e4c:	4402      	add	r2, r0
 8009e4e:	4601      	mov	r1, r0
 8009e50:	428a      	cmp	r2, r1
 8009e52:	d100      	bne.n	8009e56 <memmove+0x2a>
 8009e54:	bd10      	pop	{r4, pc}
 8009e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e5e:	e7f7      	b.n	8009e50 <memmove+0x24>

08009e60 <__malloc_lock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	; (8009e68 <__malloc_lock+0x8>)
 8009e62:	f7ff bfd3 	b.w	8009e0c <__retarget_lock_acquire_recursive>
 8009e66:	bf00      	nop
 8009e68:	2000089c 	.word	0x2000089c

08009e6c <__malloc_unlock>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	; (8009e74 <__malloc_unlock+0x8>)
 8009e6e:	f7ff bfce 	b.w	8009e0e <__retarget_lock_release_recursive>
 8009e72:	bf00      	nop
 8009e74:	2000089c 	.word	0x2000089c

08009e78 <_realloc_r>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	4607      	mov	r7, r0
 8009e7c:	4614      	mov	r4, r2
 8009e7e:	460e      	mov	r6, r1
 8009e80:	b921      	cbnz	r1, 8009e8c <_realloc_r+0x14>
 8009e82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e86:	4611      	mov	r1, r2
 8009e88:	f7ff bc66 	b.w	8009758 <_malloc_r>
 8009e8c:	b922      	cbnz	r2, 8009e98 <_realloc_r+0x20>
 8009e8e:	f7ff fc13 	bl	80096b8 <_free_r>
 8009e92:	4625      	mov	r5, r4
 8009e94:	4628      	mov	r0, r5
 8009e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e98:	f000 f814 	bl	8009ec4 <_malloc_usable_size_r>
 8009e9c:	42a0      	cmp	r0, r4
 8009e9e:	d20f      	bcs.n	8009ec0 <_realloc_r+0x48>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	f7ff fc58 	bl	8009758 <_malloc_r>
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d0f2      	beq.n	8009e94 <_realloc_r+0x1c>
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4622      	mov	r2, r4
 8009eb2:	f7ff ffad 	bl	8009e10 <memcpy>
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f7ff fbfd 	bl	80096b8 <_free_r>
 8009ebe:	e7e9      	b.n	8009e94 <_realloc_r+0x1c>
 8009ec0:	4635      	mov	r5, r6
 8009ec2:	e7e7      	b.n	8009e94 <_realloc_r+0x1c>

08009ec4 <_malloc_usable_size_r>:
 8009ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ec8:	1f18      	subs	r0, r3, #4
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	bfbc      	itt	lt
 8009ece:	580b      	ldrlt	r3, [r1, r0]
 8009ed0:	18c0      	addlt	r0, r0, r3
 8009ed2:	4770      	bx	lr

08009ed4 <_init>:
 8009ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed6:	bf00      	nop
 8009ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eda:	bc08      	pop	{r3}
 8009edc:	469e      	mov	lr, r3
 8009ede:	4770      	bx	lr

08009ee0 <_fini>:
 8009ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee2:	bf00      	nop
 8009ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ee6:	bc08      	pop	{r3}
 8009ee8:	469e      	mov	lr, r3
 8009eea:	4770      	bx	lr
