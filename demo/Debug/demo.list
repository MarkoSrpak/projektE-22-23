
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006010  08006010  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006010  08006010  00016010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006018  08006018  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000003b8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000daef  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026fb  00000000  00000000  0002db8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd8  00000000  00000000  00030fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f51  00000000  00000000  00031b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010310  00000000  00000000  00057ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5c58  00000000  00000000  00067de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014da41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e80  00000000  00000000  0014da94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e98 	.word	0x08005e98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005e98 	.word	0x08005e98

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MDL_leds_init>:

struct LED_handler ledHandler;



void MDL_leds_init() {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0

	ledHandler.state = NEXT_ROUND;
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MDL_leds_init+0x44>)
 800059c:	2200      	movs	r2, #0
 800059e:	765a      	strb	r2, [r3, #25]
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <MDL_leds_init+0x44>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < NUM_OF_LEDS; i++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	e00b      	b.n	80005c4 <MDL_leds_init+0x30>
		ledHandler.led[i] = i;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	b2d9      	uxtb	r1, r3
 80005b0:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <MDL_leds_init+0x44>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 80005ba:	460a      	mov	r2, r1
 80005bc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_LEDS; i++) {
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3301      	adds	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b05      	cmp	r3, #5
 80005c8:	ddf0      	ble.n	80005ac <MDL_leds_init+0x18>
	}

}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	2000008c 	.word	0x2000008c

080005dc <MDL_leds_handler>:

void MDL_leds_handler() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	switch(ledHandler.state) {
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MDL_leds_handler+0x48>)
 80005e2:	7e5b      	ldrb	r3, [r3, #25]
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d81b      	bhi.n	8000620 <MDL_leds_handler+0x44>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <MDL_leds_handler+0x14>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000601 	.word	0x08000601
 80005f4:	0800061f 	.word	0x0800061f
 80005f8:	0800060d 	.word	0x0800060d
 80005fc:	08000613 	.word	0x08000613
	case NEXT_ROUND:
		next_round();
 8000600:	f000 f8b4 	bl	800076c <next_round>
		ledHandler.state = WAITING;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MDL_leds_handler+0x48>)
 8000606:	2201      	movs	r2, #1
 8000608:	765a      	strb	r2, [r3, #25]
	case WAITING:
		break;
 800060a:	e008      	b.n	800061e <MDL_leds_handler+0x42>
	case SCORED:
		// saljem points Majdi i dispenzeru

		ledHandler.state = WAITING;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MDL_leds_handler+0x48>)
 800060e:	2201      	movs	r2, #1
 8000610:	765a      	strb	r2, [r3, #25]
	case WIN:
		win();
 8000612:	f000 f9b1 	bl	8000978 <win>
		ledHandler.state = WAITING;
 8000616:	4b03      	ldr	r3, [pc, #12]	; (8000624 <MDL_leds_handler+0x48>)
 8000618:	2201      	movs	r2, #1
 800061a:	765a      	strb	r2, [r3, #25]
	}
}
 800061c:	e000      	b.n	8000620 <MDL_leds_handler+0x44>
		break;
 800061e:	bf00      	nop
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000008c 	.word	0x2000008c

08000628 <set_LED>:
	// if netko pobijedio
	ledHandler.state = WIN;

}

void set_LED(uint8_t LEDnum, uint8_t Red, uint8_t Green, uint8_t Blue) {
 8000628:	b490      	push	{r4, r7}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4604      	mov	r4, r0
 8000630:	4608      	mov	r0, r1
 8000632:	4611      	mov	r1, r2
 8000634:	461a      	mov	r2, r3
 8000636:	4623      	mov	r3, r4
 8000638:	71fb      	strb	r3, [r7, #7]
 800063a:	4603      	mov	r3, r0
 800063c:	71bb      	strb	r3, [r7, #6]
 800063e:	460b      	mov	r3, r1
 8000640:	717b      	strb	r3, [r7, #5]
 8000642:	4613      	mov	r3, r2
 8000644:	713b      	strb	r3, [r7, #4]
	ledHandler.LED_Data[LEDnum][0] = LEDnum;
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <set_LED+0x58>)
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	79fa      	ldrb	r2, [r7, #7]
 8000650:	705a      	strb	r2, [r3, #1]
	ledHandler.LED_Data[LEDnum][1] = Red;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <set_LED+0x58>)
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	79ba      	ldrb	r2, [r7, #6]
 800065c:	709a      	strb	r2, [r3, #2]
	ledHandler.LED_Data[LEDnum][2] = Green;
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <set_LED+0x58>)
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	797a      	ldrb	r2, [r7, #5]
 8000668:	70da      	strb	r2, [r3, #3]
	ledHandler.LED_Data[LEDnum][3] = Blue;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <set_LED+0x58>)
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	793a      	ldrb	r2, [r7, #4]
 8000674:	711a      	strb	r2, [r3, #4]
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bc90      	pop	{r4, r7}
 800067e:	4770      	bx	lr
 8000680:	2000008c 	.word	0x2000008c

08000684 <send>:

void send(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
	uint32_t index = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
	uint32_t color;

	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	72fb      	strb	r3, [r7, #11]
 8000692:	e03b      	b.n	800070c <send+0x88>
		color = ((ledHandler.LED_Data[i][1] << 16) | (ledHandler.LED_Data[i][2] << 8) | (ledHandler.LED_Data[i][3]));
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	4a32      	ldr	r2, [pc, #200]	; (8000760 <send+0xdc>)
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	041a      	lsls	r2, r3, #16
 80006a0:	7afb      	ldrb	r3, [r7, #11]
 80006a2:	492f      	ldr	r1, [pc, #188]	; (8000760 <send+0xdc>)
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	78db      	ldrb	r3, [r3, #3]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	431a      	orrs	r2, r3
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	492b      	ldr	r1, [pc, #172]	; (8000760 <send+0xdc>)
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	440b      	add	r3, r1
 80006b6:	791b      	ldrb	r3, [r3, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]

		for (uint8_t i = 24; i > 0; i--) {
 80006bc:	2318      	movs	r3, #24
 80006be:	72bb      	strb	r3, [r7, #10]
 80006c0:	e01e      	b.n	8000700 <send+0x7c>
			if (color & (1 << (i - 1)))
 80006c2:	7abb      	ldrb	r3, [r7, #10]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	2201      	movs	r2, #1
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4013      	ands	r3, r2
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <send+0x62>
				ledHandler.pwmData[index] = 60;
 80006d6:	4a22      	ldr	r2, [pc, #136]	; (8000760 <send+0xdc>)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	330c      	adds	r3, #12
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	223c      	movs	r2, #60	; 0x3c
 80006e2:	805a      	strh	r2, [r3, #2]
 80006e4:	e006      	b.n	80006f4 <send+0x70>
			else
				ledHandler.pwmData[index] = 30;
 80006e6:	4a1e      	ldr	r2, [pc, #120]	; (8000760 <send+0xdc>)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	330c      	adds	r3, #12
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	221e      	movs	r2, #30
 80006f2:	805a      	strh	r2, [r3, #2]
			index++;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	3301      	adds	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 24; i > 0; i--) {
 80006fa:	7abb      	ldrb	r3, [r7, #10]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	72bb      	strb	r3, [r7, #10]
 8000700:	7abb      	ldrb	r3, [r7, #10]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1dd      	bne.n	80006c2 <send+0x3e>
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 8000706:	7afb      	ldrb	r3, [r7, #11]
 8000708:	3301      	adds	r3, #1
 800070a:	72fb      	strb	r3, [r7, #11]
 800070c:	7afb      	ldrb	r3, [r7, #11]
 800070e:	2b05      	cmp	r3, #5
 8000710:	d9c0      	bls.n	8000694 <send+0x10>
		}
	}

	for (uint8_t i = 0; i < 50; i++) {
 8000712:	2300      	movs	r3, #0
 8000714:	727b      	strb	r3, [r7, #9]
 8000716:	e00c      	b.n	8000732 <send+0xae>
		ledHandler.pwmData[index] = 0;
 8000718:	4a11      	ldr	r2, [pc, #68]	; (8000760 <send+0xdc>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	330c      	adds	r3, #12
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	2200      	movs	r2, #0
 8000724:	805a      	strh	r2, [r3, #2]
		index++;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3301      	adds	r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 50; i++) {
 800072c:	7a7b      	ldrb	r3, [r7, #9]
 800072e:	3301      	adds	r3, #1
 8000730:	727b      	strb	r3, [r7, #9]
 8000732:	7a7b      	ldrb	r3, [r7, #9]
 8000734:	2b31      	cmp	r3, #49	; 0x31
 8000736:	d9ef      	bls.n	8000718 <send+0x94>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*) ledHandler.pwmData, index);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	b29b      	uxth	r3, r3
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <send+0xe0>)
 800073e:	2100      	movs	r1, #0
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <send+0xe4>)
 8000742:	f003 fa43 	bl	8003bcc <HAL_TIM_PWM_Start_DMA>
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <send+0xdc>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
	while (ledHandler.datasentflag == TRANSFER_NOT_FINISHED) {};
 800074c:	bf00      	nop
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <send+0xdc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d0fb      	beq.n	800074e <send+0xca>

}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000008c 	.word	0x2000008c
 8000764:	200000a6 	.word	0x200000a6
 8000768:	2000036c 	.word	0x2000036c

0800076c <next_round>:

void next_round(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < NUM_OF_LEDS - 1; i++) {
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	e02a      	b.n	80007ce <next_round+0x62>
		uint8_t n = i + rand() / (RAND_MAX / (NUM_OF_LEDS - i) + 1);
 8000778:	f004 fb56 	bl	8004e28 <rand>
 800077c:	4602      	mov	r2, r0
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f1c3 0306 	rsb	r3, r3, #6
 8000784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000788:	fb91 f3f3 	sdiv	r3, r1, r3
 800078c:	3301      	adds	r3, #1
 800078e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000792:	b2da      	uxtb	r2, r3
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4413      	add	r3, r2
 8000798:	70fb      	strb	r3, [r7, #3]
		uint8_t pom = ledHandler.led[n];
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	4a41      	ldr	r2, [pc, #260]	; (80008a4 <next_round+0x138>)
 800079e:	4413      	add	r3, r2
 80007a0:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 80007a4:	70bb      	strb	r3, [r7, #2]
		ledHandler.led[n] = ledHandler.led[i];
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	493e      	ldr	r1, [pc, #248]	; (80008a4 <next_round+0x138>)
 80007ac:	440a      	add	r2, r1
 80007ae:	f892 119e 	ldrb.w	r1, [r2, #414]	; 0x19e
 80007b2:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <next_round+0x138>)
 80007b4:	4413      	add	r3, r2
 80007b6:	460a      	mov	r2, r1
 80007b8:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
		ledHandler.led[i] = pom;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4a39      	ldr	r2, [pc, #228]	; (80008a4 <next_round+0x138>)
 80007c0:	4413      	add	r3, r2
 80007c2:	78ba      	ldrb	r2, [r7, #2]
 80007c4:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	for (uint8_t i = 0; i < NUM_OF_LEDS - 1; i++) {
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	3301      	adds	r3, #1
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d9d1      	bls.n	8000778 <next_round+0xc>
	}

	set_LED(LED_1, 0, 0, 0);
 80007d4:	2300      	movs	r3, #0
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff24 	bl	8000628 <set_LED>
	set_LED(LED_2, 0, 0, 0);
 80007e0:	2300      	movs	r3, #0
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff ff1e 	bl	8000628 <set_LED>
	set_LED(LED_3, 0, 0, 0);
 80007ec:	2300      	movs	r3, #0
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff18 	bl	8000628 <set_LED>
	set_LED(LED_4, 0, 0, 0);
 80007f8:	2300      	movs	r3, #0
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2003      	movs	r0, #3
 8000800:	f7ff ff12 	bl	8000628 <set_LED>
	set_LED(LED_5, 0, 0, 0);
 8000804:	2300      	movs	r3, #0
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2004      	movs	r0, #4
 800080c:	f7ff ff0c 	bl	8000628 <set_LED>
	set_LED(LED_6, 0, 0, 0);
 8000810:	2300      	movs	r3, #0
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2005      	movs	r0, #5
 8000818:	f7ff ff06 	bl	8000628 <set_LED>
	send();
 800081c:	f7ff ff32 	bl	8000684 <send>

//	timer2_wait_millisec(1000);

	for (uint16_t i = 0; i < 10000; i++);
 8000820:	2300      	movs	r3, #0
 8000822:	80bb      	strh	r3, [r7, #4]
 8000824:	e002      	b.n	800082c <next_round+0xc0>
 8000826:	88bb      	ldrh	r3, [r7, #4]
 8000828:	3301      	adds	r3, #1
 800082a:	80bb      	strh	r3, [r7, #4]
 800082c:	88bb      	ldrh	r3, [r7, #4]
 800082e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000832:	4293      	cmp	r3, r2
 8000834:	d9f7      	bls.n	8000826 <next_round+0xba>


	set_LED(ledHandler.led[0], 255, 0, 0);
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <next_round+0x138>)
 8000838:	f893 019e 	ldrb.w	r0, [r3, #414]	; 0x19e
 800083c:	2300      	movs	r3, #0
 800083e:	2200      	movs	r2, #0
 8000840:	21ff      	movs	r1, #255	; 0xff
 8000842:	f7ff fef1 	bl	8000628 <set_LED>
	set_LED(ledHandler.led[1], 0, 255, 0);
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <next_round+0x138>)
 8000848:	f893 019f 	ldrb.w	r0, [r3, #415]	; 0x19f
 800084c:	2300      	movs	r3, #0
 800084e:	22ff      	movs	r2, #255	; 0xff
 8000850:	2100      	movs	r1, #0
 8000852:	f7ff fee9 	bl	8000628 <set_LED>
	set_LED(ledHandler.led[2], 0, 255, 0);
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <next_round+0x138>)
 8000858:	f893 01a0 	ldrb.w	r0, [r3, #416]	; 0x1a0
 800085c:	2300      	movs	r3, #0
 800085e:	22ff      	movs	r2, #255	; 0xff
 8000860:	2100      	movs	r1, #0
 8000862:	f7ff fee1 	bl	8000628 <set_LED>
	set_LED(ledHandler.led[3], 0, 0, 255);
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <next_round+0x138>)
 8000868:	f893 01a1 	ldrb.w	r0, [r3, #417]	; 0x1a1
 800086c:	23ff      	movs	r3, #255	; 0xff
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	f7ff fed9 	bl	8000628 <set_LED>
	set_LED(ledHandler.led[4], 0, 0, 255);
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <next_round+0x138>)
 8000878:	f893 01a2 	ldrb.w	r0, [r3, #418]	; 0x1a2
 800087c:	23ff      	movs	r3, #255	; 0xff
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	f7ff fed1 	bl	8000628 <set_LED>
	set_LED(ledHandler.led[5], 0, 0, 255);
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <next_round+0x138>)
 8000888:	f893 01a3 	ldrb.w	r0, [r3, #419]	; 0x1a3
 800088c:	23ff      	movs	r3, #255	; 0xff
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	f7ff fec9 	bl	8000628 <set_LED>
	send();
 8000896:	f7ff fef5 	bl	8000684 <send>

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000008c 	.word	0x2000008c

080008a8 <MDL_leds_scored>:

void MDL_leds_scored(uint8_t sensorNum) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	uint8_t index;
	uint8_t points = 25;  // plava
 80008b2:	2319      	movs	r3, #25
 80008b4:	72fb      	strb	r3, [r7, #11]
	uint8_t color = 3;
 80008b6:	2303      	movs	r3, #3
 80008b8:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	737b      	strb	r3, [r7, #13]
 80008be:	e00c      	b.n	80008da <MDL_leds_scored+0x32>
		if (ledHandler.led[i] == sensorNum) index = i;
 80008c0:	7b7b      	ldrb	r3, [r7, #13]
 80008c2:	4a2c      	ldr	r2, [pc, #176]	; (8000974 <MDL_leds_scored+0xcc>)
 80008c4:	4413      	add	r3, r2
 80008c6:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d101      	bne.n	80008d4 <MDL_leds_scored+0x2c>
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
 80008d2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 80008d4:	7b7b      	ldrb	r3, [r7, #13]
 80008d6:	3301      	adds	r3, #1
 80008d8:	737b      	strb	r3, [r7, #13]
 80008da:	7b7b      	ldrb	r3, [r7, #13]
 80008dc:	2b05      	cmp	r3, #5
 80008de:	d9ef      	bls.n	80008c0 <MDL_leds_scored+0x18>
	}

	if (index == 0) {  // crvena
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d104      	bne.n	80008f0 <MDL_leds_scored+0x48>
		color = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73bb      	strb	r3, [r7, #14]
		points = 100;
 80008ea:	2364      	movs	r3, #100	; 0x64
 80008ec:	72fb      	strb	r3, [r7, #11]
 80008ee:	e009      	b.n	8000904 <MDL_leds_scored+0x5c>
	}
	else if (index == 1 || index == 2) { //zelena
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d002      	beq.n	80008fc <MDL_leds_scored+0x54>
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d103      	bne.n	8000904 <MDL_leds_scored+0x5c>
		color = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	73bb      	strb	r3, [r7, #14]
		points = 50;
 8000900:	2332      	movs	r3, #50	; 0x32
 8000902:	72fb      	strb	r3, [r7, #11]
	}

	for (uint8_t j = 0; j < 3; j++) {
 8000904:	2300      	movs	r3, #0
 8000906:	733b      	strb	r3, [r7, #12]
 8000908:	e02c      	b.n	8000964 <MDL_leds_scored+0xbc>
		set_LED(sensorNum, 0, 0, 0);
 800090a:	79f8      	ldrb	r0, [r7, #7]
 800090c:	2300      	movs	r3, #0
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	f7ff fe89 	bl	8000628 <set_LED>
		send();
 8000916:	f7ff feb5 	bl	8000684 <send>
		HAL_Delay(100);
 800091a:	2064      	movs	r0, #100	; 0x64
 800091c:	f001 f994 	bl	8001c48 <HAL_Delay>
		if (color == 1)	set_LED(sensorNum, 255, 0, 0);
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d106      	bne.n	8000934 <MDL_leds_scored+0x8c>
 8000926:	79f8      	ldrb	r0, [r7, #7]
 8000928:	2300      	movs	r3, #0
 800092a:	2200      	movs	r2, #0
 800092c:	21ff      	movs	r1, #255	; 0xff
 800092e:	f7ff fe7b 	bl	8000628 <set_LED>
 8000932:	e00f      	b.n	8000954 <MDL_leds_scored+0xac>
		else if (color == 2) set_LED(sensorNum, 0, 255, 0);
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d106      	bne.n	8000948 <MDL_leds_scored+0xa0>
 800093a:	79f8      	ldrb	r0, [r7, #7]
 800093c:	2300      	movs	r3, #0
 800093e:	22ff      	movs	r2, #255	; 0xff
 8000940:	2100      	movs	r1, #0
 8000942:	f7ff fe71 	bl	8000628 <set_LED>
 8000946:	e005      	b.n	8000954 <MDL_leds_scored+0xac>
		else set_LED(sensorNum, 0, 0, 255);
 8000948:	79f8      	ldrb	r0, [r7, #7]
 800094a:	23ff      	movs	r3, #255	; 0xff
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	f7ff fe6a 	bl	8000628 <set_LED>
		send();
 8000954:	f7ff fe96 	bl	8000684 <send>
		HAL_Delay(100);
 8000958:	2064      	movs	r0, #100	; 0x64
 800095a:	f001 f975 	bl	8001c48 <HAL_Delay>
	for (uint8_t j = 0; j < 3; j++) {
 800095e:	7b3b      	ldrb	r3, [r7, #12]
 8000960:	3301      	adds	r3, #1
 8000962:	733b      	strb	r3, [r7, #12]
 8000964:	7b3b      	ldrb	r3, [r7, #12]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d9cf      	bls.n	800090a <MDL_leds_scored+0x62>
	}

}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000008c 	.word	0x2000008c

08000978 <win>:


void win(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

	set_LED(LED_1, 0, 0, 0);
 800097e:	2300      	movs	r3, #0
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fe4f 	bl	8000628 <set_LED>
	set_LED(LED_2, 0, 0, 0);
 800098a:	2300      	movs	r3, #0
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff fe49 	bl	8000628 <set_LED>
	set_LED(LED_3, 0, 0, 0);
 8000996:	2300      	movs	r3, #0
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2002      	movs	r0, #2
 800099e:	f7ff fe43 	bl	8000628 <set_LED>
	set_LED(LED_4, 0, 0, 0);
 80009a2:	2300      	movs	r3, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2003      	movs	r0, #3
 80009aa:	f7ff fe3d 	bl	8000628 <set_LED>
	set_LED(LED_5, 0, 0, 0);
 80009ae:	2300      	movs	r3, #0
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2004      	movs	r0, #4
 80009b6:	f7ff fe37 	bl	8000628 <set_LED>
	set_LED(LED_6, 0, 0, 0);
 80009ba:	2300      	movs	r3, #0
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2005      	movs	r0, #5
 80009c2:	f7ff fe31 	bl	8000628 <set_LED>
	send();
 80009c6:	f7ff fe5d 	bl	8000684 <send>
	timer2_wait_millisec(500);
 80009ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ce:	f000 ff17 	bl	8001800 <timer2_wait_millisec>

	for (uint8_t i = 0; i < 4*NUM_OF_LEDS; i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	e0e0      	b.n	8000b9a <win+0x222>
		set_LED(i % NUM_OF_LEDS, 142, 0, 142);  //ljubicasta
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	4b74      	ldr	r3, [pc, #464]	; (8000bac <win+0x234>)
 80009dc:	fba3 1302 	umull	r1, r3, r3, r2
 80009e0:	0899      	lsrs	r1, r3, #2
 80009e2:	460b      	mov	r3, r1
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	440b      	add	r3, r1
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	b2d8      	uxtb	r0, r3
 80009ee:	238e      	movs	r3, #142	; 0x8e
 80009f0:	2200      	movs	r2, #0
 80009f2:	218e      	movs	r1, #142	; 0x8e
 80009f4:	f7ff fe18 	bl	8000628 <set_LED>
		set_LED((i + 1) % NUM_OF_LEDS, 0, 0, 255);  //plava
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	4b6c      	ldr	r3, [pc, #432]	; (8000bb0 <win+0x238>)
 80009fe:	fb83 3102 	smull	r3, r1, r3, r2
 8000a02:	17d3      	asrs	r3, r2, #31
 8000a04:	1ac9      	subs	r1, r1, r3
 8000a06:	460b      	mov	r3, r1
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	440b      	add	r3, r1
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	1ad1      	subs	r1, r2, r3
 8000a10:	b2c8      	uxtb	r0, r1
 8000a12:	23ff      	movs	r3, #255	; 0xff
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	f7ff fe06 	bl	8000628 <set_LED>
		set_LED((i + 2) % NUM_OF_LEDS, 0, 255, 180);  //zelena
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	1c9a      	adds	r2, r3, #2
 8000a20:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <win+0x238>)
 8000a22:	fb83 3102 	smull	r3, r1, r3, r2
 8000a26:	17d3      	asrs	r3, r2, #31
 8000a28:	1ac9      	subs	r1, r1, r3
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	440b      	add	r3, r1
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	1ad1      	subs	r1, r2, r3
 8000a34:	b2c8      	uxtb	r0, r1
 8000a36:	23b4      	movs	r3, #180	; 0xb4
 8000a38:	22ff      	movs	r2, #255	; 0xff
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f7ff fdf4 	bl	8000628 <set_LED>
		set_LED((i + 3) % NUM_OF_LEDS, 255, 255, 0);  //zuta
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1cda      	adds	r2, r3, #3
 8000a44:	4b5a      	ldr	r3, [pc, #360]	; (8000bb0 <win+0x238>)
 8000a46:	fb83 3102 	smull	r3, r1, r3, r2
 8000a4a:	17d3      	asrs	r3, r2, #31
 8000a4c:	1ac9      	subs	r1, r1, r3
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad1      	subs	r1, r2, r3
 8000a58:	b2c8      	uxtb	r0, r1
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	21ff      	movs	r1, #255	; 0xff
 8000a60:	f7ff fde2 	bl	8000628 <set_LED>
		set_LED((i + 4) % NUM_OF_LEDS, 255, 173, 51);  //narancasta
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	1d1a      	adds	r2, r3, #4
 8000a68:	4b51      	ldr	r3, [pc, #324]	; (8000bb0 <win+0x238>)
 8000a6a:	fb83 3102 	smull	r3, r1, r3, r2
 8000a6e:	17d3      	asrs	r3, r2, #31
 8000a70:	1ac9      	subs	r1, r1, r3
 8000a72:	460b      	mov	r3, r1
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	440b      	add	r3, r1
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	1ad1      	subs	r1, r2, r3
 8000a7c:	b2c8      	uxtb	r0, r1
 8000a7e:	2333      	movs	r3, #51	; 0x33
 8000a80:	22ad      	movs	r2, #173	; 0xad
 8000a82:	21ff      	movs	r1, #255	; 0xff
 8000a84:	f7ff fdd0 	bl	8000628 <set_LED>
		set_LED((i + 5) % NUM_OF_LEDS, 255, 0, 0);  //crvena
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	1d5a      	adds	r2, r3, #5
 8000a8c:	4b48      	ldr	r3, [pc, #288]	; (8000bb0 <win+0x238>)
 8000a8e:	fb83 3102 	smull	r3, r1, r3, r2
 8000a92:	17d3      	asrs	r3, r2, #31
 8000a94:	1ac9      	subs	r1, r1, r3
 8000a96:	460b      	mov	r3, r1
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	440b      	add	r3, r1
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	1ad1      	subs	r1, r2, r3
 8000aa0:	b2c8      	uxtb	r0, r1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	21ff      	movs	r1, #255	; 0xff
 8000aa8:	f7ff fdbe 	bl	8000628 <set_LED>
		send();
 8000aac:	f7ff fdea 	bl	8000684 <send>
		timer2_wait_millisec(100);
 8000ab0:	2064      	movs	r0, #100	; 0x64
 8000ab2:	f000 fea5 	bl	8001800 <timer2_wait_millisec>
		set_LED(i % NUM_OF_LEDS, 102, 0, 255);
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <win+0x234>)
 8000aba:	fba3 1302 	umull	r1, r3, r3, r2
 8000abe:	0899      	lsrs	r1, r3, #2
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	440b      	add	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	b2d8      	uxtb	r0, r3
 8000acc:	23ff      	movs	r3, #255	; 0xff
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2166      	movs	r1, #102	; 0x66
 8000ad2:	f7ff fda9 	bl	8000628 <set_LED>
		set_LED((i + 1) % NUM_OF_LEDS, 0, 153, 255);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	1c5a      	adds	r2, r3, #1
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <win+0x238>)
 8000adc:	fb83 3102 	smull	r3, r1, r3, r2
 8000ae0:	17d3      	asrs	r3, r2, #31
 8000ae2:	1ac9      	subs	r1, r1, r3
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	440b      	add	r3, r1
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	1ad1      	subs	r1, r2, r3
 8000aee:	b2c8      	uxtb	r0, r1
 8000af0:	23ff      	movs	r3, #255	; 0xff
 8000af2:	2299      	movs	r2, #153	; 0x99
 8000af4:	2100      	movs	r1, #0
 8000af6:	f7ff fd97 	bl	8000628 <set_LED>
		set_LED((i + 2) % NUM_OF_LEDS, 191, 255, 128);
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	1c9a      	adds	r2, r3, #2
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <win+0x238>)
 8000b00:	fb83 3102 	smull	r3, r1, r3, r2
 8000b04:	17d3      	asrs	r3, r2, #31
 8000b06:	1ac9      	subs	r1, r1, r3
 8000b08:	460b      	mov	r3, r1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	440b      	add	r3, r1
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	1ad1      	subs	r1, r2, r3
 8000b12:	b2c8      	uxtb	r0, r1
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	22ff      	movs	r2, #255	; 0xff
 8000b18:	21bf      	movs	r1, #191	; 0xbf
 8000b1a:	f7ff fd85 	bl	8000628 <set_LED>
		set_LED((i + 3) % NUM_OF_LEDS, 255, 197, 20);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	1cda      	adds	r2, r3, #3
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <win+0x238>)
 8000b24:	fb83 3102 	smull	r3, r1, r3, r2
 8000b28:	17d3      	asrs	r3, r2, #31
 8000b2a:	1ac9      	subs	r1, r1, r3
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	440b      	add	r3, r1
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	1ad1      	subs	r1, r2, r3
 8000b36:	b2c8      	uxtb	r0, r1
 8000b38:	2314      	movs	r3, #20
 8000b3a:	22c5      	movs	r2, #197	; 0xc5
 8000b3c:	21ff      	movs	r1, #255	; 0xff
 8000b3e:	f7ff fd73 	bl	8000628 <set_LED>
		set_LED((i + 4) % NUM_OF_LEDS, 255, 102, 0);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	1d1a      	adds	r2, r3, #4
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <win+0x238>)
 8000b48:	fb83 3102 	smull	r3, r1, r3, r2
 8000b4c:	17d3      	asrs	r3, r2, #31
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	460b      	mov	r3, r1
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	440b      	add	r3, r1
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	1ad1      	subs	r1, r2, r3
 8000b5a:	b2c8      	uxtb	r0, r1
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	2266      	movs	r2, #102	; 0x66
 8000b60:	21ff      	movs	r1, #255	; 0xff
 8000b62:	f7ff fd61 	bl	8000628 <set_LED>
		set_LED((i + 5) % NUM_OF_LEDS, 153, 0, 51);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	1d5a      	adds	r2, r3, #5
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <win+0x238>)
 8000b6c:	fb83 3102 	smull	r3, r1, r3, r2
 8000b70:	17d3      	asrs	r3, r2, #31
 8000b72:	1ac9      	subs	r1, r1, r3
 8000b74:	460b      	mov	r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	440b      	add	r3, r1
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	1ad1      	subs	r1, r2, r3
 8000b7e:	b2c8      	uxtb	r0, r1
 8000b80:	2333      	movs	r3, #51	; 0x33
 8000b82:	2200      	movs	r2, #0
 8000b84:	2199      	movs	r1, #153	; 0x99
 8000b86:	f7ff fd4f 	bl	8000628 <set_LED>
		send();
 8000b8a:	f7ff fd7b 	bl	8000684 <send>
		timer2_wait_millisec(100);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f000 fe36 	bl	8001800 <timer2_wait_millisec>
	for (uint8_t i = 0; i < 4*NUM_OF_LEDS; i++) {
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	3301      	adds	r3, #1
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b17      	cmp	r3, #23
 8000b9e:	f67f af1b 	bls.w	80009d8 <win+0x60>
	}

}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	aaaaaaab 	.word	0xaaaaaaab
 8000bb0:	2aaaaaab 	.word	0x2aaaaaab

08000bb4 <HAL_TIM_PWM_PulseFinishedCallback>:



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	ledHandler.datasentflag = TRANSFER_FINISHED;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000008c 	.word	0x2000008c

08000bd4 <MDL_sensors_init>:

//************************************************************************************

//*******************************PUBLIC FUNCTIONS*************************************

void MDL_sensors_init() {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	sensors_handler.state = START_CALIBRATION;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MDL_sensors_init+0x84>)
 8000bdc:	2205      	movs	r2, #5
 8000bde:	701a      	strb	r2, [r3, #0]
	sensors_handler.ordinalNumOfMeasurement = 0;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MDL_sensors_init+0x84>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	sensors_handler.ordinalNumOfMeasurementForCalibration = 0;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MDL_sensors_init+0x84>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	e00e      	b.n	8000c14 <MDL_sensors_init+0x40>
		sensors_handler.sensors[i].currentState = GPIO_PIN_RESET;
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <MDL_sensors_init+0x84>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	2200      	movs	r2, #0
 8000c00:	719a      	strb	r2, [r3, #6]
		sensors_handler.sensors[i].wantedState = GPIO_PIN_RESET;
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <MDL_sensors_init+0x84>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	71da      	strb	r2, [r3, #7]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3301      	adds	r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b05      	cmp	r3, #5
 8000c18:	dded      	ble.n	8000bf6 <MDL_sensors_init+0x22>
	}

	sensors_handler.sensors[0].gpio_pin = GPIO_PIN_13;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MDL_sensors_init+0x84>)
 8000c1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c20:	809a      	strh	r2, [r3, #4]
	sensors_handler.sensors[1].gpio_pin = GPIO_PIN_15;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MDL_sensors_init+0x84>)
 8000c24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c28:	819a      	strh	r2, [r3, #12]
	sensors_handler.sensors[2].gpio_pin = GPIO_PIN_13;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MDL_sensors_init+0x84>)
 8000c2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c30:	829a      	strh	r2, [r3, #20]
	sensors_handler.sensors[3].gpio_pin = GPIO_PIN_15;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MDL_sensors_init+0x84>)
 8000c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c38:	839a      	strh	r2, [r3, #28]
	sensors_handler.sensors[4].gpio_pin = GPIO_PIN_13;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MDL_sensors_init+0x84>)
 8000c3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c40:	849a      	strh	r2, [r3, #36]	; 0x24
	sensors_handler.sensors[5].gpio_pin = GPIO_PIN_15;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <MDL_sensors_init+0x84>)
 8000c44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c48:	859a      	strh	r2, [r3, #44]	; 0x2c

}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000230 	.word	0x20000230

08000c5c <MDL_sensors_handler>:

void MDL_sensors_handler() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

	switch (sensors_handler.state) {
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MDL_sensors_handler+0x8c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d83c      	bhi.n	8000ce4 <MDL_sensors_handler+0x88>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <MDL_sensors_handler+0x14>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000c95 	.word	0x08000c95
 8000c74:	08000ca7 	.word	0x08000ca7
 8000c78:	08000cab 	.word	0x08000cab
 8000c7c:	08000cb1 	.word	0x08000cb1
 8000c80:	08000cb7 	.word	0x08000cb7
 8000c84:	08000cbd 	.word	0x08000cbd
 8000c88:	08000cd5 	.word	0x08000cd5
 8000c8c:	08000cd9 	.word	0x08000cd9
 8000c90:	08000cdf 	.word	0x08000cdf
	case GETTING_DATA:
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensors_handler.buffer,
 8000c94:	2206      	movs	r2, #6
 8000c96:	4915      	ldr	r1, [pc, #84]	; (8000cec <MDL_sensors_handler+0x90>)
 8000c98:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <MDL_sensors_handler+0x94>)
 8000c9a:	f001 f86f 	bl	8001d7c <HAL_ADC_Start_DMA>
		NUM_OF_SENSORS);
		sensors_handler.state = WAITING_FOR_DATA;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MDL_sensors_handler+0x8c>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
		break;
 8000ca4:	e01e      	b.n	8000ce4 <MDL_sensors_handler+0x88>
	case WAITING_FOR_DATA:
		__NOP();
 8000ca6:	bf00      	nop
		break;
 8000ca8:	e01c      	b.n	8000ce4 <MDL_sensors_handler+0x88>
	case CALCULATING_DATA:
		sensors_calculateCurrentData();
 8000caa:	f000 f919 	bl	8000ee0 <sensors_calculateCurrentData>
		break;
 8000cae:	e019      	b.n	8000ce4 <MDL_sensors_handler+0x88>
	case DETERMINING_SENSOR_STATE:
		sensors_determineIfSensorsDetectedObject();
 8000cb0:	f000 f896 	bl	8000de0 <sensors_determineIfSensorsDetectedObject>
		break;
 8000cb4:	e016      	b.n	8000ce4 <MDL_sensors_handler+0x88>
	case CHECKING_SENSOR_STATE:
		sensors_checkSensorState();
 8000cb6:	f000 f8cd 	bl	8000e54 <sensors_checkSensorState>
		break;
 8000cba:	e013      	b.n	8000ce4 <MDL_sensors_handler+0x88>
	case START_CALIBRATION:
		HAL_ADC_Stop(&hadc1);
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MDL_sensors_handler+0x94>)
 8000cbe:	f001 f82a 	bl	8001d16 <HAL_ADC_Stop>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensors_handler.buffer, NUM_OF_SENSORS);
 8000cc2:	2206      	movs	r2, #6
 8000cc4:	4909      	ldr	r1, [pc, #36]	; (8000cec <MDL_sensors_handler+0x90>)
 8000cc6:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <MDL_sensors_handler+0x94>)
 8000cc8:	f001 f858 	bl	8001d7c <HAL_ADC_Start_DMA>
		sensors_handler.state = WAITING_FOR_CALIBRATION_DATA;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MDL_sensors_handler+0x8c>)
 8000cce:	2206      	movs	r2, #6
 8000cd0:	701a      	strb	r2, [r3, #0]
		break;
 8000cd2:	e007      	b.n	8000ce4 <MDL_sensors_handler+0x88>
	case WAITING_FOR_CALIBRATION_DATA:
		__NOP();
 8000cd4:	bf00      	nop
		break;
 8000cd6:	e005      	b.n	8000ce4 <MDL_sensors_handler+0x88>
	case CALCULATING_DATA_FOR_CALIBRATION:
		sensors_calculateCurrentDataForCalibration();
 8000cd8:	f000 f846 	bl	8000d68 <sensors_calculateCurrentDataForCalibration>
		break;
 8000cdc:	e002      	b.n	8000ce4 <MDL_sensors_handler+0x88>
	case CALIBRATING:
		sensors_calibrateSensors();
 8000cde:	f000 f809 	bl	8000cf4 <sensors_calibrateSensors>
		break;
 8000ce2:	bf00      	nop
	}
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000230 	.word	0x20000230
 8000cec:	20000264 	.word	0x20000264
 8000cf0:	20000274 	.word	0x20000274

08000cf4 <sensors_calibrateSensors>:

//************************************************************************************

//**********************PRIVATE FUNCTION DEFINITIONS**********************************

void sensors_calibrateSensors() {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
	uint32_t minMeasuredData = MAX_INT16;
 8000cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfe:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	e018      	b.n	8000d38 <sensors_calibrateSensors+0x44>
		if (sensors_handler.sensors[i].sumOfDistances / NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION < minMeasuredData) {
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <sensors_calibrateSensors+0x6c>)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <sensors_calibrateSensors+0x70>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d909      	bls.n	8000d32 <sensors_calibrateSensors+0x3e>
			minMeasuredData = sensors_handler.sensors[i].sumOfDistances / NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION;
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <sensors_calibrateSensors+0x6c>)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4413      	add	r3, r2
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <sensors_calibrateSensors+0x70>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b05      	cmp	r3, #5
 8000d3c:	dde3      	ble.n	8000d06 <sensors_calibrateSensors+0x12>
		}
	}

	sensors_handler.threshold = minMeasuredData - THRESHOLD_REDUCER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	3b32      	subs	r3, #50	; 0x32
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <sensors_calibrateSensors+0x6c>)
 8000d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	sensors_handler.state = GETTING_DATA;
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <sensors_calibrateSensors+0x6c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000230 	.word	0x20000230
 8000d64:	51eb851f 	.word	0x51eb851f

08000d68 <sensors_calculateCurrentDataForCalibration>:

void sensors_calculateCurrentDataForCalibration() {
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	e015      	b.n	8000da0 <sensors_calculateCurrentDataForCalibration+0x38>
		sensors_handler.sensors[i].sumOfDistances += sensors_handler.buffer[i];
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <sensors_calculateCurrentDataForCalibration+0x74>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3318      	adds	r3, #24
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	889b      	ldrh	r3, [r3, #4]
 8000d80:	b299      	uxth	r1, r3
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <sensors_calculateCurrentDataForCalibration+0x74>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4413      	add	r3, r2
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	441a      	add	r2, r3
 8000d90:	4912      	ldr	r1, [pc, #72]	; (8000ddc <sensors_calculateCurrentDataForCalibration+0x74>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	440b      	add	r3, r1
 8000d98:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	dde6      	ble.n	8000d74 <sensors_calculateCurrentDataForCalibration+0xc>
	}

	if (++sensors_handler.ordinalNumOfMeasurementForCalibration == NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION) {
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <sensors_calculateCurrentDataForCalibration+0x74>)
 8000da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dac:	3301      	adds	r3, #1
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <sensors_calculateCurrentDataForCalibration+0x74>)
 8000db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <sensors_calculateCurrentDataForCalibration+0x74>)
 8000db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dbc:	2b64      	cmp	r3, #100	; 0x64
 8000dbe:	d103      	bne.n	8000dc8 <sensors_calculateCurrentDataForCalibration+0x60>
		sensors_handler.state = CALIBRATING;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <sensors_calculateCurrentDataForCalibration+0x74>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = START_CALIBRATION;
	}

}
 8000dc6:	e002      	b.n	8000dce <sensors_calculateCurrentDataForCalibration+0x66>
		sensors_handler.state = START_CALIBRATION;
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <sensors_calculateCurrentDataForCalibration+0x74>)
 8000dca:	2205      	movs	r2, #5
 8000dcc:	701a      	strb	r2, [r3, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000230 	.word	0x20000230

08000de0 <sensors_determineIfSensorsDetectedObject>:

void sensors_determineIfSensorsDetectedObject() {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	e023      	b.n	8000e34 <sensors_determineIfSensorsDetectedObject+0x54>
		if (sensors_handler.sensors[i].sumOfDistances
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <sensors_determineIfSensorsDetectedObject+0x6c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4413      	add	r3, r2
 8000df4:	689b      	ldr	r3, [r3, #8]
				/ NUM_OF_REQUIRED_MEASURMENTS < sensors_handler.threshold) {
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <sensors_determineIfSensorsDetectedObject+0x70>)
 8000df8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <sensors_determineIfSensorsDetectedObject+0x6c>)
 8000e00:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
		if (sensors_handler.sensors[i].sumOfDistances
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d206      	bcs.n	8000e16 <sensors_determineIfSensorsDetectedObject+0x36>
			sensors_handler.sensors[i].wantedState = GPIO_PIN_SET;
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <sensors_determineIfSensorsDetectedObject+0x6c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	4413      	add	r3, r2
 8000e10:	2201      	movs	r2, #1
 8000e12:	71da      	strb	r2, [r3, #7]
 8000e14:	e005      	b.n	8000e22 <sensors_determineIfSensorsDetectedObject+0x42>
		} else {
			sensors_handler.sensors[i].wantedState = GPIO_PIN_RESET;
 8000e16:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <sensors_determineIfSensorsDetectedObject+0x6c>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	71da      	strb	r2, [r3, #7]
		}

		sensors_handler.sensors[i].sumOfDistances = 0;
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <sensors_determineIfSensorsDetectedObject+0x6c>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4413      	add	r3, r2
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3301      	adds	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b05      	cmp	r3, #5
 8000e38:	ddd8      	ble.n	8000dec <sensors_determineIfSensorsDetectedObject+0xc>
	}

	sensors_handler.state = CHECKING_SENSOR_STATE;
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <sensors_determineIfSensorsDetectedObject+0x6c>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	701a      	strb	r2, [r3, #0]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	20000230 	.word	0x20000230
 8000e50:	cccccccd 	.word	0xcccccccd

08000e54 <sensors_checkSensorState>:

void sensors_checkSensorState() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e02c      	b.n	8000eba <sensors_checkSensorState+0x66>
		if (sensors_handler.sensors[i].currentState
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <sensors_checkSensorState+0x84>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	799a      	ldrb	r2, [r3, #6]
				!= sensors_handler.sensors[i].wantedState) {
 8000e6a:	491b      	ldr	r1, [pc, #108]	; (8000ed8 <sensors_checkSensorState+0x84>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	79db      	ldrb	r3, [r3, #7]
		if (sensors_handler.sensors[i].currentState
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d01d      	beq.n	8000eb4 <sensors_checkSensorState+0x60>
			HAL_GPIO_WritePin(GPIOG, sensors_handler.sensors[i].gpio_pin,
 8000e78:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <sensors_checkSensorState+0x84>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4413      	add	r3, r2
 8000e80:	8899      	ldrh	r1, [r3, #4]
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <sensors_checkSensorState+0x84>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4413      	add	r3, r2
 8000e8a:	79db      	ldrb	r3, [r3, #7]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4813      	ldr	r0, [pc, #76]	; (8000edc <sensors_checkSensorState+0x88>)
 8000e90:	f002 f976 	bl	8003180 <HAL_GPIO_WritePin>
					sensors_handler.sensors[i].wantedState);
			sensors_handler.sensors[i].currentState =
					sensors_handler.sensors[i].wantedState;
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <sensors_checkSensorState+0x84>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	79d9      	ldrb	r1, [r3, #7]
			sensors_handler.sensors[i].currentState =
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <sensors_checkSensorState+0x84>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	460a      	mov	r2, r1
 8000ea8:	719a      	strb	r2, [r3, #6]

			MDL_leds_scored(i);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fcfa 	bl	80008a8 <MDL_leds_scored>
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	ddcf      	ble.n	8000e60 <sensors_checkSensorState+0xc>

		}
	}

	sensors_handler.state = GETTING_DATA;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <sensors_checkSensorState+0x84>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
	sensors_handler.ordinalNumOfMeasurement = 0;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <sensors_checkSensorState+0x84>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000230 	.word	0x20000230
 8000edc:	40021800 	.word	0x40021800

08000ee0 <sensors_calculateCurrentData>:

void sensors_calculateCurrentData() {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	e015      	b.n	8000f18 <sensors_calculateCurrentData+0x38>
		sensors_handler.sensors[i].sumOfDistances += sensors_handler.buffer[i];
 8000eec:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <sensors_calculateCurrentData+0x74>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3318      	adds	r3, #24
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	b299      	uxth	r1, r3
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <sensors_calculateCurrentData+0x74>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4413      	add	r3, r2
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	460a      	mov	r2, r1
 8000f06:	441a      	add	r2, r3
 8000f08:	4912      	ldr	r1, [pc, #72]	; (8000f54 <sensors_calculateCurrentData+0x74>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3301      	adds	r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b05      	cmp	r3, #5
 8000f1c:	dde6      	ble.n	8000eec <sensors_calculateCurrentData+0xc>
	}

	if (++sensors_handler.ordinalNumOfMeasurement == NUM_OF_REQUIRED_MEASURMENTS) {
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <sensors_calculateCurrentData+0x74>)
 8000f20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f24:	3301      	adds	r3, #1
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <sensors_calculateCurrentData+0x74>)
 8000f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <sensors_calculateCurrentData+0x74>)
 8000f30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d103      	bne.n	8000f40 <sensors_calculateCurrentData+0x60>
		sensors_handler.state = DETERMINING_SENSOR_STATE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <sensors_calculateCurrentData+0x74>)
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = GETTING_DATA;
	}

}
 8000f3e:	e002      	b.n	8000f46 <sensors_calculateCurrentData+0x66>
		sensors_handler.state = GETTING_DATA;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <sensors_calculateCurrentData+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000230 	.word	0x20000230

08000f58 <HAL_ADC_ConvCpltCallback>:

//************************************************************************************

// when DMA finishes transferring data this function is called

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]


	if (sensors_handler.state == WAITING_FOR_CALIBRATION_DATA) {
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d103      	bne.n	8000f72 <HAL_ADC_ConvCpltCallback+0x1a>
		sensors_handler.state = CALCULATING_DATA_FOR_CALIBRATION;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = CALCULATING_DATA;
	}
}
 8000f70:	e002      	b.n	8000f78 <HAL_ADC_ConvCpltCallback+0x20>
		sensors_handler.state = CALCULATING_DATA;
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	701a      	strb	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	20000230 	.word	0x20000230

08000f88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <MX_ADC1_Init+0x124>)
 8000f9c:	4a44      	ldr	r2, [pc, #272]	; (80010b0 <MX_ADC1_Init+0x128>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa0:	4b42      	ldr	r3, [pc, #264]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fac:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb2:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb8:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc0:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc6:	4b39      	ldr	r3, [pc, #228]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fc8:	4a3a      	ldr	r2, [pc, #232]	; (80010b4 <MX_ADC1_Init+0x12c>)
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fcc:	4b37      	ldr	r3, [pc, #220]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fd4:	2206      	movs	r2, #6
 8000fd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd8:	4b34      	ldr	r3, [pc, #208]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fe0:	4b32      	ldr	r3, [pc, #200]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe6:	4831      	ldr	r0, [pc, #196]	; (80010ac <MX_ADC1_Init+0x124>)
 8000fe8:	f000 fe52 	bl	8001c90 <HAL_ADC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ff2:	f000 fa4b 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4829      	ldr	r0, [pc, #164]	; (80010ac <MX_ADC1_Init+0x124>)
 8001008:	f000 ffdc 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001012:	f000 fa3b 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001016:	2307      	movs	r3, #7
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	4822      	ldr	r0, [pc, #136]	; (80010ac <MX_ADC1_Init+0x124>)
 8001024:	f000 ffce 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800102e:	f000 fa2d 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001032:	230b      	movs	r3, #11
 8001034:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001036:	2303      	movs	r3, #3
 8001038:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	481b      	ldr	r0, [pc, #108]	; (80010ac <MX_ADC1_Init+0x124>)
 8001040:	f000 ffc0 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800104a:	f000 fa1f 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800104e:	2306      	movs	r3, #6
 8001050:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001052:	2304      	movs	r3, #4
 8001054:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	4619      	mov	r1, r3
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <MX_ADC1_Init+0x124>)
 800105c:	f000 ffb2 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001066:	f000 fa11 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800106a:	2308      	movs	r3, #8
 800106c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800106e:	2305      	movs	r3, #5
 8001070:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_ADC1_Init+0x124>)
 8001078:	f000 ffa4 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001082:	f000 fa03 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001086:	2309      	movs	r3, #9
 8001088:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800108a:	2306      	movs	r3, #6
 800108c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <MX_ADC1_Init+0x124>)
 8001094:	f000 ff96 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800109e:	f000 f9f5 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000274 	.word	0x20000274
 80010b0:	40012000 	.word	0x40012000
 80010b4:	0f000001 	.word	0x0f000001

080010b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a4a      	ldr	r2, [pc, #296]	; (8001200 <HAL_ADC_MspInit+0x148>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	f040 808d 	bne.w	80011f6 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	4a47      	ldr	r2, [pc, #284]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6453      	str	r3, [r2, #68]	; 0x44
 80010ec:	4b45      	ldr	r3, [pc, #276]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a40      	ldr	r2, [pc, #256]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a39      	ldr	r2, [pc, #228]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4b33      	ldr	r3, [pc, #204]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a32      	ldr	r2, [pc, #200]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_ADC_MspInit+0x14c>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	482a      	ldr	r0, [pc, #168]	; (8001208 <HAL_ADC_MspInit+0x150>)
 8001160:	f001 fe62 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001164:	23e0      	movs	r3, #224	; 0xe0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4825      	ldr	r0, [pc, #148]	; (800120c <HAL_ADC_MspInit+0x154>)
 8001178:	f001 fe56 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800117c:	2303      	movs	r3, #3
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4820      	ldr	r0, [pc, #128]	; (8001210 <HAL_ADC_MspInit+0x158>)
 8001190:	f001 fe4a 	bl	8002e28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 8001196:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_ADC_MspInit+0x160>)
 8001198:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011dc:	f001 fab4 	bl	8002748 <HAL_DMA_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 80011e6:	f000 f951 	bl	800148c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011ee:	639a      	str	r2, [r3, #56]	; 0x38
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_ADC_MspInit+0x15c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3730      	adds	r7, #48	; 0x30
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40012000 	.word	0x40012000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	200002bc 	.word	0x200002bc
 8001218:	40026470 	.word	0x40026470

0800121c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_DMA_Init+0x68>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a16      	ldr	r2, [pc, #88]	; (8001284 <MX_DMA_Init+0x68>)
 800122c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_DMA_Init+0x68>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_DMA_Init+0x68>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <MX_DMA_Init+0x68>)
 8001248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <MX_DMA_Init+0x68>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	200b      	movs	r0, #11
 8001260:	f001 fa3b 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001264:	200b      	movs	r0, #11
 8001266:	f001 fa54 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	203c      	movs	r0, #60	; 0x3c
 8001270:	f001 fa33 	bl	80026da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001274:	203c      	movs	r0, #60	; 0x3c
 8001276:	f001 fa4c 	bl	8002712 <HAL_NVIC_EnableIRQ>

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a34      	ldr	r2, [pc, #208]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a26      	ldr	r2, [pc, #152]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <MX_GPIO_Init+0xf0>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_GPIO_Init+0xf0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_GPIO_Init+0xf0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <MX_GPIO_Init+0xf0>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_GPIO_Init+0xf0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_GPIO_Init+0xf0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a11      	ldr	r2, [pc, #68]	; (8001378 <MX_GPIO_Init+0xf0>)
 8001334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_GPIO_Init+0xf0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <MX_GPIO_Init+0xf4>)
 800134e:	f001 ff17 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001352:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001360:	2302      	movs	r3, #2
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_GPIO_Init+0xf4>)
 800136c:	f001 fd5c 	bl	8002e28 <HAL_GPIO_Init>

}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40021800 	.word	0x40021800

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f000 fbee 	bl	8001b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 f814 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138c:	f7ff ff7c 	bl	8001288 <MX_GPIO_Init>
  MX_DMA_Init();
 8001390:	f7ff ff44 	bl	800121c <MX_DMA_Init>
  MX_ADC1_Init();
 8001394:	f7ff fdf8 	bl	8000f88 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001398:	f000 fa9a 	bl	80018d0 <MX_TIM4_Init>
  MX_TIM2_Init();
 800139c:	f000 fa4c 	bl	8001838 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MDL_sensors_init();
 80013a0:	f7ff fc18 	bl	8000bd4 <MDL_sensors_init>
  MDL_leds_init();
 80013a4:	f7ff f8f6 	bl	8000594 <MDL_leds_init>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		MDL_leds_handler();
 80013a8:	f7ff f918 	bl	80005dc <MDL_leds_handler>
		MDL_sensors_handler();
 80013ac:	f7ff fc56 	bl	8000c5c <MDL_sensors_handler>
		MDL_leds_handler();
 80013b0:	e7fa      	b.n	80013a8 <main+0x28>
	...

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	; 0x50
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2230      	movs	r2, #48	; 0x30
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fd28 	bl	8004e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <SystemClock_Config+0xd0>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a28      	ldr	r2, [pc, #160]	; (8001484 <SystemClock_Config+0xd0>)
 80013e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <SystemClock_Config+0xd0>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <SystemClock_Config+0xd4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <SystemClock_Config+0xd4>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <SystemClock_Config+0xd4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001418:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141e:	2302      	movs	r3, #2
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001428:	2304      	movs	r3, #4
 800142a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800142c:	2348      	movs	r3, #72	; 0x48
 800142e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001430:	2302      	movs	r3, #2
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001434:	2304      	movs	r3, #4
 8001436:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	4618      	mov	r0, r3
 800143e:	f001 feb9 	bl	80031b4 <HAL_RCC_OscConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001448:	f000 f820 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144c:	230f      	movs	r3, #15
 800144e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001450:	2302      	movs	r3, #2
 8001452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800145e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001462:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2102      	movs	r1, #2
 800146a:	4618      	mov	r0, r3
 800146c:	f002 f91a 	bl	80036a4 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001476:	f000 f809 	bl	800148c <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3750      	adds	r7, #80	; 0x50
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001494:	e7fe      	b.n	8001494 <Error_Handler+0x8>
	...

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_MspInit+0x4c>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_MspInit+0x4c>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001534:	f000 fb68 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <DMA1_Stream0_IRQHandler+0x10>)
 8001542:	f001 fa07 	bl	8002954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200003b4 	.word	0x200003b4

08001550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM2_IRQHandler+0x10>)
 8001556:	f002 fd01 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000324 	.word	0x20000324

08001564 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <DMA2_Stream4_IRQHandler+0x10>)
 800156a:	f001 f9f3 	bl	8002954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002bc 	.word	0x200002bc

08001578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
	return 1;
 800157c:	2301      	movs	r3, #1
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_kill>:

int _kill(int pid, int sig)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001592:	f003 fc17 	bl	8004dc4 <__errno>
 8001596:	4603      	mov	r3, r0
 8001598:	2216      	movs	r2, #22
 800159a:	601a      	str	r2, [r3, #0]
	return -1;
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_exit>:

void _exit (int status)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ffe7 	bl	8001588 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015ba:	e7fe      	b.n	80015ba <_exit+0x12>

080015bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e00a      	b.n	80015e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ce:	f3af 8000 	nop.w
 80015d2:	4601      	mov	r1, r0
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	60ba      	str	r2, [r7, #8]
 80015da:	b2ca      	uxtb	r2, r1
 80015dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf0      	blt.n	80015ce <_read+0x12>
	}

return len;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e009      	b.n	800161c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	60ba      	str	r2, [r7, #8]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf1      	blt.n	8001608 <_write+0x12>
	}
	return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_close>:

int _close(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	return -1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001656:	605a      	str	r2, [r3, #4]
	return 0;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_isatty>:

int _isatty(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	return 1;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
	return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f003 fb7c 	bl	8004dc4 <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20030000 	.word	0x20030000
 80016f8:	00000400 	.word	0x00000400
 80016fc:	2000031c 	.word	0x2000031c
 8001700:	20000428 	.word	0x20000428

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db12      	blt.n	800179c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	490a      	ldr	r1, [pc, #40]	; (80017a8 <__NVIC_DisableIRQ+0x44>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	3320      	adds	r3, #32
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001790:	f3bf 8f4f 	dsb	sy
}
 8001794:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001796:	f3bf 8f6f 	isb	sy
}
 800179a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100

080017ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 0 */
uint32_t timer2_Ticks_Millisec;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM2) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017bc:	d104      	bne.n	80017c8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	timer2_Ticks_Millisec++;
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a03      	ldr	r2, [pc, #12]	; (80017d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017c6:	6013      	str	r3, [r2, #0]
	}
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	20000320 	.word	0x20000320

080017d8 <timer2_get_millisec>:

uint32_t timer2_get_millisec() {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
	uint32_t value;
	NVIC_DisableIRQ(TIM2_IRQn);
 80017de:	201c      	movs	r0, #28
 80017e0:	f7ff ffc0 	bl	8001764 <__NVIC_DisableIRQ>
	value = timer2_Ticks_Millisec;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <timer2_get_millisec+0x24>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	607b      	str	r3, [r7, #4]
	NVIC_EnableIRQ(TIM2_IRQn);
 80017ea:	201c      	movs	r0, #28
 80017ec:	f7ff ff9c 	bl	8001728 <__NVIC_EnableIRQ>
	return value ;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000320 	.word	0x20000320

08001800 <timer2_wait_millisec>:

void timer2_wait_millisec(uint32_t ms) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	uint32_t t1, t2;
	t1 = timer2_get_millisec();
 8001808:	f7ff ffe6 	bl	80017d8 <timer2_get_millisec>
 800180c:	60f8      	str	r0, [r7, #12]

	while (1) {
		t2 = timer2_get_millisec();
 800180e:	f7ff ffe3 	bl	80017d8 <timer2_get_millisec>
 8001812:	60b8      	str	r0, [r7, #8]
		if ((t2 - t1) >= ms)
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d904      	bls.n	800182a <timer2_wait_millisec+0x2a>
			break;
		if (t2 < t1)
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d302      	bcc.n	800182e <timer2_wait_millisec+0x2e>
		t2 = timer2_get_millisec();
 8001828:	e7f1      	b.n	800180e <timer2_wait_millisec+0xe>
			break;
 800182a:	bf00      	nop
 800182c:	e000      	b.n	8001830 <timer2_wait_millisec+0x30>
			break;
 800182e:	bf00      	nop
	}
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM2_Init+0x94>)
 8001856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_TIM2_Init+0x94>)
 800185e:	2201      	movs	r2, #1
 8001860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM2_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 35999;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_TIM2_Init+0x94>)
 800186a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800186e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_TIM2_Init+0x94>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_TIM2_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187c:	4813      	ldr	r0, [pc, #76]	; (80018cc <MX_TIM2_Init+0x94>)
 800187e:	f002 f8fd 	bl	8003a7c <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001888:	f7ff fe00 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_TIM2_Init+0x94>)
 800189a:	f002 fd29 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018a4:	f7ff fdf2 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_TIM2_Init+0x94>)
 80018b6:	f003 f9f5 	bl	8004ca4 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018c0:	f7ff fde4 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000324 	.word	0x20000324

080018d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <MX_TIM4_Init+0xe4>)
 8001902:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <MX_TIM4_Init+0xe8>)
 8001904:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <MX_TIM4_Init+0xe4>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <MX_TIM4_Init+0xe4>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 89;
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <MX_TIM4_Init+0xe4>)
 8001914:	2259      	movs	r2, #89	; 0x59
 8001916:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <MX_TIM4_Init+0xe4>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <MX_TIM4_Init+0xe4>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001924:	4823      	ldr	r0, [pc, #140]	; (80019b4 <MX_TIM4_Init+0xe4>)
 8001926:	f002 f8a9 	bl	8003a7c <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001930:	f7ff fdac 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193e:	4619      	mov	r1, r3
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_TIM4_Init+0xe4>)
 8001942:	f002 fcd5 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800194c:	f7ff fd9e 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001950:	4818      	ldr	r0, [pc, #96]	; (80019b4 <MX_TIM4_Init+0xe4>)
 8001952:	f002 f8e2 	bl	8003b1a <HAL_TIM_PWM_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800195c:	f7ff fd96 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	4619      	mov	r1, r3
 800196e:	4811      	ldr	r0, [pc, #68]	; (80019b4 <MX_TIM4_Init+0xe4>)
 8001970:	f003 f998 	bl	8004ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800197a:	f7ff fd87 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197e:	2360      	movs	r3, #96	; 0x60
 8001980:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	4619      	mov	r1, r3
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_TIM4_Init+0xe4>)
 8001996:	f002 fbe9 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80019a0:	f7ff fd74 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019a4:	4803      	ldr	r0, [pc, #12]	; (80019b4 <MX_TIM4_Init+0xe4>)
 80019a6:	f000 f879 	bl	8001a9c <HAL_TIM_MspPostInit>

}
 80019aa:	bf00      	nop
 80019ac:	3738      	adds	r7, #56	; 0x38
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000036c 	.word	0x2000036c
 80019b8:	40000800 	.word	0x40000800

080019bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019cc:	d116      	bne.n	80019fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_TIM_Base_MspInit+0xd0>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <HAL_TIM_Base_MspInit+0xd0>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_TIM_Base_MspInit+0xd0>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	201c      	movs	r0, #28
 80019f0:	f000 fe73 	bl	80026da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f4:	201c      	movs	r0, #28
 80019f6:	f000 fe8c 	bl	8002712 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80019fa:	e042      	b.n	8001a82 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_TIM_Base_MspInit+0xd4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d13d      	bne.n	8001a82 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_TIM_Base_MspInit+0xd0>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <HAL_TIM_Base_MspInit+0xd0>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_TIM_Base_MspInit+0xd0>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a24:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_TIM_Base_MspInit+0xdc>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a2e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a32:	2240      	movs	r2, #64	; 0x40
 8001a34:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a4a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a52:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001a66:	480b      	ldr	r0, [pc, #44]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a68:	f000 fe6e 	bl	8002748 <HAL_DMA_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_TIM_Base_MspInit+0xba>
      Error_Handler();
 8001a72:	f7ff fd0b 	bl	800148c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a7c:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <HAL_TIM_Base_MspInit+0xd8>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40000800 	.word	0x40000800
 8001a94:	200003b4 	.word	0x200003b4
 8001a98:	40026010 	.word	0x40026010

08001a9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_TIM_MspPostInit+0x68>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d11e      	bne.n	8001afc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_TIM_MspPostInit+0x70>)
 8001af8:	f001 f996 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40000800 	.word	0x40000800
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020c00 	.word	0x40020c00

08001b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b14:	480d      	ldr	r0, [pc, #52]	; (8001b4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b16:	490e      	ldr	r1, [pc, #56]	; (8001b50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b1c:	e002      	b.n	8001b24 <LoopCopyDataInit>

08001b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b22:	3304      	adds	r3, #4

08001b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b28:	d3f9      	bcc.n	8001b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b2c:	4c0b      	ldr	r4, [pc, #44]	; (8001b5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b30:	e001      	b.n	8001b36 <LoopFillZerobss>

08001b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b34:	3204      	adds	r2, #4

08001b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b38:	d3fb      	bcc.n	8001b32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b3a:	f7ff fde3 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f003 f947 	bl	8004dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b42:	f7ff fc1d 	bl	8001380 <main>
  bx  lr    
 8001b46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b54:	08006020 	.word	0x08006020
  ldr r2, =_sbss
 8001b58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b5c:	20000428 	.word	0x20000428

08001b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <HAL_Init+0x40>)
 8001b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_Init+0x40>)
 8001b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_Init+0x40>)
 8001b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 fd99 	bl	80026c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b92:	200f      	movs	r0, #15
 8001b94:	f000 f808 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b98:	f7ff fc7e 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023c00 	.word	0x40023c00

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fdb1 	bl	800272e <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 fd79 	bl	80026da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000008 	.word	0x20000008
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000414 	.word	0x20000414

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000414 	.word	0x20000414

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ffee 	bl	8001c30 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_Delay+0x44>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d8f7      	bhi.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000008 	.word	0x20000008

08001c90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e033      	b.n	8001d0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fa02 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd6:	f023 0302 	bic.w	r3, r3, #2
 8001cda:	f043 0202 	orr.w	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 faa0 	bl	8002228 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f023 0303 	bic.w	r3, r3, #3
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001cfe:	e001      	b.n	8001d04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_Stop+0x16>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e021      	b.n	8001d70 <HAL_ADC_Stop+0x5a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_Start_DMA+0x1e>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e0e9      	b.n	8001f6e <HAL_ADC_Start_DMA+0x1f2>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d018      	beq.n	8001de2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc0:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <HAL_ADC_Start_DMA+0x1fc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6d      	ldr	r2, [pc, #436]	; (8001f7c <HAL_ADC_Start_DMA+0x200>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0c9a      	lsrs	r2, r3, #18
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f9      	bne.n	8001dd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df0:	d107      	bne.n	8001e02 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e00:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f040 80a1 	bne.w	8001f54 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e50:	d106      	bne.n	8001e60 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f023 0206 	bic.w	r2, r3, #6
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
 8001e5e:	e002      	b.n	8001e66 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6e:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <HAL_ADC_Start_DMA+0x204>)
 8001e70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	4a43      	ldr	r2, [pc, #268]	; (8001f84 <HAL_ADC_Start_DMA+0x208>)
 8001e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7e:	4a42      	ldr	r2, [pc, #264]	; (8001f88 <HAL_ADC_Start_DMA+0x20c>)
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	4a41      	ldr	r2, [pc, #260]	; (8001f8c <HAL_ADC_Start_DMA+0x210>)
 8001e88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ea2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	334c      	adds	r3, #76	; 0x4c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f000 fcee 	bl	80028a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d12a      	bne.n	8001f2a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2d      	ldr	r2, [pc, #180]	; (8001f90 <HAL_ADC_Start_DMA+0x214>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d015      	beq.n	8001f0a <HAL_ADC_Start_DMA+0x18e>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a2c      	ldr	r2, [pc, #176]	; (8001f94 <HAL_ADC_Start_DMA+0x218>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d105      	bne.n	8001ef4 <HAL_ADC_Start_DMA+0x178>
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <HAL_ADC_Start_DMA+0x204>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <HAL_ADC_Start_DMA+0x21c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d136      	bne.n	8001f6c <HAL_ADC_Start_DMA+0x1f0>
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_ADC_Start_DMA+0x204>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d130      	bne.n	8001f6c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d129      	bne.n	8001f6c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	e020      	b.n	8001f6c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_ADC_Start_DMA+0x214>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d11b      	bne.n	8001f6c <HAL_ADC_Start_DMA+0x1f0>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d114      	bne.n	8001f6c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	e00b      	b.n	8001f6c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f043 0210 	orr.w	r2, r3, #16
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	40012300 	.word	0x40012300
 8001f84:	08002421 	.word	0x08002421
 8001f88:	080024db 	.word	0x080024db
 8001f8c:	080024f7 	.word	0x080024f7
 8001f90:	40012000 	.word	0x40012000
 8001f94:	40012100 	.word	0x40012100
 8001f98:	40012200 	.word	0x40012200

08001f9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x1c>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e113      	b.n	8002208 <HAL_ADC_ConfigChannel+0x244>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	d925      	bls.n	800203c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68d9      	ldr	r1, [r3, #12]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	3b1e      	subs	r3, #30
 8002006:	2207      	movs	r2, #7
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43da      	mvns	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	400a      	ands	r2, r1
 8002014:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68d9      	ldr	r1, [r3, #12]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	4618      	mov	r0, r3
 8002028:	4603      	mov	r3, r0
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4403      	add	r3, r0
 800202e:	3b1e      	subs	r3, #30
 8002030:	409a      	lsls	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	e022      	b.n	8002082 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6919      	ldr	r1, [r3, #16]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	2207      	movs	r2, #7
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	400a      	ands	r2, r1
 800205e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6919      	ldr	r1, [r3, #16]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	4603      	mov	r3, r0
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4403      	add	r3, r0
 8002078:	409a      	lsls	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b06      	cmp	r3, #6
 8002088:	d824      	bhi.n	80020d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3b05      	subs	r3, #5
 800209c:	221f      	movs	r2, #31
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	400a      	ands	r2, r1
 80020aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	3b05      	subs	r3, #5
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
 80020d2:	e04c      	b.n	800216e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	d824      	bhi.n	8002126 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b23      	subs	r3, #35	; 0x23
 80020ee:	221f      	movs	r2, #31
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43da      	mvns	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	400a      	ands	r2, r1
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	4618      	mov	r0, r3
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	3b23      	subs	r3, #35	; 0x23
 8002118:	fa00 f203 	lsl.w	r2, r0, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
 8002124:	e023      	b.n	800216e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3b41      	subs	r3, #65	; 0x41
 8002138:	221f      	movs	r2, #31
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	400a      	ands	r2, r1
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	3b41      	subs	r3, #65	; 0x41
 8002162:	fa00 f203 	lsl.w	r2, r0, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_ADC_ConfigChannel+0x250>)
 8002170:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a28      	ldr	r2, [pc, #160]	; (8002218 <HAL_ADC_ConfigChannel+0x254>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d10f      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1d8>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b12      	cmp	r3, #18
 8002182:	d10b      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_ADC_ConfigChannel+0x254>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d12b      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x23a>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_ADC_ConfigChannel+0x258>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <HAL_ADC_ConfigChannel+0x1f4>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b11      	cmp	r3, #17
 80021b6:	d122      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <HAL_ADC_ConfigChannel+0x258>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d111      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_ADC_ConfigChannel+0x25c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <HAL_ADC_ConfigChannel+0x260>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	0c9a      	lsrs	r2, r3, #18
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f0:	e002      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f9      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40012300 	.word	0x40012300
 8002218:	40012000 	.word	0x40012000
 800221c:	10000012 	.word	0x10000012
 8002220:	20000000 	.word	0x20000000
 8002224:	431bde83 	.word	0x431bde83

08002228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002230:	4b79      	ldr	r3, [pc, #484]	; (8002418 <ADC_Init+0x1f0>)
 8002232:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800225c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	021a      	lsls	r2, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6899      	ldr	r1, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	4a58      	ldr	r2, [pc, #352]	; (800241c <ADC_Init+0x1f4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d022      	beq.n	8002306 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6899      	ldr	r1, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e00f      	b.n	8002326 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002324:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0202 	bic.w	r2, r2, #2
 8002334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
 8002340:	005a      	lsls	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002362:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002372:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	3b01      	subs	r3, #1
 8002380:	035a      	lsls	r2, r3, #13
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	e007      	b.n	800239c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	051a      	lsls	r2, r3, #20
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6899      	ldr	r1, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023de:	025a      	lsls	r2, r3, #9
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	029a      	lsls	r2, r3, #10
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40012300 	.word	0x40012300
 800241c:	0f000001 	.word	0x0f000001

08002420 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002436:	2b00      	cmp	r3, #0
 8002438:	d13c      	bne.n	80024b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d12b      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d127      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002474:	2b00      	cmp	r3, #0
 8002476:	d119      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0220 	bic.w	r2, r2, #32
 8002486:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7fe fd53 	bl	8000f58 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024b2:	e00e      	b.n	80024d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff fd75 	bl	8001fb0 <HAL_ADC_ErrorCallback>
}
 80024c6:	e004      	b.n	80024d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff fd57 	bl	8001f9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2240      	movs	r2, #64	; 0x40
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff fd4a 	bl	8001fb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <__NVIC_SetPriorityGrouping>:
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002540:	4013      	ands	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800254c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x44>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_GetPriorityGrouping>:
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__NVIC_GetPriorityGrouping+0x18>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 0307 	and.w	r3, r3, #7
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_EnableIRQ>:
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	db0b      	blt.n	80025b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	4907      	ldr	r1, [pc, #28]	; (80025c0 <__NVIC_EnableIRQ+0x38>)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2001      	movs	r0, #1
 80025aa:	fa00 f202 	lsl.w	r2, r0, r2
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db0a      	blt.n	80025ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	490c      	ldr	r1, [pc, #48]	; (8002610 <__NVIC_SetPriority+0x4c>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	440b      	add	r3, r1
 80025e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ec:	e00a      	b.n	8002604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <__NVIC_SetPriority+0x50>)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3b04      	subs	r3, #4
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	440b      	add	r3, r1
 8002602:	761a      	strb	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	bf28      	it	cs
 8002636:	2304      	movcs	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3304      	adds	r3, #4
 800263e:	2b06      	cmp	r3, #6
 8002640:	d902      	bls.n	8002648 <NVIC_EncodePriority+0x30>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3b03      	subs	r3, #3
 8002646:	e000      	b.n	800264a <NVIC_EncodePriority+0x32>
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002660:	f04f 31ff 	mov.w	r1, #4294967295
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43d9      	mvns	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	4313      	orrs	r3, r2
         );
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002690:	d301      	bcc.n	8002696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002692:	2301      	movs	r3, #1
 8002694:	e00f      	b.n	80026b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <SysTick_Config+0x40>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269e:	210f      	movs	r1, #15
 80026a0:	f04f 30ff 	mov.w	r0, #4294967295
 80026a4:	f7ff ff8e 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <SysTick_Config+0x40>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SysTick_Config+0x40>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ff29 	bl	8002524 <__NVIC_SetPriorityGrouping>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ec:	f7ff ff3e 	bl	800256c <__NVIC_GetPriorityGrouping>
 80026f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7ff ff8e 	bl	8002618 <NVIC_EncodePriority>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5d 	bl	80025c4 <__NVIC_SetPriority>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	4603      	mov	r3, r0
 800271a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff31 	bl	8002588 <__NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ffa2 	bl	8002680 <SysTick_Config>
 800273c:	4603      	mov	r3, r0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff fa6c 	bl	8001c30 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e099      	b.n	8002898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002784:	e00f      	b.n	80027a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002786:	f7ff fa53 	bl	8001c30 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b05      	cmp	r3, #5
 8002792:	d908      	bls.n	80027a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2203      	movs	r2, #3
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e078      	b.n	8002898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1e8      	bne.n	8002786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <HAL_DMA_Init+0x158>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d107      	bne.n	8002810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	4313      	orrs	r3, r2
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0307 	bic.w	r3, r3, #7
 8002826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	2b04      	cmp	r3, #4
 8002838:	d117      	bne.n	800286a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 fa6f 	bl	8002d30 <DMA_CheckFifoParam>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002866:	2301      	movs	r3, #1
 8002868:	e016      	b.n	8002898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa26 	bl	8002cc4 <DMA_CalcBaseAndBitshift>
 8002878:	4603      	mov	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	223f      	movs	r2, #63	; 0x3f
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	f010803f 	.word	0xf010803f

080028a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_DMA_Start_IT+0x26>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e040      	b.n	800294c <HAL_DMA_Start_IT+0xa8>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d12f      	bne.n	800293e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f9b8 	bl	8002c68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	223f      	movs	r2, #63	; 0x3f
 80028fe:	409a      	lsls	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0216 	orr.w	r2, r2, #22
 8002912:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0208 	orr.w	r2, r2, #8
 800292a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e005      	b.n	800294a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002946:	2302      	movs	r3, #2
 8002948:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002960:	4b8e      	ldr	r3, [pc, #568]	; (8002b9c <HAL_DMA_IRQHandler+0x248>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a8e      	ldr	r2, [pc, #568]	; (8002ba0 <HAL_DMA_IRQHandler+0x24c>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0a9b      	lsrs	r3, r3, #10
 800296c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	2208      	movs	r2, #8
 8002980:	409a      	lsls	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01a      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0204 	bic.w	r2, r2, #4
 80029a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2208      	movs	r2, #8
 80029ae:	409a      	lsls	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	2201      	movs	r2, #1
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d012      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2201      	movs	r2, #1
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f043 0202 	orr.w	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fa:	2204      	movs	r2, #4
 80029fc:	409a      	lsls	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00b      	beq.n	8002a2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2204      	movs	r2, #4
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	2210      	movs	r2, #16
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d043      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03c      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	2210      	movs	r2, #16
 8002a50:	409a      	lsls	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d018      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d024      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
 8002a82:	e01f      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
 8002a94:	e016      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d107      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0208 	bic.w	r2, r2, #8
 8002ab2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	2220      	movs	r2, #32
 8002aca:	409a      	lsls	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 808f 	beq.w	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8087 	beq.w	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	2220      	movs	r2, #32
 8002aec:	409a      	lsls	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d136      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0216 	bic.w	r2, r2, #22
 8002b0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <HAL_DMA_IRQHandler+0x1da>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0208 	bic.w	r2, r2, #8
 8002b3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	223f      	movs	r2, #63	; 0x3f
 8002b44:	409a      	lsls	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d07e      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
        }
        return;
 8002b6a:	e079      	b.n	8002c60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01d      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d031      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
 8002b98:	e02c      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
 8002b9a:	bf00      	nop
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d023      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e01e      	b.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10f      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0210 	bic.w	r2, r2, #16
 8002bd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d032      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d022      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2205      	movs	r2, #5
 8002c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	3301      	adds	r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d307      	bcc.n	8002c3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f2      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x2cc>
 8002c3a:	e000      	b.n	8002c3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
 8002c5e:	e000      	b.n	8002c62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c60:	bf00      	nop
    }
  }
}
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d108      	bne.n	8002ca8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ca6:	e007      	b.n	8002cb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3b10      	subs	r3, #16
 8002cd4:	4a14      	ldr	r2, [pc, #80]	; (8002d28 <DMA_CalcBaseAndBitshift+0x64>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <DMA_CalcBaseAndBitshift+0x68>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d909      	bls.n	8002d06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	1d1a      	adds	r2, r3, #4
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	; 0x58
 8002d04:	e007      	b.n	8002d16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d0e:	f023 0303 	bic.w	r3, r3, #3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	aaaaaaab 	.word	0xaaaaaaab
 8002d2c:	08005ec0 	.word	0x08005ec0

08002d30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d856      	bhi.n	8002dfe <DMA_CheckFifoParam+0xce>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <DMA_CheckFifoParam+0x28>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d7b 	.word	0x08002d7b
 8002d60:	08002d69 	.word	0x08002d69
 8002d64:	08002dff 	.word	0x08002dff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d046      	beq.n	8002e02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d78:	e043      	b.n	8002e02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d82:	d140      	bne.n	8002e06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d88:	e03d      	b.n	8002e06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d92:	d121      	bne.n	8002dd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d837      	bhi.n	8002e0a <DMA_CheckFifoParam+0xda>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <DMA_CheckFifoParam+0x70>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002db7 	.word	0x08002db7
 8002da8:	08002db1 	.word	0x08002db1
 8002dac:	08002dc9 	.word	0x08002dc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      break;
 8002db4:	e030      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d025      	beq.n	8002e0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc6:	e022      	b.n	8002e0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd0:	d11f      	bne.n	8002e12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dd6:	e01c      	b.n	8002e12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d903      	bls.n	8002de6 <DMA_CheckFifoParam+0xb6>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d003      	beq.n	8002dec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002de4:	e018      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dea:	e015      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	e00b      	b.n	8002e16 <DMA_CheckFifoParam+0xe6>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e00a      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e02:	bf00      	nop
 8002e04:	e008      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e06:	bf00      	nop
 8002e08:	e006      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0a:	bf00      	nop
 8002e0c:	e004      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
    }
  } 
  
  return status; 
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e177      	b.n	8003134 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e44:	2201      	movs	r2, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	f040 8166 	bne.w	800312e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d005      	beq.n	8002e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d130      	bne.n	8002edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2203      	movs	r2, #3
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 0201 	and.w	r2, r3, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d017      	beq.n	8002f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d123      	bne.n	8002f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	08da      	lsrs	r2, r3, #3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3208      	adds	r2, #8
 8002f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	08da      	lsrs	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3208      	adds	r2, #8
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80c0 	beq.w	800312e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	4b66      	ldr	r3, [pc, #408]	; (800314c <HAL_GPIO_Init+0x324>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a65      	ldr	r2, [pc, #404]	; (800314c <HAL_GPIO_Init+0x324>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b63      	ldr	r3, [pc, #396]	; (800314c <HAL_GPIO_Init+0x324>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fca:	4a61      	ldr	r2, [pc, #388]	; (8003150 <HAL_GPIO_Init+0x328>)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	220f      	movs	r2, #15
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a58      	ldr	r2, [pc, #352]	; (8003154 <HAL_GPIO_Init+0x32c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d037      	beq.n	8003066 <HAL_GPIO_Init+0x23e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a57      	ldr	r2, [pc, #348]	; (8003158 <HAL_GPIO_Init+0x330>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d031      	beq.n	8003062 <HAL_GPIO_Init+0x23a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a56      	ldr	r2, [pc, #344]	; (800315c <HAL_GPIO_Init+0x334>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d02b      	beq.n	800305e <HAL_GPIO_Init+0x236>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a55      	ldr	r2, [pc, #340]	; (8003160 <HAL_GPIO_Init+0x338>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d025      	beq.n	800305a <HAL_GPIO_Init+0x232>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a54      	ldr	r2, [pc, #336]	; (8003164 <HAL_GPIO_Init+0x33c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01f      	beq.n	8003056 <HAL_GPIO_Init+0x22e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a53      	ldr	r2, [pc, #332]	; (8003168 <HAL_GPIO_Init+0x340>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d019      	beq.n	8003052 <HAL_GPIO_Init+0x22a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_GPIO_Init+0x344>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0x226>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a51      	ldr	r2, [pc, #324]	; (8003170 <HAL_GPIO_Init+0x348>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00d      	beq.n	800304a <HAL_GPIO_Init+0x222>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a50      	ldr	r2, [pc, #320]	; (8003174 <HAL_GPIO_Init+0x34c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x21e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4f      	ldr	r2, [pc, #316]	; (8003178 <HAL_GPIO_Init+0x350>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_GPIO_Init+0x21a>
 800303e:	2309      	movs	r3, #9
 8003040:	e012      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003042:	230a      	movs	r3, #10
 8003044:	e010      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003046:	2308      	movs	r3, #8
 8003048:	e00e      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800304a:	2307      	movs	r3, #7
 800304c:	e00c      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800304e:	2306      	movs	r3, #6
 8003050:	e00a      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003052:	2305      	movs	r3, #5
 8003054:	e008      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003056:	2304      	movs	r3, #4
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800305a:	2303      	movs	r3, #3
 800305c:	e004      	b.n	8003068 <HAL_GPIO_Init+0x240>
 800305e:	2302      	movs	r3, #2
 8003060:	e002      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x240>
 8003066:	2300      	movs	r3, #0
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f002 0203 	and.w	r2, r2, #3
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	4093      	lsls	r3, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003078:	4935      	ldr	r1, [pc, #212]	; (8003150 <HAL_GPIO_Init+0x328>)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_GPIO_Init+0x354>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030aa:	4a34      	ldr	r2, [pc, #208]	; (800317c <HAL_GPIO_Init+0x354>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_GPIO_Init+0x354>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d4:	4a29      	ldr	r2, [pc, #164]	; (800317c <HAL_GPIO_Init+0x354>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030da:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_GPIO_Init+0x354>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_GPIO_Init+0x354>)
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_GPIO_Init+0x354>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003128:	4a14      	ldr	r2, [pc, #80]	; (800317c <HAL_GPIO_Init+0x354>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	f67f ae84 	bls.w	8002e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40013800 	.word	0x40013800
 8003154:	40020000 	.word	0x40020000
 8003158:	40020400 	.word	0x40020400
 800315c:	40020800 	.word	0x40020800
 8003160:	40020c00 	.word	0x40020c00
 8003164:	40021000 	.word	0x40021000
 8003168:	40021400 	.word	0x40021400
 800316c:	40021800 	.word	0x40021800
 8003170:	40021c00 	.word	0x40021c00
 8003174:	40022000 	.word	0x40022000
 8003178:	40022400 	.word	0x40022400
 800317c:	40013c00 	.word	0x40013c00

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800319c:	e003      	b.n	80031a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	619a      	str	r2, [r3, #24]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e267      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d075      	beq.n	80032be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031d2:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b85      	ldr	r3, [pc, #532]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d112      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05b      	beq.n	80032bc <HAL_RCC_OscConfig+0x108>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d157      	bne.n	80032bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e242      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x74>
 800321a:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x98>
 8003232:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6f      	ldr	r2, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6c      	ldr	r2, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 800324c:	4b69      	ldr	r3, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a68      	ldr	r2, [pc, #416]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b66      	ldr	r3, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a65      	ldr	r2, [pc, #404]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fce0 	bl	8001c30 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe fcdc 	bl	8001c30 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e207      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b5b      	ldr	r3, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xc0>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fccc 	bl	8001c30 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe fcc8 	bl	8001c30 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1f3      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b51      	ldr	r3, [pc, #324]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0xe8>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c7      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4937      	ldr	r1, [pc, #220]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fe fc81 	bl	8001c30 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003332:	f7fe fc7d 	bl	8001c30 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a8      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4925      	ldr	r1, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fe fc60 	bl	8001c30 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003374:	f7fe fc5c 	bl	8001c30 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e187      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d036      	beq.n	800340c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_RCC_OscConfig+0x248>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fe fc40 	bl	8001c30 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fe fc3c 	bl	8001c30 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e167      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x200>
 80033d2:	e01b      	b.n	800340c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_OscConfig+0x248>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fe fc29 	bl	8001c30 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	e00e      	b.n	8003400 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e2:	f7fe fc25 	bl	8001c30 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d907      	bls.n	8003400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e150      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	42470000 	.word	0x42470000
 80033fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ea      	bne.n	80033e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8097 	beq.w	8003548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4b81      	ldr	r3, [pc, #516]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10f      	bne.n	800344a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	4b7d      	ldr	r3, [pc, #500]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a7c      	ldr	r2, [pc, #496]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b7a      	ldr	r3, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b77      	ldr	r3, [pc, #476]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b74      	ldr	r3, [pc, #464]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a73      	ldr	r2, [pc, #460]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fe fbe5 	bl	8001c30 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fe fbe1 	bl	8001c30 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e10c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x2ea>
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a63      	ldr	r2, [pc, #396]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
 800349c:	e01c      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x30c>
 80034a6:	4b5f      	ldr	r3, [pc, #380]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a5e      	ldr	r2, [pc, #376]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a5b      	ldr	r2, [pc, #364]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 80034c0:	4b58      	ldr	r3, [pc, #352]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a57      	ldr	r2, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
 80034cc:	4b55      	ldr	r3, [pc, #340]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a54      	ldr	r2, [pc, #336]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fe fba6 	bl	8001c30 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fe fba2 	bl	8001c30 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0cb      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	4b49      	ldr	r3, [pc, #292]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ee      	beq.n	80034e8 <HAL_RCC_OscConfig+0x334>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350c:	f7fe fb90 	bl	8001c30 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fe fb8c 	bl	8001c30 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0b5      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ee      	bne.n	8003514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	4a38      	ldr	r2, [pc, #224]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a1 	beq.w	8003694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003552:	4b34      	ldr	r3, [pc, #208]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d05c      	beq.n	8003618 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d141      	bne.n	80035ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCC_OscConfig+0x478>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe fb60 	bl	8001c30 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe fb5c 	bl	8001c30 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e087      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	4b27      	ldr	r3, [pc, #156]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	061b      	lsls	r3, r3, #24
 80035b6:	491b      	ldr	r1, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x478>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fe fb35 	bl	8001c30 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fe fb31 	bl	8001c30 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e05c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x416>
 80035e8:	e054      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_OscConfig+0x478>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fb1e 	bl	8001c30 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fe fb1a 	bl	8001c30 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e045      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x444>
 8003616:	e03d      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e038      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d028      	beq.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d121      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d11a      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	4293      	cmp	r3, r2
 800366a:	d111      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	3b01      	subs	r3, #1
 800367a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0cc      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90c      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800371a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e067      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fe fa4c 	bl	8001c30 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fe fa48 	bl	8001c30 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe f9ac 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023c00 	.word	0x40023c00
 8003860:	40023800 	.word	0x40023800
 8003864:	08005eb0 	.word	0x08005eb0
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b094      	sub	sp, #80	; 0x50
 8003876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	647b      	str	r3, [r7, #68]	; 0x44
 800387c:	2300      	movs	r3, #0
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003880:	2300      	movs	r3, #0
 8003882:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003888:	4b79      	ldr	r3, [pc, #484]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d00d      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003894:	2b08      	cmp	r3, #8
 8003896:	f200 80e1 	bhi.w	8003a5c <HAL_RCC_GetSysClockFreq+0x1ec>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x34>
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x3a>
 80038a2:	e0db      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b73      	ldr	r3, [pc, #460]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x204>)
 80038a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038a8:	e0db      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038aa:	4b73      	ldr	r3, [pc, #460]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x208>)
 80038ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ae:	e0d8      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b0:	4b6f      	ldr	r3, [pc, #444]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ba:	4b6d      	ldr	r3, [pc, #436]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d063      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c6:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	2200      	movs	r2, #0
 80038ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
 80038da:	2300      	movs	r3, #0
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
 80038de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038e2:	4622      	mov	r2, r4
 80038e4:	462b      	mov	r3, r5
 80038e6:	f04f 0000 	mov.w	r0, #0
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	0159      	lsls	r1, r3, #5
 80038f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f4:	0150      	lsls	r0, r2, #5
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4621      	mov	r1, r4
 80038fc:	1a51      	subs	r1, r2, r1
 80038fe:	6139      	str	r1, [r7, #16]
 8003900:	4629      	mov	r1, r5
 8003902:	eb63 0301 	sbc.w	r3, r3, r1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003914:	4659      	mov	r1, fp
 8003916:	018b      	lsls	r3, r1, #6
 8003918:	4651      	mov	r1, sl
 800391a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800391e:	4651      	mov	r1, sl
 8003920:	018a      	lsls	r2, r1, #6
 8003922:	4651      	mov	r1, sl
 8003924:	ebb2 0801 	subs.w	r8, r2, r1
 8003928:	4659      	mov	r1, fp
 800392a:	eb63 0901 	sbc.w	r9, r3, r1
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800393e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003942:	4690      	mov	r8, r2
 8003944:	4699      	mov	r9, r3
 8003946:	4623      	mov	r3, r4
 8003948:	eb18 0303 	adds.w	r3, r8, r3
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	462b      	mov	r3, r5
 8003950:	eb49 0303 	adc.w	r3, r9, r3
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003962:	4629      	mov	r1, r5
 8003964:	024b      	lsls	r3, r1, #9
 8003966:	4621      	mov	r1, r4
 8003968:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800396c:	4621      	mov	r1, r4
 800396e:	024a      	lsls	r2, r1, #9
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003976:	2200      	movs	r2, #0
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
 800397a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800397c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003980:	f7fc fc86 	bl	8000290 <__aeabi_uldivmod>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4613      	mov	r3, r2
 800398a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800398c:	e058      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398e:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	099b      	lsrs	r3, r3, #6
 8003994:	2200      	movs	r2, #0
 8003996:	4618      	mov	r0, r3
 8003998:	4611      	mov	r1, r2
 800399a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
 80039a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	f04f 0000 	mov.w	r0, #0
 80039b0:	f04f 0100 	mov.w	r1, #0
 80039b4:	0159      	lsls	r1, r3, #5
 80039b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ba:	0150      	lsls	r0, r2, #5
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4641      	mov	r1, r8
 80039c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039c6:	4649      	mov	r1, r9
 80039c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039e0:	ebb2 040a 	subs.w	r4, r2, sl
 80039e4:	eb63 050b 	sbc.w	r5, r3, fp
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	00eb      	lsls	r3, r5, #3
 80039f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f6:	00e2      	lsls	r2, r4, #3
 80039f8:	4614      	mov	r4, r2
 80039fa:	461d      	mov	r5, r3
 80039fc:	4643      	mov	r3, r8
 80039fe:	18e3      	adds	r3, r4, r3
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	464b      	mov	r3, r9
 8003a04:	eb45 0303 	adc.w	r3, r5, r3
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a16:	4629      	mov	r1, r5
 8003a18:	028b      	lsls	r3, r1, #10
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a20:	4621      	mov	r1, r4
 8003a22:	028a      	lsls	r2, r1, #10
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	61fa      	str	r2, [r7, #28]
 8003a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a34:	f7fc fc2c 	bl	8000290 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0c1b      	lsrs	r3, r3, #16
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a5a:	e002      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3750      	adds	r7, #80	; 0x50
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	007a1200 	.word	0x007a1200

08003a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e041      	b.n	8003b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd ff8a 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4610      	mov	r0, r2
 8003abc:	f000 fde2 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e041      	b.n	8003bb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f839 	bl	8003bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3304      	adds	r3, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	4610      	mov	r0, r2
 8003b5a:	f000 fd93 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e022      	b.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x72>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d109      	bne.n	8003c12 <HAL_TIM_PWM_Start_DMA+0x46>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	e015      	b.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x72>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d109      	bne.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x60>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e008      	b.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x72>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
 8003c44:	e171      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d109      	bne.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x94>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e022      	b.n	8003ca6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d109      	bne.n	8003c7a <HAL_TIM_PWM_Start_DMA+0xae>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e015      	b.n	8003ca6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d109      	bne.n	8003c94 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e008      	b.n	8003ca6 <HAL_TIM_PWM_Start_DMA+0xda>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d024      	beq.n	8003cf4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_PWM_Start_DMA+0xee>
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e137      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_PWM_Start_DMA+0xfe>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc8:	e016      	b.n	8003cf8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_PWM_Start_DMA+0x10e>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd8:	e00e      	b.n	8003cf8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_PWM_Start_DMA+0x11e>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce8:	e006      	b.n	8003cf8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cf2:	e001      	b.n	8003cf8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e118      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	f200 80ae 	bhi.w	8003e5c <HAL_TIM_PWM_Start_DMA+0x290>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003e5d 	.word	0x08003e5d
 8003d10:	08003e5d 	.word	0x08003e5d
 8003d14:	08003e5d 	.word	0x08003e5d
 8003d18:	08003d85 	.word	0x08003d85
 8003d1c:	08003e5d 	.word	0x08003e5d
 8003d20:	08003e5d 	.word	0x08003e5d
 8003d24:	08003e5d 	.word	0x08003e5d
 8003d28:	08003dcd 	.word	0x08003dcd
 8003d2c:	08003e5d 	.word	0x08003e5d
 8003d30:	08003e5d 	.word	0x08003e5d
 8003d34:	08003e5d 	.word	0x08003e5d
 8003d38:	08003e15 	.word	0x08003e15
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	4a7c      	ldr	r2, [pc, #496]	; (8003f34 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003d42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	4a7b      	ldr	r2, [pc, #492]	; (8003f38 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	4a7a      	ldr	r2, [pc, #488]	; (8003f3c <HAL_TIM_PWM_Start_DMA+0x370>)
 8003d52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3334      	adds	r3, #52	; 0x34
 8003d60:	461a      	mov	r2, r3
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	f7fe fd9e 	bl	80028a4 <HAL_DMA_Start_IT>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0db      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d80:	60da      	str	r2, [r3, #12]
      break;
 8003d82:	e06e      	b.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	4a6a      	ldr	r2, [pc, #424]	; (8003f34 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	4a69      	ldr	r2, [pc, #420]	; (8003f38 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	4a68      	ldr	r2, [pc, #416]	; (8003f3c <HAL_TIM_PWM_Start_DMA+0x370>)
 8003d9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3338      	adds	r3, #56	; 0x38
 8003da8:	461a      	mov	r2, r3
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	f7fe fd7a 	bl	80028a4 <HAL_DMA_Start_IT>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0b7      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc8:	60da      	str	r2, [r3, #12]
      break;
 8003dca:	e04a      	b.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	4a58      	ldr	r2, [pc, #352]	; (8003f34 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003dd2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	4a57      	ldr	r2, [pc, #348]	; (8003f38 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a56      	ldr	r2, [pc, #344]	; (8003f3c <HAL_TIM_PWM_Start_DMA+0x370>)
 8003de2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	333c      	adds	r3, #60	; 0x3c
 8003df0:	461a      	mov	r2, r3
 8003df2:	887b      	ldrh	r3, [r7, #2]
 8003df4:	f7fe fd56 	bl	80028a4 <HAL_DMA_Start_IT>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e093      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e10:	60da      	str	r2, [r3, #12]
      break;
 8003e12:	e026      	b.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4a46      	ldr	r2, [pc, #280]	; (8003f34 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003e1a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	4a45      	ldr	r2, [pc, #276]	; (8003f38 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	4a44      	ldr	r2, [pc, #272]	; (8003f3c <HAL_TIM_PWM_Start_DMA+0x370>)
 8003e2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3340      	adds	r3, #64	; 0x40
 8003e38:	461a      	mov	r2, r3
 8003e3a:	887b      	ldrh	r3, [r7, #2]
 8003e3c:	f7fe fd32 	bl	80028a4 <HAL_DMA_Start_IT>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e06f      	b.n	8003f2a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e58:	60da      	str	r2, [r3, #12]
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e60:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d15f      	bne.n	8003f28 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fef1 	bl	8004c58 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a31      	ldr	r2, [pc, #196]	; (8003f40 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIM_PWM_Start_DMA+0x2be>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2f      	ldr	r2, [pc, #188]	; (8003f44 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <HAL_TIM_PWM_Start_DMA+0x380>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1b      	ldr	r2, [pc, #108]	; (8003f54 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d111      	bne.n	8003f18 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b06      	cmp	r3, #6
 8003f04:	d010      	beq.n	8003f28 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	e007      	b.n	8003f28 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08004575 	.word	0x08004575
 8003f38:	0800461d 	.word	0x0800461d
 8003f3c:	080044e3 	.word	0x080044e3
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40010400 	.word	0x40010400
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d122      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0202 	mvn.w	r2, #2
 8003f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa77 	bl	8004492 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa69 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fc fe01 	bl	8000bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d122      	bne.n	800400c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11b      	bne.n	800400c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0204 	mvn.w	r2, #4
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa4d 	bl	8004492 <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa3f 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7fc fdd7 	bl	8000bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b08      	cmp	r3, #8
 8004018:	d122      	bne.n	8004060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d11b      	bne.n	8004060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0208 	mvn.w	r2, #8
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2204      	movs	r2, #4
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa23 	bl	8004492 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa15 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7fc fdad 	bl	8000bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b10      	cmp	r3, #16
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0210 	mvn.w	r2, #16
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2208      	movs	r2, #8
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9f9 	bl	8004492 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9eb 	bl	800447e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7fc fd83 	bl	8000bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10e      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d107      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0201 	mvn.w	r2, #1
 80040d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fb66 	bl	80017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d10e      	bne.n	800410c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f8:	2b80      	cmp	r3, #128	; 0x80
 80040fa:	d107      	bne.n	800410c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fe52 	bl	8004db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d10e      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d107      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9c1 	bl	80044ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b20      	cmp	r3, #32
 8004144:	d10e      	bne.n	8004164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b20      	cmp	r3, #32
 8004152:	d107      	bne.n	8004164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0220 	mvn.w	r2, #32
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fe1c 	bl	8004d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004186:	2302      	movs	r3, #2
 8004188:	e0ae      	b.n	80042e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	f200 809f 	bhi.w	80042d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080042d9 	.word	0x080042d9
 80041a8:	080042d9 	.word	0x080042d9
 80041ac:	080042d9 	.word	0x080042d9
 80041b0:	08004215 	.word	0x08004215
 80041b4:	080042d9 	.word	0x080042d9
 80041b8:	080042d9 	.word	0x080042d9
 80041bc:	080042d9 	.word	0x080042d9
 80041c0:	08004257 	.word	0x08004257
 80041c4:	080042d9 	.word	0x080042d9
 80041c8:	080042d9 	.word	0x080042d9
 80041cc:	080042d9 	.word	0x080042d9
 80041d0:	08004297 	.word	0x08004297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 faf2 	bl	80047c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0208 	orr.w	r2, r2, #8
 80041ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0204 	bic.w	r2, r2, #4
 80041fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	619a      	str	r2, [r3, #24]
      break;
 8004212:	e064      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fb42 	bl	80048a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6999      	ldr	r1, [r3, #24]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	021a      	lsls	r2, r3, #8
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	619a      	str	r2, [r3, #24]
      break;
 8004254:	e043      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fb97 	bl	8004990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0204 	bic.w	r2, r2, #4
 8004280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69d9      	ldr	r1, [r3, #28]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	61da      	str	r2, [r3, #28]
      break;
 8004294:	e023      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fbeb 	bl	8004a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69da      	ldr	r2, [r3, #28]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69d9      	ldr	r1, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	61da      	str	r2, [r3, #28]
      break;
 80042d6:	e002      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
      break;
 80042dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIM_ConfigClockSource+0x1c>
 8004308:	2302      	movs	r3, #2
 800430a:	e0b4      	b.n	8004476 <HAL_TIM_ConfigClockSource+0x186>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004344:	d03e      	beq.n	80043c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434a:	f200 8087 	bhi.w	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800434e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004352:	f000 8086 	beq.w	8004462 <HAL_TIM_ConfigClockSource+0x172>
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d87f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b70      	cmp	r3, #112	; 0x70
 800435e:	d01a      	beq.n	8004396 <HAL_TIM_ConfigClockSource+0xa6>
 8004360:	2b70      	cmp	r3, #112	; 0x70
 8004362:	d87b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b60      	cmp	r3, #96	; 0x60
 8004366:	d050      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x11a>
 8004368:	2b60      	cmp	r3, #96	; 0x60
 800436a:	d877      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b50      	cmp	r3, #80	; 0x50
 800436e:	d03c      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0xfa>
 8004370:	2b50      	cmp	r3, #80	; 0x50
 8004372:	d873      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d058      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x13a>
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d86f      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800437c:	2b30      	cmp	r3, #48	; 0x30
 800437e:	d064      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004380:	2b30      	cmp	r3, #48	; 0x30
 8004382:	d86b      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b20      	cmp	r3, #32
 8004386:	d060      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004388:	2b20      	cmp	r3, #32
 800438a:	d867      	bhi.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d05c      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004390:	2b10      	cmp	r3, #16
 8004392:	d05a      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x15a>
 8004394:	e062      	b.n	800445c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6899      	ldr	r1, [r3, #8]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f000 fc37 	bl	8004c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
      break;
 80043c2:	e04f      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6899      	ldr	r1, [r3, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f000 fc20 	bl	8004c18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e6:	609a      	str	r2, [r3, #8]
      break;
 80043e8:	e03c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 fb94 	bl	8004b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2150      	movs	r1, #80	; 0x50
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fbed 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 8004408:	e02c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	461a      	mov	r2, r3
 8004418:	f000 fbb3 	bl	8004b82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2160      	movs	r1, #96	; 0x60
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fbdd 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 8004428:	e01c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	461a      	mov	r2, r3
 8004438:	f000 fb74 	bl	8004b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2140      	movs	r1, #64	; 0x40
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fbcd 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 8004448:	e00c      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f000 fbc4 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 800445a:	e003      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      break;
 8004460:	e000      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004474:	7bfb      	ldrb	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d107      	bne.n	800450a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004508:	e02a      	b.n	8004560 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2202      	movs	r2, #2
 8004518:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004522:	e01d      	b.n	8004560 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d107      	bne.n	800453e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2204      	movs	r2, #4
 8004532:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800453c:	e010      	b.n	8004560 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d107      	bne.n	8004558 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2208      	movs	r2, #8
 800454c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004556:	e003      	b.n	8004560 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff ffb4 	bl	80044ce <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d10b      	bne.n	80045a4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d136      	bne.n	8004608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a2:	e031      	b.n	8004608 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d10b      	bne.n	80045c6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2202      	movs	r2, #2
 80045b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d125      	bne.n	8004608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c4:	e020      	b.n	8004608 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d10b      	bne.n	80045e8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2204      	movs	r2, #4
 80045d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d114      	bne.n	8004608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e6:	e00f      	b.n	8004608 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d10a      	bne.n	8004608 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2208      	movs	r2, #8
 80045f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d103      	bne.n	8004608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7fc fad3 	bl	8000bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
}
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d103      	bne.n	800463c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	771a      	strb	r2, [r3, #28]
 800463a:	e019      	b.n	8004670 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d103      	bne.n	800464e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2202      	movs	r2, #2
 800464a:	771a      	strb	r2, [r3, #28]
 800464c:	e010      	b.n	8004670 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	429a      	cmp	r2, r3
 8004656:	d103      	bne.n	8004660 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2204      	movs	r2, #4
 800465c:	771a      	strb	r2, [r3, #28]
 800465e:	e007      	b.n	8004670 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	429a      	cmp	r2, r3
 8004668:	d102      	bne.n	8004670 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2208      	movs	r2, #8
 800466e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7ff ff18 	bl	80044a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a40      	ldr	r2, [pc, #256]	; (8004798 <TIM_Base_SetConfig+0x114>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a2:	d00f      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3d      	ldr	r2, [pc, #244]	; (800479c <TIM_Base_SetConfig+0x118>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3c      	ldr	r2, [pc, #240]	; (80047a0 <TIM_Base_SetConfig+0x11c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a3b      	ldr	r2, [pc, #236]	; (80047a4 <TIM_Base_SetConfig+0x120>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a3a      	ldr	r2, [pc, #232]	; (80047a8 <TIM_Base_SetConfig+0x124>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <TIM_Base_SetConfig+0x114>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d02b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e4:	d027      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2c      	ldr	r2, [pc, #176]	; (800479c <TIM_Base_SetConfig+0x118>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d023      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <TIM_Base_SetConfig+0x11c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01f      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <TIM_Base_SetConfig+0x120>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <TIM_Base_SetConfig+0x124>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d017      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a28      	ldr	r2, [pc, #160]	; (80047ac <TIM_Base_SetConfig+0x128>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a27      	ldr	r2, [pc, #156]	; (80047b0 <TIM_Base_SetConfig+0x12c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <TIM_Base_SetConfig+0x130>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <TIM_Base_SetConfig+0x134>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a24      	ldr	r2, [pc, #144]	; (80047bc <TIM_Base_SetConfig+0x138>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <TIM_Base_SetConfig+0x13c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d108      	bne.n	8004748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <TIM_Base_SetConfig+0x114>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0xf8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <TIM_Base_SetConfig+0x124>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d103      	bne.n	8004784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	615a      	str	r2, [r3, #20]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40010400 	.word	0x40010400
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40014400 	.word	0x40014400
 80047b4:	40014800 	.word	0x40014800
 80047b8:	40001800 	.word	0x40001800
 80047bc:	40001c00 	.word	0x40001c00
 80047c0:	40002000 	.word	0x40002000

080047c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f023 0201 	bic.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f023 0302 	bic.w	r3, r3, #2
 800480c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a20      	ldr	r2, [pc, #128]	; (800489c <TIM_OC1_SetConfig+0xd8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_OC1_SetConfig+0x64>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <TIM_OC1_SetConfig+0xdc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d10c      	bne.n	8004842 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 0308 	bic.w	r3, r3, #8
 800482e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f023 0304 	bic.w	r3, r3, #4
 8004840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a15      	ldr	r2, [pc, #84]	; (800489c <TIM_OC1_SetConfig+0xd8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_OC1_SetConfig+0x8e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <TIM_OC1_SetConfig+0xdc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d111      	bne.n	8004876 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40010000 	.word	0x40010000
 80048a0:	40010400 	.word	0x40010400

080048a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0210 	bic.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f023 0320 	bic.w	r3, r3, #32
 80048ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a22      	ldr	r2, [pc, #136]	; (8004988 <TIM_OC2_SetConfig+0xe4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_OC2_SetConfig+0x68>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a21      	ldr	r2, [pc, #132]	; (800498c <TIM_OC2_SetConfig+0xe8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d10d      	bne.n	8004928 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a17      	ldr	r2, [pc, #92]	; (8004988 <TIM_OC2_SetConfig+0xe4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_OC2_SetConfig+0x94>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a16      	ldr	r2, [pc, #88]	; (800498c <TIM_OC2_SetConfig+0xe8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d113      	bne.n	8004960 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800493e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40010000 	.word	0x40010000
 800498c:	40010400 	.word	0x40010400

08004990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a21      	ldr	r2, [pc, #132]	; (8004a70 <TIM_OC3_SetConfig+0xe0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <TIM_OC3_SetConfig+0x66>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a20      	ldr	r2, [pc, #128]	; (8004a74 <TIM_OC3_SetConfig+0xe4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10d      	bne.n	8004a12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <TIM_OC3_SetConfig+0xe0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_OC3_SetConfig+0x92>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a15      	ldr	r2, [pc, #84]	; (8004a74 <TIM_OC3_SetConfig+0xe4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d113      	bne.n	8004a4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40010400 	.word	0x40010400

08004a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	031b      	lsls	r3, r3, #12
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <TIM_OC4_SetConfig+0xa4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_OC4_SetConfig+0x68>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a11      	ldr	r2, [pc, #68]	; (8004b20 <TIM_OC4_SetConfig+0xa8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d109      	bne.n	8004af4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	019b      	lsls	r3, r3, #6
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	40010400 	.word	0x40010400

08004b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 030a 	bic.w	r3, r3, #10
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b087      	sub	sp, #28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f023 0210 	bic.w	r2, r3, #16
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	031b      	lsls	r3, r3, #12
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f043 0307 	orr.w	r3, r3, #7
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	021a      	lsls	r2, r3, #8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1a      	ldr	r2, [r3, #32]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1a      	ldr	r2, [r3, #32]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e05a      	b.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a21      	ldr	r2, [pc, #132]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d022      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d08:	d01d      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d018      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1a      	ldr	r2, [pc, #104]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00e      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a18      	ldr	r2, [pc, #96]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a17      	ldr	r2, [pc, #92]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d10c      	bne.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800
 8004d8c:	40000c00 	.word	0x40000c00
 8004d90:	40010400 	.word	0x40010400
 8004d94:	40014000 	.word	0x40014000
 8004d98:	40001800 	.word	0x40001800

08004d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <__errno>:
 8004dc4:	4b01      	ldr	r3, [pc, #4]	; (8004dcc <__errno+0x8>)
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	2000000c 	.word	0x2000000c

08004dd0 <__libc_init_array>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	4d0d      	ldr	r5, [pc, #52]	; (8004e08 <__libc_init_array+0x38>)
 8004dd4:	4c0d      	ldr	r4, [pc, #52]	; (8004e0c <__libc_init_array+0x3c>)
 8004dd6:	1b64      	subs	r4, r4, r5
 8004dd8:	10a4      	asrs	r4, r4, #2
 8004dda:	2600      	movs	r6, #0
 8004ddc:	42a6      	cmp	r6, r4
 8004dde:	d109      	bne.n	8004df4 <__libc_init_array+0x24>
 8004de0:	4d0b      	ldr	r5, [pc, #44]	; (8004e10 <__libc_init_array+0x40>)
 8004de2:	4c0c      	ldr	r4, [pc, #48]	; (8004e14 <__libc_init_array+0x44>)
 8004de4:	f001 f858 	bl	8005e98 <_init>
 8004de8:	1b64      	subs	r4, r4, r5
 8004dea:	10a4      	asrs	r4, r4, #2
 8004dec:	2600      	movs	r6, #0
 8004dee:	42a6      	cmp	r6, r4
 8004df0:	d105      	bne.n	8004dfe <__libc_init_array+0x2e>
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df8:	4798      	blx	r3
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7ee      	b.n	8004ddc <__libc_init_array+0xc>
 8004dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e02:	4798      	blx	r3
 8004e04:	3601      	adds	r6, #1
 8004e06:	e7f2      	b.n	8004dee <__libc_init_array+0x1e>
 8004e08:	08006018 	.word	0x08006018
 8004e0c:	08006018 	.word	0x08006018
 8004e10:	08006018 	.word	0x08006018
 8004e14:	0800601c 	.word	0x0800601c

08004e18 <memset>:
 8004e18:	4402      	add	r2, r0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d100      	bne.n	8004e22 <memset+0xa>
 8004e20:	4770      	bx	lr
 8004e22:	f803 1b01 	strb.w	r1, [r3], #1
 8004e26:	e7f9      	b.n	8004e1c <memset+0x4>

08004e28 <rand>:
 8004e28:	4b16      	ldr	r3, [pc, #88]	; (8004e84 <rand+0x5c>)
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	681c      	ldr	r4, [r3, #0]
 8004e2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e30:	b9b3      	cbnz	r3, 8004e60 <rand+0x38>
 8004e32:	2018      	movs	r0, #24
 8004e34:	f000 f866 	bl	8004f04 <malloc>
 8004e38:	63a0      	str	r0, [r4, #56]	; 0x38
 8004e3a:	b928      	cbnz	r0, 8004e48 <rand+0x20>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <rand+0x60>)
 8004e40:	4812      	ldr	r0, [pc, #72]	; (8004e8c <rand+0x64>)
 8004e42:	214e      	movs	r1, #78	; 0x4e
 8004e44:	f000 f82e 	bl	8004ea4 <__assert_func>
 8004e48:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <rand+0x68>)
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <rand+0x6c>)
 8004e4c:	e9c0 2300 	strd	r2, r3, [r0]
 8004e50:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <rand+0x70>)
 8004e52:	6083      	str	r3, [r0, #8]
 8004e54:	230b      	movs	r3, #11
 8004e56:	8183      	strh	r3, [r0, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004e60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004e62:	4a0e      	ldr	r2, [pc, #56]	; (8004e9c <rand+0x74>)
 8004e64:	6920      	ldr	r0, [r4, #16]
 8004e66:	6963      	ldr	r3, [r4, #20]
 8004e68:	490d      	ldr	r1, [pc, #52]	; (8004ea0 <rand+0x78>)
 8004e6a:	4342      	muls	r2, r0
 8004e6c:	fb01 2203 	mla	r2, r1, r3, r2
 8004e70:	fba0 0101 	umull	r0, r1, r0, r1
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	eb42 0001 	adc.w	r0, r2, r1
 8004e7a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004e7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004e82:	bd10      	pop	{r4, pc}
 8004e84:	2000000c 	.word	0x2000000c
 8004e88:	08005ecc 	.word	0x08005ecc
 8004e8c:	08005ee3 	.word	0x08005ee3
 8004e90:	abcd330e 	.word	0xabcd330e
 8004e94:	e66d1234 	.word	0xe66d1234
 8004e98:	0005deec 	.word	0x0005deec
 8004e9c:	5851f42d 	.word	0x5851f42d
 8004ea0:	4c957f2d 	.word	0x4c957f2d

08004ea4 <__assert_func>:
 8004ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ea6:	4614      	mov	r4, r2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <__assert_func+0x2c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4605      	mov	r5, r0
 8004eb0:	68d8      	ldr	r0, [r3, #12]
 8004eb2:	b14c      	cbz	r4, 8004ec8 <__assert_func+0x24>
 8004eb4:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <__assert_func+0x30>)
 8004eb6:	9100      	str	r1, [sp, #0]
 8004eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ebc:	4906      	ldr	r1, [pc, #24]	; (8004ed8 <__assert_func+0x34>)
 8004ebe:	462b      	mov	r3, r5
 8004ec0:	f000 f80e 	bl	8004ee0 <fiprintf>
 8004ec4:	f000 fcc4 	bl	8005850 <abort>
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <__assert_func+0x38>)
 8004eca:	461c      	mov	r4, r3
 8004ecc:	e7f3      	b.n	8004eb6 <__assert_func+0x12>
 8004ece:	bf00      	nop
 8004ed0:	2000000c 	.word	0x2000000c
 8004ed4:	08005f3e 	.word	0x08005f3e
 8004ed8:	08005f4b 	.word	0x08005f4b
 8004edc:	08005f79 	.word	0x08005f79

08004ee0 <fiprintf>:
 8004ee0:	b40e      	push	{r1, r2, r3}
 8004ee2:	b503      	push	{r0, r1, lr}
 8004ee4:	4601      	mov	r1, r0
 8004ee6:	ab03      	add	r3, sp, #12
 8004ee8:	4805      	ldr	r0, [pc, #20]	; (8004f00 <fiprintf+0x20>)
 8004eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eee:	6800      	ldr	r0, [r0, #0]
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	f000 f919 	bl	8005128 <_vfiprintf_r>
 8004ef6:	b002      	add	sp, #8
 8004ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004efc:	b003      	add	sp, #12
 8004efe:	4770      	bx	lr
 8004f00:	2000000c 	.word	0x2000000c

08004f04 <malloc>:
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <malloc+0xc>)
 8004f06:	4601      	mov	r1, r0
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	f000 b86f 	b.w	8004fec <_malloc_r>
 8004f0e:	bf00      	nop
 8004f10:	2000000c 	.word	0x2000000c

08004f14 <_free_r>:
 8004f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f16:	2900      	cmp	r1, #0
 8004f18:	d044      	beq.n	8004fa4 <_free_r+0x90>
 8004f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f1e:	9001      	str	r0, [sp, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f1a1 0404 	sub.w	r4, r1, #4
 8004f26:	bfb8      	it	lt
 8004f28:	18e4      	addlt	r4, r4, r3
 8004f2a:	f000 feb9 	bl	8005ca0 <__malloc_lock>
 8004f2e:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <_free_r+0x94>)
 8004f30:	9801      	ldr	r0, [sp, #4]
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	b933      	cbnz	r3, 8004f44 <_free_r+0x30>
 8004f36:	6063      	str	r3, [r4, #4]
 8004f38:	6014      	str	r4, [r2, #0]
 8004f3a:	b003      	add	sp, #12
 8004f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f40:	f000 beb4 	b.w	8005cac <__malloc_unlock>
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d908      	bls.n	8004f5a <_free_r+0x46>
 8004f48:	6825      	ldr	r5, [r4, #0]
 8004f4a:	1961      	adds	r1, r4, r5
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	bf01      	itttt	eq
 8004f50:	6819      	ldreq	r1, [r3, #0]
 8004f52:	685b      	ldreq	r3, [r3, #4]
 8004f54:	1949      	addeq	r1, r1, r5
 8004f56:	6021      	streq	r1, [r4, #0]
 8004f58:	e7ed      	b.n	8004f36 <_free_r+0x22>
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	b10b      	cbz	r3, 8004f64 <_free_r+0x50>
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	d9fa      	bls.n	8004f5a <_free_r+0x46>
 8004f64:	6811      	ldr	r1, [r2, #0]
 8004f66:	1855      	adds	r5, r2, r1
 8004f68:	42a5      	cmp	r5, r4
 8004f6a:	d10b      	bne.n	8004f84 <_free_r+0x70>
 8004f6c:	6824      	ldr	r4, [r4, #0]
 8004f6e:	4421      	add	r1, r4
 8004f70:	1854      	adds	r4, r2, r1
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	6011      	str	r1, [r2, #0]
 8004f76:	d1e0      	bne.n	8004f3a <_free_r+0x26>
 8004f78:	681c      	ldr	r4, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	6053      	str	r3, [r2, #4]
 8004f7e:	4421      	add	r1, r4
 8004f80:	6011      	str	r1, [r2, #0]
 8004f82:	e7da      	b.n	8004f3a <_free_r+0x26>
 8004f84:	d902      	bls.n	8004f8c <_free_r+0x78>
 8004f86:	230c      	movs	r3, #12
 8004f88:	6003      	str	r3, [r0, #0]
 8004f8a:	e7d6      	b.n	8004f3a <_free_r+0x26>
 8004f8c:	6825      	ldr	r5, [r4, #0]
 8004f8e:	1961      	adds	r1, r4, r5
 8004f90:	428b      	cmp	r3, r1
 8004f92:	bf04      	itt	eq
 8004f94:	6819      	ldreq	r1, [r3, #0]
 8004f96:	685b      	ldreq	r3, [r3, #4]
 8004f98:	6063      	str	r3, [r4, #4]
 8004f9a:	bf04      	itt	eq
 8004f9c:	1949      	addeq	r1, r1, r5
 8004f9e:	6021      	streq	r1, [r4, #0]
 8004fa0:	6054      	str	r4, [r2, #4]
 8004fa2:	e7ca      	b.n	8004f3a <_free_r+0x26>
 8004fa4:	b003      	add	sp, #12
 8004fa6:	bd30      	pop	{r4, r5, pc}
 8004fa8:	20000418 	.word	0x20000418

08004fac <sbrk_aligned>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4e0e      	ldr	r6, [pc, #56]	; (8004fe8 <sbrk_aligned+0x3c>)
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	6831      	ldr	r1, [r6, #0]
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	b911      	cbnz	r1, 8004fbe <sbrk_aligned+0x12>
 8004fb8:	f000 fb7a 	bl	80056b0 <_sbrk_r>
 8004fbc:	6030      	str	r0, [r6, #0]
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 fb75 	bl	80056b0 <_sbrk_r>
 8004fc6:	1c43      	adds	r3, r0, #1
 8004fc8:	d00a      	beq.n	8004fe0 <sbrk_aligned+0x34>
 8004fca:	1cc4      	adds	r4, r0, #3
 8004fcc:	f024 0403 	bic.w	r4, r4, #3
 8004fd0:	42a0      	cmp	r0, r4
 8004fd2:	d007      	beq.n	8004fe4 <sbrk_aligned+0x38>
 8004fd4:	1a21      	subs	r1, r4, r0
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 fb6a 	bl	80056b0 <_sbrk_r>
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d101      	bne.n	8004fe4 <sbrk_aligned+0x38>
 8004fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	2000041c 	.word	0x2000041c

08004fec <_malloc_r>:
 8004fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff0:	1ccd      	adds	r5, r1, #3
 8004ff2:	f025 0503 	bic.w	r5, r5, #3
 8004ff6:	3508      	adds	r5, #8
 8004ff8:	2d0c      	cmp	r5, #12
 8004ffa:	bf38      	it	cc
 8004ffc:	250c      	movcc	r5, #12
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	4607      	mov	r7, r0
 8005002:	db01      	blt.n	8005008 <_malloc_r+0x1c>
 8005004:	42a9      	cmp	r1, r5
 8005006:	d905      	bls.n	8005014 <_malloc_r+0x28>
 8005008:	230c      	movs	r3, #12
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	2600      	movs	r6, #0
 800500e:	4630      	mov	r0, r6
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005014:	4e2e      	ldr	r6, [pc, #184]	; (80050d0 <_malloc_r+0xe4>)
 8005016:	f000 fe43 	bl	8005ca0 <__malloc_lock>
 800501a:	6833      	ldr	r3, [r6, #0]
 800501c:	461c      	mov	r4, r3
 800501e:	bb34      	cbnz	r4, 800506e <_malloc_r+0x82>
 8005020:	4629      	mov	r1, r5
 8005022:	4638      	mov	r0, r7
 8005024:	f7ff ffc2 	bl	8004fac <sbrk_aligned>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	4604      	mov	r4, r0
 800502c:	d14d      	bne.n	80050ca <_malloc_r+0xde>
 800502e:	6834      	ldr	r4, [r6, #0]
 8005030:	4626      	mov	r6, r4
 8005032:	2e00      	cmp	r6, #0
 8005034:	d140      	bne.n	80050b8 <_malloc_r+0xcc>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	4631      	mov	r1, r6
 800503a:	4638      	mov	r0, r7
 800503c:	eb04 0803 	add.w	r8, r4, r3
 8005040:	f000 fb36 	bl	80056b0 <_sbrk_r>
 8005044:	4580      	cmp	r8, r0
 8005046:	d13a      	bne.n	80050be <_malloc_r+0xd2>
 8005048:	6821      	ldr	r1, [r4, #0]
 800504a:	3503      	adds	r5, #3
 800504c:	1a6d      	subs	r5, r5, r1
 800504e:	f025 0503 	bic.w	r5, r5, #3
 8005052:	3508      	adds	r5, #8
 8005054:	2d0c      	cmp	r5, #12
 8005056:	bf38      	it	cc
 8005058:	250c      	movcc	r5, #12
 800505a:	4629      	mov	r1, r5
 800505c:	4638      	mov	r0, r7
 800505e:	f7ff ffa5 	bl	8004fac <sbrk_aligned>
 8005062:	3001      	adds	r0, #1
 8005064:	d02b      	beq.n	80050be <_malloc_r+0xd2>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	442b      	add	r3, r5
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	e00e      	b.n	800508c <_malloc_r+0xa0>
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	1b52      	subs	r2, r2, r5
 8005072:	d41e      	bmi.n	80050b2 <_malloc_r+0xc6>
 8005074:	2a0b      	cmp	r2, #11
 8005076:	d916      	bls.n	80050a6 <_malloc_r+0xba>
 8005078:	1961      	adds	r1, r4, r5
 800507a:	42a3      	cmp	r3, r4
 800507c:	6025      	str	r5, [r4, #0]
 800507e:	bf18      	it	ne
 8005080:	6059      	strne	r1, [r3, #4]
 8005082:	6863      	ldr	r3, [r4, #4]
 8005084:	bf08      	it	eq
 8005086:	6031      	streq	r1, [r6, #0]
 8005088:	5162      	str	r2, [r4, r5]
 800508a:	604b      	str	r3, [r1, #4]
 800508c:	4638      	mov	r0, r7
 800508e:	f104 060b 	add.w	r6, r4, #11
 8005092:	f000 fe0b 	bl	8005cac <__malloc_unlock>
 8005096:	f026 0607 	bic.w	r6, r6, #7
 800509a:	1d23      	adds	r3, r4, #4
 800509c:	1af2      	subs	r2, r6, r3
 800509e:	d0b6      	beq.n	800500e <_malloc_r+0x22>
 80050a0:	1b9b      	subs	r3, r3, r6
 80050a2:	50a3      	str	r3, [r4, r2]
 80050a4:	e7b3      	b.n	800500e <_malloc_r+0x22>
 80050a6:	6862      	ldr	r2, [r4, #4]
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	bf0c      	ite	eq
 80050ac:	6032      	streq	r2, [r6, #0]
 80050ae:	605a      	strne	r2, [r3, #4]
 80050b0:	e7ec      	b.n	800508c <_malloc_r+0xa0>
 80050b2:	4623      	mov	r3, r4
 80050b4:	6864      	ldr	r4, [r4, #4]
 80050b6:	e7b2      	b.n	800501e <_malloc_r+0x32>
 80050b8:	4634      	mov	r4, r6
 80050ba:	6876      	ldr	r6, [r6, #4]
 80050bc:	e7b9      	b.n	8005032 <_malloc_r+0x46>
 80050be:	230c      	movs	r3, #12
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	4638      	mov	r0, r7
 80050c4:	f000 fdf2 	bl	8005cac <__malloc_unlock>
 80050c8:	e7a1      	b.n	800500e <_malloc_r+0x22>
 80050ca:	6025      	str	r5, [r4, #0]
 80050cc:	e7de      	b.n	800508c <_malloc_r+0xa0>
 80050ce:	bf00      	nop
 80050d0:	20000418 	.word	0x20000418

080050d4 <__sfputc_r>:
 80050d4:	6893      	ldr	r3, [r2, #8]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	b410      	push	{r4}
 80050dc:	6093      	str	r3, [r2, #8]
 80050de:	da08      	bge.n	80050f2 <__sfputc_r+0x1e>
 80050e0:	6994      	ldr	r4, [r2, #24]
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	db01      	blt.n	80050ea <__sfputc_r+0x16>
 80050e6:	290a      	cmp	r1, #10
 80050e8:	d103      	bne.n	80050f2 <__sfputc_r+0x1e>
 80050ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ee:	f000 baef 	b.w	80056d0 <__swbuf_r>
 80050f2:	6813      	ldr	r3, [r2, #0]
 80050f4:	1c58      	adds	r0, r3, #1
 80050f6:	6010      	str	r0, [r2, #0]
 80050f8:	7019      	strb	r1, [r3, #0]
 80050fa:	4608      	mov	r0, r1
 80050fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005100:	4770      	bx	lr

08005102 <__sfputs_r>:
 8005102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005104:	4606      	mov	r6, r0
 8005106:	460f      	mov	r7, r1
 8005108:	4614      	mov	r4, r2
 800510a:	18d5      	adds	r5, r2, r3
 800510c:	42ac      	cmp	r4, r5
 800510e:	d101      	bne.n	8005114 <__sfputs_r+0x12>
 8005110:	2000      	movs	r0, #0
 8005112:	e007      	b.n	8005124 <__sfputs_r+0x22>
 8005114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005118:	463a      	mov	r2, r7
 800511a:	4630      	mov	r0, r6
 800511c:	f7ff ffda 	bl	80050d4 <__sfputc_r>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d1f3      	bne.n	800510c <__sfputs_r+0xa>
 8005124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005128 <_vfiprintf_r>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	460d      	mov	r5, r1
 800512e:	b09d      	sub	sp, #116	; 0x74
 8005130:	4614      	mov	r4, r2
 8005132:	4698      	mov	r8, r3
 8005134:	4606      	mov	r6, r0
 8005136:	b118      	cbz	r0, 8005140 <_vfiprintf_r+0x18>
 8005138:	6983      	ldr	r3, [r0, #24]
 800513a:	b90b      	cbnz	r3, 8005140 <_vfiprintf_r+0x18>
 800513c:	f000 fcaa 	bl	8005a94 <__sinit>
 8005140:	4b89      	ldr	r3, [pc, #548]	; (8005368 <_vfiprintf_r+0x240>)
 8005142:	429d      	cmp	r5, r3
 8005144:	d11b      	bne.n	800517e <_vfiprintf_r+0x56>
 8005146:	6875      	ldr	r5, [r6, #4]
 8005148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800514a:	07d9      	lsls	r1, r3, #31
 800514c:	d405      	bmi.n	800515a <_vfiprintf_r+0x32>
 800514e:	89ab      	ldrh	r3, [r5, #12]
 8005150:	059a      	lsls	r2, r3, #22
 8005152:	d402      	bmi.n	800515a <_vfiprintf_r+0x32>
 8005154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005156:	f000 fd3b 	bl	8005bd0 <__retarget_lock_acquire_recursive>
 800515a:	89ab      	ldrh	r3, [r5, #12]
 800515c:	071b      	lsls	r3, r3, #28
 800515e:	d501      	bpl.n	8005164 <_vfiprintf_r+0x3c>
 8005160:	692b      	ldr	r3, [r5, #16]
 8005162:	b9eb      	cbnz	r3, 80051a0 <_vfiprintf_r+0x78>
 8005164:	4629      	mov	r1, r5
 8005166:	4630      	mov	r0, r6
 8005168:	f000 fb04 	bl	8005774 <__swsetup_r>
 800516c:	b1c0      	cbz	r0, 80051a0 <_vfiprintf_r+0x78>
 800516e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005170:	07dc      	lsls	r4, r3, #31
 8005172:	d50e      	bpl.n	8005192 <_vfiprintf_r+0x6a>
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	b01d      	add	sp, #116	; 0x74
 800517a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517e:	4b7b      	ldr	r3, [pc, #492]	; (800536c <_vfiprintf_r+0x244>)
 8005180:	429d      	cmp	r5, r3
 8005182:	d101      	bne.n	8005188 <_vfiprintf_r+0x60>
 8005184:	68b5      	ldr	r5, [r6, #8]
 8005186:	e7df      	b.n	8005148 <_vfiprintf_r+0x20>
 8005188:	4b79      	ldr	r3, [pc, #484]	; (8005370 <_vfiprintf_r+0x248>)
 800518a:	429d      	cmp	r5, r3
 800518c:	bf08      	it	eq
 800518e:	68f5      	ldreq	r5, [r6, #12]
 8005190:	e7da      	b.n	8005148 <_vfiprintf_r+0x20>
 8005192:	89ab      	ldrh	r3, [r5, #12]
 8005194:	0598      	lsls	r0, r3, #22
 8005196:	d4ed      	bmi.n	8005174 <_vfiprintf_r+0x4c>
 8005198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800519a:	f000 fd1a 	bl	8005bd2 <__retarget_lock_release_recursive>
 800519e:	e7e9      	b.n	8005174 <_vfiprintf_r+0x4c>
 80051a0:	2300      	movs	r3, #0
 80051a2:	9309      	str	r3, [sp, #36]	; 0x24
 80051a4:	2320      	movs	r3, #32
 80051a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ae:	2330      	movs	r3, #48	; 0x30
 80051b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005374 <_vfiprintf_r+0x24c>
 80051b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051b8:	f04f 0901 	mov.w	r9, #1
 80051bc:	4623      	mov	r3, r4
 80051be:	469a      	mov	sl, r3
 80051c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051c4:	b10a      	cbz	r2, 80051ca <_vfiprintf_r+0xa2>
 80051c6:	2a25      	cmp	r2, #37	; 0x25
 80051c8:	d1f9      	bne.n	80051be <_vfiprintf_r+0x96>
 80051ca:	ebba 0b04 	subs.w	fp, sl, r4
 80051ce:	d00b      	beq.n	80051e8 <_vfiprintf_r+0xc0>
 80051d0:	465b      	mov	r3, fp
 80051d2:	4622      	mov	r2, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	4630      	mov	r0, r6
 80051d8:	f7ff ff93 	bl	8005102 <__sfputs_r>
 80051dc:	3001      	adds	r0, #1
 80051de:	f000 80aa 	beq.w	8005336 <_vfiprintf_r+0x20e>
 80051e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051e4:	445a      	add	r2, fp
 80051e6:	9209      	str	r2, [sp, #36]	; 0x24
 80051e8:	f89a 3000 	ldrb.w	r3, [sl]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80a2 	beq.w	8005336 <_vfiprintf_r+0x20e>
 80051f2:	2300      	movs	r3, #0
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051fc:	f10a 0a01 	add.w	sl, sl, #1
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	9307      	str	r3, [sp, #28]
 8005204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005208:	931a      	str	r3, [sp, #104]	; 0x68
 800520a:	4654      	mov	r4, sl
 800520c:	2205      	movs	r2, #5
 800520e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005212:	4858      	ldr	r0, [pc, #352]	; (8005374 <_vfiprintf_r+0x24c>)
 8005214:	f7fa ffec 	bl	80001f0 <memchr>
 8005218:	9a04      	ldr	r2, [sp, #16]
 800521a:	b9d8      	cbnz	r0, 8005254 <_vfiprintf_r+0x12c>
 800521c:	06d1      	lsls	r1, r2, #27
 800521e:	bf44      	itt	mi
 8005220:	2320      	movmi	r3, #32
 8005222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005226:	0713      	lsls	r3, r2, #28
 8005228:	bf44      	itt	mi
 800522a:	232b      	movmi	r3, #43	; 0x2b
 800522c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005230:	f89a 3000 	ldrb.w	r3, [sl]
 8005234:	2b2a      	cmp	r3, #42	; 0x2a
 8005236:	d015      	beq.n	8005264 <_vfiprintf_r+0x13c>
 8005238:	9a07      	ldr	r2, [sp, #28]
 800523a:	4654      	mov	r4, sl
 800523c:	2000      	movs	r0, #0
 800523e:	f04f 0c0a 	mov.w	ip, #10
 8005242:	4621      	mov	r1, r4
 8005244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005248:	3b30      	subs	r3, #48	; 0x30
 800524a:	2b09      	cmp	r3, #9
 800524c:	d94e      	bls.n	80052ec <_vfiprintf_r+0x1c4>
 800524e:	b1b0      	cbz	r0, 800527e <_vfiprintf_r+0x156>
 8005250:	9207      	str	r2, [sp, #28]
 8005252:	e014      	b.n	800527e <_vfiprintf_r+0x156>
 8005254:	eba0 0308 	sub.w	r3, r0, r8
 8005258:	fa09 f303 	lsl.w	r3, r9, r3
 800525c:	4313      	orrs	r3, r2
 800525e:	9304      	str	r3, [sp, #16]
 8005260:	46a2      	mov	sl, r4
 8005262:	e7d2      	b.n	800520a <_vfiprintf_r+0xe2>
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	1d19      	adds	r1, r3, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	9103      	str	r1, [sp, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	bfbb      	ittet	lt
 8005270:	425b      	neglt	r3, r3
 8005272:	f042 0202 	orrlt.w	r2, r2, #2
 8005276:	9307      	strge	r3, [sp, #28]
 8005278:	9307      	strlt	r3, [sp, #28]
 800527a:	bfb8      	it	lt
 800527c:	9204      	strlt	r2, [sp, #16]
 800527e:	7823      	ldrb	r3, [r4, #0]
 8005280:	2b2e      	cmp	r3, #46	; 0x2e
 8005282:	d10c      	bne.n	800529e <_vfiprintf_r+0x176>
 8005284:	7863      	ldrb	r3, [r4, #1]
 8005286:	2b2a      	cmp	r3, #42	; 0x2a
 8005288:	d135      	bne.n	80052f6 <_vfiprintf_r+0x1ce>
 800528a:	9b03      	ldr	r3, [sp, #12]
 800528c:	1d1a      	adds	r2, r3, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	9203      	str	r2, [sp, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfb8      	it	lt
 8005296:	f04f 33ff 	movlt.w	r3, #4294967295
 800529a:	3402      	adds	r4, #2
 800529c:	9305      	str	r3, [sp, #20]
 800529e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005384 <_vfiprintf_r+0x25c>
 80052a2:	7821      	ldrb	r1, [r4, #0]
 80052a4:	2203      	movs	r2, #3
 80052a6:	4650      	mov	r0, sl
 80052a8:	f7fa ffa2 	bl	80001f0 <memchr>
 80052ac:	b140      	cbz	r0, 80052c0 <_vfiprintf_r+0x198>
 80052ae:	2340      	movs	r3, #64	; 0x40
 80052b0:	eba0 000a 	sub.w	r0, r0, sl
 80052b4:	fa03 f000 	lsl.w	r0, r3, r0
 80052b8:	9b04      	ldr	r3, [sp, #16]
 80052ba:	4303      	orrs	r3, r0
 80052bc:	3401      	adds	r4, #1
 80052be:	9304      	str	r3, [sp, #16]
 80052c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c4:	482c      	ldr	r0, [pc, #176]	; (8005378 <_vfiprintf_r+0x250>)
 80052c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ca:	2206      	movs	r2, #6
 80052cc:	f7fa ff90 	bl	80001f0 <memchr>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d03f      	beq.n	8005354 <_vfiprintf_r+0x22c>
 80052d4:	4b29      	ldr	r3, [pc, #164]	; (800537c <_vfiprintf_r+0x254>)
 80052d6:	bb1b      	cbnz	r3, 8005320 <_vfiprintf_r+0x1f8>
 80052d8:	9b03      	ldr	r3, [sp, #12]
 80052da:	3307      	adds	r3, #7
 80052dc:	f023 0307 	bic.w	r3, r3, #7
 80052e0:	3308      	adds	r3, #8
 80052e2:	9303      	str	r3, [sp, #12]
 80052e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e6:	443b      	add	r3, r7
 80052e8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ea:	e767      	b.n	80051bc <_vfiprintf_r+0x94>
 80052ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80052f0:	460c      	mov	r4, r1
 80052f2:	2001      	movs	r0, #1
 80052f4:	e7a5      	b.n	8005242 <_vfiprintf_r+0x11a>
 80052f6:	2300      	movs	r3, #0
 80052f8:	3401      	adds	r4, #1
 80052fa:	9305      	str	r3, [sp, #20]
 80052fc:	4619      	mov	r1, r3
 80052fe:	f04f 0c0a 	mov.w	ip, #10
 8005302:	4620      	mov	r0, r4
 8005304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005308:	3a30      	subs	r2, #48	; 0x30
 800530a:	2a09      	cmp	r2, #9
 800530c:	d903      	bls.n	8005316 <_vfiprintf_r+0x1ee>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0c5      	beq.n	800529e <_vfiprintf_r+0x176>
 8005312:	9105      	str	r1, [sp, #20]
 8005314:	e7c3      	b.n	800529e <_vfiprintf_r+0x176>
 8005316:	fb0c 2101 	mla	r1, ip, r1, r2
 800531a:	4604      	mov	r4, r0
 800531c:	2301      	movs	r3, #1
 800531e:	e7f0      	b.n	8005302 <_vfiprintf_r+0x1da>
 8005320:	ab03      	add	r3, sp, #12
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	462a      	mov	r2, r5
 8005326:	4b16      	ldr	r3, [pc, #88]	; (8005380 <_vfiprintf_r+0x258>)
 8005328:	a904      	add	r1, sp, #16
 800532a:	4630      	mov	r0, r6
 800532c:	f3af 8000 	nop.w
 8005330:	4607      	mov	r7, r0
 8005332:	1c78      	adds	r0, r7, #1
 8005334:	d1d6      	bne.n	80052e4 <_vfiprintf_r+0x1bc>
 8005336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005338:	07d9      	lsls	r1, r3, #31
 800533a:	d405      	bmi.n	8005348 <_vfiprintf_r+0x220>
 800533c:	89ab      	ldrh	r3, [r5, #12]
 800533e:	059a      	lsls	r2, r3, #22
 8005340:	d402      	bmi.n	8005348 <_vfiprintf_r+0x220>
 8005342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005344:	f000 fc45 	bl	8005bd2 <__retarget_lock_release_recursive>
 8005348:	89ab      	ldrh	r3, [r5, #12]
 800534a:	065b      	lsls	r3, r3, #25
 800534c:	f53f af12 	bmi.w	8005174 <_vfiprintf_r+0x4c>
 8005350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005352:	e711      	b.n	8005178 <_vfiprintf_r+0x50>
 8005354:	ab03      	add	r3, sp, #12
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	462a      	mov	r2, r5
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <_vfiprintf_r+0x258>)
 800535c:	a904      	add	r1, sp, #16
 800535e:	4630      	mov	r0, r6
 8005360:	f000 f880 	bl	8005464 <_printf_i>
 8005364:	e7e4      	b.n	8005330 <_vfiprintf_r+0x208>
 8005366:	bf00      	nop
 8005368:	08005fd0 	.word	0x08005fd0
 800536c:	08005ff0 	.word	0x08005ff0
 8005370:	08005fb0 	.word	0x08005fb0
 8005374:	08005f7a 	.word	0x08005f7a
 8005378:	08005f84 	.word	0x08005f84
 800537c:	00000000 	.word	0x00000000
 8005380:	08005103 	.word	0x08005103
 8005384:	08005f80 	.word	0x08005f80

08005388 <_printf_common>:
 8005388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800538c:	4616      	mov	r6, r2
 800538e:	4699      	mov	r9, r3
 8005390:	688a      	ldr	r2, [r1, #8]
 8005392:	690b      	ldr	r3, [r1, #16]
 8005394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005398:	4293      	cmp	r3, r2
 800539a:	bfb8      	it	lt
 800539c:	4613      	movlt	r3, r2
 800539e:	6033      	str	r3, [r6, #0]
 80053a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053a4:	4607      	mov	r7, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	b10a      	cbz	r2, 80053ae <_printf_common+0x26>
 80053aa:	3301      	adds	r3, #1
 80053ac:	6033      	str	r3, [r6, #0]
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	0699      	lsls	r1, r3, #26
 80053b2:	bf42      	ittt	mi
 80053b4:	6833      	ldrmi	r3, [r6, #0]
 80053b6:	3302      	addmi	r3, #2
 80053b8:	6033      	strmi	r3, [r6, #0]
 80053ba:	6825      	ldr	r5, [r4, #0]
 80053bc:	f015 0506 	ands.w	r5, r5, #6
 80053c0:	d106      	bne.n	80053d0 <_printf_common+0x48>
 80053c2:	f104 0a19 	add.w	sl, r4, #25
 80053c6:	68e3      	ldr	r3, [r4, #12]
 80053c8:	6832      	ldr	r2, [r6, #0]
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	42ab      	cmp	r3, r5
 80053ce:	dc26      	bgt.n	800541e <_printf_common+0x96>
 80053d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053d4:	1e13      	subs	r3, r2, #0
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	bf18      	it	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	0692      	lsls	r2, r2, #26
 80053de:	d42b      	bmi.n	8005438 <_printf_common+0xb0>
 80053e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e4:	4649      	mov	r1, r9
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d01e      	beq.n	800542c <_printf_common+0xa4>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	68e5      	ldr	r5, [r4, #12]
 80053f2:	6832      	ldr	r2, [r6, #0]
 80053f4:	f003 0306 	and.w	r3, r3, #6
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	bf08      	it	eq
 80053fc:	1aad      	subeq	r5, r5, r2
 80053fe:	68a3      	ldr	r3, [r4, #8]
 8005400:	6922      	ldr	r2, [r4, #16]
 8005402:	bf0c      	ite	eq
 8005404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005408:	2500      	movne	r5, #0
 800540a:	4293      	cmp	r3, r2
 800540c:	bfc4      	itt	gt
 800540e:	1a9b      	subgt	r3, r3, r2
 8005410:	18ed      	addgt	r5, r5, r3
 8005412:	2600      	movs	r6, #0
 8005414:	341a      	adds	r4, #26
 8005416:	42b5      	cmp	r5, r6
 8005418:	d11a      	bne.n	8005450 <_printf_common+0xc8>
 800541a:	2000      	movs	r0, #0
 800541c:	e008      	b.n	8005430 <_printf_common+0xa8>
 800541e:	2301      	movs	r3, #1
 8005420:	4652      	mov	r2, sl
 8005422:	4649      	mov	r1, r9
 8005424:	4638      	mov	r0, r7
 8005426:	47c0      	blx	r8
 8005428:	3001      	adds	r0, #1
 800542a:	d103      	bne.n	8005434 <_printf_common+0xac>
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005434:	3501      	adds	r5, #1
 8005436:	e7c6      	b.n	80053c6 <_printf_common+0x3e>
 8005438:	18e1      	adds	r1, r4, r3
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	2030      	movs	r0, #48	; 0x30
 800543e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005442:	4422      	add	r2, r4
 8005444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800544c:	3302      	adds	r3, #2
 800544e:	e7c7      	b.n	80053e0 <_printf_common+0x58>
 8005450:	2301      	movs	r3, #1
 8005452:	4622      	mov	r2, r4
 8005454:	4649      	mov	r1, r9
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	3001      	adds	r0, #1
 800545c:	d0e6      	beq.n	800542c <_printf_common+0xa4>
 800545e:	3601      	adds	r6, #1
 8005460:	e7d9      	b.n	8005416 <_printf_common+0x8e>
	...

08005464 <_printf_i>:
 8005464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	7e0f      	ldrb	r7, [r1, #24]
 800546a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800546c:	2f78      	cmp	r7, #120	; 0x78
 800546e:	4691      	mov	r9, r2
 8005470:	4680      	mov	r8, r0
 8005472:	460c      	mov	r4, r1
 8005474:	469a      	mov	sl, r3
 8005476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800547a:	d807      	bhi.n	800548c <_printf_i+0x28>
 800547c:	2f62      	cmp	r7, #98	; 0x62
 800547e:	d80a      	bhi.n	8005496 <_printf_i+0x32>
 8005480:	2f00      	cmp	r7, #0
 8005482:	f000 80d8 	beq.w	8005636 <_printf_i+0x1d2>
 8005486:	2f58      	cmp	r7, #88	; 0x58
 8005488:	f000 80a3 	beq.w	80055d2 <_printf_i+0x16e>
 800548c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005494:	e03a      	b.n	800550c <_printf_i+0xa8>
 8005496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800549a:	2b15      	cmp	r3, #21
 800549c:	d8f6      	bhi.n	800548c <_printf_i+0x28>
 800549e:	a101      	add	r1, pc, #4	; (adr r1, 80054a4 <_printf_i+0x40>)
 80054a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054a4:	080054fd 	.word	0x080054fd
 80054a8:	08005511 	.word	0x08005511
 80054ac:	0800548d 	.word	0x0800548d
 80054b0:	0800548d 	.word	0x0800548d
 80054b4:	0800548d 	.word	0x0800548d
 80054b8:	0800548d 	.word	0x0800548d
 80054bc:	08005511 	.word	0x08005511
 80054c0:	0800548d 	.word	0x0800548d
 80054c4:	0800548d 	.word	0x0800548d
 80054c8:	0800548d 	.word	0x0800548d
 80054cc:	0800548d 	.word	0x0800548d
 80054d0:	0800561d 	.word	0x0800561d
 80054d4:	08005541 	.word	0x08005541
 80054d8:	080055ff 	.word	0x080055ff
 80054dc:	0800548d 	.word	0x0800548d
 80054e0:	0800548d 	.word	0x0800548d
 80054e4:	0800563f 	.word	0x0800563f
 80054e8:	0800548d 	.word	0x0800548d
 80054ec:	08005541 	.word	0x08005541
 80054f0:	0800548d 	.word	0x0800548d
 80054f4:	0800548d 	.word	0x0800548d
 80054f8:	08005607 	.word	0x08005607
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	1d1a      	adds	r2, r3, #4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	602a      	str	r2, [r5, #0]
 8005504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550c:	2301      	movs	r3, #1
 800550e:	e0a3      	b.n	8005658 <_printf_i+0x1f4>
 8005510:	6820      	ldr	r0, [r4, #0]
 8005512:	6829      	ldr	r1, [r5, #0]
 8005514:	0606      	lsls	r6, r0, #24
 8005516:	f101 0304 	add.w	r3, r1, #4
 800551a:	d50a      	bpl.n	8005532 <_printf_i+0xce>
 800551c:	680e      	ldr	r6, [r1, #0]
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	2e00      	cmp	r6, #0
 8005522:	da03      	bge.n	800552c <_printf_i+0xc8>
 8005524:	232d      	movs	r3, #45	; 0x2d
 8005526:	4276      	negs	r6, r6
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552c:	485e      	ldr	r0, [pc, #376]	; (80056a8 <_printf_i+0x244>)
 800552e:	230a      	movs	r3, #10
 8005530:	e019      	b.n	8005566 <_printf_i+0x102>
 8005532:	680e      	ldr	r6, [r1, #0]
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800553a:	bf18      	it	ne
 800553c:	b236      	sxthne	r6, r6
 800553e:	e7ef      	b.n	8005520 <_printf_i+0xbc>
 8005540:	682b      	ldr	r3, [r5, #0]
 8005542:	6820      	ldr	r0, [r4, #0]
 8005544:	1d19      	adds	r1, r3, #4
 8005546:	6029      	str	r1, [r5, #0]
 8005548:	0601      	lsls	r1, r0, #24
 800554a:	d501      	bpl.n	8005550 <_printf_i+0xec>
 800554c:	681e      	ldr	r6, [r3, #0]
 800554e:	e002      	b.n	8005556 <_printf_i+0xf2>
 8005550:	0646      	lsls	r6, r0, #25
 8005552:	d5fb      	bpl.n	800554c <_printf_i+0xe8>
 8005554:	881e      	ldrh	r6, [r3, #0]
 8005556:	4854      	ldr	r0, [pc, #336]	; (80056a8 <_printf_i+0x244>)
 8005558:	2f6f      	cmp	r7, #111	; 0x6f
 800555a:	bf0c      	ite	eq
 800555c:	2308      	moveq	r3, #8
 800555e:	230a      	movne	r3, #10
 8005560:	2100      	movs	r1, #0
 8005562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005566:	6865      	ldr	r5, [r4, #4]
 8005568:	60a5      	str	r5, [r4, #8]
 800556a:	2d00      	cmp	r5, #0
 800556c:	bfa2      	ittt	ge
 800556e:	6821      	ldrge	r1, [r4, #0]
 8005570:	f021 0104 	bicge.w	r1, r1, #4
 8005574:	6021      	strge	r1, [r4, #0]
 8005576:	b90e      	cbnz	r6, 800557c <_printf_i+0x118>
 8005578:	2d00      	cmp	r5, #0
 800557a:	d04d      	beq.n	8005618 <_printf_i+0x1b4>
 800557c:	4615      	mov	r5, r2
 800557e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005582:	fb03 6711 	mls	r7, r3, r1, r6
 8005586:	5dc7      	ldrb	r7, [r0, r7]
 8005588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800558c:	4637      	mov	r7, r6
 800558e:	42bb      	cmp	r3, r7
 8005590:	460e      	mov	r6, r1
 8005592:	d9f4      	bls.n	800557e <_printf_i+0x11a>
 8005594:	2b08      	cmp	r3, #8
 8005596:	d10b      	bne.n	80055b0 <_printf_i+0x14c>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	07de      	lsls	r6, r3, #31
 800559c:	d508      	bpl.n	80055b0 <_printf_i+0x14c>
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	6861      	ldr	r1, [r4, #4]
 80055a2:	4299      	cmp	r1, r3
 80055a4:	bfde      	ittt	le
 80055a6:	2330      	movle	r3, #48	; 0x30
 80055a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055b0:	1b52      	subs	r2, r2, r5
 80055b2:	6122      	str	r2, [r4, #16]
 80055b4:	f8cd a000 	str.w	sl, [sp]
 80055b8:	464b      	mov	r3, r9
 80055ba:	aa03      	add	r2, sp, #12
 80055bc:	4621      	mov	r1, r4
 80055be:	4640      	mov	r0, r8
 80055c0:	f7ff fee2 	bl	8005388 <_printf_common>
 80055c4:	3001      	adds	r0, #1
 80055c6:	d14c      	bne.n	8005662 <_printf_i+0x1fe>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	b004      	add	sp, #16
 80055ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d2:	4835      	ldr	r0, [pc, #212]	; (80056a8 <_printf_i+0x244>)
 80055d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055d8:	6829      	ldr	r1, [r5, #0]
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80055e0:	6029      	str	r1, [r5, #0]
 80055e2:	061d      	lsls	r5, r3, #24
 80055e4:	d514      	bpl.n	8005610 <_printf_i+0x1ac>
 80055e6:	07df      	lsls	r7, r3, #31
 80055e8:	bf44      	itt	mi
 80055ea:	f043 0320 	orrmi.w	r3, r3, #32
 80055ee:	6023      	strmi	r3, [r4, #0]
 80055f0:	b91e      	cbnz	r6, 80055fa <_printf_i+0x196>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	f023 0320 	bic.w	r3, r3, #32
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	2310      	movs	r3, #16
 80055fc:	e7b0      	b.n	8005560 <_printf_i+0xfc>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f043 0320 	orr.w	r3, r3, #32
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	2378      	movs	r3, #120	; 0x78
 8005608:	4828      	ldr	r0, [pc, #160]	; (80056ac <_printf_i+0x248>)
 800560a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800560e:	e7e3      	b.n	80055d8 <_printf_i+0x174>
 8005610:	0659      	lsls	r1, r3, #25
 8005612:	bf48      	it	mi
 8005614:	b2b6      	uxthmi	r6, r6
 8005616:	e7e6      	b.n	80055e6 <_printf_i+0x182>
 8005618:	4615      	mov	r5, r2
 800561a:	e7bb      	b.n	8005594 <_printf_i+0x130>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	6826      	ldr	r6, [r4, #0]
 8005620:	6961      	ldr	r1, [r4, #20]
 8005622:	1d18      	adds	r0, r3, #4
 8005624:	6028      	str	r0, [r5, #0]
 8005626:	0635      	lsls	r5, r6, #24
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	d501      	bpl.n	8005630 <_printf_i+0x1cc>
 800562c:	6019      	str	r1, [r3, #0]
 800562e:	e002      	b.n	8005636 <_printf_i+0x1d2>
 8005630:	0670      	lsls	r0, r6, #25
 8005632:	d5fb      	bpl.n	800562c <_printf_i+0x1c8>
 8005634:	8019      	strh	r1, [r3, #0]
 8005636:	2300      	movs	r3, #0
 8005638:	6123      	str	r3, [r4, #16]
 800563a:	4615      	mov	r5, r2
 800563c:	e7ba      	b.n	80055b4 <_printf_i+0x150>
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	1d1a      	adds	r2, r3, #4
 8005642:	602a      	str	r2, [r5, #0]
 8005644:	681d      	ldr	r5, [r3, #0]
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	2100      	movs	r1, #0
 800564a:	4628      	mov	r0, r5
 800564c:	f7fa fdd0 	bl	80001f0 <memchr>
 8005650:	b108      	cbz	r0, 8005656 <_printf_i+0x1f2>
 8005652:	1b40      	subs	r0, r0, r5
 8005654:	6060      	str	r0, [r4, #4]
 8005656:	6863      	ldr	r3, [r4, #4]
 8005658:	6123      	str	r3, [r4, #16]
 800565a:	2300      	movs	r3, #0
 800565c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005660:	e7a8      	b.n	80055b4 <_printf_i+0x150>
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	462a      	mov	r2, r5
 8005666:	4649      	mov	r1, r9
 8005668:	4640      	mov	r0, r8
 800566a:	47d0      	blx	sl
 800566c:	3001      	adds	r0, #1
 800566e:	d0ab      	beq.n	80055c8 <_printf_i+0x164>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	079b      	lsls	r3, r3, #30
 8005674:	d413      	bmi.n	800569e <_printf_i+0x23a>
 8005676:	68e0      	ldr	r0, [r4, #12]
 8005678:	9b03      	ldr	r3, [sp, #12]
 800567a:	4298      	cmp	r0, r3
 800567c:	bfb8      	it	lt
 800567e:	4618      	movlt	r0, r3
 8005680:	e7a4      	b.n	80055cc <_printf_i+0x168>
 8005682:	2301      	movs	r3, #1
 8005684:	4632      	mov	r2, r6
 8005686:	4649      	mov	r1, r9
 8005688:	4640      	mov	r0, r8
 800568a:	47d0      	blx	sl
 800568c:	3001      	adds	r0, #1
 800568e:	d09b      	beq.n	80055c8 <_printf_i+0x164>
 8005690:	3501      	adds	r5, #1
 8005692:	68e3      	ldr	r3, [r4, #12]
 8005694:	9903      	ldr	r1, [sp, #12]
 8005696:	1a5b      	subs	r3, r3, r1
 8005698:	42ab      	cmp	r3, r5
 800569a:	dcf2      	bgt.n	8005682 <_printf_i+0x21e>
 800569c:	e7eb      	b.n	8005676 <_printf_i+0x212>
 800569e:	2500      	movs	r5, #0
 80056a0:	f104 0619 	add.w	r6, r4, #25
 80056a4:	e7f5      	b.n	8005692 <_printf_i+0x22e>
 80056a6:	bf00      	nop
 80056a8:	08005f8b 	.word	0x08005f8b
 80056ac:	08005f9c 	.word	0x08005f9c

080056b0 <_sbrk_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d06      	ldr	r5, [pc, #24]	; (80056cc <_sbrk_r+0x1c>)
 80056b4:	2300      	movs	r3, #0
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fb ffec 	bl	8001698 <_sbrk>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_sbrk_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_sbrk_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	20000424 	.word	0x20000424

080056d0 <__swbuf_r>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	460e      	mov	r6, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	4605      	mov	r5, r0
 80056d8:	b118      	cbz	r0, 80056e2 <__swbuf_r+0x12>
 80056da:	6983      	ldr	r3, [r0, #24]
 80056dc:	b90b      	cbnz	r3, 80056e2 <__swbuf_r+0x12>
 80056de:	f000 f9d9 	bl	8005a94 <__sinit>
 80056e2:	4b21      	ldr	r3, [pc, #132]	; (8005768 <__swbuf_r+0x98>)
 80056e4:	429c      	cmp	r4, r3
 80056e6:	d12b      	bne.n	8005740 <__swbuf_r+0x70>
 80056e8:	686c      	ldr	r4, [r5, #4]
 80056ea:	69a3      	ldr	r3, [r4, #24]
 80056ec:	60a3      	str	r3, [r4, #8]
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	071a      	lsls	r2, r3, #28
 80056f2:	d52f      	bpl.n	8005754 <__swbuf_r+0x84>
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	b36b      	cbz	r3, 8005754 <__swbuf_r+0x84>
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1ac0      	subs	r0, r0, r3
 80056fe:	6963      	ldr	r3, [r4, #20]
 8005700:	b2f6      	uxtb	r6, r6
 8005702:	4283      	cmp	r3, r0
 8005704:	4637      	mov	r7, r6
 8005706:	dc04      	bgt.n	8005712 <__swbuf_r+0x42>
 8005708:	4621      	mov	r1, r4
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f92e 	bl	800596c <_fflush_r>
 8005710:	bb30      	cbnz	r0, 8005760 <__swbuf_r+0x90>
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	3b01      	subs	r3, #1
 8005716:	60a3      	str	r3, [r4, #8]
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	6022      	str	r2, [r4, #0]
 800571e:	701e      	strb	r6, [r3, #0]
 8005720:	6963      	ldr	r3, [r4, #20]
 8005722:	3001      	adds	r0, #1
 8005724:	4283      	cmp	r3, r0
 8005726:	d004      	beq.n	8005732 <__swbuf_r+0x62>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	07db      	lsls	r3, r3, #31
 800572c:	d506      	bpl.n	800573c <__swbuf_r+0x6c>
 800572e:	2e0a      	cmp	r6, #10
 8005730:	d104      	bne.n	800573c <__swbuf_r+0x6c>
 8005732:	4621      	mov	r1, r4
 8005734:	4628      	mov	r0, r5
 8005736:	f000 f919 	bl	800596c <_fflush_r>
 800573a:	b988      	cbnz	r0, 8005760 <__swbuf_r+0x90>
 800573c:	4638      	mov	r0, r7
 800573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005740:	4b0a      	ldr	r3, [pc, #40]	; (800576c <__swbuf_r+0x9c>)
 8005742:	429c      	cmp	r4, r3
 8005744:	d101      	bne.n	800574a <__swbuf_r+0x7a>
 8005746:	68ac      	ldr	r4, [r5, #8]
 8005748:	e7cf      	b.n	80056ea <__swbuf_r+0x1a>
 800574a:	4b09      	ldr	r3, [pc, #36]	; (8005770 <__swbuf_r+0xa0>)
 800574c:	429c      	cmp	r4, r3
 800574e:	bf08      	it	eq
 8005750:	68ec      	ldreq	r4, [r5, #12]
 8005752:	e7ca      	b.n	80056ea <__swbuf_r+0x1a>
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	f000 f80c 	bl	8005774 <__swsetup_r>
 800575c:	2800      	cmp	r0, #0
 800575e:	d0cb      	beq.n	80056f8 <__swbuf_r+0x28>
 8005760:	f04f 37ff 	mov.w	r7, #4294967295
 8005764:	e7ea      	b.n	800573c <__swbuf_r+0x6c>
 8005766:	bf00      	nop
 8005768:	08005fd0 	.word	0x08005fd0
 800576c:	08005ff0 	.word	0x08005ff0
 8005770:	08005fb0 	.word	0x08005fb0

08005774 <__swsetup_r>:
 8005774:	4b32      	ldr	r3, [pc, #200]	; (8005840 <__swsetup_r+0xcc>)
 8005776:	b570      	push	{r4, r5, r6, lr}
 8005778:	681d      	ldr	r5, [r3, #0]
 800577a:	4606      	mov	r6, r0
 800577c:	460c      	mov	r4, r1
 800577e:	b125      	cbz	r5, 800578a <__swsetup_r+0x16>
 8005780:	69ab      	ldr	r3, [r5, #24]
 8005782:	b913      	cbnz	r3, 800578a <__swsetup_r+0x16>
 8005784:	4628      	mov	r0, r5
 8005786:	f000 f985 	bl	8005a94 <__sinit>
 800578a:	4b2e      	ldr	r3, [pc, #184]	; (8005844 <__swsetup_r+0xd0>)
 800578c:	429c      	cmp	r4, r3
 800578e:	d10f      	bne.n	80057b0 <__swsetup_r+0x3c>
 8005790:	686c      	ldr	r4, [r5, #4]
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005798:	0719      	lsls	r1, r3, #28
 800579a:	d42c      	bmi.n	80057f6 <__swsetup_r+0x82>
 800579c:	06dd      	lsls	r5, r3, #27
 800579e:	d411      	bmi.n	80057c4 <__swsetup_r+0x50>
 80057a0:	2309      	movs	r3, #9
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057a8:	81a3      	strh	r3, [r4, #12]
 80057aa:	f04f 30ff 	mov.w	r0, #4294967295
 80057ae:	e03e      	b.n	800582e <__swsetup_r+0xba>
 80057b0:	4b25      	ldr	r3, [pc, #148]	; (8005848 <__swsetup_r+0xd4>)
 80057b2:	429c      	cmp	r4, r3
 80057b4:	d101      	bne.n	80057ba <__swsetup_r+0x46>
 80057b6:	68ac      	ldr	r4, [r5, #8]
 80057b8:	e7eb      	b.n	8005792 <__swsetup_r+0x1e>
 80057ba:	4b24      	ldr	r3, [pc, #144]	; (800584c <__swsetup_r+0xd8>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	bf08      	it	eq
 80057c0:	68ec      	ldreq	r4, [r5, #12]
 80057c2:	e7e6      	b.n	8005792 <__swsetup_r+0x1e>
 80057c4:	0758      	lsls	r0, r3, #29
 80057c6:	d512      	bpl.n	80057ee <__swsetup_r+0x7a>
 80057c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ca:	b141      	cbz	r1, 80057de <__swsetup_r+0x6a>
 80057cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d0:	4299      	cmp	r1, r3
 80057d2:	d002      	beq.n	80057da <__swsetup_r+0x66>
 80057d4:	4630      	mov	r0, r6
 80057d6:	f7ff fb9d 	bl	8004f14 <_free_r>
 80057da:	2300      	movs	r3, #0
 80057dc:	6363      	str	r3, [r4, #52]	; 0x34
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	2300      	movs	r3, #0
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	f043 0308 	orr.w	r3, r3, #8
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	b94b      	cbnz	r3, 800580e <__swsetup_r+0x9a>
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005804:	d003      	beq.n	800580e <__swsetup_r+0x9a>
 8005806:	4621      	mov	r1, r4
 8005808:	4630      	mov	r0, r6
 800580a:	f000 fa09 	bl	8005c20 <__smakebuf_r>
 800580e:	89a0      	ldrh	r0, [r4, #12]
 8005810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005814:	f010 0301 	ands.w	r3, r0, #1
 8005818:	d00a      	beq.n	8005830 <__swsetup_r+0xbc>
 800581a:	2300      	movs	r3, #0
 800581c:	60a3      	str	r3, [r4, #8]
 800581e:	6963      	ldr	r3, [r4, #20]
 8005820:	425b      	negs	r3, r3
 8005822:	61a3      	str	r3, [r4, #24]
 8005824:	6923      	ldr	r3, [r4, #16]
 8005826:	b943      	cbnz	r3, 800583a <__swsetup_r+0xc6>
 8005828:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800582c:	d1ba      	bne.n	80057a4 <__swsetup_r+0x30>
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	0781      	lsls	r1, r0, #30
 8005832:	bf58      	it	pl
 8005834:	6963      	ldrpl	r3, [r4, #20]
 8005836:	60a3      	str	r3, [r4, #8]
 8005838:	e7f4      	b.n	8005824 <__swsetup_r+0xb0>
 800583a:	2000      	movs	r0, #0
 800583c:	e7f7      	b.n	800582e <__swsetup_r+0xba>
 800583e:	bf00      	nop
 8005840:	2000000c 	.word	0x2000000c
 8005844:	08005fd0 	.word	0x08005fd0
 8005848:	08005ff0 	.word	0x08005ff0
 800584c:	08005fb0 	.word	0x08005fb0

08005850 <abort>:
 8005850:	b508      	push	{r3, lr}
 8005852:	2006      	movs	r0, #6
 8005854:	f000 fa58 	bl	8005d08 <raise>
 8005858:	2001      	movs	r0, #1
 800585a:	f7fb fea5 	bl	80015a8 <_exit>
	...

08005860 <__sflush_r>:
 8005860:	898a      	ldrh	r2, [r1, #12]
 8005862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005866:	4605      	mov	r5, r0
 8005868:	0710      	lsls	r0, r2, #28
 800586a:	460c      	mov	r4, r1
 800586c:	d458      	bmi.n	8005920 <__sflush_r+0xc0>
 800586e:	684b      	ldr	r3, [r1, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	dc05      	bgt.n	8005880 <__sflush_r+0x20>
 8005874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	dc02      	bgt.n	8005880 <__sflush_r+0x20>
 800587a:	2000      	movs	r0, #0
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005882:	2e00      	cmp	r6, #0
 8005884:	d0f9      	beq.n	800587a <__sflush_r+0x1a>
 8005886:	2300      	movs	r3, #0
 8005888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800588c:	682f      	ldr	r7, [r5, #0]
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	d032      	beq.n	80058f8 <__sflush_r+0x98>
 8005892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	075a      	lsls	r2, r3, #29
 8005898:	d505      	bpl.n	80058a6 <__sflush_r+0x46>
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	1ac0      	subs	r0, r0, r3
 800589e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058a0:	b10b      	cbz	r3, 80058a6 <__sflush_r+0x46>
 80058a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058a4:	1ac0      	subs	r0, r0, r3
 80058a6:	2300      	movs	r3, #0
 80058a8:	4602      	mov	r2, r0
 80058aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ac:	6a21      	ldr	r1, [r4, #32]
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b0      	blx	r6
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	d106      	bne.n	80058c6 <__sflush_r+0x66>
 80058b8:	6829      	ldr	r1, [r5, #0]
 80058ba:	291d      	cmp	r1, #29
 80058bc:	d82c      	bhi.n	8005918 <__sflush_r+0xb8>
 80058be:	4a2a      	ldr	r2, [pc, #168]	; (8005968 <__sflush_r+0x108>)
 80058c0:	40ca      	lsrs	r2, r1
 80058c2:	07d6      	lsls	r6, r2, #31
 80058c4:	d528      	bpl.n	8005918 <__sflush_r+0xb8>
 80058c6:	2200      	movs	r2, #0
 80058c8:	6062      	str	r2, [r4, #4]
 80058ca:	04d9      	lsls	r1, r3, #19
 80058cc:	6922      	ldr	r2, [r4, #16]
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	d504      	bpl.n	80058dc <__sflush_r+0x7c>
 80058d2:	1c42      	adds	r2, r0, #1
 80058d4:	d101      	bne.n	80058da <__sflush_r+0x7a>
 80058d6:	682b      	ldr	r3, [r5, #0]
 80058d8:	b903      	cbnz	r3, 80058dc <__sflush_r+0x7c>
 80058da:	6560      	str	r0, [r4, #84]	; 0x54
 80058dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058de:	602f      	str	r7, [r5, #0]
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d0ca      	beq.n	800587a <__sflush_r+0x1a>
 80058e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058e8:	4299      	cmp	r1, r3
 80058ea:	d002      	beq.n	80058f2 <__sflush_r+0x92>
 80058ec:	4628      	mov	r0, r5
 80058ee:	f7ff fb11 	bl	8004f14 <_free_r>
 80058f2:	2000      	movs	r0, #0
 80058f4:	6360      	str	r0, [r4, #52]	; 0x34
 80058f6:	e7c1      	b.n	800587c <__sflush_r+0x1c>
 80058f8:	6a21      	ldr	r1, [r4, #32]
 80058fa:	2301      	movs	r3, #1
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b0      	blx	r6
 8005900:	1c41      	adds	r1, r0, #1
 8005902:	d1c7      	bne.n	8005894 <__sflush_r+0x34>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0c4      	beq.n	8005894 <__sflush_r+0x34>
 800590a:	2b1d      	cmp	r3, #29
 800590c:	d001      	beq.n	8005912 <__sflush_r+0xb2>
 800590e:	2b16      	cmp	r3, #22
 8005910:	d101      	bne.n	8005916 <__sflush_r+0xb6>
 8005912:	602f      	str	r7, [r5, #0]
 8005914:	e7b1      	b.n	800587a <__sflush_r+0x1a>
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	e7ad      	b.n	800587c <__sflush_r+0x1c>
 8005920:	690f      	ldr	r7, [r1, #16]
 8005922:	2f00      	cmp	r7, #0
 8005924:	d0a9      	beq.n	800587a <__sflush_r+0x1a>
 8005926:	0793      	lsls	r3, r2, #30
 8005928:	680e      	ldr	r6, [r1, #0]
 800592a:	bf08      	it	eq
 800592c:	694b      	ldreq	r3, [r1, #20]
 800592e:	600f      	str	r7, [r1, #0]
 8005930:	bf18      	it	ne
 8005932:	2300      	movne	r3, #0
 8005934:	eba6 0807 	sub.w	r8, r6, r7
 8005938:	608b      	str	r3, [r1, #8]
 800593a:	f1b8 0f00 	cmp.w	r8, #0
 800593e:	dd9c      	ble.n	800587a <__sflush_r+0x1a>
 8005940:	6a21      	ldr	r1, [r4, #32]
 8005942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005944:	4643      	mov	r3, r8
 8005946:	463a      	mov	r2, r7
 8005948:	4628      	mov	r0, r5
 800594a:	47b0      	blx	r6
 800594c:	2800      	cmp	r0, #0
 800594e:	dc06      	bgt.n	800595e <__sflush_r+0xfe>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	e78e      	b.n	800587c <__sflush_r+0x1c>
 800595e:	4407      	add	r7, r0
 8005960:	eba8 0800 	sub.w	r8, r8, r0
 8005964:	e7e9      	b.n	800593a <__sflush_r+0xda>
 8005966:	bf00      	nop
 8005968:	20400001 	.word	0x20400001

0800596c <_fflush_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	690b      	ldr	r3, [r1, #16]
 8005970:	4605      	mov	r5, r0
 8005972:	460c      	mov	r4, r1
 8005974:	b913      	cbnz	r3, 800597c <_fflush_r+0x10>
 8005976:	2500      	movs	r5, #0
 8005978:	4628      	mov	r0, r5
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	b118      	cbz	r0, 8005986 <_fflush_r+0x1a>
 800597e:	6983      	ldr	r3, [r0, #24]
 8005980:	b90b      	cbnz	r3, 8005986 <_fflush_r+0x1a>
 8005982:	f000 f887 	bl	8005a94 <__sinit>
 8005986:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <_fflush_r+0x6c>)
 8005988:	429c      	cmp	r4, r3
 800598a:	d11b      	bne.n	80059c4 <_fflush_r+0x58>
 800598c:	686c      	ldr	r4, [r5, #4]
 800598e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0ef      	beq.n	8005976 <_fflush_r+0xa>
 8005996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005998:	07d0      	lsls	r0, r2, #31
 800599a:	d404      	bmi.n	80059a6 <_fflush_r+0x3a>
 800599c:	0599      	lsls	r1, r3, #22
 800599e:	d402      	bmi.n	80059a6 <_fflush_r+0x3a>
 80059a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a2:	f000 f915 	bl	8005bd0 <__retarget_lock_acquire_recursive>
 80059a6:	4628      	mov	r0, r5
 80059a8:	4621      	mov	r1, r4
 80059aa:	f7ff ff59 	bl	8005860 <__sflush_r>
 80059ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b0:	07da      	lsls	r2, r3, #31
 80059b2:	4605      	mov	r5, r0
 80059b4:	d4e0      	bmi.n	8005978 <_fflush_r+0xc>
 80059b6:	89a3      	ldrh	r3, [r4, #12]
 80059b8:	059b      	lsls	r3, r3, #22
 80059ba:	d4dd      	bmi.n	8005978 <_fflush_r+0xc>
 80059bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059be:	f000 f908 	bl	8005bd2 <__retarget_lock_release_recursive>
 80059c2:	e7d9      	b.n	8005978 <_fflush_r+0xc>
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <_fflush_r+0x70>)
 80059c6:	429c      	cmp	r4, r3
 80059c8:	d101      	bne.n	80059ce <_fflush_r+0x62>
 80059ca:	68ac      	ldr	r4, [r5, #8]
 80059cc:	e7df      	b.n	800598e <_fflush_r+0x22>
 80059ce:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <_fflush_r+0x74>)
 80059d0:	429c      	cmp	r4, r3
 80059d2:	bf08      	it	eq
 80059d4:	68ec      	ldreq	r4, [r5, #12]
 80059d6:	e7da      	b.n	800598e <_fflush_r+0x22>
 80059d8:	08005fd0 	.word	0x08005fd0
 80059dc:	08005ff0 	.word	0x08005ff0
 80059e0:	08005fb0 	.word	0x08005fb0

080059e4 <std>:
 80059e4:	2300      	movs	r3, #0
 80059e6:	b510      	push	{r4, lr}
 80059e8:	4604      	mov	r4, r0
 80059ea:	e9c0 3300 	strd	r3, r3, [r0]
 80059ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059f2:	6083      	str	r3, [r0, #8]
 80059f4:	8181      	strh	r1, [r0, #12]
 80059f6:	6643      	str	r3, [r0, #100]	; 0x64
 80059f8:	81c2      	strh	r2, [r0, #14]
 80059fa:	6183      	str	r3, [r0, #24]
 80059fc:	4619      	mov	r1, r3
 80059fe:	2208      	movs	r2, #8
 8005a00:	305c      	adds	r0, #92	; 0x5c
 8005a02:	f7ff fa09 	bl	8004e18 <memset>
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <std+0x38>)
 8005a08:	6263      	str	r3, [r4, #36]	; 0x24
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <std+0x3c>)
 8005a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <std+0x40>)
 8005a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <std+0x44>)
 8005a14:	6224      	str	r4, [r4, #32]
 8005a16:	6323      	str	r3, [r4, #48]	; 0x30
 8005a18:	bd10      	pop	{r4, pc}
 8005a1a:	bf00      	nop
 8005a1c:	08005d41 	.word	0x08005d41
 8005a20:	08005d63 	.word	0x08005d63
 8005a24:	08005d9b 	.word	0x08005d9b
 8005a28:	08005dbf 	.word	0x08005dbf

08005a2c <_cleanup_r>:
 8005a2c:	4901      	ldr	r1, [pc, #4]	; (8005a34 <_cleanup_r+0x8>)
 8005a2e:	f000 b8af 	b.w	8005b90 <_fwalk_reent>
 8005a32:	bf00      	nop
 8005a34:	0800596d 	.word	0x0800596d

08005a38 <__sfmoreglue>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	2268      	movs	r2, #104	; 0x68
 8005a3c:	1e4d      	subs	r5, r1, #1
 8005a3e:	4355      	muls	r5, r2
 8005a40:	460e      	mov	r6, r1
 8005a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a46:	f7ff fad1 	bl	8004fec <_malloc_r>
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	b140      	cbz	r0, 8005a60 <__sfmoreglue+0x28>
 8005a4e:	2100      	movs	r1, #0
 8005a50:	e9c0 1600 	strd	r1, r6, [r0]
 8005a54:	300c      	adds	r0, #12
 8005a56:	60a0      	str	r0, [r4, #8]
 8005a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a5c:	f7ff f9dc 	bl	8004e18 <memset>
 8005a60:	4620      	mov	r0, r4
 8005a62:	bd70      	pop	{r4, r5, r6, pc}

08005a64 <__sfp_lock_acquire>:
 8005a64:	4801      	ldr	r0, [pc, #4]	; (8005a6c <__sfp_lock_acquire+0x8>)
 8005a66:	f000 b8b3 	b.w	8005bd0 <__retarget_lock_acquire_recursive>
 8005a6a:	bf00      	nop
 8005a6c:	20000421 	.word	0x20000421

08005a70 <__sfp_lock_release>:
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <__sfp_lock_release+0x8>)
 8005a72:	f000 b8ae 	b.w	8005bd2 <__retarget_lock_release_recursive>
 8005a76:	bf00      	nop
 8005a78:	20000421 	.word	0x20000421

08005a7c <__sinit_lock_acquire>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	; (8005a84 <__sinit_lock_acquire+0x8>)
 8005a7e:	f000 b8a7 	b.w	8005bd0 <__retarget_lock_acquire_recursive>
 8005a82:	bf00      	nop
 8005a84:	20000422 	.word	0x20000422

08005a88 <__sinit_lock_release>:
 8005a88:	4801      	ldr	r0, [pc, #4]	; (8005a90 <__sinit_lock_release+0x8>)
 8005a8a:	f000 b8a2 	b.w	8005bd2 <__retarget_lock_release_recursive>
 8005a8e:	bf00      	nop
 8005a90:	20000422 	.word	0x20000422

08005a94 <__sinit>:
 8005a94:	b510      	push	{r4, lr}
 8005a96:	4604      	mov	r4, r0
 8005a98:	f7ff fff0 	bl	8005a7c <__sinit_lock_acquire>
 8005a9c:	69a3      	ldr	r3, [r4, #24]
 8005a9e:	b11b      	cbz	r3, 8005aa8 <__sinit+0x14>
 8005aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa4:	f7ff bff0 	b.w	8005a88 <__sinit_lock_release>
 8005aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005aac:	6523      	str	r3, [r4, #80]	; 0x50
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <__sinit+0x68>)
 8005ab0:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <__sinit+0x6c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	bf04      	itt	eq
 8005aba:	2301      	moveq	r3, #1
 8005abc:	61a3      	streq	r3, [r4, #24]
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 f820 	bl	8005b04 <__sfp>
 8005ac4:	6060      	str	r0, [r4, #4]
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f000 f81c 	bl	8005b04 <__sfp>
 8005acc:	60a0      	str	r0, [r4, #8]
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 f818 	bl	8005b04 <__sfp>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	60e0      	str	r0, [r4, #12]
 8005ad8:	2104      	movs	r1, #4
 8005ada:	6860      	ldr	r0, [r4, #4]
 8005adc:	f7ff ff82 	bl	80059e4 <std>
 8005ae0:	68a0      	ldr	r0, [r4, #8]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	2109      	movs	r1, #9
 8005ae6:	f7ff ff7d 	bl	80059e4 <std>
 8005aea:	68e0      	ldr	r0, [r4, #12]
 8005aec:	2202      	movs	r2, #2
 8005aee:	2112      	movs	r1, #18
 8005af0:	f7ff ff78 	bl	80059e4 <std>
 8005af4:	2301      	movs	r3, #1
 8005af6:	61a3      	str	r3, [r4, #24]
 8005af8:	e7d2      	b.n	8005aa0 <__sinit+0xc>
 8005afa:	bf00      	nop
 8005afc:	08005ec8 	.word	0x08005ec8
 8005b00:	08005a2d 	.word	0x08005a2d

08005b04 <__sfp>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	4607      	mov	r7, r0
 8005b08:	f7ff ffac 	bl	8005a64 <__sfp_lock_acquire>
 8005b0c:	4b1e      	ldr	r3, [pc, #120]	; (8005b88 <__sfp+0x84>)
 8005b0e:	681e      	ldr	r6, [r3, #0]
 8005b10:	69b3      	ldr	r3, [r6, #24]
 8005b12:	b913      	cbnz	r3, 8005b1a <__sfp+0x16>
 8005b14:	4630      	mov	r0, r6
 8005b16:	f7ff ffbd 	bl	8005a94 <__sinit>
 8005b1a:	3648      	adds	r6, #72	; 0x48
 8005b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	d503      	bpl.n	8005b2c <__sfp+0x28>
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	b30b      	cbz	r3, 8005b6c <__sfp+0x68>
 8005b28:	6836      	ldr	r6, [r6, #0]
 8005b2a:	e7f7      	b.n	8005b1c <__sfp+0x18>
 8005b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b30:	b9d5      	cbnz	r5, 8005b68 <__sfp+0x64>
 8005b32:	4b16      	ldr	r3, [pc, #88]	; (8005b8c <__sfp+0x88>)
 8005b34:	60e3      	str	r3, [r4, #12]
 8005b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b3c:	f000 f847 	bl	8005bce <__retarget_lock_init_recursive>
 8005b40:	f7ff ff96 	bl	8005a70 <__sfp_lock_release>
 8005b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b4c:	6025      	str	r5, [r4, #0]
 8005b4e:	61a5      	str	r5, [r4, #24]
 8005b50:	2208      	movs	r2, #8
 8005b52:	4629      	mov	r1, r5
 8005b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b58:	f7ff f95e 	bl	8004e18 <memset>
 8005b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b64:	4620      	mov	r0, r4
 8005b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b68:	3468      	adds	r4, #104	; 0x68
 8005b6a:	e7d9      	b.n	8005b20 <__sfp+0x1c>
 8005b6c:	2104      	movs	r1, #4
 8005b6e:	4638      	mov	r0, r7
 8005b70:	f7ff ff62 	bl	8005a38 <__sfmoreglue>
 8005b74:	4604      	mov	r4, r0
 8005b76:	6030      	str	r0, [r6, #0]
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d1d5      	bne.n	8005b28 <__sfp+0x24>
 8005b7c:	f7ff ff78 	bl	8005a70 <__sfp_lock_release>
 8005b80:	230c      	movs	r3, #12
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	e7ee      	b.n	8005b64 <__sfp+0x60>
 8005b86:	bf00      	nop
 8005b88:	08005ec8 	.word	0x08005ec8
 8005b8c:	ffff0001 	.word	0xffff0001

08005b90 <_fwalk_reent>:
 8005b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b94:	4606      	mov	r6, r0
 8005b96:	4688      	mov	r8, r1
 8005b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b9c:	2700      	movs	r7, #0
 8005b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8005ba6:	d505      	bpl.n	8005bb4 <_fwalk_reent+0x24>
 8005ba8:	6824      	ldr	r4, [r4, #0]
 8005baa:	2c00      	cmp	r4, #0
 8005bac:	d1f7      	bne.n	8005b9e <_fwalk_reent+0xe>
 8005bae:	4638      	mov	r0, r7
 8005bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb4:	89ab      	ldrh	r3, [r5, #12]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d907      	bls.n	8005bca <_fwalk_reent+0x3a>
 8005bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	d003      	beq.n	8005bca <_fwalk_reent+0x3a>
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	47c0      	blx	r8
 8005bc8:	4307      	orrs	r7, r0
 8005bca:	3568      	adds	r5, #104	; 0x68
 8005bcc:	e7e9      	b.n	8005ba2 <_fwalk_reent+0x12>

08005bce <__retarget_lock_init_recursive>:
 8005bce:	4770      	bx	lr

08005bd0 <__retarget_lock_acquire_recursive>:
 8005bd0:	4770      	bx	lr

08005bd2 <__retarget_lock_release_recursive>:
 8005bd2:	4770      	bx	lr

08005bd4 <__swhatbuf_r>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	460e      	mov	r6, r1
 8005bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	b096      	sub	sp, #88	; 0x58
 8005be0:	4614      	mov	r4, r2
 8005be2:	461d      	mov	r5, r3
 8005be4:	da08      	bge.n	8005bf8 <__swhatbuf_r+0x24>
 8005be6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	602a      	str	r2, [r5, #0]
 8005bee:	061a      	lsls	r2, r3, #24
 8005bf0:	d410      	bmi.n	8005c14 <__swhatbuf_r+0x40>
 8005bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf6:	e00e      	b.n	8005c16 <__swhatbuf_r+0x42>
 8005bf8:	466a      	mov	r2, sp
 8005bfa:	f000 f907 	bl	8005e0c <_fstat_r>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	dbf1      	blt.n	8005be6 <__swhatbuf_r+0x12>
 8005c02:	9a01      	ldr	r2, [sp, #4]
 8005c04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c0c:	425a      	negs	r2, r3
 8005c0e:	415a      	adcs	r2, r3
 8005c10:	602a      	str	r2, [r5, #0]
 8005c12:	e7ee      	b.n	8005bf2 <__swhatbuf_r+0x1e>
 8005c14:	2340      	movs	r3, #64	; 0x40
 8005c16:	2000      	movs	r0, #0
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	b016      	add	sp, #88	; 0x58
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c20 <__smakebuf_r>:
 8005c20:	898b      	ldrh	r3, [r1, #12]
 8005c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c24:	079d      	lsls	r5, r3, #30
 8005c26:	4606      	mov	r6, r0
 8005c28:	460c      	mov	r4, r1
 8005c2a:	d507      	bpl.n	8005c3c <__smakebuf_r+0x1c>
 8005c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	6123      	str	r3, [r4, #16]
 8005c34:	2301      	movs	r3, #1
 8005c36:	6163      	str	r3, [r4, #20]
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	ab01      	add	r3, sp, #4
 8005c3e:	466a      	mov	r2, sp
 8005c40:	f7ff ffc8 	bl	8005bd4 <__swhatbuf_r>
 8005c44:	9900      	ldr	r1, [sp, #0]
 8005c46:	4605      	mov	r5, r0
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f7ff f9cf 	bl	8004fec <_malloc_r>
 8005c4e:	b948      	cbnz	r0, 8005c64 <__smakebuf_r+0x44>
 8005c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c54:	059a      	lsls	r2, r3, #22
 8005c56:	d4ef      	bmi.n	8005c38 <__smakebuf_r+0x18>
 8005c58:	f023 0303 	bic.w	r3, r3, #3
 8005c5c:	f043 0302 	orr.w	r3, r3, #2
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	e7e3      	b.n	8005c2c <__smakebuf_r+0xc>
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <__smakebuf_r+0x7c>)
 8005c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	6020      	str	r0, [r4, #0]
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	9b00      	ldr	r3, [sp, #0]
 8005c74:	6163      	str	r3, [r4, #20]
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	6120      	str	r0, [r4, #16]
 8005c7a:	b15b      	cbz	r3, 8005c94 <__smakebuf_r+0x74>
 8005c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f8d5 	bl	8005e30 <_isatty_r>
 8005c86:	b128      	cbz	r0, 8005c94 <__smakebuf_r+0x74>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	89a0      	ldrh	r0, [r4, #12]
 8005c96:	4305      	orrs	r5, r0
 8005c98:	81a5      	strh	r5, [r4, #12]
 8005c9a:	e7cd      	b.n	8005c38 <__smakebuf_r+0x18>
 8005c9c:	08005a2d 	.word	0x08005a2d

08005ca0 <__malloc_lock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	; (8005ca8 <__malloc_lock+0x8>)
 8005ca2:	f7ff bf95 	b.w	8005bd0 <__retarget_lock_acquire_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	20000420 	.word	0x20000420

08005cac <__malloc_unlock>:
 8005cac:	4801      	ldr	r0, [pc, #4]	; (8005cb4 <__malloc_unlock+0x8>)
 8005cae:	f7ff bf90 	b.w	8005bd2 <__retarget_lock_release_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	20000420 	.word	0x20000420

08005cb8 <_raise_r>:
 8005cb8:	291f      	cmp	r1, #31
 8005cba:	b538      	push	{r3, r4, r5, lr}
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	d904      	bls.n	8005ccc <_raise_r+0x14>
 8005cc2:	2316      	movs	r3, #22
 8005cc4:	6003      	str	r3, [r0, #0]
 8005cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cce:	b112      	cbz	r2, 8005cd6 <_raise_r+0x1e>
 8005cd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cd4:	b94b      	cbnz	r3, 8005cea <_raise_r+0x32>
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 f830 	bl	8005d3c <_getpid_r>
 8005cdc:	462a      	mov	r2, r5
 8005cde:	4601      	mov	r1, r0
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ce6:	f000 b817 	b.w	8005d18 <_kill_r>
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d00a      	beq.n	8005d04 <_raise_r+0x4c>
 8005cee:	1c59      	adds	r1, r3, #1
 8005cf0:	d103      	bne.n	8005cfa <_raise_r+0x42>
 8005cf2:	2316      	movs	r3, #22
 8005cf4:	6003      	str	r3, [r0, #0]
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	e7e7      	b.n	8005cca <_raise_r+0x12>
 8005cfa:	2400      	movs	r4, #0
 8005cfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d00:	4628      	mov	r0, r5
 8005d02:	4798      	blx	r3
 8005d04:	2000      	movs	r0, #0
 8005d06:	e7e0      	b.n	8005cca <_raise_r+0x12>

08005d08 <raise>:
 8005d08:	4b02      	ldr	r3, [pc, #8]	; (8005d14 <raise+0xc>)
 8005d0a:	4601      	mov	r1, r0
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	f7ff bfd3 	b.w	8005cb8 <_raise_r>
 8005d12:	bf00      	nop
 8005d14:	2000000c 	.word	0x2000000c

08005d18 <_kill_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d07      	ldr	r5, [pc, #28]	; (8005d38 <_kill_r+0x20>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	f7fb fc2f 	bl	8001588 <_kill>
 8005d2a:	1c43      	adds	r3, r0, #1
 8005d2c:	d102      	bne.n	8005d34 <_kill_r+0x1c>
 8005d2e:	682b      	ldr	r3, [r5, #0]
 8005d30:	b103      	cbz	r3, 8005d34 <_kill_r+0x1c>
 8005d32:	6023      	str	r3, [r4, #0]
 8005d34:	bd38      	pop	{r3, r4, r5, pc}
 8005d36:	bf00      	nop
 8005d38:	20000424 	.word	0x20000424

08005d3c <_getpid_r>:
 8005d3c:	f7fb bc1c 	b.w	8001578 <_getpid>

08005d40 <__sread>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	460c      	mov	r4, r1
 8005d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d48:	f000 f894 	bl	8005e74 <_read_r>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	bfab      	itete	ge
 8005d50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d52:	89a3      	ldrhlt	r3, [r4, #12]
 8005d54:	181b      	addge	r3, r3, r0
 8005d56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d5a:	bfac      	ite	ge
 8005d5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d5e:	81a3      	strhlt	r3, [r4, #12]
 8005d60:	bd10      	pop	{r4, pc}

08005d62 <__swrite>:
 8005d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d66:	461f      	mov	r7, r3
 8005d68:	898b      	ldrh	r3, [r1, #12]
 8005d6a:	05db      	lsls	r3, r3, #23
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4616      	mov	r6, r2
 8005d72:	d505      	bpl.n	8005d80 <__swrite+0x1e>
 8005d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d78:	2302      	movs	r3, #2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f000 f868 	bl	8005e50 <_lseek_r>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	463b      	mov	r3, r7
 8005d90:	4628      	mov	r0, r5
 8005d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	f000 b817 	b.w	8005dc8 <_write_r>

08005d9a <__sseek>:
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da2:	f000 f855 	bl	8005e50 <_lseek_r>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	bf15      	itete	ne
 8005dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005db6:	81a3      	strheq	r3, [r4, #12]
 8005db8:	bf18      	it	ne
 8005dba:	81a3      	strhne	r3, [r4, #12]
 8005dbc:	bd10      	pop	{r4, pc}

08005dbe <__sclose>:
 8005dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc2:	f000 b813 	b.w	8005dec <_close_r>
	...

08005dc8 <_write_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4d07      	ldr	r5, [pc, #28]	; (8005de8 <_write_r+0x20>)
 8005dcc:	4604      	mov	r4, r0
 8005dce:	4608      	mov	r0, r1
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	602a      	str	r2, [r5, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f7fb fc0d 	bl	80015f6 <_write>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_write_r+0x1e>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_write_r+0x1e>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20000424 	.word	0x20000424

08005dec <_close_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d06      	ldr	r5, [pc, #24]	; (8005e08 <_close_r+0x1c>)
 8005df0:	2300      	movs	r3, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	f7fb fc19 	bl	800162e <_close>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_close_r+0x1a>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_close_r+0x1a>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20000424 	.word	0x20000424

08005e0c <_fstat_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	; (8005e2c <_fstat_r+0x20>)
 8005e10:	2300      	movs	r3, #0
 8005e12:	4604      	mov	r4, r0
 8005e14:	4608      	mov	r0, r1
 8005e16:	4611      	mov	r1, r2
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	f7fb fc14 	bl	8001646 <_fstat>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	d102      	bne.n	8005e28 <_fstat_r+0x1c>
 8005e22:	682b      	ldr	r3, [r5, #0]
 8005e24:	b103      	cbz	r3, 8005e28 <_fstat_r+0x1c>
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000424 	.word	0x20000424

08005e30 <_isatty_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d06      	ldr	r5, [pc, #24]	; (8005e4c <_isatty_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	f7fb fc13 	bl	8001666 <_isatty>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_isatty_r+0x1a>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_isatty_r+0x1a>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	20000424 	.word	0x20000424

08005e50 <_lseek_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d07      	ldr	r5, [pc, #28]	; (8005e70 <_lseek_r+0x20>)
 8005e54:	4604      	mov	r4, r0
 8005e56:	4608      	mov	r0, r1
 8005e58:	4611      	mov	r1, r2
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	602a      	str	r2, [r5, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f7fb fc0c 	bl	800167c <_lseek>
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	d102      	bne.n	8005e6e <_lseek_r+0x1e>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	b103      	cbz	r3, 8005e6e <_lseek_r+0x1e>
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	20000424 	.word	0x20000424

08005e74 <_read_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d07      	ldr	r5, [pc, #28]	; (8005e94 <_read_r+0x20>)
 8005e78:	4604      	mov	r4, r0
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	2200      	movs	r2, #0
 8005e80:	602a      	str	r2, [r5, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f7fb fb9a 	bl	80015bc <_read>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_read_r+0x1e>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_read_r+0x1e>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	20000424 	.word	0x20000424

08005e98 <_init>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr

08005ea4 <_fini>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	bf00      	nop
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr
