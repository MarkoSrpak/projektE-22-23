
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006080  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006390  08006390  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006398  08006398  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006398  08006398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000003b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6e4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028bf  00000000  00000000  0002d784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00030048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd8  00000000  00000000  00030d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263b2  00000000  00000000  00031960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b2b  00000000  00000000  00057d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5d32  00000000  00000000  0006a83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015056f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f7c  00000000  00000000  001505c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006218 	.word	0x08006218

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006218 	.word	0x08006218

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <MDL_buttons_init>:


struct MDL_buttons_handler buttons_handler;


void MDL_buttons_init(){
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
	//init GPIO gatea
	for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	e00f      	b.n	8000d9c <MDL_buttons_init+0x2c>
		buttons_handler.buttons[i].gpio = GPIOE;
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <MDL_buttons_init+0x7c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	011b      	lsls	r3, r3, #4
 8000d82:	4413      	add	r3, r2
 8000d84:	3308      	adds	r3, #8
 8000d86:	4a1a      	ldr	r2, [pc, #104]	; (8000df0 <MDL_buttons_init+0x80>)
 8000d88:	601a      	str	r2, [r3, #0]
		buttons_handler.buttons[i].pressed_ago = 0;
 8000d8a:	4a18      	ldr	r2, [pc, #96]	; (8000dec <MDL_buttons_init+0x7c>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	4413      	add	r3, r2
 8000d92:	2200      	movs	r2, #0
 8000d94:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	ddec      	ble.n	8000d7c <MDL_buttons_init+0xc>
	}
	//init GPIO pinova
	buttons_handler.buttons[0].gpio_pin = GPIO_PIN_10;
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MDL_buttons_init+0x7c>)
 8000da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da8:	809a      	strh	r2, [r3, #4]
	buttons_handler.buttons[1].gpio_pin = GPIO_PIN_11;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MDL_buttons_init+0x7c>)
 8000dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000db0:	829a      	strh	r2, [r3, #20]
	buttons_handler.buttons[2].gpio_pin = GPIO_PIN_12;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MDL_buttons_init+0x7c>)
 8000db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db8:	849a      	strh	r2, [r3, #36]	; 0x24
	buttons_handler.buttons[3].gpio_pin = GPIO_PIN_13;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MDL_buttons_init+0x7c>)
 8000dbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc0:	869a      	strh	r2, [r3, #52]	; 0x34

	buttons_handler.buttons[0].button_type = START;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MDL_buttons_init+0x7c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	709a      	strb	r2, [r3, #2]
	buttons_handler.buttons[1].button_type = MINUS;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MDL_buttons_init+0x7c>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	749a      	strb	r2, [r3, #18]
	buttons_handler.buttons[2].button_type = PLUS;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MDL_buttons_init+0x7c>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	buttons_handler.buttons[3].button_type = TOCI;
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <MDL_buttons_init+0x7c>)
 8000dd8:	2203      	movs	r2, #3
 8000dda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2000008c 	.word	0x2000008c
 8000df0:	40021000 	.word	0x40021000

08000df4 <BUTTON_CHECK>:

void BUTTON_CHECK(int i){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

	buttons_handler.buttons[i].button_state = HAL_GPIO_ReadPin(buttons_handler.buttons[i].gpio, buttons_handler.buttons[i].gpio_pin);
 8000dfc:	4a3d      	ldr	r2, [pc, #244]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	3308      	adds	r3, #8
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	493a      	ldr	r1, [pc, #232]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	440b      	add	r3, r1
 8000e10:	3304      	adds	r3, #4
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	4610      	mov	r0, r2
 8000e18:	f002 fc94 	bl	8003744 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4a34      	ldr	r2, [pc, #208]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4413      	add	r3, r2
 8000e28:	330c      	adds	r3, #12
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]

	if(buttons_handler.buttons[i].prev_button_state == GPIO_PIN_SET && buttons_handler.buttons[i].button_state == GPIO_PIN_RESET){
 8000e2e:	4a31      	ldr	r2, [pc, #196]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	4413      	add	r3, r2
 8000e36:	330d      	adds	r3, #13
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d10d      	bne.n	8000e5a <BUTTON_CHECK+0x66>
 8000e3e:	4a2d      	ldr	r2, [pc, #180]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	4413      	add	r3, r2
 8000e46:	330c      	adds	r3, #12
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d105      	bne.n	8000e5a <BUTTON_CHECK+0x66>
		//detected falling edge
		buttons_handler.buttons[i].pressed_ago = 0;
 8000e4e:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	4413      	add	r3, r2
 8000e56:	2200      	movs	r2, #0
 8000e58:	801a      	strh	r2, [r3, #0]
	}
	if(buttons_handler.buttons[i].prev_button_state == GPIO_PIN_RESET && buttons_handler.buttons[i].button_state == GPIO_PIN_SET){
 8000e5a:	4a26      	ldr	r2, [pc, #152]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	4413      	add	r3, r2
 8000e62:	330d      	adds	r3, #13
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d11f      	bne.n	8000eaa <BUTTON_CHECK+0xb6>
 8000e6a:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	4413      	add	r3, r2
 8000e72:	330c      	adds	r3, #12
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d117      	bne.n	8000eaa <BUTTON_CHECK+0xb6>
		//detected rising edge
		if(buttons_handler.buttons[i].pressed_ago == BUTTON_HALT_TIME){
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	4413      	add	r3, r2
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	d10a      	bne.n	8000e9e <BUTTON_CHECK+0xaa>
//			LCD_Bttn_Pressed(buttons_handler.buttons[i].button_type);
			if(buttons_handler.buttons[i].button_type == TOCI){
 8000e88:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	4413      	add	r3, r2
 8000e90:	3302      	adds	r3, #2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d102      	bne.n	8000e9e <BUTTON_CHECK+0xaa>
				//TociPressed();
				Dispenser(200);
 8000e98:	20c8      	movs	r0, #200	; 0xc8
 8000e9a:	f000 f855 	bl	8000f48 <Dispenser>
			}
		}
		buttons_handler.buttons[i].pressed_ago = 0;
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	801a      	strh	r2, [r3, #0]

	}
	if(buttons_handler.buttons[i].pressed_ago < BUTTON_HALT_TIME){
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	4413      	add	r3, r2
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d80c      	bhi.n	8000ed2 <BUTTON_CHECK+0xde>
		buttons_handler.buttons[i].pressed_ago++;
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	460a      	mov	r2, r1
 8000ed0:	801a      	strh	r2, [r3, #0]
	}
	buttons_handler.buttons[i].prev_button_state = buttons_handler.buttons[i].button_state;
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	4413      	add	r3, r2
 8000eda:	330c      	adds	r3, #12
 8000edc:	7819      	ldrb	r1, [r3, #0]
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <BUTTON_CHECK+0x100>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	330d      	adds	r3, #13
 8000ee8:	460a      	mov	r2, r1
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000008c 	.word	0x2000008c

08000ef8 <MDL_Buttons_Handler>:


void MDL_Buttons_Handler(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	e005      	b.n	8000f10 <MDL_Buttons_Handler+0x18>
		BUTTON_CHECK(i);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff75 	bl	8000df4 <BUTTON_CHECK>
	for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	ddf6      	ble.n	8000f04 <MDL_Buttons_Handler+0xc>
	}
}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <MDL_dispenser_init>:
uint16_t ml_total = ML_DEFAULT;

GPIO_TypeDef *gpio_Dispenser;
uint16_t pin_Dispenser;

void MDL_dispenser_init(){
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	gpio_Dispenser = GPIOG;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <MDL_dispenser_init+0x1c>)
 8000f26:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <MDL_dispenser_init+0x20>)
 8000f28:	601a      	str	r2, [r3, #0]
	pin_Dispenser = GPIO_PIN_2;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MDL_dispenser_init+0x24>)
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	801a      	strh	r2, [r3, #0]
//	Dispenser(300); ne treba vise
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200000cc 	.word	0x200000cc
 8000f40:	40021800 	.word	0x40021800
 8000f44:	200000d0 	.word	0x200000d0

08000f48 <Dispenser>:

void Dispenser(uint16_t ml_total) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
	/*
	 * arg = 200 ~ 100 mL
	 * arg = ? ~ 50 mL
	 * arg = ? ~ 25 mL */
	HAL_GPIO_WritePin(gpio_Dispenser, pin_Dispenser, GPIO_PIN_SET);
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <Dispenser+0x60>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <Dispenser+0x64>)
 8000f58:	8811      	ldrh	r1, [r2, #0]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fc09 	bl	8003774 <HAL_GPIO_WritePin>
	HAL_Delay(ml_total/0.067); //ukupna militraza kroz protok pumpe + t za paljenje pumpe
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fae5 	bl	8000534 <__aeabi_i2d>
 8000f6a:	a30d      	add	r3, pc, #52	; (adr r3, 8000fa0 <Dispenser+0x58>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fc74 	bl	800085c <__aeabi_ddiv>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fd56 	bl	8000a2c <__aeabi_d2uiz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 f942 	bl	800220c <HAL_Delay>
	HAL_GPIO_WritePin(gpio_Dispenser, pin_Dispenser, GPIO_PIN_RESET);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <Dispenser+0x60>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <Dispenser+0x64>)
 8000f8e:	8811      	ldrh	r1, [r2, #0]
 8000f90:	2200      	movs	r2, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fbee 	bl	8003774 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	78d4fdf4 	.word	0x78d4fdf4
 8000fa4:	3fb126e9 	.word	0x3fb126e9
 8000fa8:	200000cc 	.word	0x200000cc
 8000fac:	200000d0 	.word	0x200000d0

08000fb0 <MDL_leds_init>:
void send();

struct LED_handler ledHandler;


void MDL_leds_init() {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MDL_leds_init+0x3c>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_LEDS; i++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	e00a      	b.n	8000fd8 <MDL_leds_init+0x28>
		ledHandler.led[i] = i;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b2d9      	uxtb	r1, r3
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <MDL_leds_init+0x3c>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	3301      	adds	r3, #1
 8000fce:	460a      	mov	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_LEDS; i++) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	ddf1      	ble.n	8000fc2 <MDL_leds_init+0x12>
	}
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	200000d4 	.word	0x200000d4

08000ff0 <set_LED>:

void set_LED(uint8_t LEDnum, uint8_t Red, uint8_t Green, uint8_t Blue) {
 8000ff0:	b490      	push	{r4, r7}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4623      	mov	r3, r4
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	4603      	mov	r3, r0
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	460b      	mov	r3, r1
 8001008:	717b      	strb	r3, [r7, #5]
 800100a:	4613      	mov	r3, r2
 800100c:	713b      	strb	r3, [r7, #4]
	ledHandler.LED_Data[LEDnum][0] = LEDnum;
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <set_LED+0x58>)
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	71da      	strb	r2, [r3, #7]
	ledHandler.LED_Data[LEDnum][1] = Red;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <set_LED+0x58>)
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	79ba      	ldrb	r2, [r7, #6]
 8001024:	721a      	strb	r2, [r3, #8]
	ledHandler.LED_Data[LEDnum][2] = Green;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <set_LED+0x58>)
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	797a      	ldrb	r2, [r7, #5]
 8001030:	725a      	strb	r2, [r3, #9]
	ledHandler.LED_Data[LEDnum][3] = Blue;
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <set_LED+0x58>)
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	793a      	ldrb	r2, [r7, #4]
 800103c:	729a      	strb	r2, [r3, #10]
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bc90      	pop	{r4, r7}
 8001046:	4770      	bx	lr
 8001048:	200000d4 	.word	0x200000d4

0800104c <send>:

void send(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
	uint32_t index = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
	uint32_t color;

	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 8001056:	2300      	movs	r3, #0
 8001058:	72fb      	strb	r3, [r7, #11]
 800105a:	e039      	b.n	80010d0 <send+0x84>
		color = ((ledHandler.LED_Data[i][1] << 16) | (ledHandler.LED_Data[i][2] << 8) | (ledHandler.LED_Data[i][3]));
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	4a31      	ldr	r2, [pc, #196]	; (8001124 <send+0xd8>)
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	7a1b      	ldrb	r3, [r3, #8]
 8001066:	041a      	lsls	r2, r3, #16
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	492e      	ldr	r1, [pc, #184]	; (8001124 <send+0xd8>)
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	7a5b      	ldrb	r3, [r3, #9]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	431a      	orrs	r2, r3
 8001076:	7afb      	ldrb	r3, [r7, #11]
 8001078:	492a      	ldr	r1, [pc, #168]	; (8001124 <send+0xd8>)
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	7a9b      	ldrb	r3, [r3, #10]
 8001080:	4313      	orrs	r3, r2
 8001082:	607b      	str	r3, [r7, #4]

		for (uint8_t i = 24; i > 0; i--) {
 8001084:	2318      	movs	r3, #24
 8001086:	72bb      	strb	r3, [r7, #10]
 8001088:	e01c      	b.n	80010c4 <send+0x78>
			if (color & (1 << (i - 1)))
 800108a:	7abb      	ldrb	r3, [r7, #10]
 800108c:	3b01      	subs	r3, #1
 800108e:	2201      	movs	r2, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <send+0x60>
				ledHandler.pwmData[index] = 60;
 800109e:	4a21      	ldr	r2, [pc, #132]	; (8001124 <send+0xd8>)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3310      	adds	r3, #16
 80010a4:	213c      	movs	r1, #60	; 0x3c
 80010a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010aa:	e005      	b.n	80010b8 <send+0x6c>
			else
				ledHandler.pwmData[index] = 30;
 80010ac:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <send+0xd8>)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3310      	adds	r3, #16
 80010b2:	211e      	movs	r1, #30
 80010b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			index++;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 24; i > 0; i--) {
 80010be:	7abb      	ldrb	r3, [r7, #10]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	72bb      	strb	r3, [r7, #10]
 80010c4:	7abb      	ldrb	r3, [r7, #10]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1df      	bne.n	800108a <send+0x3e>
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	3301      	adds	r3, #1
 80010ce:	72fb      	strb	r3, [r7, #11]
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d9c2      	bls.n	800105c <send+0x10>
		}
	}

	for (uint8_t i = 0; i < 50; i++) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	727b      	strb	r3, [r7, #9]
 80010da:	e00b      	b.n	80010f4 <send+0xa8>
		ledHandler.pwmData[index] = 0;
 80010dc:	4a11      	ldr	r2, [pc, #68]	; (8001124 <send+0xd8>)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3310      	adds	r3, #16
 80010e2:	2100      	movs	r1, #0
 80010e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		index++;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 50; i++) {
 80010ee:	7a7b      	ldrb	r3, [r7, #9]
 80010f0:	3301      	adds	r3, #1
 80010f2:	727b      	strb	r3, [r7, #9]
 80010f4:	7a7b      	ldrb	r3, [r7, #9]
 80010f6:	2b31      	cmp	r3, #49	; 0x31
 80010f8:	d9f0      	bls.n	80010dc <send+0x90>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*) ledHandler.pwmData, index);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <send+0xdc>)
 8001100:	2100      	movs	r1, #0
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <send+0xe0>)
 8001104:	f003 f85c 	bl	80041c0 <HAL_TIM_PWM_Start_DMA>
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <send+0xd8>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
	while (ledHandler.datasentflag == TRANSFER_NOT_FINISHED) {};
 800110e:	bf00      	nop
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <send+0xd8>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d0fb      	beq.n	8001110 <send+0xc4>

}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000d4 	.word	0x200000d4
 8001128:	200000f4 	.word	0x200000f4
 800112c:	20000368 	.word	0x20000368

08001130 <MDL_leds_next_round>:

void MDL_leds_next_round(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < NUM_OF_LEDS - 1; i++) {
 8001136:	2300      	movs	r3, #0
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	e026      	b.n	800118a <MDL_leds_next_round+0x5a>
		uint8_t n = i + rand() / (RAND_MAX / (NUM_OF_LEDS - i) + 1);
 800113c:	f004 f834 	bl	80051a8 <rand>
 8001140:	4602      	mov	r2, r0
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f1c3 0306 	rsb	r3, r3, #6
 8001148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800114c:	fb91 f3f3 	sdiv	r3, r1, r3
 8001150:	3301      	adds	r3, #1
 8001152:	fb92 f3f3 	sdiv	r3, r2, r3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	4413      	add	r3, r2
 800115c:	71bb      	strb	r3, [r7, #6]
		uint8_t pom = ledHandler.led[n];
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	4a38      	ldr	r2, [pc, #224]	; (8001244 <MDL_leds_next_round+0x114>)
 8001162:	4413      	add	r3, r2
 8001164:	785b      	ldrb	r3, [r3, #1]
 8001166:	717b      	strb	r3, [r7, #5]
		ledHandler.led[n] = ledHandler.led[i];
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	4935      	ldr	r1, [pc, #212]	; (8001244 <MDL_leds_next_round+0x114>)
 800116e:	440a      	add	r2, r1
 8001170:	7851      	ldrb	r1, [r2, #1]
 8001172:	4a34      	ldr	r2, [pc, #208]	; (8001244 <MDL_leds_next_round+0x114>)
 8001174:	4413      	add	r3, r2
 8001176:	460a      	mov	r2, r1
 8001178:	705a      	strb	r2, [r3, #1]
		ledHandler.led[i] = pom;
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4a31      	ldr	r2, [pc, #196]	; (8001244 <MDL_leds_next_round+0x114>)
 800117e:	4413      	add	r3, r2
 8001180:	797a      	ldrb	r2, [r7, #5]
 8001182:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < NUM_OF_LEDS - 1; i++) {
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	3301      	adds	r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b04      	cmp	r3, #4
 800118e:	d9d5      	bls.n	800113c <MDL_leds_next_round+0xc>
	}

	set_LED(LED_1, 0, 0, 0);
 8001190:	2300      	movs	r3, #0
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff ff2a 	bl	8000ff0 <set_LED>
	set_LED(LED_2, 0, 0, 0);
 800119c:	2300      	movs	r3, #0
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff ff24 	bl	8000ff0 <set_LED>
	set_LED(LED_3, 0, 0, 0);
 80011a8:	2300      	movs	r3, #0
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	f7ff ff1e 	bl	8000ff0 <set_LED>
	set_LED(LED_4, 0, 0, 0);
 80011b4:	2300      	movs	r3, #0
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2003      	movs	r0, #3
 80011bc:	f7ff ff18 	bl	8000ff0 <set_LED>
	set_LED(LED_5, 0, 0, 0);
 80011c0:	2300      	movs	r3, #0
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2004      	movs	r0, #4
 80011c8:	f7ff ff12 	bl	8000ff0 <set_LED>
	set_LED(LED_6, 0, 0, 0);
 80011cc:	2300      	movs	r3, #0
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2005      	movs	r0, #5
 80011d4:	f7ff ff0c 	bl	8000ff0 <set_LED>
	send();
 80011d8:	f7ff ff38 	bl	800104c <send>
	HAL_Delay(800);
 80011dc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80011e0:	f001 f814 	bl	800220c <HAL_Delay>

	set_LED(ledHandler.led[0], 255, 0, 0);
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MDL_leds_next_round+0x114>)
 80011e6:	7858      	ldrb	r0, [r3, #1]
 80011e8:	2300      	movs	r3, #0
 80011ea:	2200      	movs	r2, #0
 80011ec:	21ff      	movs	r1, #255	; 0xff
 80011ee:	f7ff feff 	bl	8000ff0 <set_LED>
	set_LED(ledHandler.led[1], 0, 255, 0);
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MDL_leds_next_round+0x114>)
 80011f4:	7898      	ldrb	r0, [r3, #2]
 80011f6:	2300      	movs	r3, #0
 80011f8:	22ff      	movs	r2, #255	; 0xff
 80011fa:	2100      	movs	r1, #0
 80011fc:	f7ff fef8 	bl	8000ff0 <set_LED>
	set_LED(ledHandler.led[2], 0, 255, 0);
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MDL_leds_next_round+0x114>)
 8001202:	78d8      	ldrb	r0, [r3, #3]
 8001204:	2300      	movs	r3, #0
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	2100      	movs	r1, #0
 800120a:	f7ff fef1 	bl	8000ff0 <set_LED>
	set_LED(ledHandler.led[3], 0, 0, 255);
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MDL_leds_next_round+0x114>)
 8001210:	7918      	ldrb	r0, [r3, #4]
 8001212:	23ff      	movs	r3, #255	; 0xff
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	f7ff feea 	bl	8000ff0 <set_LED>
	set_LED(ledHandler.led[4], 0, 0, 255);
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MDL_leds_next_round+0x114>)
 800121e:	7958      	ldrb	r0, [r3, #5]
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	f7ff fee3 	bl	8000ff0 <set_LED>
	set_LED(ledHandler.led[5], 0, 0, 255);
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MDL_leds_next_round+0x114>)
 800122c:	7998      	ldrb	r0, [r3, #6]
 800122e:	23ff      	movs	r3, #255	; 0xff
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	f7ff fedc 	bl	8000ff0 <set_LED>
	send();
 8001238:	f7ff ff08 	bl	800104c <send>

}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000d4 	.word	0x200000d4

08001248 <MDL_leds_scored>:

void MDL_leds_scored(uint8_t sensorNum) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	uint8_t index;
//	uint8_t points = 25;  // plava
	uint8_t color = 3;
 8001252:	2303      	movs	r3, #3
 8001254:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 8001256:	2300      	movs	r3, #0
 8001258:	737b      	strb	r3, [r7, #13]
 800125a:	e00b      	b.n	8001274 <MDL_leds_scored+0x2c>
		if (ledHandler.led[i] == sensorNum) index = i;
 800125c:	7b7b      	ldrb	r3, [r7, #13]
 800125e:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <MDL_leds_scored+0xc0>)
 8001260:	4413      	add	r3, r2
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	79fa      	ldrb	r2, [r7, #7]
 8001266:	429a      	cmp	r2, r3
 8001268:	d101      	bne.n	800126e <MDL_leds_scored+0x26>
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 800126e:	7b7b      	ldrb	r3, [r7, #13]
 8001270:	3301      	adds	r3, #1
 8001272:	737b      	strb	r3, [r7, #13]
 8001274:	7b7b      	ldrb	r3, [r7, #13]
 8001276:	2b05      	cmp	r3, #5
 8001278:	d9f0      	bls.n	800125c <MDL_leds_scored+0x14>
	}

	if (index == 0) {  // crvena
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <MDL_leds_scored+0x3e>
		color = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	73bb      	strb	r3, [r7, #14]
 8001284:	e007      	b.n	8001296 <MDL_leds_scored+0x4e>
//		points = 100;
	}
	else if (index == 1 || index == 2) { //zelena
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d002      	beq.n	8001292 <MDL_leds_scored+0x4a>
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d101      	bne.n	8001296 <MDL_leds_scored+0x4e>
		color = 2;
 8001292:	2302      	movs	r3, #2
 8001294:	73bb      	strb	r3, [r7, #14]
//		points = 50;
	}

	for (uint8_t j = 0; j < 3; j++) {
 8001296:	2300      	movs	r3, #0
 8001298:	733b      	strb	r3, [r7, #12]
 800129a:	e02c      	b.n	80012f6 <MDL_leds_scored+0xae>
		set_LED(sensorNum, 0, 0, 0);
 800129c:	79f8      	ldrb	r0, [r7, #7]
 800129e:	2300      	movs	r3, #0
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	f7ff fea4 	bl	8000ff0 <set_LED>
		send();
 80012a8:	f7ff fed0 	bl	800104c <send>
		HAL_Delay(100);
 80012ac:	2064      	movs	r0, #100	; 0x64
 80012ae:	f000 ffad 	bl	800220c <HAL_Delay>
		if (color == 1)	set_LED(sensorNum, 255, 0, 0);
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d106      	bne.n	80012c6 <MDL_leds_scored+0x7e>
 80012b8:	79f8      	ldrb	r0, [r7, #7]
 80012ba:	2300      	movs	r3, #0
 80012bc:	2200      	movs	r2, #0
 80012be:	21ff      	movs	r1, #255	; 0xff
 80012c0:	f7ff fe96 	bl	8000ff0 <set_LED>
 80012c4:	e00f      	b.n	80012e6 <MDL_leds_scored+0x9e>
		else if (color == 2) set_LED(sensorNum, 0, 255, 0);
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d106      	bne.n	80012da <MDL_leds_scored+0x92>
 80012cc:	79f8      	ldrb	r0, [r7, #7]
 80012ce:	2300      	movs	r3, #0
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	2100      	movs	r1, #0
 80012d4:	f7ff fe8c 	bl	8000ff0 <set_LED>
 80012d8:	e005      	b.n	80012e6 <MDL_leds_scored+0x9e>
		else set_LED(sensorNum, 0, 0, 255);
 80012da:	79f8      	ldrb	r0, [r7, #7]
 80012dc:	23ff      	movs	r3, #255	; 0xff
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	f7ff fe85 	bl	8000ff0 <set_LED>
		send();
 80012e6:	f7ff feb1 	bl	800104c <send>
		HAL_Delay(100);
 80012ea:	2064      	movs	r0, #100	; 0x64
 80012ec:	f000 ff8e 	bl	800220c <HAL_Delay>
	for (uint8_t j = 0; j < 3; j++) {
 80012f0:	7b3b      	ldrb	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	733b      	strb	r3, [r7, #12]
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d9cf      	bls.n	800129c <MDL_leds_scored+0x54>
	}

//	majda(points);  dodati include majdin .h
//	dispenzer(points); dodati include .h i odkomentirari points

}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000d4 	.word	0x200000d4

0800130c <HAL_TIM_PWM_PulseFinishedCallback>:

}



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	ledHandler.datasentflag = TRANSFER_FINISHED;
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	200000d4 	.word	0x200000d4

0800132c <MDL_sensors_init>:

//************************************************************************************

//*******************************PUBLIC FUNCTIONS*************************************

void MDL_sensors_init() {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
	sensors_handler.state = START_CALIBRATION;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MDL_sensors_init+0x84>)
 8001334:	2205      	movs	r2, #5
 8001336:	701a      	strb	r2, [r3, #0]
	sensors_handler.ordinalNumOfMeasurement = 0;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MDL_sensors_init+0x84>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	sensors_handler.ordinalNumOfMeasurementForCalibration = 0;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MDL_sensors_init+0x84>)
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	e00e      	b.n	800136c <MDL_sensors_init+0x40>
		sensors_handler.sensors[i].currentState = GPIO_PIN_RESET;
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <MDL_sensors_init+0x84>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4413      	add	r3, r2
 8001356:	2200      	movs	r2, #0
 8001358:	719a      	strb	r2, [r3, #6]
		sensors_handler.sensors[i].wantedState = GPIO_PIN_RESET;
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <MDL_sensors_init+0x84>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	2200      	movs	r2, #0
 8001364:	71da      	strb	r2, [r3, #7]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3301      	adds	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b05      	cmp	r3, #5
 8001370:	dded      	ble.n	800134e <MDL_sensors_init+0x22>
	}

	sensors_handler.sensors[0].gpio_pin = GPIO_PIN_13;
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MDL_sensors_init+0x84>)
 8001374:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001378:	809a      	strh	r2, [r3, #4]
	sensors_handler.sensors[1].gpio_pin = GPIO_PIN_15;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <MDL_sensors_init+0x84>)
 800137c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001380:	819a      	strh	r2, [r3, #12]
	sensors_handler.sensors[2].gpio_pin = GPIO_PIN_13;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MDL_sensors_init+0x84>)
 8001384:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001388:	829a      	strh	r2, [r3, #20]
	sensors_handler.sensors[3].gpio_pin = GPIO_PIN_15;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MDL_sensors_init+0x84>)
 800138c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001390:	839a      	strh	r2, [r3, #28]
	sensors_handler.sensors[4].gpio_pin = GPIO_PIN_13;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <MDL_sensors_init+0x84>)
 8001394:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001398:	849a      	strh	r2, [r3, #36]	; 0x24
	sensors_handler.sensors[5].gpio_pin = GPIO_PIN_15;
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <MDL_sensors_init+0x84>)
 800139c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013a0:	859a      	strh	r2, [r3, #44]	; 0x2c

}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000278 	.word	0x20000278

080013b4 <MDL_sensors_handler>:

void MDL_sensors_handler() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

	switch (sensors_handler.state) {
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MDL_sensors_handler+0x8c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d83c      	bhi.n	800143c <MDL_sensors_handler+0x88>
 80013c2:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <MDL_sensors_handler+0x14>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080013ed 	.word	0x080013ed
 80013cc:	080013ff 	.word	0x080013ff
 80013d0:	08001403 	.word	0x08001403
 80013d4:	08001409 	.word	0x08001409
 80013d8:	0800140f 	.word	0x0800140f
 80013dc:	08001415 	.word	0x08001415
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	08001431 	.word	0x08001431
 80013e8:	08001437 	.word	0x08001437
	case GETTING_DATA:
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensors_handler.buffer,
 80013ec:	2206      	movs	r2, #6
 80013ee:	4915      	ldr	r1, [pc, #84]	; (8001444 <MDL_sensors_handler+0x90>)
 80013f0:	4815      	ldr	r0, [pc, #84]	; (8001448 <MDL_sensors_handler+0x94>)
 80013f2:	f000 ffa5 	bl	8002340 <HAL_ADC_Start_DMA>
		NUM_OF_SENSORS);
		sensors_handler.state = WAITING_FOR_DATA;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MDL_sensors_handler+0x8c>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
		break;
 80013fc:	e01e      	b.n	800143c <MDL_sensors_handler+0x88>
	case WAITING_FOR_DATA:
		__NOP();
 80013fe:	bf00      	nop
		break;
 8001400:	e01c      	b.n	800143c <MDL_sensors_handler+0x88>
	case CALCULATING_DATA:
		sensors_calculateCurrentData();
 8001402:	f000 f919 	bl	8001638 <sensors_calculateCurrentData>
		break;
 8001406:	e019      	b.n	800143c <MDL_sensors_handler+0x88>
	case DETERMINING_SENSOR_STATE:
		sensors_determineIfSensorsDetectedObject();
 8001408:	f000 f896 	bl	8001538 <sensors_determineIfSensorsDetectedObject>
		break;
 800140c:	e016      	b.n	800143c <MDL_sensors_handler+0x88>
	case CHECKING_SENSOR_STATE:
		sensors_checkSensorState();
 800140e:	f000 f8cd 	bl	80015ac <sensors_checkSensorState>
		break;
 8001412:	e013      	b.n	800143c <MDL_sensors_handler+0x88>
	case START_CALIBRATION:
		HAL_ADC_Stop(&hadc1);
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MDL_sensors_handler+0x94>)
 8001416:	f000 ff60 	bl	80022da <HAL_ADC_Stop>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensors_handler.buffer, NUM_OF_SENSORS);
 800141a:	2206      	movs	r2, #6
 800141c:	4909      	ldr	r1, [pc, #36]	; (8001444 <MDL_sensors_handler+0x90>)
 800141e:	480a      	ldr	r0, [pc, #40]	; (8001448 <MDL_sensors_handler+0x94>)
 8001420:	f000 ff8e 	bl	8002340 <HAL_ADC_Start_DMA>
		sensors_handler.state = WAITING_FOR_CALIBRATION_DATA;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MDL_sensors_handler+0x8c>)
 8001426:	2206      	movs	r2, #6
 8001428:	701a      	strb	r2, [r3, #0]
		break;
 800142a:	e007      	b.n	800143c <MDL_sensors_handler+0x88>
	case WAITING_FOR_CALIBRATION_DATA:
		__NOP();
 800142c:	bf00      	nop
		break;
 800142e:	e005      	b.n	800143c <MDL_sensors_handler+0x88>
	case CALCULATING_DATA_FOR_CALIBRATION:
		sensors_calculateCurrentDataForCalibration();
 8001430:	f000 f846 	bl	80014c0 <sensors_calculateCurrentDataForCalibration>
		break;
 8001434:	e002      	b.n	800143c <MDL_sensors_handler+0x88>
	case CALIBRATING:
		sensors_calibrateSensors();
 8001436:	f000 f809 	bl	800144c <sensors_calibrateSensors>
		break;
 800143a:	bf00      	nop
	}
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000278 	.word	0x20000278
 8001444:	200002ac 	.word	0x200002ac
 8001448:	200002bc 	.word	0x200002bc

0800144c <sensors_calibrateSensors>:

//************************************************************************************

//**********************PRIVATE FUNCTION DEFINITIONS**********************************

void sensors_calibrateSensors() {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
	uint32_t minMeasuredData = MAX_INT16;
 8001452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001456:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001458:	2300      	movs	r3, #0
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	e018      	b.n	8001490 <sensors_calibrateSensors+0x44>
		if (sensors_handler.sensors[i].sumOfDistances / NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION < minMeasuredData) {
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <sensors_calibrateSensors+0x6c>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <sensors_calibrateSensors+0x70>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d909      	bls.n	800148a <sensors_calibrateSensors+0x3e>
			minMeasuredData = sensors_handler.sensors[i].sumOfDistances / NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION;
 8001476:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <sensors_calibrateSensors+0x6c>)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <sensors_calibrateSensors+0x70>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b05      	cmp	r3, #5
 8001494:	dde3      	ble.n	800145e <sensors_calibrateSensors+0x12>
		}
	}

	sensors_handler.threshold = minMeasuredData - THRESHOLD_REDUCER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	3b32      	subs	r3, #50	; 0x32
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <sensors_calibrateSensors+0x6c>)
 80014a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	sensors_handler.state = GETTING_DATA;
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <sensors_calibrateSensors+0x6c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000278 	.word	0x20000278
 80014bc:	51eb851f 	.word	0x51eb851f

080014c0 <sensors_calculateCurrentDataForCalibration>:

void sensors_calculateCurrentDataForCalibration() {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	e015      	b.n	80014f8 <sensors_calculateCurrentDataForCalibration+0x38>
		sensors_handler.sensors[i].sumOfDistances += sensors_handler.buffer[i];
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <sensors_calculateCurrentDataForCalibration+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3318      	adds	r3, #24
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	889b      	ldrh	r3, [r3, #4]
 80014d8:	b299      	uxth	r1, r3
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <sensors_calculateCurrentDataForCalibration+0x74>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	460a      	mov	r2, r1
 80014e6:	441a      	add	r2, r3
 80014e8:	4912      	ldr	r1, [pc, #72]	; (8001534 <sensors_calculateCurrentDataForCalibration+0x74>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3301      	adds	r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	dde6      	ble.n	80014cc <sensors_calculateCurrentDataForCalibration+0xc>
	}

	if (++sensors_handler.ordinalNumOfMeasurementForCalibration == NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION) {
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <sensors_calculateCurrentDataForCalibration+0x74>)
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001504:	3301      	adds	r3, #1
 8001506:	b2da      	uxtb	r2, r3
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <sensors_calculateCurrentDataForCalibration+0x74>)
 800150a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <sensors_calculateCurrentDataForCalibration+0x74>)
 8001510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d103      	bne.n	8001520 <sensors_calculateCurrentDataForCalibration+0x60>
		sensors_handler.state = CALIBRATING;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <sensors_calculateCurrentDataForCalibration+0x74>)
 800151a:	2208      	movs	r2, #8
 800151c:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = START_CALIBRATION;
	}

}
 800151e:	e002      	b.n	8001526 <sensors_calculateCurrentDataForCalibration+0x66>
		sensors_handler.state = START_CALIBRATION;
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <sensors_calculateCurrentDataForCalibration+0x74>)
 8001522:	2205      	movs	r2, #5
 8001524:	701a      	strb	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000278 	.word	0x20000278

08001538 <sensors_determineIfSensorsDetectedObject>:

void sensors_determineIfSensorsDetectedObject() {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	e023      	b.n	800158c <sensors_determineIfSensorsDetectedObject+0x54>
		if (sensors_handler.sensors[i].sumOfDistances
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	689b      	ldr	r3, [r3, #8]
				/ NUM_OF_REQUIRED_MEASURMENTS < sensors_handler.threshold) {
 800154e:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <sensors_determineIfSensorsDetectedObject+0x70>)
 8001550:	fba2 2303 	umull	r2, r3, r2, r3
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001558:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
		if (sensors_handler.sensors[i].sumOfDistances
 800155c:	4293      	cmp	r3, r2
 800155e:	d206      	bcs.n	800156e <sensors_determineIfSensorsDetectedObject+0x36>
			sensors_handler.sensors[i].wantedState = GPIO_PIN_SET;
 8001560:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	2201      	movs	r2, #1
 800156a:	71da      	strb	r2, [r3, #7]
 800156c:	e005      	b.n	800157a <sensors_determineIfSensorsDetectedObject+0x42>
		} else {
			sensors_handler.sensors[i].wantedState = GPIO_PIN_RESET;
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	2200      	movs	r2, #0
 8001578:	71da      	strb	r2, [r3, #7]
		}

		sensors_handler.sensors[i].sumOfDistances = 0;
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <sensors_determineIfSensorsDetectedObject+0x6c>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3301      	adds	r3, #1
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b05      	cmp	r3, #5
 8001590:	ddd8      	ble.n	8001544 <sensors_determineIfSensorsDetectedObject+0xc>
	}

	sensors_handler.state = CHECKING_SENSOR_STATE;
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <sensors_determineIfSensorsDetectedObject+0x6c>)
 8001594:	2204      	movs	r2, #4
 8001596:	701a      	strb	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	20000278 	.word	0x20000278
 80015a8:	cccccccd 	.word	0xcccccccd

080015ac <sensors_checkSensorState>:

void sensors_checkSensorState() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	e02c      	b.n	8001612 <sensors_checkSensorState+0x66>
		if (sensors_handler.sensors[i].currentState
 80015b8:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <sensors_checkSensorState+0x84>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	799a      	ldrb	r2, [r3, #6]
				!= sensors_handler.sensors[i].wantedState) {
 80015c2:	491b      	ldr	r1, [pc, #108]	; (8001630 <sensors_checkSensorState+0x84>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	79db      	ldrb	r3, [r3, #7]
		if (sensors_handler.sensors[i].currentState
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d01d      	beq.n	800160c <sensors_checkSensorState+0x60>
			HAL_GPIO_WritePin(GPIOG, sensors_handler.sensors[i].gpio_pin,
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <sensors_checkSensorState+0x84>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	8899      	ldrh	r1, [r3, #4]
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <sensors_checkSensorState+0x84>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	79db      	ldrb	r3, [r3, #7]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4813      	ldr	r0, [pc, #76]	; (8001634 <sensors_checkSensorState+0x88>)
 80015e8:	f002 f8c4 	bl	8003774 <HAL_GPIO_WritePin>
					sensors_handler.sensors[i].wantedState);
			sensors_handler.sensors[i].currentState =
					sensors_handler.sensors[i].wantedState;
 80015ec:	4a10      	ldr	r2, [pc, #64]	; (8001630 <sensors_checkSensorState+0x84>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	79d9      	ldrb	r1, [r3, #7]
			sensors_handler.sensors[i].currentState =
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <sensors_checkSensorState+0x84>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	460a      	mov	r2, r1
 8001600:	719a      	strb	r2, [r3, #6]

			MDL_leds_scored(i);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe1e 	bl	8001248 <MDL_leds_scored>
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3301      	adds	r3, #1
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b05      	cmp	r3, #5
 8001616:	ddcf      	ble.n	80015b8 <sensors_checkSensorState+0xc>

		}
	}

	sensors_handler.state = GETTING_DATA;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <sensors_checkSensorState+0x84>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
	sensors_handler.ordinalNumOfMeasurement = 0;
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <sensors_checkSensorState+0x84>)
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000278 	.word	0x20000278
 8001634:	40021800 	.word	0x40021800

08001638 <sensors_calculateCurrentData>:

void sensors_calculateCurrentData() {
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	e015      	b.n	8001670 <sensors_calculateCurrentData+0x38>
		sensors_handler.sensors[i].sumOfDistances += sensors_handler.buffer[i];
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <sensors_calculateCurrentData+0x74>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3318      	adds	r3, #24
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	889b      	ldrh	r3, [r3, #4]
 8001650:	b299      	uxth	r1, r3
 8001652:	4a16      	ldr	r2, [pc, #88]	; (80016ac <sensors_calculateCurrentData+0x74>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	460a      	mov	r2, r1
 800165e:	441a      	add	r2, r3
 8001660:	4912      	ldr	r1, [pc, #72]	; (80016ac <sensors_calculateCurrentData+0x74>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3301      	adds	r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b05      	cmp	r3, #5
 8001674:	dde6      	ble.n	8001644 <sensors_calculateCurrentData+0xc>
	}

	if (++sensors_handler.ordinalNumOfMeasurement == NUM_OF_REQUIRED_MEASURMENTS) {
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <sensors_calculateCurrentData+0x74>)
 8001678:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800167c:	3301      	adds	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <sensors_calculateCurrentData+0x74>)
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <sensors_calculateCurrentData+0x74>)
 8001688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800168c:	2b05      	cmp	r3, #5
 800168e:	d103      	bne.n	8001698 <sensors_calculateCurrentData+0x60>
		sensors_handler.state = DETERMINING_SENSOR_STATE;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <sensors_calculateCurrentData+0x74>)
 8001692:	2203      	movs	r2, #3
 8001694:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = GETTING_DATA;
	}

}
 8001696:	e002      	b.n	800169e <sensors_calculateCurrentData+0x66>
		sensors_handler.state = GETTING_DATA;
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <sensors_calculateCurrentData+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000278 	.word	0x20000278

080016b0 <HAL_ADC_ConvCpltCallback>:

//************************************************************************************

// when DMA finishes transferring data this function is called

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]


	if (sensors_handler.state == WAITING_FOR_CALIBRATION_DATA) {
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d103      	bne.n	80016ca <HAL_ADC_ConvCpltCallback+0x1a>
		sensors_handler.state = CALCULATING_DATA_FOR_CALIBRATION;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = CALCULATING_DATA;
	}
}
 80016c8:	e002      	b.n	80016d0 <HAL_ADC_ConvCpltCallback+0x20>
		sensors_handler.state = CALCULATING_DATA;
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80016cc:	2202      	movs	r2, #2
 80016ce:	701a      	strb	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	20000278 	.word	0x20000278

080016e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <MX_ADC1_Init+0x124>)
 80016f4:	4a44      	ldr	r2, [pc, #272]	; (8001808 <MX_ADC1_Init+0x128>)
 80016f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016f8:	4b42      	ldr	r3, [pc, #264]	; (8001804 <MX_ADC1_Init+0x124>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <MX_ADC1_Init+0x124>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001704:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <MX_ADC1_Init+0x124>)
 8001706:	2201      	movs	r2, #1
 8001708:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <MX_ADC1_Init+0x124>)
 800170c:	2200      	movs	r2, #0
 800170e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <MX_ADC1_Init+0x124>)
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <MX_ADC1_Init+0x124>)
 800171a:	2200      	movs	r2, #0
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800171e:	4b39      	ldr	r3, [pc, #228]	; (8001804 <MX_ADC1_Init+0x124>)
 8001720:	4a3a      	ldr	r2, [pc, #232]	; (800180c <MX_ADC1_Init+0x12c>)
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <MX_ADC1_Init+0x124>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800172a:	4b36      	ldr	r3, [pc, #216]	; (8001804 <MX_ADC1_Init+0x124>)
 800172c:	2206      	movs	r2, #6
 800172e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <MX_ADC1_Init+0x124>)
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001738:	4b32      	ldr	r3, [pc, #200]	; (8001804 <MX_ADC1_Init+0x124>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800173e:	4831      	ldr	r0, [pc, #196]	; (8001804 <MX_ADC1_Init+0x124>)
 8001740:	f000 fd88 	bl	8002254 <HAL_ADC_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800174a:	f000 fa7b 	bl	8001c44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800174e:	2305      	movs	r3, #5
 8001750:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001752:	2301      	movs	r3, #1
 8001754:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175a:	463b      	mov	r3, r7
 800175c:	4619      	mov	r1, r3
 800175e:	4829      	ldr	r0, [pc, #164]	; (8001804 <MX_ADC1_Init+0x124>)
 8001760:	f000 ff12 	bl	8002588 <HAL_ADC_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800176a:	f000 fa6b 	bl	8001c44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800176e:	2307      	movs	r3, #7
 8001770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001772:	2302      	movs	r3, #2
 8001774:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001776:	463b      	mov	r3, r7
 8001778:	4619      	mov	r1, r3
 800177a:	4822      	ldr	r0, [pc, #136]	; (8001804 <MX_ADC1_Init+0x124>)
 800177c:	f000 ff04 	bl	8002588 <HAL_ADC_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001786:	f000 fa5d 	bl	8001c44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800178a:	230b      	movs	r3, #11
 800178c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800178e:	2303      	movs	r3, #3
 8001790:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001792:	463b      	mov	r3, r7
 8001794:	4619      	mov	r1, r3
 8001796:	481b      	ldr	r0, [pc, #108]	; (8001804 <MX_ADC1_Init+0x124>)
 8001798:	f000 fef6 	bl	8002588 <HAL_ADC_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80017a2:	f000 fa4f 	bl	8001c44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017a6:	2306      	movs	r3, #6
 80017a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017aa:	2304      	movs	r3, #4
 80017ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ae:	463b      	mov	r3, r7
 80017b0:	4619      	mov	r1, r3
 80017b2:	4814      	ldr	r0, [pc, #80]	; (8001804 <MX_ADC1_Init+0x124>)
 80017b4:	f000 fee8 	bl	8002588 <HAL_ADC_ConfigChannel>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80017be:	f000 fa41 	bl	8001c44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80017c2:	2308      	movs	r3, #8
 80017c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017c6:	2305      	movs	r3, #5
 80017c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	4619      	mov	r1, r3
 80017ce:	480d      	ldr	r0, [pc, #52]	; (8001804 <MX_ADC1_Init+0x124>)
 80017d0:	f000 feda 	bl	8002588 <HAL_ADC_ConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80017da:	f000 fa33 	bl	8001c44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017de:	2309      	movs	r3, #9
 80017e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017e2:	2306      	movs	r3, #6
 80017e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e6:	463b      	mov	r3, r7
 80017e8:	4619      	mov	r1, r3
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <MX_ADC1_Init+0x124>)
 80017ec:	f000 fecc 	bl	8002588 <HAL_ADC_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80017f6:	f000 fa25 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200002bc 	.word	0x200002bc
 8001808:	40012000 	.word	0x40012000
 800180c:	0f000001 	.word	0x0f000001

08001810 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_ADC_MspInit+0x148>)
 800182e:	4293      	cmp	r3, r2
 8001830:	f040 808d 	bne.w	800194e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	4b48      	ldr	r3, [pc, #288]	; (800195c <HAL_ADC_MspInit+0x14c>)
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	4a47      	ldr	r2, [pc, #284]	; (800195c <HAL_ADC_MspInit+0x14c>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6453      	str	r3, [r2, #68]	; 0x44
 8001844:	4b45      	ldr	r3, [pc, #276]	; (800195c <HAL_ADC_MspInit+0x14c>)
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_ADC_MspInit+0x14c>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4a40      	ldr	r2, [pc, #256]	; (800195c <HAL_ADC_MspInit+0x14c>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6313      	str	r3, [r2, #48]	; 0x30
 8001860:	4b3e      	ldr	r3, [pc, #248]	; (800195c <HAL_ADC_MspInit+0x14c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_ADC_MspInit+0x14c>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a39      	ldr	r2, [pc, #228]	; (800195c <HAL_ADC_MspInit+0x14c>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_ADC_MspInit+0x14c>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4b33      	ldr	r3, [pc, #204]	; (800195c <HAL_ADC_MspInit+0x14c>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4a32      	ldr	r2, [pc, #200]	; (800195c <HAL_ADC_MspInit+0x14c>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	6313      	str	r3, [r2, #48]	; 0x30
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_ADC_MspInit+0x14c>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	482a      	ldr	r0, [pc, #168]	; (8001960 <HAL_ADC_MspInit+0x150>)
 80018b8:	f001 fd98 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018bc:	23e0      	movs	r3, #224	; 0xe0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	4825      	ldr	r0, [pc, #148]	; (8001964 <HAL_ADC_MspInit+0x154>)
 80018d0:	f001 fd8c 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d4:	2303      	movs	r3, #3
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d8:	2303      	movs	r3, #3
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	4820      	ldr	r0, [pc, #128]	; (8001968 <HAL_ADC_MspInit+0x158>)
 80018e8:	f001 fd80 	bl	80033ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <HAL_ADC_MspInit+0x15c>)
 80018ee:	4a20      	ldr	r2, [pc, #128]	; (8001970 <HAL_ADC_MspInit+0x160>)
 80018f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_ADC_MspInit+0x15c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <HAL_ADC_MspInit+0x15c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_ADC_MspInit+0x15c>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_ADC_MspInit+0x15c>)
 8001906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_ADC_MspInit+0x15c>)
 800190e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001912:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_ADC_MspInit+0x15c>)
 8001916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_ADC_MspInit+0x15c>)
 800191e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001922:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_ADC_MspInit+0x15c>)
 8001926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800192a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_ADC_MspInit+0x15c>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001932:	480e      	ldr	r0, [pc, #56]	; (800196c <HAL_ADC_MspInit+0x15c>)
 8001934:	f001 f9ea 	bl	8002d0c <HAL_DMA_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800193e:	f000 f981 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_ADC_MspInit+0x15c>)
 8001946:	639a      	str	r2, [r3, #56]	; 0x38
 8001948:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_ADC_MspInit+0x15c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800194e:	bf00      	nop
 8001950:	3730      	adds	r7, #48	; 0x30
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40012000 	.word	0x40012000
 800195c:	40023800 	.word	0x40023800
 8001960:	40020800 	.word	0x40020800
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400
 800196c:	20000304 	.word	0x20000304
 8001970:	40026470 	.word	0x40026470

08001974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_DMA_Init+0x68>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <MX_DMA_Init+0x68>)
 8001984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_DMA_Init+0x68>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <MX_DMA_Init+0x68>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <MX_DMA_Init+0x68>)
 80019a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <MX_DMA_Init+0x68>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	200b      	movs	r0, #11
 80019b8:	f001 f971 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019bc:	200b      	movs	r0, #11
 80019be:	f001 f98a 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	203c      	movs	r0, #60	; 0x3c
 80019c8:	f001 f969 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80019cc:	203c      	movs	r0, #60	; 0x3c
 80019ce:	f001 f982 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800

080019e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <MX_GPIO_Init+0x144>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a42      	ldr	r2, [pc, #264]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a3b      	ldr	r2, [pc, #236]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a34      	ldr	r2, [pc, #208]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a26      	ldr	r2, [pc, #152]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_GPIO_Init+0x144>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f24a 0104 	movw	r1, #40964	; 0xa004
 8001ac0:	4819      	ldr	r0, [pc, #100]	; (8001b28 <MX_GPIO_Init+0x148>)
 8001ac2:	f001 fe57 	bl	8003774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE10 PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001ac6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4814      	ldr	r0, [pc, #80]	; (8001b2c <MX_GPIO_Init+0x14c>)
 8001adc:	f001 fc86 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	480c      	ldr	r0, [pc, #48]	; (8001b28 <MX_GPIO_Init+0x148>)
 8001af8:	f001 fc78 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001afc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <MX_GPIO_Init+0x148>)
 8001b16:	f001 fc69 	bl	80033ec <HAL_GPIO_Init>

}
 8001b1a:	bf00      	nop
 8001b1c:	3730      	adds	r7, #48	; 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40021800 	.word	0x40021800
 8001b2c:	40021000 	.word	0x40021000

08001b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b34:	f000 faf8 	bl	8002128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b38:	f000 f818 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3c:	f7ff ff50 	bl	80019e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b40:	f7ff ff18 	bl	8001974 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b44:	f7ff fdcc 	bl	80016e0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001b48:	f000 f9c0 	bl	8001ecc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MDL_sensors_init();
 8001b4c:	f7ff fbee 	bl	800132c <MDL_sensors_init>
  MDL_leds_init();
 8001b50:	f7ff fa2e 	bl	8000fb0 <MDL_leds_init>
  MDL_buttons_init();
 8001b54:	f7ff f90c 	bl	8000d70 <MDL_buttons_init>
  MDL_dispenser_init();
 8001b58:	f7ff f9e2 	bl	8000f20 <MDL_dispenser_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MDL_leds_next_round();
 8001b5c:	f7ff fae8 	bl	8001130 <MDL_leds_next_round>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		MDL_sensors_handler();
 8001b60:	f7ff fc28 	bl	80013b4 <MDL_sensors_handler>
		MDL_Buttons_Handler();
 8001b64:	f7ff f9c8 	bl	8000ef8 <MDL_Buttons_Handler>
		MDL_sensors_handler();
 8001b68:	e7fa      	b.n	8001b60 <main+0x30>
	...

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	; 0x50
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	2230      	movs	r2, #48	; 0x30
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fb0c 	bl	8005198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <SystemClock_Config+0xd0>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <SystemClock_Config+0xd0>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <SystemClock_Config+0xd0>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <SystemClock_Config+0xd4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bb8:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <SystemClock_Config+0xd4>)
 8001bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <SystemClock_Config+0xd4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001be0:	2304      	movs	r3, #4
 8001be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001be4:	2348      	movs	r3, #72	; 0x48
 8001be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bec:	2304      	movs	r3, #4
 8001bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf0:	f107 0320 	add.w	r3, r7, #32
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 fdd7 	bl	80037a8 <HAL_RCC_OscConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c00:	f000 f820 	bl	8001c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c04:	230f      	movs	r3, #15
 8001c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	2102      	movs	r1, #2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f002 f838 	bl	8003c98 <HAL_RCC_ClockConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c2e:	f000 f809 	bl	8001c44 <Error_Handler>
  }
}
 8001c32:	bf00      	nop
 8001c34:	3750      	adds	r7, #80	; 0x50
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c4c:	e7fe      	b.n	8001c4c <Error_Handler+0x8>
	...

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cec:	f000 fa6e 	bl	80021cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DMA1_Stream0_IRQHandler+0x10>)
 8001cfa:	f001 f90d 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200003b0 	.word	0x200003b0

08001d08 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA2_Stream4_IRQHandler+0x10>)
 8001d0e:	f001 f903 	bl	8002f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000304 	.word	0x20000304

08001d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
	return 1;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_kill>:

int _kill(int pid, int sig)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d36:	f003 fa05 	bl	8005144 <__errno>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2216      	movs	r2, #22
 8001d3e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_exit>:

void _exit (int status)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffe7 	bl	8001d2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d5e:	e7fe      	b.n	8001d5e <_exit+0x12>

08001d60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e00a      	b.n	8001d88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d72:	f3af 8000 	nop.w
 8001d76:	4601      	mov	r1, r0
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	60ba      	str	r2, [r7, #8]
 8001d7e:	b2ca      	uxtb	r2, r1
 8001d80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dbf0      	blt.n	8001d72 <_read+0x12>
	}

return len;
 8001d90:	687b      	ldr	r3, [r7, #4]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e009      	b.n	8001dc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbf1      	blt.n	8001dac <_write+0x12>
	}
	return len;
 8001dc8:	687b      	ldr	r3, [r7, #4]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_close>:

int _close(int file)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfa:	605a      	str	r2, [r3, #4]
	return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_isatty>:

int _isatty(int file)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
	return 1;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f003 f96a 	bl	8005144 <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20030000 	.word	0x20030000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	20000364 	.word	0x20000364
 8001ea4:	20000428 	.word	0x20000428

08001ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <SystemInit+0x20>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <SystemInit+0x20>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08e      	sub	sp, #56	; 0x38
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
 8001ef8:	615a      	str	r2, [r3, #20]
 8001efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <MX_TIM4_Init+0xe8>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 89;
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f10:	2259      	movs	r2, #89	; 0x59
 8001f12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f20:	4823      	ldr	r0, [pc, #140]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f22:	f002 f8a5 	bl	8004070 <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001f2c:	f7ff fe8a 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481c      	ldr	r0, [pc, #112]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f3e:	f002 fbc9 	bl	80046d4 <HAL_TIM_ConfigClockSource>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001f48:	f7ff fe7c 	bl	8001c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f4c:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f4e:	f002 f8de 	bl	800410e <HAL_TIM_PWM_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001f58:	f7ff fe74 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f6c:	f003 f86e 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001f76:	f7ff fe65 	bl	8001c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7a:	2360      	movs	r3, #96	; 0x60
 8001f7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001f92:	f002 fadd 	bl	8004550 <HAL_TIM_PWM_ConfigChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001f9c:	f7ff fe52 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM4_Init+0xe4>)
 8001fa2:	f000 f85d 	bl	8002060 <HAL_TIM_MspPostInit>

}
 8001fa6:	bf00      	nop
 8001fa8:	3738      	adds	r7, #56	; 0x38
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000368 	.word	0x20000368
 8001fb4:	40000800 	.word	0x40000800

08001fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_TIM_Base_MspInit+0x98>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d13d      	bne.n	8002046 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a20      	ldr	r2, [pc, #128]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_TIM_Base_MspInit+0xa4>)
 8001fea:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001fec:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8001fee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ff2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8002002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002006:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 800200a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800200e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8002012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002016:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8002026:	2200      	movs	r2, #0
 8002028:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800202a:	480b      	ldr	r0, [pc, #44]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 800202c:	f000 fe6e 	bl	8002d0c <HAL_DMA_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002036:	f7ff fe05 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
 8002040:	4a05      	ldr	r2, [pc, #20]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40000800 	.word	0x40000800
 8002054:	40023800 	.word	0x40023800
 8002058:	200003b0 	.word	0x200003b0
 800205c:	40026010 	.word	0x40026010

08002060 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <HAL_TIM_MspPostInit+0x68>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d11e      	bne.n	80020c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_TIM_MspPostInit+0x6c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <HAL_TIM_MspPostInit+0x6c>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_TIM_MspPostInit+0x6c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800209e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <HAL_TIM_MspPostInit+0x70>)
 80020bc:	f001 f996 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3720      	adds	r7, #32
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020c00 	.word	0x40020c00

080020d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800210c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d8:	480d      	ldr	r0, [pc, #52]	; (8002110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020da:	490e      	ldr	r1, [pc, #56]	; (8002114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020dc:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a0b      	ldr	r2, [pc, #44]	; (800211c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f0:	4c0b      	ldr	r4, [pc, #44]	; (8002120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020fe:	f7ff fed3 	bl	8001ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002102:	f003 f825 	bl	8005150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002106:	f7ff fd13 	bl	8001b30 <main>
  bx  lr    
 800210a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800210c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002118:	080063a0 	.word	0x080063a0
  ldr r2, =_sbss
 800211c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002120:	20000424 	.word	0x20000424

08002124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC_IRQHandler>
	...

08002128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <HAL_Init+0x40>)
 8002132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_Init+0x40>)
 800213e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_Init+0x40>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 fd99 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002156:	200f      	movs	r0, #15
 8002158:	f000 f808 	bl	800216c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff fd78 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_InitTick+0x54>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_InitTick+0x58>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002182:	fbb3 f3f1 	udiv	r3, r3, r1
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fdb1 	bl	8002cf2 <HAL_SYSTICK_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e00e      	b.n	80021b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0f      	cmp	r3, #15
 800219e:	d80a      	bhi.n	80021b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a0:	2200      	movs	r2, #0
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f000 fd79 	bl	8002c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <HAL_InitTick+0x5c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000008 	.word	0x20000008
 80021c8:	20000004 	.word	0x20000004

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x20>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_IncTick+0x24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_IncTick+0x24>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000410 	.word	0x20000410

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000410 	.word	0x20000410

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff ffee 	bl	80021f4 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffde 	bl	80021f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000008 	.word	0x20000008

08002254 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e033      	b.n	80022d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff facc 	bl	8001810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800229a:	f023 0302 	bic.w	r3, r3, #2
 800229e:	f043 0202 	orr.w	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 faa0 	bl	80027ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
 80022c2:	e001      	b.n	80022c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_Stop+0x16>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e021      	b.n	8002334 <HAL_ADC_Stop+0x5a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Start_DMA+0x1e>
 800235a:	2302      	movs	r3, #2
 800235c:	e0e9      	b.n	8002532 <HAL_ADC_Start_DMA+0x1f2>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d018      	beq.n	80023a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002384:	4b6d      	ldr	r3, [pc, #436]	; (800253c <HAL_ADC_Start_DMA+0x1fc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a6d      	ldr	r2, [pc, #436]	; (8002540 <HAL_ADC_Start_DMA+0x200>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0c9a      	lsrs	r2, r3, #18
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002398:	e002      	b.n	80023a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	3b01      	subs	r3, #1
 800239e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f9      	bne.n	800239a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b4:	d107      	bne.n	80023c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	f040 80a1 	bne.w	8002518 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002400:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002414:	d106      	bne.n	8002424 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f023 0206 	bic.w	r2, r3, #6
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
 8002422:	e002      	b.n	800242a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002432:	4b44      	ldr	r3, [pc, #272]	; (8002544 <HAL_ADC_Start_DMA+0x204>)
 8002434:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	4a43      	ldr	r2, [pc, #268]	; (8002548 <HAL_ADC_Start_DMA+0x208>)
 800243c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_ADC_Start_DMA+0x20c>)
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244a:	4a41      	ldr	r2, [pc, #260]	; (8002550 <HAL_ADC_Start_DMA+0x210>)
 800244c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002456:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002466:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002476:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	334c      	adds	r3, #76	; 0x4c
 8002482:	4619      	mov	r1, r3
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f000 fcee 	bl	8002e68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2b00      	cmp	r3, #0
 8002496:	d12a      	bne.n	80024ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a2d      	ldr	r2, [pc, #180]	; (8002554 <HAL_ADC_Start_DMA+0x214>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d015      	beq.n	80024ce <HAL_ADC_Start_DMA+0x18e>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <HAL_ADC_Start_DMA+0x218>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d105      	bne.n	80024b8 <HAL_ADC_Start_DMA+0x178>
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_ADC_Start_DMA+0x204>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <HAL_ADC_Start_DMA+0x21c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d136      	bne.n	8002530 <HAL_ADC_Start_DMA+0x1f0>
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_ADC_Start_DMA+0x204>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d130      	bne.n	8002530 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d129      	bne.n	8002530 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	e020      	b.n	8002530 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_ADC_Start_DMA+0x214>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d11b      	bne.n	8002530 <HAL_ADC_Start_DMA+0x1f0>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d114      	bne.n	8002530 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	e00b      	b.n	8002530 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f043 0210 	orr.w	r2, r3, #16
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000
 8002540:	431bde83 	.word	0x431bde83
 8002544:	40012300 	.word	0x40012300
 8002548:	080029e5 	.word	0x080029e5
 800254c:	08002a9f 	.word	0x08002a9f
 8002550:	08002abb 	.word	0x08002abb
 8002554:	40012000 	.word	0x40012000
 8002558:	40012100 	.word	0x40012100
 800255c:	40012200 	.word	0x40012200

08002560 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x1c>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e113      	b.n	80027cc <HAL_ADC_ConfigChannel+0x244>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b09      	cmp	r3, #9
 80025b2:	d925      	bls.n	8002600 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68d9      	ldr	r1, [r3, #12]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	3b1e      	subs	r3, #30
 80025ca:	2207      	movs	r2, #7
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43da      	mvns	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	400a      	ands	r2, r1
 80025d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	4603      	mov	r3, r0
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4403      	add	r3, r0
 80025f2:	3b1e      	subs	r3, #30
 80025f4:	409a      	lsls	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	e022      	b.n	8002646 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6919      	ldr	r1, [r3, #16]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	2207      	movs	r2, #7
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	400a      	ands	r2, r1
 8002622:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6919      	ldr	r1, [r3, #16]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	4603      	mov	r3, r0
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4403      	add	r3, r0
 800263c:	409a      	lsls	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b06      	cmp	r3, #6
 800264c:	d824      	bhi.n	8002698 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	3b05      	subs	r3, #5
 8002660:	221f      	movs	r2, #31
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	400a      	ands	r2, r1
 800266e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b05      	subs	r3, #5
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	635a      	str	r2, [r3, #52]	; 0x34
 8002696:	e04c      	b.n	8002732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d824      	bhi.n	80026ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3b23      	subs	r3, #35	; 0x23
 80026b2:	221f      	movs	r2, #31
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43da      	mvns	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	400a      	ands	r2, r1
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3b23      	subs	r3, #35	; 0x23
 80026dc:	fa00 f203 	lsl.w	r2, r0, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
 80026e8:	e023      	b.n	8002732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	3b41      	subs	r3, #65	; 0x41
 80026fc:	221f      	movs	r2, #31
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	400a      	ands	r2, r1
 800270a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	4618      	mov	r0, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b41      	subs	r3, #65	; 0x41
 8002726:	fa00 f203 	lsl.w	r2, r0, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002732:	4b29      	ldr	r3, [pc, #164]	; (80027d8 <HAL_ADC_ConfigChannel+0x250>)
 8002734:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a28      	ldr	r2, [pc, #160]	; (80027dc <HAL_ADC_ConfigChannel+0x254>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d10f      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1d8>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b12      	cmp	r3, #18
 8002746:	d10b      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_ADC_ConfigChannel+0x254>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d12b      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x23a>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_ADC_ConfigChannel+0x258>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <HAL_ADC_ConfigChannel+0x1f4>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b11      	cmp	r3, #17
 800277a:	d122      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_ADC_ConfigChannel+0x258>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d111      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_ADC_ConfigChannel+0x25c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_ADC_ConfigChannel+0x260>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	0c9a      	lsrs	r2, r3, #18
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027b4:	e002      	b.n	80027bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f9      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40012300 	.word	0x40012300
 80027dc:	40012000 	.word	0x40012000
 80027e0:	10000012 	.word	0x10000012
 80027e4:	20000000 	.word	0x20000000
 80027e8:	431bde83 	.word	0x431bde83

080027ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027f4:	4b79      	ldr	r3, [pc, #484]	; (80029dc <ADC_Init+0x1f0>)
 80027f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	431a      	orrs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002820:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	021a      	lsls	r2, r3, #8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002866:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <ADC_Init+0x1f4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d022      	beq.n	80028ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002892:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e00f      	b.n	80028ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0202 	bic.w	r2, r2, #2
 80028f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e1b      	ldrb	r3, [r3, #24]
 8002904:	005a      	lsls	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002926:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002936:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	3b01      	subs	r3, #1
 8002944:	035a      	lsls	r2, r3, #13
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	e007      	b.n	8002960 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	3b01      	subs	r3, #1
 800297c:	051a      	lsls	r2, r3, #20
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029a2:	025a      	lsls	r2, r3, #9
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	029a      	lsls	r2, r3, #10
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40012300 	.word	0x40012300
 80029e0:	0f000001 	.word	0x0f000001

080029e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d13c      	bne.n	8002a78 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d12b      	bne.n	8002a70 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d127      	bne.n	8002a70 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d119      	bne.n	8002a70 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0220 	bic.w	r2, r2, #32
 8002a4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7fe fe1d 	bl	80016b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a76:	e00e      	b.n	8002a96 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f7ff fd75 	bl	8002574 <HAL_ADC_ErrorCallback>
}
 8002a8a:	e004      	b.n	8002a96 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff fd57 	bl	8002560 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f7ff fd4a 	bl	8002574 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4907      	ldr	r1, [pc, #28]	; (8002b84 <__NVIC_EnableIRQ+0x38>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	; (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
         );
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	; 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c54:	d301      	bcc.n	8002c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <SysTick_Config+0x40>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c62:	210f      	movs	r1, #15
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f7ff ff8e 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <SysTick_Config+0x40>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <SysTick_Config+0x40>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff29 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff3e 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff8e 	bl	8002bdc <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5d 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff31 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffa2 	bl	8002c44 <SysTick_Config>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff fa6c 	bl	80021f4 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e099      	b.n	8002e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d48:	e00f      	b.n	8002d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4a:	f7ff fa53 	bl	80021f4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d908      	bls.n	8002d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2203      	movs	r2, #3
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e078      	b.n	8002e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e8      	bne.n	8002d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4b38      	ldr	r3, [pc, #224]	; (8002e64 <HAL_DMA_Init+0x158>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0307 	bic.w	r3, r3, #7
 8002dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d117      	bne.n	8002e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fa6f 	bl	80032f4 <DMA_CheckFifoParam>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2240      	movs	r2, #64	; 0x40
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fa26 	bl	8003288 <DMA_CalcBaseAndBitshift>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	223f      	movs	r2, #63	; 0x3f
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	f010803f 	.word	0xf010803f

08002e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA_Start_IT+0x26>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e040      	b.n	8002f10 <HAL_DMA_Start_IT+0xa8>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d12f      	bne.n	8002f02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f9b8 	bl	800322c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	223f      	movs	r2, #63	; 0x3f
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0216 	orr.w	r2, r2, #22
 8002ed6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0208 	orr.w	r2, r2, #8
 8002eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e005      	b.n	8002f0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f24:	4b8e      	ldr	r3, [pc, #568]	; (8003160 <HAL_DMA_IRQHandler+0x248>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <HAL_DMA_IRQHandler+0x24c>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0a9b      	lsrs	r3, r3, #10
 8002f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	2208      	movs	r2, #8
 8002f44:	409a      	lsls	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d013      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0204 	bic.w	r2, r2, #4
 8002f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f70:	2208      	movs	r2, #8
 8002f72:	409a      	lsls	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7c:	f043 0201 	orr.w	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d012      	beq.n	8002fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f043 0202 	orr.w	r2, r3, #2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d012      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	2204      	movs	r2, #4
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d043      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03c      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	2210      	movs	r2, #16
 8003014:	409a      	lsls	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d018      	beq.n	800305a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d024      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
 8003046:	e01f      	b.n	8003088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
 8003058:	e016      	b.n	8003088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0208 	bic.w	r2, r2, #8
 8003076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	2220      	movs	r2, #32
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 808f 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8087 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	2220      	movs	r2, #32
 80030b0:	409a      	lsls	r2, r3
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d136      	bne.n	8003130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0216 	bic.w	r2, r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_DMA_IRQHandler+0x1da>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0208 	bic.w	r2, r2, #8
 8003100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	223f      	movs	r2, #63	; 0x3f
 8003108:	409a      	lsls	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003122:	2b00      	cmp	r3, #0
 8003124:	d07e      	beq.n	8003224 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
        }
        return;
 800312e:	e079      	b.n	8003224 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01d      	beq.n	800317a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	2b00      	cmp	r3, #0
 8003152:	d031      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
 800315c:	e02c      	b.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000
 8003164:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d023      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e01e      	b.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10f      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0210 	bic.w	r2, r2, #16
 8003196:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d032      	beq.n	8003226 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2205      	movs	r2, #5
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d307      	bcc.n	8003200 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f2      	bne.n	80031e4 <HAL_DMA_IRQHandler+0x2cc>
 80031fe:	e000      	b.n	8003202 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003200:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
 8003222:	e000      	b.n	8003226 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003224:	bf00      	nop
    }
  }
}
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003248:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d108      	bne.n	800326c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800326a:	e007      	b.n	800327c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	60da      	str	r2, [r3, #12]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3b10      	subs	r3, #16
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <DMA_CalcBaseAndBitshift+0x64>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <DMA_CalcBaseAndBitshift+0x68>)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d909      	bls.n	80032ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	1d1a      	adds	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	659a      	str	r2, [r3, #88]	; 0x58
 80032c8:	e007      	b.n	80032da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	aaaaaaab 	.word	0xaaaaaaab
 80032f0:	08006240 	.word	0x08006240

080032f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11f      	bne.n	800334e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d856      	bhi.n	80033c2 <DMA_CheckFifoParam+0xce>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <DMA_CheckFifoParam+0x28>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	0800332d 	.word	0x0800332d
 8003320:	0800333f 	.word	0x0800333f
 8003324:	0800332d 	.word	0x0800332d
 8003328:	080033c3 	.word	0x080033c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d046      	beq.n	80033c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333c:	e043      	b.n	80033c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003346:	d140      	bne.n	80033ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800334c:	e03d      	b.n	80033ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003356:	d121      	bne.n	800339c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d837      	bhi.n	80033ce <DMA_CheckFifoParam+0xda>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <DMA_CheckFifoParam+0x70>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003375 	.word	0x08003375
 8003368:	0800337b 	.word	0x0800337b
 800336c:	08003375 	.word	0x08003375
 8003370:	0800338d 	.word	0x0800338d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e030      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d025      	beq.n	80033d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338a:	e022      	b.n	80033d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003394:	d11f      	bne.n	80033d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800339a:	e01c      	b.n	80033d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d903      	bls.n	80033aa <DMA_CheckFifoParam+0xb6>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d003      	beq.n	80033b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033a8:	e018      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
      break;
 80033ae:	e015      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      break;
 80033c0:	e00b      	b.n	80033da <DMA_CheckFifoParam+0xe6>
      break;
 80033c2:	bf00      	nop
 80033c4:	e00a      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
 80033c8:	e008      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033ca:	bf00      	nop
 80033cc:	e006      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e004      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;   
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <DMA_CheckFifoParam+0xe8>
      break;
 80033da:	bf00      	nop
    }
  } 
  
  return status; 
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop

080033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	e177      	b.n	80036f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003408:	2201      	movs	r2, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	429a      	cmp	r2, r3
 8003422:	f040 8166 	bne.w	80036f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d005      	beq.n	800343e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343a:	2b02      	cmp	r3, #2
 800343c:	d130      	bne.n	80034a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	2203      	movs	r2, #3
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003474:	2201      	movs	r2, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 0201 	and.w	r2, r3, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d017      	beq.n	80034dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d123      	bne.n	8003530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	08da      	lsrs	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3208      	adds	r2, #8
 80034f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	220f      	movs	r2, #15
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	08da      	lsrs	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3208      	adds	r2, #8
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80c0 	beq.w	80036f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b66      	ldr	r3, [pc, #408]	; (8003710 <HAL_GPIO_Init+0x324>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	4a65      	ldr	r2, [pc, #404]	; (8003710 <HAL_GPIO_Init+0x324>)
 800357c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003580:	6453      	str	r3, [r2, #68]	; 0x44
 8003582:	4b63      	ldr	r3, [pc, #396]	; (8003710 <HAL_GPIO_Init+0x324>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800358e:	4a61      	ldr	r2, [pc, #388]	; (8003714 <HAL_GPIO_Init+0x328>)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3302      	adds	r3, #2
 8003596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a58      	ldr	r2, [pc, #352]	; (8003718 <HAL_GPIO_Init+0x32c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d037      	beq.n	800362a <HAL_GPIO_Init+0x23e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a57      	ldr	r2, [pc, #348]	; (800371c <HAL_GPIO_Init+0x330>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_GPIO_Init+0x23a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a56      	ldr	r2, [pc, #344]	; (8003720 <HAL_GPIO_Init+0x334>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02b      	beq.n	8003622 <HAL_GPIO_Init+0x236>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a55      	ldr	r2, [pc, #340]	; (8003724 <HAL_GPIO_Init+0x338>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d025      	beq.n	800361e <HAL_GPIO_Init+0x232>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a54      	ldr	r2, [pc, #336]	; (8003728 <HAL_GPIO_Init+0x33c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01f      	beq.n	800361a <HAL_GPIO_Init+0x22e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a53      	ldr	r2, [pc, #332]	; (800372c <HAL_GPIO_Init+0x340>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d019      	beq.n	8003616 <HAL_GPIO_Init+0x22a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a52      	ldr	r2, [pc, #328]	; (8003730 <HAL_GPIO_Init+0x344>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_GPIO_Init+0x226>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a51      	ldr	r2, [pc, #324]	; (8003734 <HAL_GPIO_Init+0x348>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00d      	beq.n	800360e <HAL_GPIO_Init+0x222>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a50      	ldr	r2, [pc, #320]	; (8003738 <HAL_GPIO_Init+0x34c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <HAL_GPIO_Init+0x21e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4f      	ldr	r2, [pc, #316]	; (800373c <HAL_GPIO_Init+0x350>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <HAL_GPIO_Init+0x21a>
 8003602:	2309      	movs	r3, #9
 8003604:	e012      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003606:	230a      	movs	r3, #10
 8003608:	e010      	b.n	800362c <HAL_GPIO_Init+0x240>
 800360a:	2308      	movs	r3, #8
 800360c:	e00e      	b.n	800362c <HAL_GPIO_Init+0x240>
 800360e:	2307      	movs	r3, #7
 8003610:	e00c      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003612:	2306      	movs	r3, #6
 8003614:	e00a      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003616:	2305      	movs	r3, #5
 8003618:	e008      	b.n	800362c <HAL_GPIO_Init+0x240>
 800361a:	2304      	movs	r3, #4
 800361c:	e006      	b.n	800362c <HAL_GPIO_Init+0x240>
 800361e:	2303      	movs	r3, #3
 8003620:	e004      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003622:	2302      	movs	r3, #2
 8003624:	e002      	b.n	800362c <HAL_GPIO_Init+0x240>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_GPIO_Init+0x240>
 800362a:	2300      	movs	r3, #0
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f002 0203 	and.w	r2, r2, #3
 8003632:	0092      	lsls	r2, r2, #2
 8003634:	4093      	lsls	r3, r2
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800363c:	4935      	ldr	r1, [pc, #212]	; (8003714 <HAL_GPIO_Init+0x328>)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	089b      	lsrs	r3, r3, #2
 8003642:	3302      	adds	r3, #2
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364a:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <HAL_GPIO_Init+0x354>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366e:	4a34      	ldr	r2, [pc, #208]	; (8003740 <HAL_GPIO_Init+0x354>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003674:	4b32      	ldr	r3, [pc, #200]	; (8003740 <HAL_GPIO_Init+0x354>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003698:	4a29      	ldr	r2, [pc, #164]	; (8003740 <HAL_GPIO_Init+0x354>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800369e:	4b28      	ldr	r3, [pc, #160]	; (8003740 <HAL_GPIO_Init+0x354>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036c2:	4a1f      	ldr	r2, [pc, #124]	; (8003740 <HAL_GPIO_Init+0x354>)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_GPIO_Init+0x354>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ec:	4a14      	ldr	r2, [pc, #80]	; (8003740 <HAL_GPIO_Init+0x354>)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3301      	adds	r3, #1
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	f67f ae84 	bls.w	8003408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3724      	adds	r7, #36	; 0x24
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	40013800 	.word	0x40013800
 8003718:	40020000 	.word	0x40020000
 800371c:	40020400 	.word	0x40020400
 8003720:	40020800 	.word	0x40020800
 8003724:	40020c00 	.word	0x40020c00
 8003728:	40021000 	.word	0x40021000
 800372c:	40021400 	.word	0x40021400
 8003730:	40021800 	.word	0x40021800
 8003734:	40021c00 	.word	0x40021c00
 8003738:	40022000 	.word	0x40022000
 800373c:	40022400 	.word	0x40022400
 8003740:	40013c00 	.word	0x40013c00

08003744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	887b      	ldrh	r3, [r7, #2]
 8003756:	4013      	ands	r3, r2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	e001      	b.n	8003766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
 8003780:	4613      	mov	r3, r2
 8003782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003784:	787b      	ldrb	r3, [r7, #1]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003790:	e003      	b.n	800379a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003792:	887b      	ldrh	r3, [r7, #2]
 8003794:	041a      	lsls	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	619a      	str	r2, [r3, #24]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e267      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d075      	beq.n	80038b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d00c      	beq.n	80037ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d2:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d112      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037de:	4b82      	ldr	r3, [pc, #520]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b7e      	ldr	r3, [pc, #504]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05b      	beq.n	80038b0 <HAL_RCC_OscConfig+0x108>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d157      	bne.n	80038b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e242      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x74>
 800380e:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a75      	ldr	r2, [pc, #468]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e01d      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x98>
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6f      	ldr	r2, [pc, #444]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6c      	ldr	r2, [pc, #432]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 8003840:	4b69      	ldr	r3, [pc, #420]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a68      	ldr	r2, [pc, #416]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fcc8 	bl	80021f4 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fcc4 	bl	80021f4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e207      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0xc0>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fe fcb4 	bl	80021f4 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003890:	f7fe fcb0 	bl	80021f4 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1f3      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	4b51      	ldr	r3, [pc, #324]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0xe8>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d063      	beq.n	8003986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d11c      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d6:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1c7      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4937      	ldr	r1, [pc, #220]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	e03a      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x244>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fe fc69 	bl	80021f4 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003926:	f7fe fc65 	bl	80021f4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1a8      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4925      	ldr	r1, [pc, #148]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
 8003958:	e015      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_RCC_OscConfig+0x244>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe fc48 	bl	80021f4 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003968:	f7fe fc44 	bl	80021f4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e187      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d036      	beq.n	8003a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCC_OscConfig+0x248>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fe fc28 	bl	80021f4 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fe fc24 	bl	80021f4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e167      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x200>
 80039c6:	e01b      	b.n	8003a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_OscConfig+0x248>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fe fc11 	bl	80021f4 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	e00e      	b.n	80039f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fe fc0d 	bl	80021f4 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d907      	bls.n	80039f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e150      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
 80039e8:	40023800 	.word	0x40023800
 80039ec:	42470000 	.word	0x42470000
 80039f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ea      	bne.n	80039d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8097 	beq.w	8003b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b81      	ldr	r3, [pc, #516]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10f      	bne.n	8003a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b7a      	ldr	r3, [pc, #488]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3e:	4b77      	ldr	r3, [pc, #476]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d118      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4a:	4b74      	ldr	r3, [pc, #464]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a73      	ldr	r2, [pc, #460]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a56:	f7fe fbcd 	bl	80021f4 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7fe fbc9 	bl	80021f4 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e10c      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2ea>
 8003a84:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a63      	ldr	r2, [pc, #396]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	e01c      	b.n	8003acc <HAL_RCC_OscConfig+0x324>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x30c>
 8003a9a:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a5e      	ldr	r2, [pc, #376]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	f043 0304 	orr.w	r3, r3, #4
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa6:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a5b      	ldr	r2, [pc, #364]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0x324>
 8003ab4:	4b58      	ldr	r3, [pc, #352]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a57      	ldr	r2, [pc, #348]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac0:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a54      	ldr	r2, [pc, #336]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f023 0304 	bic.w	r3, r3, #4
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fb8e 	bl	80021f4 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fe fb8a 	bl	80021f4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e0cb      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ee      	beq.n	8003adc <HAL_RCC_OscConfig+0x334>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b00:	f7fe fb78 	bl	80021f4 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe fb74 	bl	80021f4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0b5      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ee      	bne.n	8003b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80a1 	beq.w	8003c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d05c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d141      	bne.n	8003bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fe fb48 	bl	80021f4 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fe fb44 	bl	80021f4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e087      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	491b      	ldr	r1, [pc, #108]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb6:	f7fe fb1d 	bl	80021f4 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbe:	f7fe fb19 	bl	80021f4 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e05c      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x416>
 8003bdc:	e054      	b.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fb06 	bl	80021f4 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fe fb02 	bl	80021f4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e045      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x444>
 8003c0a:	e03d      	b.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e038      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d028      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d121      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d11a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d111      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cc      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	494d      	ldr	r1, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d044      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e067      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4934      	ldr	r1, [pc, #208]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7fe fa34 	bl	80021f4 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe fa30 	bl	80021f4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20c      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4916      	ldr	r1, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	490e      	ldr	r1, [pc, #56]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1e:	f000 f821 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 8003e22:	4602      	mov	r2, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	490a      	ldr	r1, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	5ccb      	ldrb	r3, [r1, r3]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f994 	bl	800216c <HAL_InitTick>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023c00 	.word	0x40023c00
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08006230 	.word	0x08006230
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	20000004 	.word	0x20000004

08003e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e68:	b094      	sub	sp, #80	; 0x50
 8003e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e70:	2300      	movs	r3, #0
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e74:	2300      	movs	r3, #0
 8003e76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7c:	4b79      	ldr	r3, [pc, #484]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d00d      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	f200 80e1 	bhi.w	8004050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x34>
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e96:	e0db      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b73      	ldr	r3, [pc, #460]	; (8004068 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e9c:	e0db      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e9e:	4b73      	ldr	r3, [pc, #460]	; (800406c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ea0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea2:	e0d8      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eae:	4b6d      	ldr	r3, [pc, #436]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d063      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	099b      	lsrs	r3, r3, #6
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ece:	2300      	movs	r3, #0
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	462b      	mov	r3, r5
 8003eda:	f04f 0000 	mov.w	r0, #0
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	0159      	lsls	r1, r3, #5
 8003ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee8:	0150      	lsls	r0, r2, #5
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4621      	mov	r1, r4
 8003ef0:	1a51      	subs	r1, r2, r1
 8003ef2:	6139      	str	r1, [r7, #16]
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f08:	4659      	mov	r1, fp
 8003f0a:	018b      	lsls	r3, r1, #6
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f12:	4651      	mov	r1, sl
 8003f14:	018a      	lsls	r2, r1, #6
 8003f16:	4651      	mov	r1, sl
 8003f18:	ebb2 0801 	subs.w	r8, r2, r1
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f36:	4690      	mov	r8, r2
 8003f38:	4699      	mov	r9, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	eb18 0303 	adds.w	r3, r8, r3
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	462b      	mov	r3, r5
 8003f44:	eb49 0303 	adc.w	r3, r9, r3
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f56:	4629      	mov	r1, r5
 8003f58:	024b      	lsls	r3, r1, #9
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f60:	4621      	mov	r1, r4
 8003f62:	024a      	lsls	r2, r1, #9
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f74:	f7fc fd7a 	bl	8000a6c <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f80:	e058      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f82:	4b38      	ldr	r3, [pc, #224]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	2300      	movs	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	f04f 0000 	mov.w	r0, #0
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	0159      	lsls	r1, r3, #5
 8003faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fae:	0150      	lsls	r0, r2, #5
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fba:	4649      	mov	r1, r9
 8003fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	00eb      	lsls	r3, r5, #3
 8003fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fea:	00e2      	lsls	r2, r4, #3
 8003fec:	4614      	mov	r4, r2
 8003fee:	461d      	mov	r5, r3
 8003ff0:	4643      	mov	r3, r8
 8003ff2:	18e3      	adds	r3, r4, r3
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	eb45 0303 	adc.w	r3, r5, r3
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800400a:	4629      	mov	r1, r5
 800400c:	028b      	lsls	r3, r1, #10
 800400e:	4621      	mov	r1, r4
 8004010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004014:	4621      	mov	r1, r4
 8004016:	028a      	lsls	r2, r1, #10
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401e:	2200      	movs	r2, #0
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	61fa      	str	r2, [r7, #28]
 8004024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004028:	f7fc fd20 	bl	8000a6c <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800404e:	e002      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_GetSysClockFreq+0x204>)
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004058:	4618      	mov	r0, r3
 800405a:	3750      	adds	r7, #80	; 0x50
 800405c:	46bd      	mov	sp, r7
 800405e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	00f42400 	.word	0x00f42400
 800406c:	007a1200 	.word	0x007a1200

08004070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e041      	b.n	8004106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd ff8e 	bl	8001fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f000 fcbc 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e041      	b.n	80041a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f839 	bl	80041ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3304      	adds	r3, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f000 fc6d 	bl	8004a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_TIM_PWM_Start_DMA+0x2c>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e022      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x72>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d109      	bne.n	8004206 <HAL_TIM_PWM_Start_DMA+0x46>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	bf0c      	ite	eq
 80041fe:	2301      	moveq	r3, #1
 8004200:	2300      	movne	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e015      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x72>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d109      	bne.n	8004220 <HAL_TIM_PWM_Start_DMA+0x60>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e008      	b.n	8004232 <HAL_TIM_PWM_Start_DMA+0x72>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
 8004238:	e171      	b.n	800451e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_TIM_PWM_Start_DMA+0x94>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e022      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0xda>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d109      	bne.n	800426e <HAL_TIM_PWM_Start_DMA+0xae>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e015      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0xda>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d109      	bne.n	8004288 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	e008      	b.n	800429a <HAL_TIM_PWM_Start_DMA+0xda>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d024      	beq.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start_DMA+0xee>
 80042a4:	887b      	ldrh	r3, [r7, #2]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e137      	b.n	800451e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start_DMA+0xfe>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042bc:	e016      	b.n	80042ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start_DMA+0x10e>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042cc:	e00e      	b.n	80042ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start_DMA+0x11e>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042dc:	e006      	b.n	80042ec <HAL_TIM_PWM_Start_DMA+0x12c>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042e6:	e001      	b.n	80042ec <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e118      	b.n	800451e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	f200 80ae 	bhi.w	8004450 <HAL_TIM_PWM_Start_DMA+0x290>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004451 	.word	0x08004451
 8004304:	08004451 	.word	0x08004451
 8004308:	08004451 	.word	0x08004451
 800430c:	08004379 	.word	0x08004379
 8004310:	08004451 	.word	0x08004451
 8004314:	08004451 	.word	0x08004451
 8004318:	08004451 	.word	0x08004451
 800431c:	080043c1 	.word	0x080043c1
 8004320:	08004451 	.word	0x08004451
 8004324:	08004451 	.word	0x08004451
 8004328:	08004451 	.word	0x08004451
 800432c:	08004409 	.word	0x08004409
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	4a7c      	ldr	r2, [pc, #496]	; (8004528 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004336:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	4a7b      	ldr	r2, [pc, #492]	; (800452c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800433e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	4a7a      	ldr	r2, [pc, #488]	; (8004530 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004346:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3334      	adds	r3, #52	; 0x34
 8004354:	461a      	mov	r2, r3
 8004356:	887b      	ldrh	r3, [r7, #2]
 8004358:	f7fe fd86 	bl	8002e68 <HAL_DMA_Start_IT>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0db      	b.n	800451e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004374:	60da      	str	r2, [r3, #12]
      break;
 8004376:	e06e      	b.n	8004456 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	4a6a      	ldr	r2, [pc, #424]	; (8004528 <HAL_TIM_PWM_Start_DMA+0x368>)
 800437e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	4a69      	ldr	r2, [pc, #420]	; (800452c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	4a68      	ldr	r2, [pc, #416]	; (8004530 <HAL_TIM_PWM_Start_DMA+0x370>)
 800438e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3338      	adds	r3, #56	; 0x38
 800439c:	461a      	mov	r2, r3
 800439e:	887b      	ldrh	r3, [r7, #2]
 80043a0:	f7fe fd62 	bl	8002e68 <HAL_DMA_Start_IT>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e0b7      	b.n	800451e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043bc:	60da      	str	r2, [r3, #12]
      break;
 80043be:	e04a      	b.n	8004456 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	4a58      	ldr	r2, [pc, #352]	; (8004528 <HAL_TIM_PWM_Start_DMA+0x368>)
 80043c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	4a57      	ldr	r2, [pc, #348]	; (800452c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	4a56      	ldr	r2, [pc, #344]	; (8004530 <HAL_TIM_PWM_Start_DMA+0x370>)
 80043d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	333c      	adds	r3, #60	; 0x3c
 80043e4:	461a      	mov	r2, r3
 80043e6:	887b      	ldrh	r3, [r7, #2]
 80043e8:	f7fe fd3e 	bl	8002e68 <HAL_DMA_Start_IT>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e093      	b.n	800451e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004404:	60da      	str	r2, [r3, #12]
      break;
 8004406:	e026      	b.n	8004456 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	4a46      	ldr	r2, [pc, #280]	; (8004528 <HAL_TIM_PWM_Start_DMA+0x368>)
 800440e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	4a45      	ldr	r2, [pc, #276]	; (800452c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004416:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4a44      	ldr	r2, [pc, #272]	; (8004530 <HAL_TIM_PWM_Start_DMA+0x370>)
 800441e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3340      	adds	r3, #64	; 0x40
 800442c:	461a      	mov	r2, r3
 800442e:	887b      	ldrh	r3, [r7, #2]
 8004430:	f7fe fd1a 	bl	8002e68 <HAL_DMA_Start_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e06f      	b.n	800451e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800444c:	60da      	str	r2, [r3, #12]
      break;
 800444e:	e002      	b.n	8004456 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	75fb      	strb	r3, [r7, #23]
      break;
 8004454:	bf00      	nop
  }

  if (status == HAL_OK)
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d15f      	bne.n	800451c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fdcb 	bl	8005000 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a31      	ldr	r2, [pc, #196]	; (8004534 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIM_PWM_Start_DMA+0x2be>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <HAL_TIM_PWM_Start_DMA+0x378>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004482:	2300      	movs	r3, #0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004496:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a25      	ldr	r2, [pc, #148]	; (8004534 <HAL_TIM_PWM_Start_DMA+0x374>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d022      	beq.n	80044e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d01d      	beq.n	80044e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a22      	ldr	r2, [pc, #136]	; (800453c <HAL_TIM_PWM_Start_DMA+0x37c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a21      	ldr	r2, [pc, #132]	; (8004540 <HAL_TIM_PWM_Start_DMA+0x380>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <HAL_TIM_PWM_Start_DMA+0x384>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <HAL_TIM_PWM_Start_DMA+0x378>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <HAL_TIM_PWM_Start_DMA+0x388>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIM_PWM_Start_DMA+0x328>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_TIM_PWM_Start_DMA+0x38c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d111      	bne.n	800450c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d010      	beq.n	800451c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450a:	e007      	b.n	800451c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800451c:	7dfb      	ldrb	r3, [r7, #23]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	0800491d 	.word	0x0800491d
 800452c:	080049c5 	.word	0x080049c5
 8004530:	0800488b 	.word	0x0800488b
 8004534:	40010000 	.word	0x40010000
 8004538:	40010400 	.word	0x40010400
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40014000 	.word	0x40014000
 800454c:	40001800 	.word	0x40001800

08004550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800456a:	2302      	movs	r3, #2
 800456c:	e0ae      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b0c      	cmp	r3, #12
 800457a:	f200 809f 	bhi.w	80046bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800457e:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080046bd 	.word	0x080046bd
 800458c:	080046bd 	.word	0x080046bd
 8004590:	080046bd 	.word	0x080046bd
 8004594:	080045f9 	.word	0x080045f9
 8004598:	080046bd 	.word	0x080046bd
 800459c:	080046bd 	.word	0x080046bd
 80045a0:	080046bd 	.word	0x080046bd
 80045a4:	0800463b 	.word	0x0800463b
 80045a8:	080046bd 	.word	0x080046bd
 80045ac:	080046bd 	.word	0x080046bd
 80045b0:	080046bd 	.word	0x080046bd
 80045b4:	0800467b 	.word	0x0800467b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fad4 	bl	8004b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0208 	orr.w	r2, r2, #8
 80045d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0204 	bic.w	r2, r2, #4
 80045e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6999      	ldr	r1, [r3, #24]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	619a      	str	r2, [r3, #24]
      break;
 80045f6:	e064      	b.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fb24 	bl	8004c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6999      	ldr	r1, [r3, #24]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	021a      	lsls	r2, r3, #8
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	619a      	str	r2, [r3, #24]
      break;
 8004638:	e043      	b.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fb79 	bl	8004d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0208 	orr.w	r2, r2, #8
 8004654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0204 	bic.w	r2, r2, #4
 8004664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69d9      	ldr	r1, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	61da      	str	r2, [r3, #28]
      break;
 8004678:	e023      	b.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fbcd 	bl	8004e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69d9      	ldr	r1, [r3, #28]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	021a      	lsls	r2, r3, #8
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	61da      	str	r2, [r3, #28]
      break;
 80046ba:	e002      	b.n	80046c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	75fb      	strb	r3, [r7, #23]
      break;
 80046c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_ConfigClockSource+0x1c>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0b4      	b.n	800485a <HAL_TIM_ConfigClockSource+0x186>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800470e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004728:	d03e      	beq.n	80047a8 <HAL_TIM_ConfigClockSource+0xd4>
 800472a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472e:	f200 8087 	bhi.w	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	f000 8086 	beq.w	8004846 <HAL_TIM_ConfigClockSource+0x172>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473e:	d87f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b70      	cmp	r3, #112	; 0x70
 8004742:	d01a      	beq.n	800477a <HAL_TIM_ConfigClockSource+0xa6>
 8004744:	2b70      	cmp	r3, #112	; 0x70
 8004746:	d87b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b60      	cmp	r3, #96	; 0x60
 800474a:	d050      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x11a>
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d877      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b50      	cmp	r3, #80	; 0x50
 8004752:	d03c      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0xfa>
 8004754:	2b50      	cmp	r3, #80	; 0x50
 8004756:	d873      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d058      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x13a>
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d86f      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d064      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d86b      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d060      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d867      	bhi.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d05c      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b10      	cmp	r3, #16
 8004776:	d05a      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x15a>
 8004778:	e062      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6899      	ldr	r1, [r3, #8]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f000 fc19 	bl	8004fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800479c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	609a      	str	r2, [r3, #8]
      break;
 80047a6:	e04f      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6899      	ldr	r1, [r3, #8]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f000 fc02 	bl	8004fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ca:	609a      	str	r2, [r3, #8]
      break;
 80047cc:	e03c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 fb76 	bl	8004ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2150      	movs	r1, #80	; 0x50
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fbcf 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 80047ec:	e02c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fb95 	bl	8004f2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2160      	movs	r1, #96	; 0x60
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fbbf 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 800480c:	e01c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 fb56 	bl	8004ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2140      	movs	r1, #64	; 0x40
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fbaf 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 800482c:	e00c      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f000 fba6 	bl	8004f8a <TIM_ITRx_SetConfig>
      break;
 800483e:	e003      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	e000      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004858:	7bfb      	ldrb	r3, [r7, #15]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d107      	bne.n	80048b2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b0:	e02a      	b.n	8004908 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d107      	bne.n	80048cc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2202      	movs	r2, #2
 80048c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ca:	e01d      	b.n	8004908 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d107      	bne.n	80048e6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2204      	movs	r2, #4
 80048da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e4:	e010      	b.n	8004908 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d107      	bne.n	8004900 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2208      	movs	r2, #8
 80048f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048fe:	e003      	b.n	8004908 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7ff ffb4 	bl	8004876 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d10b      	bne.n	800494c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d136      	bne.n	80049b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494a:	e031      	b.n	80049b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d10b      	bne.n	800496e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2202      	movs	r2, #2
 800495a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d125      	bne.n	80049b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800496c:	e020      	b.n	80049b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d10b      	bne.n	8004990 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2204      	movs	r2, #4
 800497c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d114      	bne.n	80049b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800498e:	e00f      	b.n	80049b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d10a      	bne.n	80049b0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2208      	movs	r2, #8
 800499e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d103      	bne.n	80049b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7fc fcab 	bl	800130c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	771a      	strb	r2, [r3, #28]
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d103      	bne.n	80049e4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	771a      	strb	r2, [r3, #28]
 80049e2:	e019      	b.n	8004a18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d103      	bne.n	80049f6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2202      	movs	r2, #2
 80049f2:	771a      	strb	r2, [r3, #28]
 80049f4:	e010      	b.n	8004a18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d103      	bne.n	8004a08 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2204      	movs	r2, #4
 8004a04:	771a      	strb	r2, [r3, #28]
 8004a06:	e007      	b.n	8004a18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d102      	bne.n	8004a18 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2208      	movs	r2, #8
 8004a16:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff ff22 	bl	8004862 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a40      	ldr	r2, [pc, #256]	; (8004b40 <TIM_Base_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d00f      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a3d      	ldr	r2, [pc, #244]	; (8004b44 <TIM_Base_SetConfig+0x118>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a3c      	ldr	r2, [pc, #240]	; (8004b48 <TIM_Base_SetConfig+0x11c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <TIM_Base_SetConfig+0x120>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x40>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a3a      	ldr	r2, [pc, #232]	; (8004b50 <TIM_Base_SetConfig+0x124>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <TIM_Base_SetConfig+0x114>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d02b      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8c:	d027      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a2c      	ldr	r2, [pc, #176]	; (8004b44 <TIM_Base_SetConfig+0x118>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d023      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2b      	ldr	r2, [pc, #172]	; (8004b48 <TIM_Base_SetConfig+0x11c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01f      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <TIM_Base_SetConfig+0x120>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01b      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a29      	ldr	r2, [pc, #164]	; (8004b50 <TIM_Base_SetConfig+0x124>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d017      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <TIM_Base_SetConfig+0x128>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <TIM_Base_SetConfig+0x12c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00f      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a26      	ldr	r2, [pc, #152]	; (8004b5c <TIM_Base_SetConfig+0x130>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00b      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a25      	ldr	r2, [pc, #148]	; (8004b60 <TIM_Base_SetConfig+0x134>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d007      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <TIM_Base_SetConfig+0x138>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <TIM_Base_SetConfig+0x13c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d108      	bne.n	8004af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a0a      	ldr	r2, [pc, #40]	; (8004b40 <TIM_Base_SetConfig+0x114>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_Base_SetConfig+0xf8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a0c      	ldr	r2, [pc, #48]	; (8004b50 <TIM_Base_SetConfig+0x124>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d103      	bne.n	8004b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	615a      	str	r2, [r3, #20]
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40014400 	.word	0x40014400
 8004b5c:	40014800 	.word	0x40014800
 8004b60:	40001800 	.word	0x40001800
 8004b64:	40001c00 	.word	0x40001c00
 8004b68:	40002000 	.word	0x40002000

08004b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f023 0302 	bic.w	r3, r3, #2
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a20      	ldr	r2, [pc, #128]	; (8004c44 <TIM_OC1_SetConfig+0xd8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_OC1_SetConfig+0x64>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <TIM_OC1_SetConfig+0xdc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10c      	bne.n	8004bea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0308 	bic.w	r3, r3, #8
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <TIM_OC1_SetConfig+0xd8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_OC1_SetConfig+0x8e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <TIM_OC1_SetConfig+0xdc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d111      	bne.n	8004c1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	621a      	str	r2, [r3, #32]
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40010000 	.word	0x40010000
 8004c48:	40010400 	.word	0x40010400

08004c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0210 	bic.w	r2, r3, #16
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	021b      	lsls	r3, r3, #8
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0320 	bic.w	r3, r3, #32
 8004c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <TIM_OC2_SetConfig+0xe4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_OC2_SetConfig+0x68>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <TIM_OC2_SetConfig+0xe8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10d      	bne.n	8004cd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <TIM_OC2_SetConfig+0xe4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_OC2_SetConfig+0x94>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC2_SetConfig+0xe8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d113      	bne.n	8004d08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40010400 	.word	0x40010400

08004d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <TIM_OC3_SetConfig+0xe0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_OC3_SetConfig+0x66>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <TIM_OC3_SetConfig+0xe4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10d      	bne.n	8004dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <TIM_OC3_SetConfig+0xe0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC3_SetConfig+0x92>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <TIM_OC3_SetConfig+0xe4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d113      	bne.n	8004df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400

08004e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a12      	ldr	r2, [pc, #72]	; (8004ec4 <TIM_OC4_SetConfig+0xa4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC4_SetConfig+0x68>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <TIM_OC4_SetConfig+0xa8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d109      	bne.n	8004e9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	019b      	lsls	r3, r3, #6
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40010400 	.word	0x40010400

08004ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f023 030a 	bic.w	r3, r3, #10
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b087      	sub	sp, #28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0210 	bic.w	r2, r3, #16
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	031b      	lsls	r3, r3, #12
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f043 0307 	orr.w	r3, r3, #7
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2201      	movs	r2, #1
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a1a      	ldr	r2, [r3, #32]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	43db      	mvns	r3, r3
 8005022:	401a      	ands	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	fa01 f303 	lsl.w	r3, r1, r3
 8005038:	431a      	orrs	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005060:	2302      	movs	r3, #2
 8005062:	e05a      	b.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a21      	ldr	r2, [pc, #132]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b0:	d01d      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a17      	ldr	r2, [pc, #92]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a15      	ldr	r2, [pc, #84]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d10c      	bne.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40010000 	.word	0x40010000
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40010400 	.word	0x40010400
 800513c:	40014000 	.word	0x40014000
 8005140:	40001800 	.word	0x40001800

08005144 <__errno>:
 8005144:	4b01      	ldr	r3, [pc, #4]	; (800514c <__errno+0x8>)
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	2000000c 	.word	0x2000000c

08005150 <__libc_init_array>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	4d0d      	ldr	r5, [pc, #52]	; (8005188 <__libc_init_array+0x38>)
 8005154:	4c0d      	ldr	r4, [pc, #52]	; (800518c <__libc_init_array+0x3c>)
 8005156:	1b64      	subs	r4, r4, r5
 8005158:	10a4      	asrs	r4, r4, #2
 800515a:	2600      	movs	r6, #0
 800515c:	42a6      	cmp	r6, r4
 800515e:	d109      	bne.n	8005174 <__libc_init_array+0x24>
 8005160:	4d0b      	ldr	r5, [pc, #44]	; (8005190 <__libc_init_array+0x40>)
 8005162:	4c0c      	ldr	r4, [pc, #48]	; (8005194 <__libc_init_array+0x44>)
 8005164:	f001 f858 	bl	8006218 <_init>
 8005168:	1b64      	subs	r4, r4, r5
 800516a:	10a4      	asrs	r4, r4, #2
 800516c:	2600      	movs	r6, #0
 800516e:	42a6      	cmp	r6, r4
 8005170:	d105      	bne.n	800517e <__libc_init_array+0x2e>
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	f855 3b04 	ldr.w	r3, [r5], #4
 8005178:	4798      	blx	r3
 800517a:	3601      	adds	r6, #1
 800517c:	e7ee      	b.n	800515c <__libc_init_array+0xc>
 800517e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005182:	4798      	blx	r3
 8005184:	3601      	adds	r6, #1
 8005186:	e7f2      	b.n	800516e <__libc_init_array+0x1e>
 8005188:	08006398 	.word	0x08006398
 800518c:	08006398 	.word	0x08006398
 8005190:	08006398 	.word	0x08006398
 8005194:	0800639c 	.word	0x0800639c

08005198 <memset>:
 8005198:	4402      	add	r2, r0
 800519a:	4603      	mov	r3, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <rand>:
 80051a8:	4b16      	ldr	r3, [pc, #88]	; (8005204 <rand+0x5c>)
 80051aa:	b510      	push	{r4, lr}
 80051ac:	681c      	ldr	r4, [r3, #0]
 80051ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b0:	b9b3      	cbnz	r3, 80051e0 <rand+0x38>
 80051b2:	2018      	movs	r0, #24
 80051b4:	f000 f866 	bl	8005284 <malloc>
 80051b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80051ba:	b928      	cbnz	r0, 80051c8 <rand+0x20>
 80051bc:	4602      	mov	r2, r0
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <rand+0x60>)
 80051c0:	4812      	ldr	r0, [pc, #72]	; (800520c <rand+0x64>)
 80051c2:	214e      	movs	r1, #78	; 0x4e
 80051c4:	f000 f82e 	bl	8005224 <__assert_func>
 80051c8:	4a11      	ldr	r2, [pc, #68]	; (8005210 <rand+0x68>)
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <rand+0x6c>)
 80051cc:	e9c0 2300 	strd	r2, r3, [r0]
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <rand+0x70>)
 80051d2:	6083      	str	r3, [r0, #8]
 80051d4:	230b      	movs	r3, #11
 80051d6:	8183      	strh	r3, [r0, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	2300      	movs	r3, #0
 80051dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80051e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80051e2:	4a0e      	ldr	r2, [pc, #56]	; (800521c <rand+0x74>)
 80051e4:	6920      	ldr	r0, [r4, #16]
 80051e6:	6963      	ldr	r3, [r4, #20]
 80051e8:	490d      	ldr	r1, [pc, #52]	; (8005220 <rand+0x78>)
 80051ea:	4342      	muls	r2, r0
 80051ec:	fb01 2203 	mla	r2, r1, r3, r2
 80051f0:	fba0 0101 	umull	r0, r1, r0, r1
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	eb42 0001 	adc.w	r0, r2, r1
 80051fa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80051fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005202:	bd10      	pop	{r4, pc}
 8005204:	2000000c 	.word	0x2000000c
 8005208:	0800624c 	.word	0x0800624c
 800520c:	08006263 	.word	0x08006263
 8005210:	abcd330e 	.word	0xabcd330e
 8005214:	e66d1234 	.word	0xe66d1234
 8005218:	0005deec 	.word	0x0005deec
 800521c:	5851f42d 	.word	0x5851f42d
 8005220:	4c957f2d 	.word	0x4c957f2d

08005224 <__assert_func>:
 8005224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005226:	4614      	mov	r4, r2
 8005228:	461a      	mov	r2, r3
 800522a:	4b09      	ldr	r3, [pc, #36]	; (8005250 <__assert_func+0x2c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4605      	mov	r5, r0
 8005230:	68d8      	ldr	r0, [r3, #12]
 8005232:	b14c      	cbz	r4, 8005248 <__assert_func+0x24>
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <__assert_func+0x30>)
 8005236:	9100      	str	r1, [sp, #0]
 8005238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800523c:	4906      	ldr	r1, [pc, #24]	; (8005258 <__assert_func+0x34>)
 800523e:	462b      	mov	r3, r5
 8005240:	f000 f80e 	bl	8005260 <fiprintf>
 8005244:	f000 fcc4 	bl	8005bd0 <abort>
 8005248:	4b04      	ldr	r3, [pc, #16]	; (800525c <__assert_func+0x38>)
 800524a:	461c      	mov	r4, r3
 800524c:	e7f3      	b.n	8005236 <__assert_func+0x12>
 800524e:	bf00      	nop
 8005250:	2000000c 	.word	0x2000000c
 8005254:	080062be 	.word	0x080062be
 8005258:	080062cb 	.word	0x080062cb
 800525c:	080062f9 	.word	0x080062f9

08005260 <fiprintf>:
 8005260:	b40e      	push	{r1, r2, r3}
 8005262:	b503      	push	{r0, r1, lr}
 8005264:	4601      	mov	r1, r0
 8005266:	ab03      	add	r3, sp, #12
 8005268:	4805      	ldr	r0, [pc, #20]	; (8005280 <fiprintf+0x20>)
 800526a:	f853 2b04 	ldr.w	r2, [r3], #4
 800526e:	6800      	ldr	r0, [r0, #0]
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	f000 f919 	bl	80054a8 <_vfiprintf_r>
 8005276:	b002      	add	sp, #8
 8005278:	f85d eb04 	ldr.w	lr, [sp], #4
 800527c:	b003      	add	sp, #12
 800527e:	4770      	bx	lr
 8005280:	2000000c 	.word	0x2000000c

08005284 <malloc>:
 8005284:	4b02      	ldr	r3, [pc, #8]	; (8005290 <malloc+0xc>)
 8005286:	4601      	mov	r1, r0
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	f000 b86f 	b.w	800536c <_malloc_r>
 800528e:	bf00      	nop
 8005290:	2000000c 	.word	0x2000000c

08005294 <_free_r>:
 8005294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005296:	2900      	cmp	r1, #0
 8005298:	d044      	beq.n	8005324 <_free_r+0x90>
 800529a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529e:	9001      	str	r0, [sp, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f1a1 0404 	sub.w	r4, r1, #4
 80052a6:	bfb8      	it	lt
 80052a8:	18e4      	addlt	r4, r4, r3
 80052aa:	f000 feb9 	bl	8006020 <__malloc_lock>
 80052ae:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <_free_r+0x94>)
 80052b0:	9801      	ldr	r0, [sp, #4]
 80052b2:	6813      	ldr	r3, [r2, #0]
 80052b4:	b933      	cbnz	r3, 80052c4 <_free_r+0x30>
 80052b6:	6063      	str	r3, [r4, #4]
 80052b8:	6014      	str	r4, [r2, #0]
 80052ba:	b003      	add	sp, #12
 80052bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c0:	f000 beb4 	b.w	800602c <__malloc_unlock>
 80052c4:	42a3      	cmp	r3, r4
 80052c6:	d908      	bls.n	80052da <_free_r+0x46>
 80052c8:	6825      	ldr	r5, [r4, #0]
 80052ca:	1961      	adds	r1, r4, r5
 80052cc:	428b      	cmp	r3, r1
 80052ce:	bf01      	itttt	eq
 80052d0:	6819      	ldreq	r1, [r3, #0]
 80052d2:	685b      	ldreq	r3, [r3, #4]
 80052d4:	1949      	addeq	r1, r1, r5
 80052d6:	6021      	streq	r1, [r4, #0]
 80052d8:	e7ed      	b.n	80052b6 <_free_r+0x22>
 80052da:	461a      	mov	r2, r3
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	b10b      	cbz	r3, 80052e4 <_free_r+0x50>
 80052e0:	42a3      	cmp	r3, r4
 80052e2:	d9fa      	bls.n	80052da <_free_r+0x46>
 80052e4:	6811      	ldr	r1, [r2, #0]
 80052e6:	1855      	adds	r5, r2, r1
 80052e8:	42a5      	cmp	r5, r4
 80052ea:	d10b      	bne.n	8005304 <_free_r+0x70>
 80052ec:	6824      	ldr	r4, [r4, #0]
 80052ee:	4421      	add	r1, r4
 80052f0:	1854      	adds	r4, r2, r1
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	6011      	str	r1, [r2, #0]
 80052f6:	d1e0      	bne.n	80052ba <_free_r+0x26>
 80052f8:	681c      	ldr	r4, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	6053      	str	r3, [r2, #4]
 80052fe:	4421      	add	r1, r4
 8005300:	6011      	str	r1, [r2, #0]
 8005302:	e7da      	b.n	80052ba <_free_r+0x26>
 8005304:	d902      	bls.n	800530c <_free_r+0x78>
 8005306:	230c      	movs	r3, #12
 8005308:	6003      	str	r3, [r0, #0]
 800530a:	e7d6      	b.n	80052ba <_free_r+0x26>
 800530c:	6825      	ldr	r5, [r4, #0]
 800530e:	1961      	adds	r1, r4, r5
 8005310:	428b      	cmp	r3, r1
 8005312:	bf04      	itt	eq
 8005314:	6819      	ldreq	r1, [r3, #0]
 8005316:	685b      	ldreq	r3, [r3, #4]
 8005318:	6063      	str	r3, [r4, #4]
 800531a:	bf04      	itt	eq
 800531c:	1949      	addeq	r1, r1, r5
 800531e:	6021      	streq	r1, [r4, #0]
 8005320:	6054      	str	r4, [r2, #4]
 8005322:	e7ca      	b.n	80052ba <_free_r+0x26>
 8005324:	b003      	add	sp, #12
 8005326:	bd30      	pop	{r4, r5, pc}
 8005328:	20000414 	.word	0x20000414

0800532c <sbrk_aligned>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4e0e      	ldr	r6, [pc, #56]	; (8005368 <sbrk_aligned+0x3c>)
 8005330:	460c      	mov	r4, r1
 8005332:	6831      	ldr	r1, [r6, #0]
 8005334:	4605      	mov	r5, r0
 8005336:	b911      	cbnz	r1, 800533e <sbrk_aligned+0x12>
 8005338:	f000 fb7a 	bl	8005a30 <_sbrk_r>
 800533c:	6030      	str	r0, [r6, #0]
 800533e:	4621      	mov	r1, r4
 8005340:	4628      	mov	r0, r5
 8005342:	f000 fb75 	bl	8005a30 <_sbrk_r>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	d00a      	beq.n	8005360 <sbrk_aligned+0x34>
 800534a:	1cc4      	adds	r4, r0, #3
 800534c:	f024 0403 	bic.w	r4, r4, #3
 8005350:	42a0      	cmp	r0, r4
 8005352:	d007      	beq.n	8005364 <sbrk_aligned+0x38>
 8005354:	1a21      	subs	r1, r4, r0
 8005356:	4628      	mov	r0, r5
 8005358:	f000 fb6a 	bl	8005a30 <_sbrk_r>
 800535c:	3001      	adds	r0, #1
 800535e:	d101      	bne.n	8005364 <sbrk_aligned+0x38>
 8005360:	f04f 34ff 	mov.w	r4, #4294967295
 8005364:	4620      	mov	r0, r4
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	20000418 	.word	0x20000418

0800536c <_malloc_r>:
 800536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005370:	1ccd      	adds	r5, r1, #3
 8005372:	f025 0503 	bic.w	r5, r5, #3
 8005376:	3508      	adds	r5, #8
 8005378:	2d0c      	cmp	r5, #12
 800537a:	bf38      	it	cc
 800537c:	250c      	movcc	r5, #12
 800537e:	2d00      	cmp	r5, #0
 8005380:	4607      	mov	r7, r0
 8005382:	db01      	blt.n	8005388 <_malloc_r+0x1c>
 8005384:	42a9      	cmp	r1, r5
 8005386:	d905      	bls.n	8005394 <_malloc_r+0x28>
 8005388:	230c      	movs	r3, #12
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	2600      	movs	r6, #0
 800538e:	4630      	mov	r0, r6
 8005390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005394:	4e2e      	ldr	r6, [pc, #184]	; (8005450 <_malloc_r+0xe4>)
 8005396:	f000 fe43 	bl	8006020 <__malloc_lock>
 800539a:	6833      	ldr	r3, [r6, #0]
 800539c:	461c      	mov	r4, r3
 800539e:	bb34      	cbnz	r4, 80053ee <_malloc_r+0x82>
 80053a0:	4629      	mov	r1, r5
 80053a2:	4638      	mov	r0, r7
 80053a4:	f7ff ffc2 	bl	800532c <sbrk_aligned>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	4604      	mov	r4, r0
 80053ac:	d14d      	bne.n	800544a <_malloc_r+0xde>
 80053ae:	6834      	ldr	r4, [r6, #0]
 80053b0:	4626      	mov	r6, r4
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	d140      	bne.n	8005438 <_malloc_r+0xcc>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	4631      	mov	r1, r6
 80053ba:	4638      	mov	r0, r7
 80053bc:	eb04 0803 	add.w	r8, r4, r3
 80053c0:	f000 fb36 	bl	8005a30 <_sbrk_r>
 80053c4:	4580      	cmp	r8, r0
 80053c6:	d13a      	bne.n	800543e <_malloc_r+0xd2>
 80053c8:	6821      	ldr	r1, [r4, #0]
 80053ca:	3503      	adds	r5, #3
 80053cc:	1a6d      	subs	r5, r5, r1
 80053ce:	f025 0503 	bic.w	r5, r5, #3
 80053d2:	3508      	adds	r5, #8
 80053d4:	2d0c      	cmp	r5, #12
 80053d6:	bf38      	it	cc
 80053d8:	250c      	movcc	r5, #12
 80053da:	4629      	mov	r1, r5
 80053dc:	4638      	mov	r0, r7
 80053de:	f7ff ffa5 	bl	800532c <sbrk_aligned>
 80053e2:	3001      	adds	r0, #1
 80053e4:	d02b      	beq.n	800543e <_malloc_r+0xd2>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	442b      	add	r3, r5
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	e00e      	b.n	800540c <_malloc_r+0xa0>
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	1b52      	subs	r2, r2, r5
 80053f2:	d41e      	bmi.n	8005432 <_malloc_r+0xc6>
 80053f4:	2a0b      	cmp	r2, #11
 80053f6:	d916      	bls.n	8005426 <_malloc_r+0xba>
 80053f8:	1961      	adds	r1, r4, r5
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	6025      	str	r5, [r4, #0]
 80053fe:	bf18      	it	ne
 8005400:	6059      	strne	r1, [r3, #4]
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	bf08      	it	eq
 8005406:	6031      	streq	r1, [r6, #0]
 8005408:	5162      	str	r2, [r4, r5]
 800540a:	604b      	str	r3, [r1, #4]
 800540c:	4638      	mov	r0, r7
 800540e:	f104 060b 	add.w	r6, r4, #11
 8005412:	f000 fe0b 	bl	800602c <__malloc_unlock>
 8005416:	f026 0607 	bic.w	r6, r6, #7
 800541a:	1d23      	adds	r3, r4, #4
 800541c:	1af2      	subs	r2, r6, r3
 800541e:	d0b6      	beq.n	800538e <_malloc_r+0x22>
 8005420:	1b9b      	subs	r3, r3, r6
 8005422:	50a3      	str	r3, [r4, r2]
 8005424:	e7b3      	b.n	800538e <_malloc_r+0x22>
 8005426:	6862      	ldr	r2, [r4, #4]
 8005428:	42a3      	cmp	r3, r4
 800542a:	bf0c      	ite	eq
 800542c:	6032      	streq	r2, [r6, #0]
 800542e:	605a      	strne	r2, [r3, #4]
 8005430:	e7ec      	b.n	800540c <_malloc_r+0xa0>
 8005432:	4623      	mov	r3, r4
 8005434:	6864      	ldr	r4, [r4, #4]
 8005436:	e7b2      	b.n	800539e <_malloc_r+0x32>
 8005438:	4634      	mov	r4, r6
 800543a:	6876      	ldr	r6, [r6, #4]
 800543c:	e7b9      	b.n	80053b2 <_malloc_r+0x46>
 800543e:	230c      	movs	r3, #12
 8005440:	603b      	str	r3, [r7, #0]
 8005442:	4638      	mov	r0, r7
 8005444:	f000 fdf2 	bl	800602c <__malloc_unlock>
 8005448:	e7a1      	b.n	800538e <_malloc_r+0x22>
 800544a:	6025      	str	r5, [r4, #0]
 800544c:	e7de      	b.n	800540c <_malloc_r+0xa0>
 800544e:	bf00      	nop
 8005450:	20000414 	.word	0x20000414

08005454 <__sfputc_r>:
 8005454:	6893      	ldr	r3, [r2, #8]
 8005456:	3b01      	subs	r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	b410      	push	{r4}
 800545c:	6093      	str	r3, [r2, #8]
 800545e:	da08      	bge.n	8005472 <__sfputc_r+0x1e>
 8005460:	6994      	ldr	r4, [r2, #24]
 8005462:	42a3      	cmp	r3, r4
 8005464:	db01      	blt.n	800546a <__sfputc_r+0x16>
 8005466:	290a      	cmp	r1, #10
 8005468:	d103      	bne.n	8005472 <__sfputc_r+0x1e>
 800546a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800546e:	f000 baef 	b.w	8005a50 <__swbuf_r>
 8005472:	6813      	ldr	r3, [r2, #0]
 8005474:	1c58      	adds	r0, r3, #1
 8005476:	6010      	str	r0, [r2, #0]
 8005478:	7019      	strb	r1, [r3, #0]
 800547a:	4608      	mov	r0, r1
 800547c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005480:	4770      	bx	lr

08005482 <__sfputs_r>:
 8005482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005484:	4606      	mov	r6, r0
 8005486:	460f      	mov	r7, r1
 8005488:	4614      	mov	r4, r2
 800548a:	18d5      	adds	r5, r2, r3
 800548c:	42ac      	cmp	r4, r5
 800548e:	d101      	bne.n	8005494 <__sfputs_r+0x12>
 8005490:	2000      	movs	r0, #0
 8005492:	e007      	b.n	80054a4 <__sfputs_r+0x22>
 8005494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005498:	463a      	mov	r2, r7
 800549a:	4630      	mov	r0, r6
 800549c:	f7ff ffda 	bl	8005454 <__sfputc_r>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d1f3      	bne.n	800548c <__sfputs_r+0xa>
 80054a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054a8 <_vfiprintf_r>:
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	460d      	mov	r5, r1
 80054ae:	b09d      	sub	sp, #116	; 0x74
 80054b0:	4614      	mov	r4, r2
 80054b2:	4698      	mov	r8, r3
 80054b4:	4606      	mov	r6, r0
 80054b6:	b118      	cbz	r0, 80054c0 <_vfiprintf_r+0x18>
 80054b8:	6983      	ldr	r3, [r0, #24]
 80054ba:	b90b      	cbnz	r3, 80054c0 <_vfiprintf_r+0x18>
 80054bc:	f000 fcaa 	bl	8005e14 <__sinit>
 80054c0:	4b89      	ldr	r3, [pc, #548]	; (80056e8 <_vfiprintf_r+0x240>)
 80054c2:	429d      	cmp	r5, r3
 80054c4:	d11b      	bne.n	80054fe <_vfiprintf_r+0x56>
 80054c6:	6875      	ldr	r5, [r6, #4]
 80054c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ca:	07d9      	lsls	r1, r3, #31
 80054cc:	d405      	bmi.n	80054da <_vfiprintf_r+0x32>
 80054ce:	89ab      	ldrh	r3, [r5, #12]
 80054d0:	059a      	lsls	r2, r3, #22
 80054d2:	d402      	bmi.n	80054da <_vfiprintf_r+0x32>
 80054d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054d6:	f000 fd3b 	bl	8005f50 <__retarget_lock_acquire_recursive>
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	071b      	lsls	r3, r3, #28
 80054de:	d501      	bpl.n	80054e4 <_vfiprintf_r+0x3c>
 80054e0:	692b      	ldr	r3, [r5, #16]
 80054e2:	b9eb      	cbnz	r3, 8005520 <_vfiprintf_r+0x78>
 80054e4:	4629      	mov	r1, r5
 80054e6:	4630      	mov	r0, r6
 80054e8:	f000 fb04 	bl	8005af4 <__swsetup_r>
 80054ec:	b1c0      	cbz	r0, 8005520 <_vfiprintf_r+0x78>
 80054ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054f0:	07dc      	lsls	r4, r3, #31
 80054f2:	d50e      	bpl.n	8005512 <_vfiprintf_r+0x6a>
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	b01d      	add	sp, #116	; 0x74
 80054fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fe:	4b7b      	ldr	r3, [pc, #492]	; (80056ec <_vfiprintf_r+0x244>)
 8005500:	429d      	cmp	r5, r3
 8005502:	d101      	bne.n	8005508 <_vfiprintf_r+0x60>
 8005504:	68b5      	ldr	r5, [r6, #8]
 8005506:	e7df      	b.n	80054c8 <_vfiprintf_r+0x20>
 8005508:	4b79      	ldr	r3, [pc, #484]	; (80056f0 <_vfiprintf_r+0x248>)
 800550a:	429d      	cmp	r5, r3
 800550c:	bf08      	it	eq
 800550e:	68f5      	ldreq	r5, [r6, #12]
 8005510:	e7da      	b.n	80054c8 <_vfiprintf_r+0x20>
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	0598      	lsls	r0, r3, #22
 8005516:	d4ed      	bmi.n	80054f4 <_vfiprintf_r+0x4c>
 8005518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800551a:	f000 fd1a 	bl	8005f52 <__retarget_lock_release_recursive>
 800551e:	e7e9      	b.n	80054f4 <_vfiprintf_r+0x4c>
 8005520:	2300      	movs	r3, #0
 8005522:	9309      	str	r3, [sp, #36]	; 0x24
 8005524:	2320      	movs	r3, #32
 8005526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800552a:	f8cd 800c 	str.w	r8, [sp, #12]
 800552e:	2330      	movs	r3, #48	; 0x30
 8005530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056f4 <_vfiprintf_r+0x24c>
 8005534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005538:	f04f 0901 	mov.w	r9, #1
 800553c:	4623      	mov	r3, r4
 800553e:	469a      	mov	sl, r3
 8005540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005544:	b10a      	cbz	r2, 800554a <_vfiprintf_r+0xa2>
 8005546:	2a25      	cmp	r2, #37	; 0x25
 8005548:	d1f9      	bne.n	800553e <_vfiprintf_r+0x96>
 800554a:	ebba 0b04 	subs.w	fp, sl, r4
 800554e:	d00b      	beq.n	8005568 <_vfiprintf_r+0xc0>
 8005550:	465b      	mov	r3, fp
 8005552:	4622      	mov	r2, r4
 8005554:	4629      	mov	r1, r5
 8005556:	4630      	mov	r0, r6
 8005558:	f7ff ff93 	bl	8005482 <__sfputs_r>
 800555c:	3001      	adds	r0, #1
 800555e:	f000 80aa 	beq.w	80056b6 <_vfiprintf_r+0x20e>
 8005562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005564:	445a      	add	r2, fp
 8005566:	9209      	str	r2, [sp, #36]	; 0x24
 8005568:	f89a 3000 	ldrb.w	r3, [sl]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80a2 	beq.w	80056b6 <_vfiprintf_r+0x20e>
 8005572:	2300      	movs	r3, #0
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800557c:	f10a 0a01 	add.w	sl, sl, #1
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	9307      	str	r3, [sp, #28]
 8005584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005588:	931a      	str	r3, [sp, #104]	; 0x68
 800558a:	4654      	mov	r4, sl
 800558c:	2205      	movs	r2, #5
 800558e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005592:	4858      	ldr	r0, [pc, #352]	; (80056f4 <_vfiprintf_r+0x24c>)
 8005594:	f7fa fe2c 	bl	80001f0 <memchr>
 8005598:	9a04      	ldr	r2, [sp, #16]
 800559a:	b9d8      	cbnz	r0, 80055d4 <_vfiprintf_r+0x12c>
 800559c:	06d1      	lsls	r1, r2, #27
 800559e:	bf44      	itt	mi
 80055a0:	2320      	movmi	r3, #32
 80055a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055a6:	0713      	lsls	r3, r2, #28
 80055a8:	bf44      	itt	mi
 80055aa:	232b      	movmi	r3, #43	; 0x2b
 80055ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b0:	f89a 3000 	ldrb.w	r3, [sl]
 80055b4:	2b2a      	cmp	r3, #42	; 0x2a
 80055b6:	d015      	beq.n	80055e4 <_vfiprintf_r+0x13c>
 80055b8:	9a07      	ldr	r2, [sp, #28]
 80055ba:	4654      	mov	r4, sl
 80055bc:	2000      	movs	r0, #0
 80055be:	f04f 0c0a 	mov.w	ip, #10
 80055c2:	4621      	mov	r1, r4
 80055c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055c8:	3b30      	subs	r3, #48	; 0x30
 80055ca:	2b09      	cmp	r3, #9
 80055cc:	d94e      	bls.n	800566c <_vfiprintf_r+0x1c4>
 80055ce:	b1b0      	cbz	r0, 80055fe <_vfiprintf_r+0x156>
 80055d0:	9207      	str	r2, [sp, #28]
 80055d2:	e014      	b.n	80055fe <_vfiprintf_r+0x156>
 80055d4:	eba0 0308 	sub.w	r3, r0, r8
 80055d8:	fa09 f303 	lsl.w	r3, r9, r3
 80055dc:	4313      	orrs	r3, r2
 80055de:	9304      	str	r3, [sp, #16]
 80055e0:	46a2      	mov	sl, r4
 80055e2:	e7d2      	b.n	800558a <_vfiprintf_r+0xe2>
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	1d19      	adds	r1, r3, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	9103      	str	r1, [sp, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bfbb      	ittet	lt
 80055f0:	425b      	neglt	r3, r3
 80055f2:	f042 0202 	orrlt.w	r2, r2, #2
 80055f6:	9307      	strge	r3, [sp, #28]
 80055f8:	9307      	strlt	r3, [sp, #28]
 80055fa:	bfb8      	it	lt
 80055fc:	9204      	strlt	r2, [sp, #16]
 80055fe:	7823      	ldrb	r3, [r4, #0]
 8005600:	2b2e      	cmp	r3, #46	; 0x2e
 8005602:	d10c      	bne.n	800561e <_vfiprintf_r+0x176>
 8005604:	7863      	ldrb	r3, [r4, #1]
 8005606:	2b2a      	cmp	r3, #42	; 0x2a
 8005608:	d135      	bne.n	8005676 <_vfiprintf_r+0x1ce>
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	1d1a      	adds	r2, r3, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	9203      	str	r2, [sp, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	bfb8      	it	lt
 8005616:	f04f 33ff 	movlt.w	r3, #4294967295
 800561a:	3402      	adds	r4, #2
 800561c:	9305      	str	r3, [sp, #20]
 800561e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005704 <_vfiprintf_r+0x25c>
 8005622:	7821      	ldrb	r1, [r4, #0]
 8005624:	2203      	movs	r2, #3
 8005626:	4650      	mov	r0, sl
 8005628:	f7fa fde2 	bl	80001f0 <memchr>
 800562c:	b140      	cbz	r0, 8005640 <_vfiprintf_r+0x198>
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	eba0 000a 	sub.w	r0, r0, sl
 8005634:	fa03 f000 	lsl.w	r0, r3, r0
 8005638:	9b04      	ldr	r3, [sp, #16]
 800563a:	4303      	orrs	r3, r0
 800563c:	3401      	adds	r4, #1
 800563e:	9304      	str	r3, [sp, #16]
 8005640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005644:	482c      	ldr	r0, [pc, #176]	; (80056f8 <_vfiprintf_r+0x250>)
 8005646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800564a:	2206      	movs	r2, #6
 800564c:	f7fa fdd0 	bl	80001f0 <memchr>
 8005650:	2800      	cmp	r0, #0
 8005652:	d03f      	beq.n	80056d4 <_vfiprintf_r+0x22c>
 8005654:	4b29      	ldr	r3, [pc, #164]	; (80056fc <_vfiprintf_r+0x254>)
 8005656:	bb1b      	cbnz	r3, 80056a0 <_vfiprintf_r+0x1f8>
 8005658:	9b03      	ldr	r3, [sp, #12]
 800565a:	3307      	adds	r3, #7
 800565c:	f023 0307 	bic.w	r3, r3, #7
 8005660:	3308      	adds	r3, #8
 8005662:	9303      	str	r3, [sp, #12]
 8005664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005666:	443b      	add	r3, r7
 8005668:	9309      	str	r3, [sp, #36]	; 0x24
 800566a:	e767      	b.n	800553c <_vfiprintf_r+0x94>
 800566c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005670:	460c      	mov	r4, r1
 8005672:	2001      	movs	r0, #1
 8005674:	e7a5      	b.n	80055c2 <_vfiprintf_r+0x11a>
 8005676:	2300      	movs	r3, #0
 8005678:	3401      	adds	r4, #1
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	4619      	mov	r1, r3
 800567e:	f04f 0c0a 	mov.w	ip, #10
 8005682:	4620      	mov	r0, r4
 8005684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005688:	3a30      	subs	r2, #48	; 0x30
 800568a:	2a09      	cmp	r2, #9
 800568c:	d903      	bls.n	8005696 <_vfiprintf_r+0x1ee>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0c5      	beq.n	800561e <_vfiprintf_r+0x176>
 8005692:	9105      	str	r1, [sp, #20]
 8005694:	e7c3      	b.n	800561e <_vfiprintf_r+0x176>
 8005696:	fb0c 2101 	mla	r1, ip, r1, r2
 800569a:	4604      	mov	r4, r0
 800569c:	2301      	movs	r3, #1
 800569e:	e7f0      	b.n	8005682 <_vfiprintf_r+0x1da>
 80056a0:	ab03      	add	r3, sp, #12
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	462a      	mov	r2, r5
 80056a6:	4b16      	ldr	r3, [pc, #88]	; (8005700 <_vfiprintf_r+0x258>)
 80056a8:	a904      	add	r1, sp, #16
 80056aa:	4630      	mov	r0, r6
 80056ac:	f3af 8000 	nop.w
 80056b0:	4607      	mov	r7, r0
 80056b2:	1c78      	adds	r0, r7, #1
 80056b4:	d1d6      	bne.n	8005664 <_vfiprintf_r+0x1bc>
 80056b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056b8:	07d9      	lsls	r1, r3, #31
 80056ba:	d405      	bmi.n	80056c8 <_vfiprintf_r+0x220>
 80056bc:	89ab      	ldrh	r3, [r5, #12]
 80056be:	059a      	lsls	r2, r3, #22
 80056c0:	d402      	bmi.n	80056c8 <_vfiprintf_r+0x220>
 80056c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056c4:	f000 fc45 	bl	8005f52 <__retarget_lock_release_recursive>
 80056c8:	89ab      	ldrh	r3, [r5, #12]
 80056ca:	065b      	lsls	r3, r3, #25
 80056cc:	f53f af12 	bmi.w	80054f4 <_vfiprintf_r+0x4c>
 80056d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056d2:	e711      	b.n	80054f8 <_vfiprintf_r+0x50>
 80056d4:	ab03      	add	r3, sp, #12
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	462a      	mov	r2, r5
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <_vfiprintf_r+0x258>)
 80056dc:	a904      	add	r1, sp, #16
 80056de:	4630      	mov	r0, r6
 80056e0:	f000 f880 	bl	80057e4 <_printf_i>
 80056e4:	e7e4      	b.n	80056b0 <_vfiprintf_r+0x208>
 80056e6:	bf00      	nop
 80056e8:	08006350 	.word	0x08006350
 80056ec:	08006370 	.word	0x08006370
 80056f0:	08006330 	.word	0x08006330
 80056f4:	080062fa 	.word	0x080062fa
 80056f8:	08006304 	.word	0x08006304
 80056fc:	00000000 	.word	0x00000000
 8005700:	08005483 	.word	0x08005483
 8005704:	08006300 	.word	0x08006300

08005708 <_printf_common>:
 8005708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570c:	4616      	mov	r6, r2
 800570e:	4699      	mov	r9, r3
 8005710:	688a      	ldr	r2, [r1, #8]
 8005712:	690b      	ldr	r3, [r1, #16]
 8005714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005718:	4293      	cmp	r3, r2
 800571a:	bfb8      	it	lt
 800571c:	4613      	movlt	r3, r2
 800571e:	6033      	str	r3, [r6, #0]
 8005720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005724:	4607      	mov	r7, r0
 8005726:	460c      	mov	r4, r1
 8005728:	b10a      	cbz	r2, 800572e <_printf_common+0x26>
 800572a:	3301      	adds	r3, #1
 800572c:	6033      	str	r3, [r6, #0]
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	0699      	lsls	r1, r3, #26
 8005732:	bf42      	ittt	mi
 8005734:	6833      	ldrmi	r3, [r6, #0]
 8005736:	3302      	addmi	r3, #2
 8005738:	6033      	strmi	r3, [r6, #0]
 800573a:	6825      	ldr	r5, [r4, #0]
 800573c:	f015 0506 	ands.w	r5, r5, #6
 8005740:	d106      	bne.n	8005750 <_printf_common+0x48>
 8005742:	f104 0a19 	add.w	sl, r4, #25
 8005746:	68e3      	ldr	r3, [r4, #12]
 8005748:	6832      	ldr	r2, [r6, #0]
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	42ab      	cmp	r3, r5
 800574e:	dc26      	bgt.n	800579e <_printf_common+0x96>
 8005750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005754:	1e13      	subs	r3, r2, #0
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	bf18      	it	ne
 800575a:	2301      	movne	r3, #1
 800575c:	0692      	lsls	r2, r2, #26
 800575e:	d42b      	bmi.n	80057b8 <_printf_common+0xb0>
 8005760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	3001      	adds	r0, #1
 800576c:	d01e      	beq.n	80057ac <_printf_common+0xa4>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	68e5      	ldr	r5, [r4, #12]
 8005772:	6832      	ldr	r2, [r6, #0]
 8005774:	f003 0306 	and.w	r3, r3, #6
 8005778:	2b04      	cmp	r3, #4
 800577a:	bf08      	it	eq
 800577c:	1aad      	subeq	r5, r5, r2
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	6922      	ldr	r2, [r4, #16]
 8005782:	bf0c      	ite	eq
 8005784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005788:	2500      	movne	r5, #0
 800578a:	4293      	cmp	r3, r2
 800578c:	bfc4      	itt	gt
 800578e:	1a9b      	subgt	r3, r3, r2
 8005790:	18ed      	addgt	r5, r5, r3
 8005792:	2600      	movs	r6, #0
 8005794:	341a      	adds	r4, #26
 8005796:	42b5      	cmp	r5, r6
 8005798:	d11a      	bne.n	80057d0 <_printf_common+0xc8>
 800579a:	2000      	movs	r0, #0
 800579c:	e008      	b.n	80057b0 <_printf_common+0xa8>
 800579e:	2301      	movs	r3, #1
 80057a0:	4652      	mov	r2, sl
 80057a2:	4649      	mov	r1, r9
 80057a4:	4638      	mov	r0, r7
 80057a6:	47c0      	blx	r8
 80057a8:	3001      	adds	r0, #1
 80057aa:	d103      	bne.n	80057b4 <_printf_common+0xac>
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b4:	3501      	adds	r5, #1
 80057b6:	e7c6      	b.n	8005746 <_printf_common+0x3e>
 80057b8:	18e1      	adds	r1, r4, r3
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	2030      	movs	r0, #48	; 0x30
 80057be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057c2:	4422      	add	r2, r4
 80057c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057cc:	3302      	adds	r3, #2
 80057ce:	e7c7      	b.n	8005760 <_printf_common+0x58>
 80057d0:	2301      	movs	r3, #1
 80057d2:	4622      	mov	r2, r4
 80057d4:	4649      	mov	r1, r9
 80057d6:	4638      	mov	r0, r7
 80057d8:	47c0      	blx	r8
 80057da:	3001      	adds	r0, #1
 80057dc:	d0e6      	beq.n	80057ac <_printf_common+0xa4>
 80057de:	3601      	adds	r6, #1
 80057e0:	e7d9      	b.n	8005796 <_printf_common+0x8e>
	...

080057e4 <_printf_i>:
 80057e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	7e0f      	ldrb	r7, [r1, #24]
 80057ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057ec:	2f78      	cmp	r7, #120	; 0x78
 80057ee:	4691      	mov	r9, r2
 80057f0:	4680      	mov	r8, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	469a      	mov	sl, r3
 80057f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057fa:	d807      	bhi.n	800580c <_printf_i+0x28>
 80057fc:	2f62      	cmp	r7, #98	; 0x62
 80057fe:	d80a      	bhi.n	8005816 <_printf_i+0x32>
 8005800:	2f00      	cmp	r7, #0
 8005802:	f000 80d8 	beq.w	80059b6 <_printf_i+0x1d2>
 8005806:	2f58      	cmp	r7, #88	; 0x58
 8005808:	f000 80a3 	beq.w	8005952 <_printf_i+0x16e>
 800580c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005814:	e03a      	b.n	800588c <_printf_i+0xa8>
 8005816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800581a:	2b15      	cmp	r3, #21
 800581c:	d8f6      	bhi.n	800580c <_printf_i+0x28>
 800581e:	a101      	add	r1, pc, #4	; (adr r1, 8005824 <_printf_i+0x40>)
 8005820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005824:	0800587d 	.word	0x0800587d
 8005828:	08005891 	.word	0x08005891
 800582c:	0800580d 	.word	0x0800580d
 8005830:	0800580d 	.word	0x0800580d
 8005834:	0800580d 	.word	0x0800580d
 8005838:	0800580d 	.word	0x0800580d
 800583c:	08005891 	.word	0x08005891
 8005840:	0800580d 	.word	0x0800580d
 8005844:	0800580d 	.word	0x0800580d
 8005848:	0800580d 	.word	0x0800580d
 800584c:	0800580d 	.word	0x0800580d
 8005850:	0800599d 	.word	0x0800599d
 8005854:	080058c1 	.word	0x080058c1
 8005858:	0800597f 	.word	0x0800597f
 800585c:	0800580d 	.word	0x0800580d
 8005860:	0800580d 	.word	0x0800580d
 8005864:	080059bf 	.word	0x080059bf
 8005868:	0800580d 	.word	0x0800580d
 800586c:	080058c1 	.word	0x080058c1
 8005870:	0800580d 	.word	0x0800580d
 8005874:	0800580d 	.word	0x0800580d
 8005878:	08005987 	.word	0x08005987
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	1d1a      	adds	r2, r3, #4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	602a      	str	r2, [r5, #0]
 8005884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800588c:	2301      	movs	r3, #1
 800588e:	e0a3      	b.n	80059d8 <_printf_i+0x1f4>
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	6829      	ldr	r1, [r5, #0]
 8005894:	0606      	lsls	r6, r0, #24
 8005896:	f101 0304 	add.w	r3, r1, #4
 800589a:	d50a      	bpl.n	80058b2 <_printf_i+0xce>
 800589c:	680e      	ldr	r6, [r1, #0]
 800589e:	602b      	str	r3, [r5, #0]
 80058a0:	2e00      	cmp	r6, #0
 80058a2:	da03      	bge.n	80058ac <_printf_i+0xc8>
 80058a4:	232d      	movs	r3, #45	; 0x2d
 80058a6:	4276      	negs	r6, r6
 80058a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ac:	485e      	ldr	r0, [pc, #376]	; (8005a28 <_printf_i+0x244>)
 80058ae:	230a      	movs	r3, #10
 80058b0:	e019      	b.n	80058e6 <_printf_i+0x102>
 80058b2:	680e      	ldr	r6, [r1, #0]
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058ba:	bf18      	it	ne
 80058bc:	b236      	sxthne	r6, r6
 80058be:	e7ef      	b.n	80058a0 <_printf_i+0xbc>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	6820      	ldr	r0, [r4, #0]
 80058c4:	1d19      	adds	r1, r3, #4
 80058c6:	6029      	str	r1, [r5, #0]
 80058c8:	0601      	lsls	r1, r0, #24
 80058ca:	d501      	bpl.n	80058d0 <_printf_i+0xec>
 80058cc:	681e      	ldr	r6, [r3, #0]
 80058ce:	e002      	b.n	80058d6 <_printf_i+0xf2>
 80058d0:	0646      	lsls	r6, r0, #25
 80058d2:	d5fb      	bpl.n	80058cc <_printf_i+0xe8>
 80058d4:	881e      	ldrh	r6, [r3, #0]
 80058d6:	4854      	ldr	r0, [pc, #336]	; (8005a28 <_printf_i+0x244>)
 80058d8:	2f6f      	cmp	r7, #111	; 0x6f
 80058da:	bf0c      	ite	eq
 80058dc:	2308      	moveq	r3, #8
 80058de:	230a      	movne	r3, #10
 80058e0:	2100      	movs	r1, #0
 80058e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058e6:	6865      	ldr	r5, [r4, #4]
 80058e8:	60a5      	str	r5, [r4, #8]
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	bfa2      	ittt	ge
 80058ee:	6821      	ldrge	r1, [r4, #0]
 80058f0:	f021 0104 	bicge.w	r1, r1, #4
 80058f4:	6021      	strge	r1, [r4, #0]
 80058f6:	b90e      	cbnz	r6, 80058fc <_printf_i+0x118>
 80058f8:	2d00      	cmp	r5, #0
 80058fa:	d04d      	beq.n	8005998 <_printf_i+0x1b4>
 80058fc:	4615      	mov	r5, r2
 80058fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005902:	fb03 6711 	mls	r7, r3, r1, r6
 8005906:	5dc7      	ldrb	r7, [r0, r7]
 8005908:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800590c:	4637      	mov	r7, r6
 800590e:	42bb      	cmp	r3, r7
 8005910:	460e      	mov	r6, r1
 8005912:	d9f4      	bls.n	80058fe <_printf_i+0x11a>
 8005914:	2b08      	cmp	r3, #8
 8005916:	d10b      	bne.n	8005930 <_printf_i+0x14c>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	07de      	lsls	r6, r3, #31
 800591c:	d508      	bpl.n	8005930 <_printf_i+0x14c>
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	6861      	ldr	r1, [r4, #4]
 8005922:	4299      	cmp	r1, r3
 8005924:	bfde      	ittt	le
 8005926:	2330      	movle	r3, #48	; 0x30
 8005928:	f805 3c01 	strble.w	r3, [r5, #-1]
 800592c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005930:	1b52      	subs	r2, r2, r5
 8005932:	6122      	str	r2, [r4, #16]
 8005934:	f8cd a000 	str.w	sl, [sp]
 8005938:	464b      	mov	r3, r9
 800593a:	aa03      	add	r2, sp, #12
 800593c:	4621      	mov	r1, r4
 800593e:	4640      	mov	r0, r8
 8005940:	f7ff fee2 	bl	8005708 <_printf_common>
 8005944:	3001      	adds	r0, #1
 8005946:	d14c      	bne.n	80059e2 <_printf_i+0x1fe>
 8005948:	f04f 30ff 	mov.w	r0, #4294967295
 800594c:	b004      	add	sp, #16
 800594e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005952:	4835      	ldr	r0, [pc, #212]	; (8005a28 <_printf_i+0x244>)
 8005954:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005958:	6829      	ldr	r1, [r5, #0]
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005960:	6029      	str	r1, [r5, #0]
 8005962:	061d      	lsls	r5, r3, #24
 8005964:	d514      	bpl.n	8005990 <_printf_i+0x1ac>
 8005966:	07df      	lsls	r7, r3, #31
 8005968:	bf44      	itt	mi
 800596a:	f043 0320 	orrmi.w	r3, r3, #32
 800596e:	6023      	strmi	r3, [r4, #0]
 8005970:	b91e      	cbnz	r6, 800597a <_printf_i+0x196>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	f023 0320 	bic.w	r3, r3, #32
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	2310      	movs	r3, #16
 800597c:	e7b0      	b.n	80058e0 <_printf_i+0xfc>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	f043 0320 	orr.w	r3, r3, #32
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	2378      	movs	r3, #120	; 0x78
 8005988:	4828      	ldr	r0, [pc, #160]	; (8005a2c <_printf_i+0x248>)
 800598a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800598e:	e7e3      	b.n	8005958 <_printf_i+0x174>
 8005990:	0659      	lsls	r1, r3, #25
 8005992:	bf48      	it	mi
 8005994:	b2b6      	uxthmi	r6, r6
 8005996:	e7e6      	b.n	8005966 <_printf_i+0x182>
 8005998:	4615      	mov	r5, r2
 800599a:	e7bb      	b.n	8005914 <_printf_i+0x130>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	6826      	ldr	r6, [r4, #0]
 80059a0:	6961      	ldr	r1, [r4, #20]
 80059a2:	1d18      	adds	r0, r3, #4
 80059a4:	6028      	str	r0, [r5, #0]
 80059a6:	0635      	lsls	r5, r6, #24
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	d501      	bpl.n	80059b0 <_printf_i+0x1cc>
 80059ac:	6019      	str	r1, [r3, #0]
 80059ae:	e002      	b.n	80059b6 <_printf_i+0x1d2>
 80059b0:	0670      	lsls	r0, r6, #25
 80059b2:	d5fb      	bpl.n	80059ac <_printf_i+0x1c8>
 80059b4:	8019      	strh	r1, [r3, #0]
 80059b6:	2300      	movs	r3, #0
 80059b8:	6123      	str	r3, [r4, #16]
 80059ba:	4615      	mov	r5, r2
 80059bc:	e7ba      	b.n	8005934 <_printf_i+0x150>
 80059be:	682b      	ldr	r3, [r5, #0]
 80059c0:	1d1a      	adds	r2, r3, #4
 80059c2:	602a      	str	r2, [r5, #0]
 80059c4:	681d      	ldr	r5, [r3, #0]
 80059c6:	6862      	ldr	r2, [r4, #4]
 80059c8:	2100      	movs	r1, #0
 80059ca:	4628      	mov	r0, r5
 80059cc:	f7fa fc10 	bl	80001f0 <memchr>
 80059d0:	b108      	cbz	r0, 80059d6 <_printf_i+0x1f2>
 80059d2:	1b40      	subs	r0, r0, r5
 80059d4:	6060      	str	r0, [r4, #4]
 80059d6:	6863      	ldr	r3, [r4, #4]
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	2300      	movs	r3, #0
 80059dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e0:	e7a8      	b.n	8005934 <_printf_i+0x150>
 80059e2:	6923      	ldr	r3, [r4, #16]
 80059e4:	462a      	mov	r2, r5
 80059e6:	4649      	mov	r1, r9
 80059e8:	4640      	mov	r0, r8
 80059ea:	47d0      	blx	sl
 80059ec:	3001      	adds	r0, #1
 80059ee:	d0ab      	beq.n	8005948 <_printf_i+0x164>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	079b      	lsls	r3, r3, #30
 80059f4:	d413      	bmi.n	8005a1e <_printf_i+0x23a>
 80059f6:	68e0      	ldr	r0, [r4, #12]
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	4298      	cmp	r0, r3
 80059fc:	bfb8      	it	lt
 80059fe:	4618      	movlt	r0, r3
 8005a00:	e7a4      	b.n	800594c <_printf_i+0x168>
 8005a02:	2301      	movs	r3, #1
 8005a04:	4632      	mov	r2, r6
 8005a06:	4649      	mov	r1, r9
 8005a08:	4640      	mov	r0, r8
 8005a0a:	47d0      	blx	sl
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d09b      	beq.n	8005948 <_printf_i+0x164>
 8005a10:	3501      	adds	r5, #1
 8005a12:	68e3      	ldr	r3, [r4, #12]
 8005a14:	9903      	ldr	r1, [sp, #12]
 8005a16:	1a5b      	subs	r3, r3, r1
 8005a18:	42ab      	cmp	r3, r5
 8005a1a:	dcf2      	bgt.n	8005a02 <_printf_i+0x21e>
 8005a1c:	e7eb      	b.n	80059f6 <_printf_i+0x212>
 8005a1e:	2500      	movs	r5, #0
 8005a20:	f104 0619 	add.w	r6, r4, #25
 8005a24:	e7f5      	b.n	8005a12 <_printf_i+0x22e>
 8005a26:	bf00      	nop
 8005a28:	0800630b 	.word	0x0800630b
 8005a2c:	0800631c 	.word	0x0800631c

08005a30 <_sbrk_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4d06      	ldr	r5, [pc, #24]	; (8005a4c <_sbrk_r+0x1c>)
 8005a34:	2300      	movs	r3, #0
 8005a36:	4604      	mov	r4, r0
 8005a38:	4608      	mov	r0, r1
 8005a3a:	602b      	str	r3, [r5, #0]
 8005a3c:	f7fc f9fe 	bl	8001e3c <_sbrk>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d102      	bne.n	8005a4a <_sbrk_r+0x1a>
 8005a44:	682b      	ldr	r3, [r5, #0]
 8005a46:	b103      	cbz	r3, 8005a4a <_sbrk_r+0x1a>
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	bd38      	pop	{r3, r4, r5, pc}
 8005a4c:	20000420 	.word	0x20000420

08005a50 <__swbuf_r>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	460e      	mov	r6, r1
 8005a54:	4614      	mov	r4, r2
 8005a56:	4605      	mov	r5, r0
 8005a58:	b118      	cbz	r0, 8005a62 <__swbuf_r+0x12>
 8005a5a:	6983      	ldr	r3, [r0, #24]
 8005a5c:	b90b      	cbnz	r3, 8005a62 <__swbuf_r+0x12>
 8005a5e:	f000 f9d9 	bl	8005e14 <__sinit>
 8005a62:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <__swbuf_r+0x98>)
 8005a64:	429c      	cmp	r4, r3
 8005a66:	d12b      	bne.n	8005ac0 <__swbuf_r+0x70>
 8005a68:	686c      	ldr	r4, [r5, #4]
 8005a6a:	69a3      	ldr	r3, [r4, #24]
 8005a6c:	60a3      	str	r3, [r4, #8]
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	071a      	lsls	r2, r3, #28
 8005a72:	d52f      	bpl.n	8005ad4 <__swbuf_r+0x84>
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	b36b      	cbz	r3, 8005ad4 <__swbuf_r+0x84>
 8005a78:	6923      	ldr	r3, [r4, #16]
 8005a7a:	6820      	ldr	r0, [r4, #0]
 8005a7c:	1ac0      	subs	r0, r0, r3
 8005a7e:	6963      	ldr	r3, [r4, #20]
 8005a80:	b2f6      	uxtb	r6, r6
 8005a82:	4283      	cmp	r3, r0
 8005a84:	4637      	mov	r7, r6
 8005a86:	dc04      	bgt.n	8005a92 <__swbuf_r+0x42>
 8005a88:	4621      	mov	r1, r4
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f000 f92e 	bl	8005cec <_fflush_r>
 8005a90:	bb30      	cbnz	r0, 8005ae0 <__swbuf_r+0x90>
 8005a92:	68a3      	ldr	r3, [r4, #8]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	60a3      	str	r3, [r4, #8]
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	6022      	str	r2, [r4, #0]
 8005a9e:	701e      	strb	r6, [r3, #0]
 8005aa0:	6963      	ldr	r3, [r4, #20]
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	4283      	cmp	r3, r0
 8005aa6:	d004      	beq.n	8005ab2 <__swbuf_r+0x62>
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	07db      	lsls	r3, r3, #31
 8005aac:	d506      	bpl.n	8005abc <__swbuf_r+0x6c>
 8005aae:	2e0a      	cmp	r6, #10
 8005ab0:	d104      	bne.n	8005abc <__swbuf_r+0x6c>
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 f919 	bl	8005cec <_fflush_r>
 8005aba:	b988      	cbnz	r0, 8005ae0 <__swbuf_r+0x90>
 8005abc:	4638      	mov	r0, r7
 8005abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <__swbuf_r+0x9c>)
 8005ac2:	429c      	cmp	r4, r3
 8005ac4:	d101      	bne.n	8005aca <__swbuf_r+0x7a>
 8005ac6:	68ac      	ldr	r4, [r5, #8]
 8005ac8:	e7cf      	b.n	8005a6a <__swbuf_r+0x1a>
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <__swbuf_r+0xa0>)
 8005acc:	429c      	cmp	r4, r3
 8005ace:	bf08      	it	eq
 8005ad0:	68ec      	ldreq	r4, [r5, #12]
 8005ad2:	e7ca      	b.n	8005a6a <__swbuf_r+0x1a>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 f80c 	bl	8005af4 <__swsetup_r>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d0cb      	beq.n	8005a78 <__swbuf_r+0x28>
 8005ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ae4:	e7ea      	b.n	8005abc <__swbuf_r+0x6c>
 8005ae6:	bf00      	nop
 8005ae8:	08006350 	.word	0x08006350
 8005aec:	08006370 	.word	0x08006370
 8005af0:	08006330 	.word	0x08006330

08005af4 <__swsetup_r>:
 8005af4:	4b32      	ldr	r3, [pc, #200]	; (8005bc0 <__swsetup_r+0xcc>)
 8005af6:	b570      	push	{r4, r5, r6, lr}
 8005af8:	681d      	ldr	r5, [r3, #0]
 8005afa:	4606      	mov	r6, r0
 8005afc:	460c      	mov	r4, r1
 8005afe:	b125      	cbz	r5, 8005b0a <__swsetup_r+0x16>
 8005b00:	69ab      	ldr	r3, [r5, #24]
 8005b02:	b913      	cbnz	r3, 8005b0a <__swsetup_r+0x16>
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 f985 	bl	8005e14 <__sinit>
 8005b0a:	4b2e      	ldr	r3, [pc, #184]	; (8005bc4 <__swsetup_r+0xd0>)
 8005b0c:	429c      	cmp	r4, r3
 8005b0e:	d10f      	bne.n	8005b30 <__swsetup_r+0x3c>
 8005b10:	686c      	ldr	r4, [r5, #4]
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b18:	0719      	lsls	r1, r3, #28
 8005b1a:	d42c      	bmi.n	8005b76 <__swsetup_r+0x82>
 8005b1c:	06dd      	lsls	r5, r3, #27
 8005b1e:	d411      	bmi.n	8005b44 <__swsetup_r+0x50>
 8005b20:	2309      	movs	r3, #9
 8005b22:	6033      	str	r3, [r6, #0]
 8005b24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2e:	e03e      	b.n	8005bae <__swsetup_r+0xba>
 8005b30:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <__swsetup_r+0xd4>)
 8005b32:	429c      	cmp	r4, r3
 8005b34:	d101      	bne.n	8005b3a <__swsetup_r+0x46>
 8005b36:	68ac      	ldr	r4, [r5, #8]
 8005b38:	e7eb      	b.n	8005b12 <__swsetup_r+0x1e>
 8005b3a:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <__swsetup_r+0xd8>)
 8005b3c:	429c      	cmp	r4, r3
 8005b3e:	bf08      	it	eq
 8005b40:	68ec      	ldreq	r4, [r5, #12]
 8005b42:	e7e6      	b.n	8005b12 <__swsetup_r+0x1e>
 8005b44:	0758      	lsls	r0, r3, #29
 8005b46:	d512      	bpl.n	8005b6e <__swsetup_r+0x7a>
 8005b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b4a:	b141      	cbz	r1, 8005b5e <__swsetup_r+0x6a>
 8005b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b50:	4299      	cmp	r1, r3
 8005b52:	d002      	beq.n	8005b5a <__swsetup_r+0x66>
 8005b54:	4630      	mov	r0, r6
 8005b56:	f7ff fb9d 	bl	8005294 <_free_r>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	2300      	movs	r3, #0
 8005b68:	6063      	str	r3, [r4, #4]
 8005b6a:	6923      	ldr	r3, [r4, #16]
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	f043 0308 	orr.w	r3, r3, #8
 8005b74:	81a3      	strh	r3, [r4, #12]
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	b94b      	cbnz	r3, 8005b8e <__swsetup_r+0x9a>
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b84:	d003      	beq.n	8005b8e <__swsetup_r+0x9a>
 8005b86:	4621      	mov	r1, r4
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f000 fa09 	bl	8005fa0 <__smakebuf_r>
 8005b8e:	89a0      	ldrh	r0, [r4, #12]
 8005b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b94:	f010 0301 	ands.w	r3, r0, #1
 8005b98:	d00a      	beq.n	8005bb0 <__swsetup_r+0xbc>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60a3      	str	r3, [r4, #8]
 8005b9e:	6963      	ldr	r3, [r4, #20]
 8005ba0:	425b      	negs	r3, r3
 8005ba2:	61a3      	str	r3, [r4, #24]
 8005ba4:	6923      	ldr	r3, [r4, #16]
 8005ba6:	b943      	cbnz	r3, 8005bba <__swsetup_r+0xc6>
 8005ba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bac:	d1ba      	bne.n	8005b24 <__swsetup_r+0x30>
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	0781      	lsls	r1, r0, #30
 8005bb2:	bf58      	it	pl
 8005bb4:	6963      	ldrpl	r3, [r4, #20]
 8005bb6:	60a3      	str	r3, [r4, #8]
 8005bb8:	e7f4      	b.n	8005ba4 <__swsetup_r+0xb0>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e7f7      	b.n	8005bae <__swsetup_r+0xba>
 8005bbe:	bf00      	nop
 8005bc0:	2000000c 	.word	0x2000000c
 8005bc4:	08006350 	.word	0x08006350
 8005bc8:	08006370 	.word	0x08006370
 8005bcc:	08006330 	.word	0x08006330

08005bd0 <abort>:
 8005bd0:	b508      	push	{r3, lr}
 8005bd2:	2006      	movs	r0, #6
 8005bd4:	f000 fa58 	bl	8006088 <raise>
 8005bd8:	2001      	movs	r0, #1
 8005bda:	f7fc f8b7 	bl	8001d4c <_exit>
	...

08005be0 <__sflush_r>:
 8005be0:	898a      	ldrh	r2, [r1, #12]
 8005be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	4605      	mov	r5, r0
 8005be8:	0710      	lsls	r0, r2, #28
 8005bea:	460c      	mov	r4, r1
 8005bec:	d458      	bmi.n	8005ca0 <__sflush_r+0xc0>
 8005bee:	684b      	ldr	r3, [r1, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc05      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	dc02      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	d0f9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c06:	2300      	movs	r3, #0
 8005c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c0c:	682f      	ldr	r7, [r5, #0]
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	d032      	beq.n	8005c78 <__sflush_r+0x98>
 8005c12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	075a      	lsls	r2, r3, #29
 8005c18:	d505      	bpl.n	8005c26 <__sflush_r+0x46>
 8005c1a:	6863      	ldr	r3, [r4, #4]
 8005c1c:	1ac0      	subs	r0, r0, r3
 8005c1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c20:	b10b      	cbz	r3, 8005c26 <__sflush_r+0x46>
 8005c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c24:	1ac0      	subs	r0, r0, r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c2c:	6a21      	ldr	r1, [r4, #32]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b0      	blx	r6
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	d106      	bne.n	8005c46 <__sflush_r+0x66>
 8005c38:	6829      	ldr	r1, [r5, #0]
 8005c3a:	291d      	cmp	r1, #29
 8005c3c:	d82c      	bhi.n	8005c98 <__sflush_r+0xb8>
 8005c3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <__sflush_r+0x108>)
 8005c40:	40ca      	lsrs	r2, r1
 8005c42:	07d6      	lsls	r6, r2, #31
 8005c44:	d528      	bpl.n	8005c98 <__sflush_r+0xb8>
 8005c46:	2200      	movs	r2, #0
 8005c48:	6062      	str	r2, [r4, #4]
 8005c4a:	04d9      	lsls	r1, r3, #19
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	6022      	str	r2, [r4, #0]
 8005c50:	d504      	bpl.n	8005c5c <__sflush_r+0x7c>
 8005c52:	1c42      	adds	r2, r0, #1
 8005c54:	d101      	bne.n	8005c5a <__sflush_r+0x7a>
 8005c56:	682b      	ldr	r3, [r5, #0]
 8005c58:	b903      	cbnz	r3, 8005c5c <__sflush_r+0x7c>
 8005c5a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c5e:	602f      	str	r7, [r5, #0]
 8005c60:	2900      	cmp	r1, #0
 8005c62:	d0ca      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <__sflush_r+0x92>
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f7ff fb11 	bl	8005294 <_free_r>
 8005c72:	2000      	movs	r0, #0
 8005c74:	6360      	str	r0, [r4, #52]	; 0x34
 8005c76:	e7c1      	b.n	8005bfc <__sflush_r+0x1c>
 8005c78:	6a21      	ldr	r1, [r4, #32]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b0      	blx	r6
 8005c80:	1c41      	adds	r1, r0, #1
 8005c82:	d1c7      	bne.n	8005c14 <__sflush_r+0x34>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0c4      	beq.n	8005c14 <__sflush_r+0x34>
 8005c8a:	2b1d      	cmp	r3, #29
 8005c8c:	d001      	beq.n	8005c92 <__sflush_r+0xb2>
 8005c8e:	2b16      	cmp	r3, #22
 8005c90:	d101      	bne.n	8005c96 <__sflush_r+0xb6>
 8005c92:	602f      	str	r7, [r5, #0]
 8005c94:	e7b1      	b.n	8005bfa <__sflush_r+0x1a>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	e7ad      	b.n	8005bfc <__sflush_r+0x1c>
 8005ca0:	690f      	ldr	r7, [r1, #16]
 8005ca2:	2f00      	cmp	r7, #0
 8005ca4:	d0a9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005ca6:	0793      	lsls	r3, r2, #30
 8005ca8:	680e      	ldr	r6, [r1, #0]
 8005caa:	bf08      	it	eq
 8005cac:	694b      	ldreq	r3, [r1, #20]
 8005cae:	600f      	str	r7, [r1, #0]
 8005cb0:	bf18      	it	ne
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	eba6 0807 	sub.w	r8, r6, r7
 8005cb8:	608b      	str	r3, [r1, #8]
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	dd9c      	ble.n	8005bfa <__sflush_r+0x1a>
 8005cc0:	6a21      	ldr	r1, [r4, #32]
 8005cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cc4:	4643      	mov	r3, r8
 8005cc6:	463a      	mov	r2, r7
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b0      	blx	r6
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	dc06      	bgt.n	8005cde <__sflush_r+0xfe>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e78e      	b.n	8005bfc <__sflush_r+0x1c>
 8005cde:	4407      	add	r7, r0
 8005ce0:	eba8 0800 	sub.w	r8, r8, r0
 8005ce4:	e7e9      	b.n	8005cba <__sflush_r+0xda>
 8005ce6:	bf00      	nop
 8005ce8:	20400001 	.word	0x20400001

08005cec <_fflush_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	b913      	cbnz	r3, 8005cfc <_fflush_r+0x10>
 8005cf6:	2500      	movs	r5, #0
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	b118      	cbz	r0, 8005d06 <_fflush_r+0x1a>
 8005cfe:	6983      	ldr	r3, [r0, #24]
 8005d00:	b90b      	cbnz	r3, 8005d06 <_fflush_r+0x1a>
 8005d02:	f000 f887 	bl	8005e14 <__sinit>
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <_fflush_r+0x6c>)
 8005d08:	429c      	cmp	r4, r3
 8005d0a:	d11b      	bne.n	8005d44 <_fflush_r+0x58>
 8005d0c:	686c      	ldr	r4, [r5, #4]
 8005d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0ef      	beq.n	8005cf6 <_fflush_r+0xa>
 8005d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d18:	07d0      	lsls	r0, r2, #31
 8005d1a:	d404      	bmi.n	8005d26 <_fflush_r+0x3a>
 8005d1c:	0599      	lsls	r1, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <_fflush_r+0x3a>
 8005d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d22:	f000 f915 	bl	8005f50 <__retarget_lock_acquire_recursive>
 8005d26:	4628      	mov	r0, r5
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f7ff ff59 	bl	8005be0 <__sflush_r>
 8005d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d30:	07da      	lsls	r2, r3, #31
 8005d32:	4605      	mov	r5, r0
 8005d34:	d4e0      	bmi.n	8005cf8 <_fflush_r+0xc>
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	059b      	lsls	r3, r3, #22
 8005d3a:	d4dd      	bmi.n	8005cf8 <_fflush_r+0xc>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d3e:	f000 f908 	bl	8005f52 <__retarget_lock_release_recursive>
 8005d42:	e7d9      	b.n	8005cf8 <_fflush_r+0xc>
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <_fflush_r+0x70>)
 8005d46:	429c      	cmp	r4, r3
 8005d48:	d101      	bne.n	8005d4e <_fflush_r+0x62>
 8005d4a:	68ac      	ldr	r4, [r5, #8]
 8005d4c:	e7df      	b.n	8005d0e <_fflush_r+0x22>
 8005d4e:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <_fflush_r+0x74>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	bf08      	it	eq
 8005d54:	68ec      	ldreq	r4, [r5, #12]
 8005d56:	e7da      	b.n	8005d0e <_fflush_r+0x22>
 8005d58:	08006350 	.word	0x08006350
 8005d5c:	08006370 	.word	0x08006370
 8005d60:	08006330 	.word	0x08006330

08005d64 <std>:
 8005d64:	2300      	movs	r3, #0
 8005d66:	b510      	push	{r4, lr}
 8005d68:	4604      	mov	r4, r0
 8005d6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d72:	6083      	str	r3, [r0, #8]
 8005d74:	8181      	strh	r1, [r0, #12]
 8005d76:	6643      	str	r3, [r0, #100]	; 0x64
 8005d78:	81c2      	strh	r2, [r0, #14]
 8005d7a:	6183      	str	r3, [r0, #24]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	2208      	movs	r2, #8
 8005d80:	305c      	adds	r0, #92	; 0x5c
 8005d82:	f7ff fa09 	bl	8005198 <memset>
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <std+0x38>)
 8005d88:	6263      	str	r3, [r4, #36]	; 0x24
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <std+0x3c>)
 8005d8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <std+0x40>)
 8005d90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <std+0x44>)
 8005d94:	6224      	str	r4, [r4, #32]
 8005d96:	6323      	str	r3, [r4, #48]	; 0x30
 8005d98:	bd10      	pop	{r4, pc}
 8005d9a:	bf00      	nop
 8005d9c:	080060c1 	.word	0x080060c1
 8005da0:	080060e3 	.word	0x080060e3
 8005da4:	0800611b 	.word	0x0800611b
 8005da8:	0800613f 	.word	0x0800613f

08005dac <_cleanup_r>:
 8005dac:	4901      	ldr	r1, [pc, #4]	; (8005db4 <_cleanup_r+0x8>)
 8005dae:	f000 b8af 	b.w	8005f10 <_fwalk_reent>
 8005db2:	bf00      	nop
 8005db4:	08005ced 	.word	0x08005ced

08005db8 <__sfmoreglue>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	2268      	movs	r2, #104	; 0x68
 8005dbc:	1e4d      	subs	r5, r1, #1
 8005dbe:	4355      	muls	r5, r2
 8005dc0:	460e      	mov	r6, r1
 8005dc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dc6:	f7ff fad1 	bl	800536c <_malloc_r>
 8005dca:	4604      	mov	r4, r0
 8005dcc:	b140      	cbz	r0, 8005de0 <__sfmoreglue+0x28>
 8005dce:	2100      	movs	r1, #0
 8005dd0:	e9c0 1600 	strd	r1, r6, [r0]
 8005dd4:	300c      	adds	r0, #12
 8005dd6:	60a0      	str	r0, [r4, #8]
 8005dd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ddc:	f7ff f9dc 	bl	8005198 <memset>
 8005de0:	4620      	mov	r0, r4
 8005de2:	bd70      	pop	{r4, r5, r6, pc}

08005de4 <__sfp_lock_acquire>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__sfp_lock_acquire+0x8>)
 8005de6:	f000 b8b3 	b.w	8005f50 <__retarget_lock_acquire_recursive>
 8005dea:	bf00      	nop
 8005dec:	2000041d 	.word	0x2000041d

08005df0 <__sfp_lock_release>:
 8005df0:	4801      	ldr	r0, [pc, #4]	; (8005df8 <__sfp_lock_release+0x8>)
 8005df2:	f000 b8ae 	b.w	8005f52 <__retarget_lock_release_recursive>
 8005df6:	bf00      	nop
 8005df8:	2000041d 	.word	0x2000041d

08005dfc <__sinit_lock_acquire>:
 8005dfc:	4801      	ldr	r0, [pc, #4]	; (8005e04 <__sinit_lock_acquire+0x8>)
 8005dfe:	f000 b8a7 	b.w	8005f50 <__retarget_lock_acquire_recursive>
 8005e02:	bf00      	nop
 8005e04:	2000041e 	.word	0x2000041e

08005e08 <__sinit_lock_release>:
 8005e08:	4801      	ldr	r0, [pc, #4]	; (8005e10 <__sinit_lock_release+0x8>)
 8005e0a:	f000 b8a2 	b.w	8005f52 <__retarget_lock_release_recursive>
 8005e0e:	bf00      	nop
 8005e10:	2000041e 	.word	0x2000041e

08005e14 <__sinit>:
 8005e14:	b510      	push	{r4, lr}
 8005e16:	4604      	mov	r4, r0
 8005e18:	f7ff fff0 	bl	8005dfc <__sinit_lock_acquire>
 8005e1c:	69a3      	ldr	r3, [r4, #24]
 8005e1e:	b11b      	cbz	r3, 8005e28 <__sinit+0x14>
 8005e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e24:	f7ff bff0 	b.w	8005e08 <__sinit_lock_release>
 8005e28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e2c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <__sinit+0x68>)
 8005e30:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <__sinit+0x6c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e36:	42a3      	cmp	r3, r4
 8005e38:	bf04      	itt	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	61a3      	streq	r3, [r4, #24]
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 f820 	bl	8005e84 <__sfp>
 8005e44:	6060      	str	r0, [r4, #4]
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 f81c 	bl	8005e84 <__sfp>
 8005e4c:	60a0      	str	r0, [r4, #8]
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 f818 	bl	8005e84 <__sfp>
 8005e54:	2200      	movs	r2, #0
 8005e56:	60e0      	str	r0, [r4, #12]
 8005e58:	2104      	movs	r1, #4
 8005e5a:	6860      	ldr	r0, [r4, #4]
 8005e5c:	f7ff ff82 	bl	8005d64 <std>
 8005e60:	68a0      	ldr	r0, [r4, #8]
 8005e62:	2201      	movs	r2, #1
 8005e64:	2109      	movs	r1, #9
 8005e66:	f7ff ff7d 	bl	8005d64 <std>
 8005e6a:	68e0      	ldr	r0, [r4, #12]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	2112      	movs	r1, #18
 8005e70:	f7ff ff78 	bl	8005d64 <std>
 8005e74:	2301      	movs	r3, #1
 8005e76:	61a3      	str	r3, [r4, #24]
 8005e78:	e7d2      	b.n	8005e20 <__sinit+0xc>
 8005e7a:	bf00      	nop
 8005e7c:	08006248 	.word	0x08006248
 8005e80:	08005dad 	.word	0x08005dad

08005e84 <__sfp>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	4607      	mov	r7, r0
 8005e88:	f7ff ffac 	bl	8005de4 <__sfp_lock_acquire>
 8005e8c:	4b1e      	ldr	r3, [pc, #120]	; (8005f08 <__sfp+0x84>)
 8005e8e:	681e      	ldr	r6, [r3, #0]
 8005e90:	69b3      	ldr	r3, [r6, #24]
 8005e92:	b913      	cbnz	r3, 8005e9a <__sfp+0x16>
 8005e94:	4630      	mov	r0, r6
 8005e96:	f7ff ffbd 	bl	8005e14 <__sinit>
 8005e9a:	3648      	adds	r6, #72	; 0x48
 8005e9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	d503      	bpl.n	8005eac <__sfp+0x28>
 8005ea4:	6833      	ldr	r3, [r6, #0]
 8005ea6:	b30b      	cbz	r3, 8005eec <__sfp+0x68>
 8005ea8:	6836      	ldr	r6, [r6, #0]
 8005eaa:	e7f7      	b.n	8005e9c <__sfp+0x18>
 8005eac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005eb0:	b9d5      	cbnz	r5, 8005ee8 <__sfp+0x64>
 8005eb2:	4b16      	ldr	r3, [pc, #88]	; (8005f0c <__sfp+0x88>)
 8005eb4:	60e3      	str	r3, [r4, #12]
 8005eb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eba:	6665      	str	r5, [r4, #100]	; 0x64
 8005ebc:	f000 f847 	bl	8005f4e <__retarget_lock_init_recursive>
 8005ec0:	f7ff ff96 	bl	8005df0 <__sfp_lock_release>
 8005ec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ecc:	6025      	str	r5, [r4, #0]
 8005ece:	61a5      	str	r5, [r4, #24]
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ed8:	f7ff f95e 	bl	8005198 <memset>
 8005edc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee8:	3468      	adds	r4, #104	; 0x68
 8005eea:	e7d9      	b.n	8005ea0 <__sfp+0x1c>
 8005eec:	2104      	movs	r1, #4
 8005eee:	4638      	mov	r0, r7
 8005ef0:	f7ff ff62 	bl	8005db8 <__sfmoreglue>
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	6030      	str	r0, [r6, #0]
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d1d5      	bne.n	8005ea8 <__sfp+0x24>
 8005efc:	f7ff ff78 	bl	8005df0 <__sfp_lock_release>
 8005f00:	230c      	movs	r3, #12
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	e7ee      	b.n	8005ee4 <__sfp+0x60>
 8005f06:	bf00      	nop
 8005f08:	08006248 	.word	0x08006248
 8005f0c:	ffff0001 	.word	0xffff0001

08005f10 <_fwalk_reent>:
 8005f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f14:	4606      	mov	r6, r0
 8005f16:	4688      	mov	r8, r1
 8005f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f1c:	2700      	movs	r7, #0
 8005f1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f22:	f1b9 0901 	subs.w	r9, r9, #1
 8005f26:	d505      	bpl.n	8005f34 <_fwalk_reent+0x24>
 8005f28:	6824      	ldr	r4, [r4, #0]
 8005f2a:	2c00      	cmp	r4, #0
 8005f2c:	d1f7      	bne.n	8005f1e <_fwalk_reent+0xe>
 8005f2e:	4638      	mov	r0, r7
 8005f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f34:	89ab      	ldrh	r3, [r5, #12]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d907      	bls.n	8005f4a <_fwalk_reent+0x3a>
 8005f3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	d003      	beq.n	8005f4a <_fwalk_reent+0x3a>
 8005f42:	4629      	mov	r1, r5
 8005f44:	4630      	mov	r0, r6
 8005f46:	47c0      	blx	r8
 8005f48:	4307      	orrs	r7, r0
 8005f4a:	3568      	adds	r5, #104	; 0x68
 8005f4c:	e7e9      	b.n	8005f22 <_fwalk_reent+0x12>

08005f4e <__retarget_lock_init_recursive>:
 8005f4e:	4770      	bx	lr

08005f50 <__retarget_lock_acquire_recursive>:
 8005f50:	4770      	bx	lr

08005f52 <__retarget_lock_release_recursive>:
 8005f52:	4770      	bx	lr

08005f54 <__swhatbuf_r>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	460e      	mov	r6, r1
 8005f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	b096      	sub	sp, #88	; 0x58
 8005f60:	4614      	mov	r4, r2
 8005f62:	461d      	mov	r5, r3
 8005f64:	da08      	bge.n	8005f78 <__swhatbuf_r+0x24>
 8005f66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	602a      	str	r2, [r5, #0]
 8005f6e:	061a      	lsls	r2, r3, #24
 8005f70:	d410      	bmi.n	8005f94 <__swhatbuf_r+0x40>
 8005f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f76:	e00e      	b.n	8005f96 <__swhatbuf_r+0x42>
 8005f78:	466a      	mov	r2, sp
 8005f7a:	f000 f907 	bl	800618c <_fstat_r>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	dbf1      	blt.n	8005f66 <__swhatbuf_r+0x12>
 8005f82:	9a01      	ldr	r2, [sp, #4]
 8005f84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f8c:	425a      	negs	r2, r3
 8005f8e:	415a      	adcs	r2, r3
 8005f90:	602a      	str	r2, [r5, #0]
 8005f92:	e7ee      	b.n	8005f72 <__swhatbuf_r+0x1e>
 8005f94:	2340      	movs	r3, #64	; 0x40
 8005f96:	2000      	movs	r0, #0
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	b016      	add	sp, #88	; 0x58
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fa0 <__smakebuf_r>:
 8005fa0:	898b      	ldrh	r3, [r1, #12]
 8005fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fa4:	079d      	lsls	r5, r3, #30
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	460c      	mov	r4, r1
 8005faa:	d507      	bpl.n	8005fbc <__smakebuf_r+0x1c>
 8005fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	6123      	str	r3, [r4, #16]
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	6163      	str	r3, [r4, #20]
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	ab01      	add	r3, sp, #4
 8005fbe:	466a      	mov	r2, sp
 8005fc0:	f7ff ffc8 	bl	8005f54 <__swhatbuf_r>
 8005fc4:	9900      	ldr	r1, [sp, #0]
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f7ff f9cf 	bl	800536c <_malloc_r>
 8005fce:	b948      	cbnz	r0, 8005fe4 <__smakebuf_r+0x44>
 8005fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fd4:	059a      	lsls	r2, r3, #22
 8005fd6:	d4ef      	bmi.n	8005fb8 <__smakebuf_r+0x18>
 8005fd8:	f023 0303 	bic.w	r3, r3, #3
 8005fdc:	f043 0302 	orr.w	r3, r3, #2
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	e7e3      	b.n	8005fac <__smakebuf_r+0xc>
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	; (800601c <__smakebuf_r+0x7c>)
 8005fe6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	6020      	str	r0, [r4, #0]
 8005fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	9b00      	ldr	r3, [sp, #0]
 8005ff4:	6163      	str	r3, [r4, #20]
 8005ff6:	9b01      	ldr	r3, [sp, #4]
 8005ff8:	6120      	str	r0, [r4, #16]
 8005ffa:	b15b      	cbz	r3, 8006014 <__smakebuf_r+0x74>
 8005ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006000:	4630      	mov	r0, r6
 8006002:	f000 f8d5 	bl	80061b0 <_isatty_r>
 8006006:	b128      	cbz	r0, 8006014 <__smakebuf_r+0x74>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f023 0303 	bic.w	r3, r3, #3
 800600e:	f043 0301 	orr.w	r3, r3, #1
 8006012:	81a3      	strh	r3, [r4, #12]
 8006014:	89a0      	ldrh	r0, [r4, #12]
 8006016:	4305      	orrs	r5, r0
 8006018:	81a5      	strh	r5, [r4, #12]
 800601a:	e7cd      	b.n	8005fb8 <__smakebuf_r+0x18>
 800601c:	08005dad 	.word	0x08005dad

08006020 <__malloc_lock>:
 8006020:	4801      	ldr	r0, [pc, #4]	; (8006028 <__malloc_lock+0x8>)
 8006022:	f7ff bf95 	b.w	8005f50 <__retarget_lock_acquire_recursive>
 8006026:	bf00      	nop
 8006028:	2000041c 	.word	0x2000041c

0800602c <__malloc_unlock>:
 800602c:	4801      	ldr	r0, [pc, #4]	; (8006034 <__malloc_unlock+0x8>)
 800602e:	f7ff bf90 	b.w	8005f52 <__retarget_lock_release_recursive>
 8006032:	bf00      	nop
 8006034:	2000041c 	.word	0x2000041c

08006038 <_raise_r>:
 8006038:	291f      	cmp	r1, #31
 800603a:	b538      	push	{r3, r4, r5, lr}
 800603c:	4604      	mov	r4, r0
 800603e:	460d      	mov	r5, r1
 8006040:	d904      	bls.n	800604c <_raise_r+0x14>
 8006042:	2316      	movs	r3, #22
 8006044:	6003      	str	r3, [r0, #0]
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800604e:	b112      	cbz	r2, 8006056 <_raise_r+0x1e>
 8006050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006054:	b94b      	cbnz	r3, 800606a <_raise_r+0x32>
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f830 	bl	80060bc <_getpid_r>
 800605c:	462a      	mov	r2, r5
 800605e:	4601      	mov	r1, r0
 8006060:	4620      	mov	r0, r4
 8006062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006066:	f000 b817 	b.w	8006098 <_kill_r>
 800606a:	2b01      	cmp	r3, #1
 800606c:	d00a      	beq.n	8006084 <_raise_r+0x4c>
 800606e:	1c59      	adds	r1, r3, #1
 8006070:	d103      	bne.n	800607a <_raise_r+0x42>
 8006072:	2316      	movs	r3, #22
 8006074:	6003      	str	r3, [r0, #0]
 8006076:	2001      	movs	r0, #1
 8006078:	e7e7      	b.n	800604a <_raise_r+0x12>
 800607a:	2400      	movs	r4, #0
 800607c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006080:	4628      	mov	r0, r5
 8006082:	4798      	blx	r3
 8006084:	2000      	movs	r0, #0
 8006086:	e7e0      	b.n	800604a <_raise_r+0x12>

08006088 <raise>:
 8006088:	4b02      	ldr	r3, [pc, #8]	; (8006094 <raise+0xc>)
 800608a:	4601      	mov	r1, r0
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	f7ff bfd3 	b.w	8006038 <_raise_r>
 8006092:	bf00      	nop
 8006094:	2000000c 	.word	0x2000000c

08006098 <_kill_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d07      	ldr	r5, [pc, #28]	; (80060b8 <_kill_r+0x20>)
 800609c:	2300      	movs	r3, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	4611      	mov	r1, r2
 80060a4:	602b      	str	r3, [r5, #0]
 80060a6:	f7fb fe41 	bl	8001d2c <_kill>
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	d102      	bne.n	80060b4 <_kill_r+0x1c>
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	b103      	cbz	r3, 80060b4 <_kill_r+0x1c>
 80060b2:	6023      	str	r3, [r4, #0]
 80060b4:	bd38      	pop	{r3, r4, r5, pc}
 80060b6:	bf00      	nop
 80060b8:	20000420 	.word	0x20000420

080060bc <_getpid_r>:
 80060bc:	f7fb be2e 	b.w	8001d1c <_getpid>

080060c0 <__sread>:
 80060c0:	b510      	push	{r4, lr}
 80060c2:	460c      	mov	r4, r1
 80060c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c8:	f000 f894 	bl	80061f4 <_read_r>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	bfab      	itete	ge
 80060d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060d2:	89a3      	ldrhlt	r3, [r4, #12]
 80060d4:	181b      	addge	r3, r3, r0
 80060d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060da:	bfac      	ite	ge
 80060dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80060de:	81a3      	strhlt	r3, [r4, #12]
 80060e0:	bd10      	pop	{r4, pc}

080060e2 <__swrite>:
 80060e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e6:	461f      	mov	r7, r3
 80060e8:	898b      	ldrh	r3, [r1, #12]
 80060ea:	05db      	lsls	r3, r3, #23
 80060ec:	4605      	mov	r5, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	4616      	mov	r6, r2
 80060f2:	d505      	bpl.n	8006100 <__swrite+0x1e>
 80060f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f8:	2302      	movs	r3, #2
 80060fa:	2200      	movs	r2, #0
 80060fc:	f000 f868 	bl	80061d0 <_lseek_r>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	4632      	mov	r2, r6
 800610e:	463b      	mov	r3, r7
 8006110:	4628      	mov	r0, r5
 8006112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	f000 b817 	b.w	8006148 <_write_r>

0800611a <__sseek>:
 800611a:	b510      	push	{r4, lr}
 800611c:	460c      	mov	r4, r1
 800611e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006122:	f000 f855 	bl	80061d0 <_lseek_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	bf15      	itete	ne
 800612c:	6560      	strne	r0, [r4, #84]	; 0x54
 800612e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006136:	81a3      	strheq	r3, [r4, #12]
 8006138:	bf18      	it	ne
 800613a:	81a3      	strhne	r3, [r4, #12]
 800613c:	bd10      	pop	{r4, pc}

0800613e <__sclose>:
 800613e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006142:	f000 b813 	b.w	800616c <_close_r>
	...

08006148 <_write_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4d07      	ldr	r5, [pc, #28]	; (8006168 <_write_r+0x20>)
 800614c:	4604      	mov	r4, r0
 800614e:	4608      	mov	r0, r1
 8006150:	4611      	mov	r1, r2
 8006152:	2200      	movs	r2, #0
 8006154:	602a      	str	r2, [r5, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f7fb fe1f 	bl	8001d9a <_write>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_write_r+0x1e>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	b103      	cbz	r3, 8006166 <_write_r+0x1e>
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	20000420 	.word	0x20000420

0800616c <_close_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4d06      	ldr	r5, [pc, #24]	; (8006188 <_close_r+0x1c>)
 8006170:	2300      	movs	r3, #0
 8006172:	4604      	mov	r4, r0
 8006174:	4608      	mov	r0, r1
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	f7fb fe2b 	bl	8001dd2 <_close>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_close_r+0x1a>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_close_r+0x1a>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	20000420 	.word	0x20000420

0800618c <_fstat_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4d07      	ldr	r5, [pc, #28]	; (80061ac <_fstat_r+0x20>)
 8006190:	2300      	movs	r3, #0
 8006192:	4604      	mov	r4, r0
 8006194:	4608      	mov	r0, r1
 8006196:	4611      	mov	r1, r2
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	f7fb fe26 	bl	8001dea <_fstat>
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	d102      	bne.n	80061a8 <_fstat_r+0x1c>
 80061a2:	682b      	ldr	r3, [r5, #0]
 80061a4:	b103      	cbz	r3, 80061a8 <_fstat_r+0x1c>
 80061a6:	6023      	str	r3, [r4, #0]
 80061a8:	bd38      	pop	{r3, r4, r5, pc}
 80061aa:	bf00      	nop
 80061ac:	20000420 	.word	0x20000420

080061b0 <_isatty_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4d06      	ldr	r5, [pc, #24]	; (80061cc <_isatty_r+0x1c>)
 80061b4:	2300      	movs	r3, #0
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	f7fb fe25 	bl	8001e0a <_isatty>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_isatty_r+0x1a>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_isatty_r+0x1a>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	20000420 	.word	0x20000420

080061d0 <_lseek_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d07      	ldr	r5, [pc, #28]	; (80061f0 <_lseek_r+0x20>)
 80061d4:	4604      	mov	r4, r0
 80061d6:	4608      	mov	r0, r1
 80061d8:	4611      	mov	r1, r2
 80061da:	2200      	movs	r2, #0
 80061dc:	602a      	str	r2, [r5, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	f7fb fe1e 	bl	8001e20 <_lseek>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d102      	bne.n	80061ee <_lseek_r+0x1e>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	b103      	cbz	r3, 80061ee <_lseek_r+0x1e>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	bd38      	pop	{r3, r4, r5, pc}
 80061f0:	20000420 	.word	0x20000420

080061f4 <_read_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4d07      	ldr	r5, [pc, #28]	; (8006214 <_read_r+0x20>)
 80061f8:	4604      	mov	r4, r0
 80061fa:	4608      	mov	r0, r1
 80061fc:	4611      	mov	r1, r2
 80061fe:	2200      	movs	r2, #0
 8006200:	602a      	str	r2, [r5, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	f7fb fdac 	bl	8001d60 <_read>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_read_r+0x1e>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_read_r+0x1e>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	20000420 	.word	0x20000420

08006218 <_init>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr

08006224 <_fini>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	bf00      	nop
 8006228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622a:	bc08      	pop	{r3}
 800622c:	469e      	mov	lr, r3
 800622e:	4770      	bx	lr
