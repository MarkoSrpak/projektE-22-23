
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b714  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c6c  0800b8c4  0800b8c4  0001b8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f530  0800f530  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f530  0800f530  0001f530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f538  0800f538  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f538  0800f538  0001f538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f53c  0800f53c  0001f53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800f540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          00000824  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025c4e  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000542f  00000000  00000000  00045d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001be0  00000000  00000000  0004b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001960  00000000  00000000  0004cd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ba93  00000000  00000000  0004e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000254b4  00000000  00000000  0007a153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5384  00000000  00000000  0009f607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019498b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e4c  00000000  00000000  001949e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b8ac 	.word	0x0800b8ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	0800b8ac 	.word	0x0800b8ac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96e 	b.w	8000d60 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8083 	bne.w	8000bb2 <__udivmoddi4+0x116>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d947      	bls.n	8000b42 <__udivmoddi4+0xa6>
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	b142      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	f1c2 0020 	rsb	r0, r2, #32
 8000abc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	4097      	lsls	r7, r2
 8000ac4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ad4:	fa1f fe87 	uxth.w	lr, r7
 8000ad8:	fb08 c116 	mls	r1, r8, r6, ip
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aee:	f080 8119 	bcs.w	8000d24 <__udivmoddi4+0x288>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8116 	bls.w	8000d24 <__udivmoddi4+0x288>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	443b      	add	r3, r7
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3310 	mls	r3, r8, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	193c      	adds	r4, r7, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8105 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	f240 8102 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b2c:	eba4 040e 	sub.w	r4, r4, lr
 8000b30:	2600      	movs	r6, #0
 8000b32:	b11d      	cbz	r5, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c5 4300 	strd	r4, r3, [r5]
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	b902      	cbnz	r2, 8000b46 <__udivmoddi4+0xaa>
 8000b44:	deff      	udf	#255	; 0xff
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d150      	bne.n	8000bf0 <__udivmoddi4+0x154>
 8000b4e:	1bcb      	subs	r3, r1, r7
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	2601      	movs	r6, #1
 8000b5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b5e:	0c21      	lsrs	r1, r4, #16
 8000b60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b68:	fb08 f30c 	mul.w	r3, r8, ip
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0xe2>
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	f200 80e9 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x10c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x10a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80d9 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e7bf      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x12e>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80b1 	beq.w	8000d1e <__udivmoddi4+0x282>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x1cc>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0x140>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80b8 	bhi.w	8000d4c <__udivmoddi4+0x2b0>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0103 	sbc.w	r1, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	468c      	mov	ip, r1
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0a8      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000bea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf8:	4097      	lsls	r7, r2
 8000bfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000bfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c02:	40d9      	lsrs	r1, r3
 8000c04:	4330      	orrs	r0, r6
 8000c06:	0c03      	lsrs	r3, r0, #16
 8000c08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c0c:	fa1f f887 	uxth.w	r8, r7
 8000c10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb06 f108 	mul.w	r1, r6, r8
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x19c>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c2a:	f080 808d 	bcs.w	8000d48 <__udivmoddi4+0x2ac>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 808a 	bls.w	8000d48 <__udivmoddi4+0x2ac>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b281      	uxth	r1, r0
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb00 f308 	mul.w	r3, r0, r8
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x1c4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c56:	d273      	bcs.n	8000d40 <__udivmoddi4+0x2a4>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d971      	bls.n	8000d40 <__udivmoddi4+0x2a4>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4439      	add	r1, r7
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c66:	e778      	b.n	8000b5a <__udivmoddi4+0xbe>
 8000c68:	f1c6 0c20 	rsb	ip, r6, #32
 8000c6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c74:	431c      	orrs	r4, r3
 8000c76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c86:	431f      	orrs	r7, r3
 8000c88:	0c3b      	lsrs	r3, r7, #16
 8000c8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8e:	fa1f f884 	uxth.w	r8, r4
 8000c92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c9e:	458a      	cmp	sl, r1
 8000ca0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x220>
 8000caa:	1861      	adds	r1, r4, r1
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb0:	d248      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d946      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4421      	add	r1, r4
 8000cbc:	eba1 010a 	sub.w	r1, r1, sl
 8000cc0:	b2bf      	uxth	r7, r7
 8000cc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cce:	fb00 f808 	mul.w	r8, r0, r8
 8000cd2:	45b8      	cmp	r8, r7
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x24a>
 8000cd6:	19e7      	adds	r7, r4, r7
 8000cd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cdc:	d22e      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000cde:	45b8      	cmp	r8, r7
 8000ce0:	d92c      	bls.n	8000d3c <__udivmoddi4+0x2a0>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4427      	add	r7, r4
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	eba7 0708 	sub.w	r7, r7, r8
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	454f      	cmp	r7, r9
 8000cf4:	46c6      	mov	lr, r8
 8000cf6:	4649      	mov	r1, r9
 8000cf8:	d31a      	bcc.n	8000d30 <__udivmoddi4+0x294>
 8000cfa:	d017      	beq.n	8000d2c <__udivmoddi4+0x290>
 8000cfc:	b15d      	cbz	r5, 8000d16 <__udivmoddi4+0x27a>
 8000cfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000d02:	eb67 0701 	sbc.w	r7, r7, r1
 8000d06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d0a:	40f2      	lsrs	r2, r6
 8000d0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d10:	40f7      	lsrs	r7, r6
 8000d12:	e9c5 2700 	strd	r2, r7, [r5]
 8000d16:	2600      	movs	r6, #0
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e70b      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0x60>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6fd      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d2c:	4543      	cmp	r3, r8
 8000d2e:	d2e5      	bcs.n	8000cfc <__udivmoddi4+0x260>
 8000d30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d34:	eb69 0104 	sbc.w	r1, r9, r4
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7df      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e7d2      	b.n	8000ce6 <__udivmoddi4+0x24a>
 8000d40:	4660      	mov	r0, ip
 8000d42:	e78d      	b.n	8000c60 <__udivmoddi4+0x1c4>
 8000d44:	4681      	mov	r9, r0
 8000d46:	e7b9      	b.n	8000cbc <__udivmoddi4+0x220>
 8000d48:	4666      	mov	r6, ip
 8000d4a:	e775      	b.n	8000c38 <__udivmoddi4+0x19c>
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e74a      	b.n	8000be6 <__udivmoddi4+0x14a>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	4439      	add	r1, r7
 8000d56:	e713      	b.n	8000b80 <__udivmoddi4+0xe4>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	e724      	b.n	8000ba8 <__udivmoddi4+0x10c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <MDL_buttons_init>:


struct MDL_buttons_handler buttons_handler;


void MDL_buttons_init(){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
	//init GPIO gatea
	for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	e00f      	b.n	8000d90 <MDL_buttons_init+0x2c>
		buttons_handler.buttons[i].gpio = GPIOE;
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	4413      	add	r3, r2
 8000d78:	3308      	adds	r3, #8
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <MDL_buttons_init+0x78>)
 8000d7c:	601a      	str	r2, [r3, #0]
		buttons_handler.buttons[i].pressed_ago = 0;
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	4413      	add	r3, r2
 8000d86:	2200      	movs	r2, #0
 8000d88:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	ddec      	ble.n	8000d70 <MDL_buttons_init+0xc>
	}
	//init GPIO pinova
	buttons_handler.buttons[0].gpio_pin = GPIO_PIN_3;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000d98:	2208      	movs	r2, #8
 8000d9a:	809a      	strh	r2, [r3, #4]
	buttons_handler.buttons[1].gpio_pin = GPIO_PIN_2;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	829a      	strh	r2, [r3, #20]
	buttons_handler.buttons[2].gpio_pin = GPIO_PIN_4;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	849a      	strh	r2, [r3, #36]	; 0x24
	buttons_handler.buttons[3].gpio_pin = GPIO_PIN_6;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	869a      	strh	r2, [r3, #52]	; 0x34

	buttons_handler.buttons[0].button_type = START;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	709a      	strb	r2, [r3, #2]
	buttons_handler.buttons[1].button_type = MINUS;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	749a      	strb	r2, [r3, #18]
	buttons_handler.buttons[2].button_type = PLUS;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	buttons_handler.buttons[3].button_type = TOCI;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <MDL_buttons_init+0x74>)
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200002a8 	.word	0x200002a8
 8000ddc:	40021000 	.word	0x40021000

08000de0 <BUTTON_CHECK>:

void BUTTON_CHECK(int i){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	buttons_handler.buttons[i].button_state = HAL_GPIO_ReadPin(buttons_handler.buttons[i].gpio, buttons_handler.buttons[i].gpio_pin);
 8000de8:	4a42      	ldr	r2, [pc, #264]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4413      	add	r3, r2
 8000df0:	3308      	adds	r3, #8
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	493f      	ldr	r1, [pc, #252]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4610      	mov	r0, r2
 8000e04:	f006 f828 	bl	8006e58 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4a39      	ldr	r2, [pc, #228]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4413      	add	r3, r2
 8000e14:	330c      	adds	r3, #12
 8000e16:	460a      	mov	r2, r1
 8000e18:	701a      	strb	r2, [r3, #0]

	if(buttons_handler.buttons[i].prev_button_state == GPIO_PIN_SET && buttons_handler.buttons[i].button_state == GPIO_PIN_RESET){
 8000e1a:	4a36      	ldr	r2, [pc, #216]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	4413      	add	r3, r2
 8000e22:	330d      	adds	r3, #13
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d10d      	bne.n	8000e46 <BUTTON_CHECK+0x66>
 8000e2a:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	011b      	lsls	r3, r3, #4
 8000e30:	4413      	add	r3, r2
 8000e32:	330c      	adds	r3, #12
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d105      	bne.n	8000e46 <BUTTON_CHECK+0x66>
		//detected falling edge
		buttons_handler.buttons[i].pressed_ago = 0;
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	4413      	add	r3, r2
 8000e42:	2200      	movs	r2, #0
 8000e44:	801a      	strh	r2, [r3, #0]
	}
	if(buttons_handler.buttons[i].prev_button_state == GPIO_PIN_RESET && buttons_handler.buttons[i].button_state == GPIO_PIN_SET){
 8000e46:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	4413      	add	r3, r2
 8000e4e:	330d      	adds	r3, #13
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d128      	bne.n	8000ea8 <BUTTON_CHECK+0xc8>
 8000e56:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	4413      	add	r3, r2
 8000e5e:	330c      	adds	r3, #12
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d120      	bne.n	8000ea8 <BUTTON_CHECK+0xc8>
		//detected rising edge
		if(buttons_handler.buttons[i].pressed_ago == BUTTON_HALT_TIME){
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	4413      	add	r3, r2
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e74:	d112      	bne.n	8000e9c <BUTTON_CHECK+0xbc>
			MDL_LCD_Bttn_Pressed(buttons_handler.buttons[i].button_type);
 8000e76:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f8e8 	bl	8001058 <MDL_LCD_Bttn_Pressed>
			if(buttons_handler.buttons[i].button_type == TOCI){
 8000e88:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	4413      	add	r3, r2
 8000e90:	3302      	adds	r3, #2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d101      	bne.n	8000e9c <BUTTON_CHECK+0xbc>
				//MDL_leds_next_round();
				TociPressed();
 8000e98:	f000 f8d0 	bl	800103c <TociPressed>
			//	Dispenser(200);
			}
		}
		buttons_handler.buttons[i].pressed_ago = 0;
 8000e9c:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4413      	add	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	801a      	strh	r2, [r3, #0]

	}
	if(buttons_handler.buttons[i].pressed_ago < BUTTON_HALT_TIME){
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000eb6:	d20c      	bcs.n	8000ed2 <BUTTON_CHECK+0xf2>
		buttons_handler.buttons[i].pressed_ago++;
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b299      	uxth	r1, r3
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	460a      	mov	r2, r1
 8000ed0:	801a      	strh	r2, [r3, #0]
	}
	buttons_handler.buttons[i].prev_button_state = buttons_handler.buttons[i].button_state;
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	4413      	add	r3, r2
 8000eda:	330c      	adds	r3, #12
 8000edc:	7819      	ldrb	r1, [r3, #0]
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <BUTTON_CHECK+0x114>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	330d      	adds	r3, #13
 8000ee8:	460a      	mov	r2, r1
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200002a8 	.word	0x200002a8

08000ef8 <MDL_Buttons_Handler>:


void MDL_Buttons_Handler(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	e005      	b.n	8000f10 <MDL_Buttons_Handler+0x18>
		BUTTON_CHECK(i);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff6b 	bl	8000de0 <BUTTON_CHECK>
	for(int i = 0; i < NUM_OF_BUTTONS; i++){
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	ddf6      	ble.n	8000f04 <MDL_Buttons_Handler+0xc>
	}
}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <MDL_dispenser_init>:
//uint16_t ml_total = 200;

GPIO_TypeDef *gpio_Dispenser;
uint16_t pin_Dispenser;

void MDL_dispenser_init(){
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
	gpio_Dispenser = GPIOG;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <MDL_dispenser_init+0x1c>)
 8000f26:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <MDL_dispenser_init+0x20>)
 8000f28:	601a      	str	r2, [r3, #0]
	pin_Dispenser = GPIO_PIN_2;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MDL_dispenser_init+0x24>)
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	801a      	strh	r2, [r3, #0]
//	Dispenser(300); ne treba vise
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200002e8 	.word	0x200002e8
 8000f40:	40021800 	.word	0x40021800
 8000f44:	200002ec 	.word	0x200002ec

08000f48 <Dispenser>:

void Dispenser(uint16_t ml_total) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
	/*
	 * arg = 200 ~ 100 mL
	 * arg = ? ~ 50 mL
	 * arg = ? ~ 25 mL */
	HAL_GPIO_WritePin(gpio_Dispenser, pin_Dispenser, GPIO_PIN_SET);
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <Dispenser+0xc0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <Dispenser+0xc4>)
 8000f58:	8811      	ldrh	r1, [r2, #0]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f005 ff93 	bl	8006e88 <HAL_GPIO_WritePin>
	if(ml_total == 0){
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d03b      	beq.n	8000fe0 <Dispenser+0x98>
	} else if(ml_total == 25){
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	2b19      	cmp	r3, #25
 8000f6c:	d11c      	bne.n	8000fa8 <Dispenser+0x60>
		HAL_Delay(ml_total/0.067 + 1000);
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fadf 	bl	8000534 <__aeabi_i2d>
 8000f76:	a320      	add	r3, pc, #128	; (adr r3, 8000ff8 <Dispenser+0xb0>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff fc6e 	bl	800085c <__aeabi_ddiv>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <Dispenser+0xc8>)
 8000f8e:	f7ff f985 	bl	800029c <__adddf3>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fd47 	bl	8000a2c <__aeabi_d2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 f8c7 	bl	8005134 <HAL_Delay>
 8000fa6:	e01b      	b.n	8000fe0 <Dispenser+0x98>
	}else {
	HAL_Delay(ml_total/0.067 + 1300); //ukupna militraza kroz protok pumpe + t za paljenje pumpe
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fac2 	bl	8000534 <__aeabi_i2d>
 8000fb0:	a311      	add	r3, pc, #68	; (adr r3, 8000ff8 <Dispenser+0xb0>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fc51 	bl	800085c <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	a30f      	add	r3, pc, #60	; (adr r3, 8001000 <Dispenser+0xb8>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff f968 	bl	800029c <__adddf3>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fd2a 	bl	8000a2c <__aeabi_d2uiz>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 f8aa 	bl	8005134 <HAL_Delay>
	}

	HAL_GPIO_WritePin(gpio_Dispenser, pin_Dispenser, GPIO_PIN_RESET);
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <Dispenser+0xc0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a09      	ldr	r2, [pc, #36]	; (800100c <Dispenser+0xc4>)
 8000fe6:	8811      	ldrh	r1, [r2, #0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 ff4c 	bl	8006e88 <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	78d4fdf4 	.word	0x78d4fdf4
 8000ffc:	3fb126e9 	.word	0x3fb126e9
 8001000:	00000000 	.word	0x00000000
 8001004:	40945000 	.word	0x40945000
 8001008:	200002e8 	.word	0x200002e8
 800100c:	200002ec 	.word	0x200002ec
 8001010:	408f4000 	.word	0x408f4000

08001014 <sumator>:

void sumator(uint16_t ml){
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
	ml_total += ml;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <sumator+0x24>)
 8001020:	881a      	ldrh	r2, [r3, #0]
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	4413      	add	r3, r2
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <sumator+0x24>)
 800102a:	801a      	strh	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	200000ec 	.word	0x200000ec

0800103c <TociPressed>:

void TociPressed(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	Dispenser(ml_total);
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <TociPressed+0x18>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff7f 	bl	8000f48 <Dispenser>
	ml_total = ML_DEFAULT;
 800104a:	4b02      	ldr	r3, [pc, #8]	; (8001054 <TociPressed+0x18>)
 800104c:	2200      	movs	r2, #0
 800104e:	801a      	strh	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200000ec 	.word	0x200000ec

08001058 <MDL_LCD_Bttn_Pressed>:

LCD_Handler lcd_handler;


//updates game state based on button press
void MDL_LCD_Bttn_Pressed(bttns bttn){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	switch(lcd_handler.game_state){
 8001062:	4b71      	ldr	r3, [pc, #452]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 8001064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001068:	2b07      	cmp	r3, #7
 800106a:	f200 80c7 	bhi.w	80011fc <MDL_LCD_Bttn_Pressed+0x1a4>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <MDL_LCD_Bttn_Pressed+0x1c>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	08001095 	.word	0x08001095
 8001078:	080010ab 	.word	0x080010ab
 800107c:	08001115 	.word	0x08001115
 8001080:	0800112d 	.word	0x0800112d
 8001084:	0800115b 	.word	0x0800115b
 8001088:	08001189 	.word	0x08001189
 800108c:	080011b7 	.word	0x080011b7
 8001090:	080011e5 	.word	0x080011e5
		case WELCOME:
			if (bttn == START){
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 80b2 	bne.w	8001200 <MDL_LCD_Bttn_Pressed+0x1a8>
				lcd_handler.game_state=NUM_OF_PLAYERS;
 800109c:	4b62      	ldr	r3, [pc, #392]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 80010a4:	f000 f9e0 	bl	8001468 <change_LCD_screenstate>
			}
			break;
 80010a8:	e0aa      	b.n	8001200 <MDL_LCD_Bttn_Pressed+0x1a8>

		case NUM_OF_PLAYERS:

			if (bttn == PLUS){
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d110      	bne.n	80010d2 <MDL_LCD_Bttn_Pressed+0x7a>
				if(lcd_handler.num_of_players < 6) lcd_handler.num_of_players++;
 80010b0:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d805      	bhi.n	80010c4 <MDL_LCD_Bttn_Pressed+0x6c>
 80010b8:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b59      	ldr	r3, [pc, #356]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80010c2:	701a      	strb	r2, [r3, #0]
				lcd_handler.game_state = NUM_OF_PLAYERS;
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 80010cc:	f000 f9cc 	bl	8001468 <change_LCD_screenstate>

				LCD_Add_Player();
				lcd_handler.game_state = PLAYER1;
				change_LCD_screenstate();
			}
			break;
 80010d0:	e098      	b.n	8001204 <MDL_LCD_Bttn_Pressed+0x1ac>
			else if(bttn == MINUS){
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d110      	bne.n	80010fa <MDL_LCD_Bttn_Pressed+0xa2>
				if(lcd_handler.num_of_players > 2) lcd_handler.num_of_players--;
 80010d8:	4b53      	ldr	r3, [pc, #332]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d905      	bls.n	80010ec <MDL_LCD_Bttn_Pressed+0x94>
 80010e0:	4b51      	ldr	r3, [pc, #324]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80010ea:	701a      	strb	r2, [r3, #0]
				lcd_handler.game_state = NUM_OF_PLAYERS;
 80010ec:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 80010f4:	f000 f9b8 	bl	8001468 <change_LCD_screenstate>
			break;
 80010f8:	e084      	b.n	8001204 <MDL_LCD_Bttn_Pressed+0x1ac>
			else if(bttn == START){
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f040 8081 	bne.w	8001204 <MDL_LCD_Bttn_Pressed+0x1ac>
				LCD_Add_Player();
 8001102:	f000 f981 	bl	8001408 <LCD_Add_Player>
				lcd_handler.game_state = PLAYER1;
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 8001108:	2202      	movs	r2, #2
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 800110e:	f000 f9ab 	bl	8001468 <change_LCD_screenstate>
			break;
 8001112:	e077      	b.n	8001204 <MDL_LCD_Bttn_Pressed+0x1ac>

		case PLAYER1:
			if(bttn == TOCI){
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d176      	bne.n	8001208 <MDL_LCD_Bttn_Pressed+0x1b0>
				lcd_handler.game_state= PLAYER2;
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 800111c:	2203      	movs	r2, #3
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 8001122:	f000 f9a1 	bl	8001468 <change_LCD_screenstate>
				MDL_leds_next_round();
 8001126:	f001 f96d 	bl	8002404 <MDL_leds_next_round>
			}
			break;
 800112a:	e06d      	b.n	8001208 <MDL_LCD_Bttn_Pressed+0x1b0>

		case PLAYER2:
			if(bttn == TOCI){
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b03      	cmp	r3, #3
 8001130:	d16c      	bne.n	800120c <MDL_LCD_Bttn_Pressed+0x1b4>
				if(lcd_handler.num_of_players == 2){
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d106      	bne.n	8001148 <MDL_LCD_Bttn_Pressed+0xf0>
					lcd_handler.game_state= PLAYER1;
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 800113c:	2202      	movs	r2, #2
 800113e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 8001142:	f000 f991 	bl	8001468 <change_LCD_screenstate>
 8001146:	e005      	b.n	8001154 <MDL_LCD_Bttn_Pressed+0xfc>
				} else {
					lcd_handler.game_state= PLAYER3;
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 800114a:	2204      	movs	r2, #4
 800114c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 8001150:	f000 f98a 	bl	8001468 <change_LCD_screenstate>
				}
				MDL_leds_next_round();
 8001154:	f001 f956 	bl	8002404 <MDL_leds_next_round>
			}
			break;
 8001158:	e058      	b.n	800120c <MDL_LCD_Bttn_Pressed+0x1b4>
		case PLAYER3:
			if(bttn == TOCI){
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d157      	bne.n	8001210 <MDL_LCD_Bttn_Pressed+0x1b8>
				if(lcd_handler.num_of_players ==3){
 8001160:	4b31      	ldr	r3, [pc, #196]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d106      	bne.n	8001176 <MDL_LCD_Bttn_Pressed+0x11e>
					lcd_handler.game_state= PLAYER1;
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 800116a:	2202      	movs	r2, #2
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 8001170:	f000 f97a 	bl	8001468 <change_LCD_screenstate>
 8001174:	e005      	b.n	8001182 <MDL_LCD_Bttn_Pressed+0x12a>
				} else {
					lcd_handler.game_state= PLAYER4;
 8001176:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 8001178:	2205      	movs	r2, #5
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 800117e:	f000 f973 	bl	8001468 <change_LCD_screenstate>
				}
				MDL_leds_next_round();
 8001182:	f001 f93f 	bl	8002404 <MDL_leds_next_round>
			}
			break;
 8001186:	e043      	b.n	8001210 <MDL_LCD_Bttn_Pressed+0x1b8>

		case PLAYER4:
			if(bttn == TOCI){
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d142      	bne.n	8001214 <MDL_LCD_Bttn_Pressed+0x1bc>
				if(lcd_handler.num_of_players ==4){
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b04      	cmp	r3, #4
 8001194:	d106      	bne.n	80011a4 <MDL_LCD_Bttn_Pressed+0x14c>
					lcd_handler.game_state= PLAYER1;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 8001198:	2202      	movs	r2, #2
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 800119e:	f000 f963 	bl	8001468 <change_LCD_screenstate>
 80011a2:	e005      	b.n	80011b0 <MDL_LCD_Bttn_Pressed+0x158>
				} else {
					lcd_handler.game_state= PLAYER5;
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80011a6:	2206      	movs	r2, #6
 80011a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 80011ac:	f000 f95c 	bl	8001468 <change_LCD_screenstate>
				}
				MDL_leds_next_round();
 80011b0:	f001 f928 	bl	8002404 <MDL_leds_next_round>
			}
			break;
 80011b4:	e02e      	b.n	8001214 <MDL_LCD_Bttn_Pressed+0x1bc>

		case PLAYER5:
			if(bttn == TOCI){
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d12d      	bne.n	8001218 <MDL_LCD_Bttn_Pressed+0x1c0>
				if(lcd_handler.num_of_players ==5){
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d106      	bne.n	80011d2 <MDL_LCD_Bttn_Pressed+0x17a>
					lcd_handler.game_state= PLAYER1;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 80011cc:	f000 f94c 	bl	8001468 <change_LCD_screenstate>
 80011d0:	e005      	b.n	80011de <MDL_LCD_Bttn_Pressed+0x186>
				} else {
					lcd_handler.game_state= PLAYER6;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					change_LCD_screenstate();
 80011da:	f000 f945 	bl	8001468 <change_LCD_screenstate>
				}
				MDL_leds_next_round();
 80011de:	f001 f911 	bl	8002404 <MDL_leds_next_round>
			}
			break;
 80011e2:	e019      	b.n	8001218 <MDL_LCD_Bttn_Pressed+0x1c0>

		case PLAYER6:
			if(bttn == TOCI){
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d118      	bne.n	800121c <MDL_LCD_Bttn_Pressed+0x1c4>
				lcd_handler.game_state= PLAYER1;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MDL_LCD_Bttn_Pressed+0x1d0>)
 80011ec:	2202      	movs	r2, #2
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				change_LCD_screenstate();
 80011f2:	f000 f939 	bl	8001468 <change_LCD_screenstate>
				MDL_leds_next_round();
 80011f6:	f001 f905 	bl	8002404 <MDL_leds_next_round>
			}
			break;
 80011fa:	e00f      	b.n	800121c <MDL_LCD_Bttn_Pressed+0x1c4>


		default:
			break;
 80011fc:	bf00      	nop
 80011fe:	e00e      	b.n	800121e <MDL_LCD_Bttn_Pressed+0x1c6>
			break;
 8001200:	bf00      	nop
 8001202:	e00c      	b.n	800121e <MDL_LCD_Bttn_Pressed+0x1c6>
			break;
 8001204:	bf00      	nop
 8001206:	e00a      	b.n	800121e <MDL_LCD_Bttn_Pressed+0x1c6>
			break;
 8001208:	bf00      	nop
 800120a:	e008      	b.n	800121e <MDL_LCD_Bttn_Pressed+0x1c6>
			break;
 800120c:	bf00      	nop
 800120e:	e006      	b.n	800121e <MDL_LCD_Bttn_Pressed+0x1c6>
			break;
 8001210:	bf00      	nop
 8001212:	e004      	b.n	800121e <MDL_LCD_Bttn_Pressed+0x1c6>
			break;
 8001214:	bf00      	nop
 8001216:	e002      	b.n	800121e <MDL_LCD_Bttn_Pressed+0x1c6>
			break;
 8001218:	bf00      	nop
 800121a:	e000      	b.n	800121e <MDL_LCD_Bttn_Pressed+0x1c6>
			break;
 800121c:	bf00      	nop
	}

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200002f0 	.word	0x200002f0

0800122c <MDL_LCD_Hit_Update>:


//updates game state based on sensor hits
void MDL_LCD_Hit_Update(uint32_t mLs){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	switch(lcd_handler.game_state){
 8001234:	4b58      	ldr	r3, [pc, #352]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123a:	3b02      	subs	r3, #2
 800123c:	2b05      	cmp	r3, #5
 800123e:	f200 8099 	bhi.w	8001374 <MDL_LCD_Hit_Update+0x148>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <MDL_LCD_Hit_Update+0x1c>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001261 	.word	0x08001261
 800124c:	0800128f 	.word	0x0800128f
 8001250:	080012bd 	.word	0x080012bd
 8001254:	080012eb 	.word	0x080012eb
 8001258:	08001319 	.word	0x08001319
 800125c:	08001347 	.word	0x08001347
			case PLAYER1:
				lcd_handler.Players[0].mL += mLs;
 8001260:	4b4d      	ldr	r3, [pc, #308]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	4a4b      	ldr	r2, [pc, #300]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 800126a:	6113      	str	r3, [r2, #16]
				change_LCD_screenstate();
 800126c:	f000 f8fc 	bl	8001468 <change_LCD_screenstate>

				if(lcd_handler.Players[0].mL >= 1000){
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001278:	d37e      	bcc.n	8001378 <MDL_LCD_Hit_Update+0x14c>
					lcd_handler.game_state = WIN;
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 800127c:	2208      	movs	r2, #8
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 1;
 8001282:	4b45      	ldr	r3, [pc, #276]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001284:	2201      	movs	r2, #1
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 8001288:	f000 f8ee 	bl	8001468 <change_LCD_screenstate>
				}

				break;
 800128c:	e074      	b.n	8001378 <MDL_LCD_Hit_Update+0x14c>

			case PLAYER2:
				lcd_handler.Players[1].mL += mLs;
 800128e:	4b42      	ldr	r3, [pc, #264]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	4a40      	ldr	r2, [pc, #256]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001298:	6193      	str	r3, [r2, #24]
				change_LCD_screenstate();
 800129a:	f000 f8e5 	bl	8001468 <change_LCD_screenstate>

				if(lcd_handler.Players[1].mL >= 1000){
 800129e:	4b3e      	ldr	r3, [pc, #248]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a6:	d369      	bcc.n	800137c <MDL_LCD_Hit_Update+0x150>
					lcd_handler.game_state = WIN;
 80012a8:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012aa:	2208      	movs	r2, #8
 80012ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 2;
 80012b0:	4b39      	ldr	r3, [pc, #228]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 80012b6:	f000 f8d7 	bl	8001468 <change_LCD_screenstate>
				}

				break;
 80012ba:	e05f      	b.n	800137c <MDL_LCD_Hit_Update+0x150>

			case PLAYER3:
				lcd_handler.Players[2].mL += mLs;
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012be:	6a1a      	ldr	r2, [r3, #32]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a34      	ldr	r2, [pc, #208]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012c6:	6213      	str	r3, [r2, #32]
				change_LCD_screenstate();
 80012c8:	f000 f8ce 	bl	8001468 <change_LCD_screenstate>

				if(lcd_handler.Players[2].mL >= 1000){
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d4:	d354      	bcc.n	8001380 <MDL_LCD_Hit_Update+0x154>
					lcd_handler.game_state = WIN;
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012d8:	2208      	movs	r2, #8
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 3;
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012e0:	2203      	movs	r2, #3
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 80012e4:	f000 f8c0 	bl	8001468 <change_LCD_screenstate>
				}

				break;
 80012e8:	e04a      	b.n	8001380 <MDL_LCD_Hit_Update+0x154>

			case PLAYER4:
				lcd_handler.Players[3].mL += mLs;
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a29      	ldr	r2, [pc, #164]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012f4:	6293      	str	r3, [r2, #40]	; 0x28
				change_LCD_screenstate();
 80012f6:	f000 f8b7 	bl	8001468 <change_LCD_screenstate>

				if(lcd_handler.Players[3].mL >= 1000){
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001302:	d33f      	bcc.n	8001384 <MDL_LCD_Hit_Update+0x158>
					lcd_handler.game_state = WIN;
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001306:	2208      	movs	r2, #8
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 4;
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 800130e:	2204      	movs	r2, #4
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 8001312:	f000 f8a9 	bl	8001468 <change_LCD_screenstate>
				}

				break;
 8001316:	e035      	b.n	8001384 <MDL_LCD_Hit_Update+0x158>
			case PLAYER5:
				lcd_handler.Players[4].mL += mLs;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 800131a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001322:	6313      	str	r3, [r2, #48]	; 0x30
				change_LCD_screenstate();
 8001324:	f000 f8a0 	bl	8001468 <change_LCD_screenstate>

				if(lcd_handler.Players[4].mL >= 1000){
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001330:	d32a      	bcc.n	8001388 <MDL_LCD_Hit_Update+0x15c>
					lcd_handler.game_state = WIN;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001334:	2208      	movs	r2, #8
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 5;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 800133c:	2205      	movs	r2, #5
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 8001340:	f000 f892 	bl	8001468 <change_LCD_screenstate>
				}

				break;
 8001344:	e020      	b.n	8001388 <MDL_LCD_Hit_Update+0x15c>

			case PLAYER6:
				lcd_handler.Players[5].mL += mLs;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001350:	6393      	str	r3, [r2, #56]	; 0x38
				change_LCD_screenstate();
 8001352:	f000 f889 	bl	8001468 <change_LCD_screenstate>

				if(lcd_handler.Players[5].mL >= 1000){
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800135e:	d315      	bcc.n	800138c <MDL_LCD_Hit_Update+0x160>
					lcd_handler.game_state = WIN;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 8001362:	2208      	movs	r2, #8
 8001364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					lcd_handler.winner = 6;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MDL_LCD_Hit_Update+0x16c>)
 800136a:	2206      	movs	r2, #6
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
					change_LCD_screenstate();
 800136e:	f000 f87b 	bl	8001468 <change_LCD_screenstate>
				}

				break;
 8001372:	e00b      	b.n	800138c <MDL_LCD_Hit_Update+0x160>

			default:
				break;
 8001374:	bf00      	nop
 8001376:	e00a      	b.n	800138e <MDL_LCD_Hit_Update+0x162>
				break;
 8001378:	bf00      	nop
 800137a:	e008      	b.n	800138e <MDL_LCD_Hit_Update+0x162>
				break;
 800137c:	bf00      	nop
 800137e:	e006      	b.n	800138e <MDL_LCD_Hit_Update+0x162>
				break;
 8001380:	bf00      	nop
 8001382:	e004      	b.n	800138e <MDL_LCD_Hit_Update+0x162>
				break;
 8001384:	bf00      	nop
 8001386:	e002      	b.n	800138e <MDL_LCD_Hit_Update+0x162>
				break;
 8001388:	bf00      	nop
 800138a:	e000      	b.n	800138e <MDL_LCD_Hit_Update+0x162>
				break;
 800138c:	bf00      	nop
	}
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200002f0 	.word	0x200002f0

0800139c <MDL_LCD_Init>:



//initializes new game
void MDL_LCD_Init(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	BSP_LCD_Init();			//tocnije nakon ovoga
 80013a0:	f002 ffb4 	bl	800430c <BSP_LCD_Init>
	//MDL_leds_next_round();	//samo testni poziv

	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80013a4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80013a8:	2000      	movs	r0, #0
 80013aa:	f003 f831 	bl	8004410 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80013ae:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80013b2:	2001      	movs	r0, #1
 80013b4:	f003 f82c 	bl	8004410 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f003 f88d 	bl	80044d8 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80013be:	f003 fa7f 	bl	80048c0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(BGCOLOR);
 80013c2:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80013c6:	f003 f8df 	bl	8004588 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013ca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013ce:	f003 f893 	bl	80044f8 <BSP_LCD_SetTextColor>

	lcd_handler.num_of_players=2;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <MDL_LCD_Init+0x60>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	701a      	strb	r2, [r3, #0]
	sprintf(lcd_handler.num_of_players_print, "%d", lcd_handler.num_of_players);
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <MDL_LCD_Init+0x60>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <MDL_LCD_Init+0x64>)
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <MDL_LCD_Init+0x68>)
 80013e2:	f009 f8cf 	bl	800a584 <siprintf>

	lcd_handler.game_state=WELCOME;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <MDL_LCD_Init+0x60>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	lcd_handler.winner = 0;
 80013ee:	4b03      	ldr	r3, [pc, #12]	; (80013fc <MDL_LCD_Init+0x60>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
	change_LCD_screenstate();
 80013f4:	f000 f838 	bl	8001468 <change_LCD_screenstate>

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200002f0 	.word	0x200002f0
 8001400:	0800b8c4 	.word	0x0800b8c4
 8001404:	200002f1 	.word	0x200002f1

08001408 <LCD_Add_Player>:


//updates number of players based on player choice
void LCD_Add_Player(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0

	sprintf(lcd_handler.num_of_players_print, "%d", lcd_handler.num_of_players);
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <LCD_Add_Player+0x54>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4912      	ldr	r1, [pc, #72]	; (8001460 <LCD_Add_Player+0x58>)
 8001416:	4813      	ldr	r0, [pc, #76]	; (8001464 <LCD_Add_Player+0x5c>)
 8001418:	f009 f8b4 	bl	800a584 <siprintf>

	for(uint32_t i=0; i<lcd_handler.num_of_players; i++){
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e011      	b.n	8001446 <LCD_Add_Player+0x3e>
		LCD_Player player = {i, 0};
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
		lcd_handler.Players[i]=player;
 800142a:	4a0c      	ldr	r2, [pc, #48]	; (800145c <LCD_Add_Player+0x54>)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	3304      	adds	r3, #4
 8001436:	1d3a      	adds	r2, r7, #4
 8001438:	e892 0003 	ldmia.w	r2, {r0, r1}
 800143c:	e883 0003 	stmia.w	r3, {r0, r1}
	for(uint32_t i=0; i<lcd_handler.num_of_players; i++){
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <LCD_Add_Player+0x54>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4293      	cmp	r3, r2
 8001450:	d3e7      	bcc.n	8001422 <LCD_Add_Player+0x1a>
	}
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200002f0 	.word	0x200002f0
 8001460:	0800b8c4 	.word	0x0800b8c4
 8001464:	200002f1 	.word	0x200002f1

08001468 <change_LCD_screenstate>:


//calls functions to change LCD screen based on game state
void change_LCD_screenstate(){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

	switch (lcd_handler.game_state){
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <change_LCD_screenstate+0x58>)
 800146e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001472:	2b08      	cmp	r3, #8
 8001474:	d820      	bhi.n	80014b8 <change_LCD_screenstate+0x50>
 8001476:	a201      	add	r2, pc, #4	; (adr r2, 800147c <change_LCD_screenstate+0x14>)
 8001478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147c:	080014a1 	.word	0x080014a1
 8001480:	080014a7 	.word	0x080014a7
 8001484:	080014ad 	.word	0x080014ad
 8001488:	080014ad 	.word	0x080014ad
 800148c:	080014ad 	.word	0x080014ad
 8001490:	080014ad 	.word	0x080014ad
 8001494:	080014ad 	.word	0x080014ad
 8001498:	080014ad 	.word	0x080014ad
 800149c:	080014b3 	.word	0x080014b3
		case WELCOME:
			LCD_State_WELCOME();
 80014a0:	f000 f810 	bl	80014c4 <LCD_State_WELCOME>
			break;
 80014a4:	e009      	b.n	80014ba <change_LCD_screenstate+0x52>

		case NUM_OF_PLAYERS:
			LCD_State_NUM_OF_PLAYERS();
 80014a6:	f000 f82d 	bl	8001504 <LCD_State_NUM_OF_PLAYERS>
			break;
 80014aa:	e006      	b.n	80014ba <change_LCD_screenstate+0x52>
		case PLAYER2:
		case PLAYER3:
		case PLAYER4:
		case PLAYER5:
		case PLAYER6:
			LCD_State_PLAYERS();
 80014ac:	f000 f9fe 	bl	80018ac <LCD_State_PLAYERS>
			break;
 80014b0:	e003      	b.n	80014ba <change_LCD_screenstate+0x52>

		case WIN:
			LCD_State_WIN();
 80014b2:	f000 f879 	bl	80015a8 <LCD_State_WIN>
			break;
 80014b6:	e000      	b.n	80014ba <change_LCD_screenstate+0x52>

		default:
			break;
 80014b8:	bf00      	nop

	}
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200002f0 	.word	0x200002f0

080014c4 <LCD_State_WELCOME>:



//displays the WELCOME screen on the LCD
void LCD_State_WELCOME(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font20);
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <LCD_State_WELCOME+0x30>)
 80014ca:	f003 f82d 	bl	8004528 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80014ce:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80014d2:	f003 f811 	bl	80044f8 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5,(uint8_t *)"FERpong");
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <LCD_State_WELCOME+0x34>)
 80014d8:	2005      	movs	r0, #5
 80014da:	f003 f97f 	bl	80047dc <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(8,(uint8_t *)"pritisni start");
 80014de:	4907      	ldr	r1, [pc, #28]	; (80014fc <LCD_State_WELCOME+0x38>)
 80014e0:	2008      	movs	r0, #8
 80014e2:	f003 f97b 	bl	80047dc <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(9,(uint8_t *)">");
 80014e6:	4906      	ldr	r1, [pc, #24]	; (8001500 <LCD_State_WELCOME+0x3c>)
 80014e8:	2009      	movs	r0, #9
 80014ea:	f003 f977 	bl	80047dc <BSP_LCD_DisplayStringAtLine>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000048 	.word	0x20000048
 80014f8:	0800b8c8 	.word	0x0800b8c8
 80014fc:	0800b8d0 	.word	0x0800b8d0
 8001500:	0800b8e0 	.word	0x0800b8e0

08001504 <LCD_State_NUM_OF_PLAYERS>:


//displays the NUM_OF_PLAYERS screen on the LCD
void LCD_State_NUM_OF_PLAYERS(void){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	sprintf(lcd_handler.num_of_players_print, "%d", lcd_handler.num_of_players);
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <LCD_State_NUM_OF_PLAYERS+0x70>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	491a      	ldr	r1, [pc, #104]	; (8001578 <LCD_State_NUM_OF_PLAYERS+0x74>)
 8001510:	481a      	ldr	r0, [pc, #104]	; (800157c <LCD_State_NUM_OF_PLAYERS+0x78>)
 8001512:	f009 f837 	bl	800a584 <siprintf>

	BSP_LCD_Clear(BGCOLOR);
 8001516:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800151a:	f003 f835 	bl	8004588 <BSP_LCD_Clear>

	BSP_LCD_SetFont(&Font20);
 800151e:	4818      	ldr	r0, [pc, #96]	; (8001580 <LCD_State_NUM_OF_PLAYERS+0x7c>)
 8001520:	f003 f802 	bl	8004528 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(2,(uint8_t *)"odabir igraca");
 8001524:	4917      	ldr	r1, [pc, #92]	; (8001584 <LCD_State_NUM_OF_PLAYERS+0x80>)
 8001526:	2002      	movs	r0, #2
 8001528:	f003 f958 	bl	80047dc <BSP_LCD_DisplayStringAtLine>


	BSP_LCD_SetFont(&Font24);
 800152c:	4816      	ldr	r0, [pc, #88]	; (8001588 <LCD_State_NUM_OF_PLAYERS+0x84>)
 800152e:	f002 fffb 	bl	8004528 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(5,(uint8_t *)lcd_handler.num_of_players_print);
 8001532:	4912      	ldr	r1, [pc, #72]	; (800157c <LCD_State_NUM_OF_PLAYERS+0x78>)
 8001534:	2005      	movs	r0, #5
 8001536:	f003 f951 	bl	80047dc <BSP_LCD_DisplayStringAtLine>

	BSP_LCD_SetFont(&Font12);
 800153a:	4814      	ldr	r0, [pc, #80]	; (800158c <LCD_State_NUM_OF_PLAYERS+0x88>)
 800153c:	f002 fff4 	bl	8004528 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(17,(uint8_t *)"pritisni + za dodavanje igraca");
 8001540:	4913      	ldr	r1, [pc, #76]	; (8001590 <LCD_State_NUM_OF_PLAYERS+0x8c>)
 8001542:	2011      	movs	r0, #17
 8001544:	f003 f94a 	bl	80047dc <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(18,(uint8_t *)"pritisni - za uklanjanje igraca");
 8001548:	4912      	ldr	r1, [pc, #72]	; (8001594 <LCD_State_NUM_OF_PLAYERS+0x90>)
 800154a:	2012      	movs	r0, #18
 800154c:	f003 f946 	bl	80047dc <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(20,(uint8_t *)"max broj igraca je 6");
 8001550:	4911      	ldr	r1, [pc, #68]	; (8001598 <LCD_State_NUM_OF_PLAYERS+0x94>)
 8001552:	2014      	movs	r0, #20
 8001554:	f003 f942 	bl	80047dc <BSP_LCD_DisplayStringAtLine>

	BSP_LCD_SetFont(&Font16);
 8001558:	4810      	ldr	r0, [pc, #64]	; (800159c <LCD_State_NUM_OF_PLAYERS+0x98>)
 800155a:	f002 ffe5 	bl	8004528 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(17,(uint8_t *)"pritisni start ");
 800155e:	4910      	ldr	r1, [pc, #64]	; (80015a0 <LCD_State_NUM_OF_PLAYERS+0x9c>)
 8001560:	2011      	movs	r0, #17
 8001562:	f003 f93b 	bl	80047dc <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(18,(uint8_t *)"za pocetak igre");
 8001566:	490f      	ldr	r1, [pc, #60]	; (80015a4 <LCD_State_NUM_OF_PLAYERS+0xa0>)
 8001568:	2012      	movs	r0, #18
 800156a:	f003 f937 	bl	80047dc <BSP_LCD_DisplayStringAtLine>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002f0 	.word	0x200002f0
 8001578:	0800b8c4 	.word	0x0800b8c4
 800157c:	200002f1 	.word	0x200002f1
 8001580:	20000048 	.word	0x20000048
 8001584:	0800b8e4 	.word	0x0800b8e4
 8001588:	20000040 	.word	0x20000040
 800158c:	20000058 	.word	0x20000058
 8001590:	0800b8f4 	.word	0x0800b8f4
 8001594:	0800b914 	.word	0x0800b914
 8001598:	0800b934 	.word	0x0800b934
 800159c:	20000050 	.word	0x20000050
 80015a0:	0800b94c 	.word	0x0800b94c
 80015a4:	0800b95c 	.word	0x0800b95c

080015a8 <LCD_State_WIN>:



//displays the WIN screen on the LCD
void LCD_State_WIN(void){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_GREEN);
 80015ae:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80015b2:	f002 ffe9 	bl	8004588 <BSP_LCD_Clear>
	char wintext[25];
	sprintf(wintext,"igrac %ld!", lcd_handler.winner);
 80015b6:	4bb5      	ldr	r3, [pc, #724]	; (800188c <LCD_State_WIN+0x2e4>)
 80015b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ba:	463b      	mov	r3, r7
 80015bc:	49b4      	ldr	r1, [pc, #720]	; (8001890 <LCD_State_WIN+0x2e8>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f008 ffe0 	bl	800a584 <siprintf>

	BSP_LCD_SetFont(&Font24);
 80015c4:	48b3      	ldr	r0, [pc, #716]	; (8001894 <LCD_State_WIN+0x2ec>)
 80015c6:	f002 ffaf 	bl	8004528 <BSP_LCD_SetFont>
	for(uint32_t i=0; i<24; i++){
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e12d      	b.n	800182c <LCD_State_WIN+0x284>

		if(i%2==0){
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d13c      	bne.n	8001654 <LCD_State_WIN+0xac>
		switch(lcd_handler.winner){
 80015da:	4bac      	ldr	r3, [pc, #688]	; (800188c <LCD_State_WIN+0x2e4>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	3b01      	subs	r3, #1
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d82a      	bhi.n	800163a <LCD_State_WIN+0x92>
 80015e4:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <LCD_State_WIN+0x44>)
 80015e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ea:	bf00      	nop
 80015ec:	08001605 	.word	0x08001605
 80015f0:	0800160d 	.word	0x0800160d
 80015f4:	08001617 	.word	0x08001617
 80015f8:	08001621 	.word	0x08001621
 80015fc:	08001629 	.word	0x08001629
 8001600:	08001631 	.word	0x08001631
			case 1:
				BSP_LCD_Clear(LCD_COLOR_RED);
 8001604:	48a4      	ldr	r0, [pc, #656]	; (8001898 <LCD_State_WIN+0x2f0>)
 8001606:	f002 ffbf 	bl	8004588 <BSP_LCD_Clear>
				break;
 800160a:	e017      	b.n	800163c <LCD_State_WIN+0x94>
			case 2:
				BSP_LCD_Clear(LCD_COLOR_GREEN);
 800160c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001610:	f002 ffba 	bl	8004588 <BSP_LCD_Clear>
				break;
 8001614:	e012      	b.n	800163c <LCD_State_WIN+0x94>
			case 3:
				BSP_LCD_Clear(LCD_COLOR_MAGENTA);
 8001616:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 800161a:	f002 ffb5 	bl	8004588 <BSP_LCD_Clear>
				break;
 800161e:	e00d      	b.n	800163c <LCD_State_WIN+0x94>
			case 4:
				BSP_LCD_Clear(LCD_COLOR_ORANGE);
 8001620:	489e      	ldr	r0, [pc, #632]	; (800189c <LCD_State_WIN+0x2f4>)
 8001622:	f002 ffb1 	bl	8004588 <BSP_LCD_Clear>
				break;
 8001626:	e009      	b.n	800163c <LCD_State_WIN+0x94>
			case 5:
				BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001628:	489d      	ldr	r0, [pc, #628]	; (80018a0 <LCD_State_WIN+0x2f8>)
 800162a:	f002 ffad 	bl	8004588 <BSP_LCD_Clear>
				break;
 800162e:	e005      	b.n	800163c <LCD_State_WIN+0x94>
			case 6:
				BSP_LCD_Clear(LCD_COLOR_YELLOW);
 8001630:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001634:	f002 ffa8 	bl	8004588 <BSP_LCD_Clear>
				break;
 8001638:	e000      	b.n	800163c <LCD_State_WIN+0x94>
			default:
				break;
 800163a:	bf00      	nop

		}


		BSP_LCD_DisplayStringAt(0, 150,(uint8_t *)"pobjednik je", CENTER_MODE);
 800163c:	2301      	movs	r3, #1
 800163e:	4a99      	ldr	r2, [pc, #612]	; (80018a4 <LCD_State_WIN+0x2fc>)
 8001640:	2196      	movs	r1, #150	; 0x96
 8001642:	2000      	movs	r0, #0
 8001644:	f003 f80c 	bl	8004660 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 180,(uint8_t *)wintext, CENTER_MODE);
 8001648:	463a      	mov	r2, r7
 800164a:	2301      	movs	r3, #1
 800164c:	21b4      	movs	r1, #180	; 0xb4
 800164e:	2000      	movs	r0, #0
 8001650:	f003 f806 	bl	8004660 <BSP_LCD_DisplayStringAt>
		}

		set_LED(i % NUM_OF_LEDS, 102, 0, 255);
 8001654:	69f9      	ldr	r1, [r7, #28]
 8001656:	4b94      	ldr	r3, [pc, #592]	; (80018a8 <LCD_State_WIN+0x300>)
 8001658:	fba3 2301 	umull	r2, r3, r3, r1
 800165c:	089a      	lsrs	r2, r3, #2
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	1aca      	subs	r2, r1, r3
 8001668:	b2d0      	uxtb	r0, r2
 800166a:	23ff      	movs	r3, #255	; 0xff
 800166c:	2200      	movs	r2, #0
 800166e:	2166      	movs	r1, #102	; 0x66
 8001670:	f000 fe28 	bl	80022c4 <set_LED>
				set_LED((i + 1) % NUM_OF_LEDS, 0, 153, 255);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	1c59      	adds	r1, r3, #1
 8001678:	4b8b      	ldr	r3, [pc, #556]	; (80018a8 <LCD_State_WIN+0x300>)
 800167a:	fba3 2301 	umull	r2, r3, r3, r1
 800167e:	089a      	lsrs	r2, r3, #2
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	1aca      	subs	r2, r1, r3
 800168a:	b2d0      	uxtb	r0, r2
 800168c:	23ff      	movs	r3, #255	; 0xff
 800168e:	2299      	movs	r2, #153	; 0x99
 8001690:	2100      	movs	r1, #0
 8001692:	f000 fe17 	bl	80022c4 <set_LED>
				set_LED((i + 2) % NUM_OF_LEDS, 101, 255, 68);
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	1c99      	adds	r1, r3, #2
 800169a:	4b83      	ldr	r3, [pc, #524]	; (80018a8 <LCD_State_WIN+0x300>)
 800169c:	fba3 2301 	umull	r2, r3, r3, r1
 80016a0:	089a      	lsrs	r2, r3, #2
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	1aca      	subs	r2, r1, r3
 80016ac:	b2d0      	uxtb	r0, r2
 80016ae:	2344      	movs	r3, #68	; 0x44
 80016b0:	22ff      	movs	r2, #255	; 0xff
 80016b2:	2165      	movs	r1, #101	; 0x65
 80016b4:	f000 fe06 	bl	80022c4 <set_LED>
				set_LED((i + 3) % NUM_OF_LEDS, 255, 197, 20);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	1cd9      	adds	r1, r3, #3
 80016bc:	4b7a      	ldr	r3, [pc, #488]	; (80018a8 <LCD_State_WIN+0x300>)
 80016be:	fba3 2301 	umull	r2, r3, r3, r1
 80016c2:	089a      	lsrs	r2, r3, #2
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	1aca      	subs	r2, r1, r3
 80016ce:	b2d0      	uxtb	r0, r2
 80016d0:	2314      	movs	r3, #20
 80016d2:	22c5      	movs	r2, #197	; 0xc5
 80016d4:	21ff      	movs	r1, #255	; 0xff
 80016d6:	f000 fdf5 	bl	80022c4 <set_LED>
				set_LED((i + 4) % NUM_OF_LEDS, 255, 102, 0);
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	1d19      	adds	r1, r3, #4
 80016de:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <LCD_State_WIN+0x300>)
 80016e0:	fba3 2301 	umull	r2, r3, r3, r1
 80016e4:	089a      	lsrs	r2, r3, #2
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	1aca      	subs	r2, r1, r3
 80016f0:	b2d0      	uxtb	r0, r2
 80016f2:	2300      	movs	r3, #0
 80016f4:	2266      	movs	r2, #102	; 0x66
 80016f6:	21ff      	movs	r1, #255	; 0xff
 80016f8:	f000 fde4 	bl	80022c4 <set_LED>
				set_LED((i + 5) % NUM_OF_LEDS, 153, 0, 51);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	1d59      	adds	r1, r3, #5
 8001700:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <LCD_State_WIN+0x300>)
 8001702:	fba3 2301 	umull	r2, r3, r3, r1
 8001706:	089a      	lsrs	r2, r3, #2
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	1aca      	subs	r2, r1, r3
 8001712:	b2d0      	uxtb	r0, r2
 8001714:	2333      	movs	r3, #51	; 0x33
 8001716:	2200      	movs	r2, #0
 8001718:	2199      	movs	r1, #153	; 0x99
 800171a:	f000 fdd3 	bl	80022c4 <set_LED>
				send();
 800171e:	f000 fdff 	bl	8002320 <send>

		HAL_Delay(100);
 8001722:	2064      	movs	r0, #100	; 0x64
 8001724:	f003 fd06 	bl	8005134 <HAL_Delay>

		if(i%2==0){
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <LCD_State_WIN+0x1aa>
		BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8001732:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001736:	f002 ff27 	bl	8004588 <BSP_LCD_Clear>
		BSP_LCD_DisplayStringAt(0, 150,(uint8_t *)"pobjednik je", CENTER_MODE);
 800173a:	2301      	movs	r3, #1
 800173c:	4a59      	ldr	r2, [pc, #356]	; (80018a4 <LCD_State_WIN+0x2fc>)
 800173e:	2196      	movs	r1, #150	; 0x96
 8001740:	2000      	movs	r0, #0
 8001742:	f002 ff8d 	bl	8004660 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 180,(uint8_t *)wintext, CENTER_MODE);
 8001746:	463a      	mov	r2, r7
 8001748:	2301      	movs	r3, #1
 800174a:	21b4      	movs	r1, #180	; 0xb4
 800174c:	2000      	movs	r0, #0
 800174e:	f002 ff87 	bl	8004660 <BSP_LCD_DisplayStringAt>
		}

		set_LED(i % NUM_OF_LEDS, 142, 0, 142);  //ljubicasta
 8001752:	69f9      	ldr	r1, [r7, #28]
 8001754:	4b54      	ldr	r3, [pc, #336]	; (80018a8 <LCD_State_WIN+0x300>)
 8001756:	fba3 2301 	umull	r2, r3, r3, r1
 800175a:	089a      	lsrs	r2, r3, #2
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	1aca      	subs	r2, r1, r3
 8001766:	b2d0      	uxtb	r0, r2
 8001768:	238e      	movs	r3, #142	; 0x8e
 800176a:	2200      	movs	r2, #0
 800176c:	218e      	movs	r1, #142	; 0x8e
 800176e:	f000 fda9 	bl	80022c4 <set_LED>
				set_LED((i + 1) % NUM_OF_LEDS, 0, 0, 255);  //plava
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	1c59      	adds	r1, r3, #1
 8001776:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <LCD_State_WIN+0x300>)
 8001778:	fba3 2301 	umull	r2, r3, r3, r1
 800177c:	089a      	lsrs	r2, r3, #2
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	1aca      	subs	r2, r1, r3
 8001788:	b2d0      	uxtb	r0, r2
 800178a:	23ff      	movs	r3, #255	; 0xff
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	f000 fd98 	bl	80022c4 <set_LED>
				set_LED((i + 2) % NUM_OF_LEDS, 0, 255, 40);  //zelena
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	1c99      	adds	r1, r3, #2
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <LCD_State_WIN+0x300>)
 800179a:	fba3 2301 	umull	r2, r3, r3, r1
 800179e:	089a      	lsrs	r2, r3, #2
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	1aca      	subs	r2, r1, r3
 80017aa:	b2d0      	uxtb	r0, r2
 80017ac:	2328      	movs	r3, #40	; 0x28
 80017ae:	22ff      	movs	r2, #255	; 0xff
 80017b0:	2100      	movs	r1, #0
 80017b2:	f000 fd87 	bl	80022c4 <set_LED>
				set_LED((i + 3) % NUM_OF_LEDS, 255, 255, 0);  //zuta
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	1cd9      	adds	r1, r3, #3
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <LCD_State_WIN+0x300>)
 80017bc:	fba3 2301 	umull	r2, r3, r3, r1
 80017c0:	089a      	lsrs	r2, r3, #2
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	1aca      	subs	r2, r1, r3
 80017cc:	b2d0      	uxtb	r0, r2
 80017ce:	2300      	movs	r3, #0
 80017d0:	22ff      	movs	r2, #255	; 0xff
 80017d2:	21ff      	movs	r1, #255	; 0xff
 80017d4:	f000 fd76 	bl	80022c4 <set_LED>
				set_LED((i + 4) % NUM_OF_LEDS, 255, 115, 15);  //narancasta
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	1d19      	adds	r1, r3, #4
 80017dc:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <LCD_State_WIN+0x300>)
 80017de:	fba3 2301 	umull	r2, r3, r3, r1
 80017e2:	089a      	lsrs	r2, r3, #2
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	1aca      	subs	r2, r1, r3
 80017ee:	b2d0      	uxtb	r0, r2
 80017f0:	230f      	movs	r3, #15
 80017f2:	2273      	movs	r2, #115	; 0x73
 80017f4:	21ff      	movs	r1, #255	; 0xff
 80017f6:	f000 fd65 	bl	80022c4 <set_LED>
				set_LED((i + 5) % NUM_OF_LEDS, 255, 0, 0);  //crvena
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	1d59      	adds	r1, r3, #5
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <LCD_State_WIN+0x300>)
 8001800:	fba3 2301 	umull	r2, r3, r3, r1
 8001804:	089a      	lsrs	r2, r3, #2
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	1aca      	subs	r2, r1, r3
 8001810:	b2d0      	uxtb	r0, r2
 8001812:	2300      	movs	r3, #0
 8001814:	2200      	movs	r2, #0
 8001816:	21ff      	movs	r1, #255	; 0xff
 8001818:	f000 fd54 	bl	80022c4 <set_LED>
				send();
 800181c:	f000 fd80 	bl	8002320 <send>

		HAL_Delay(100);
 8001820:	2064      	movs	r0, #100	; 0x64
 8001822:	f003 fc87 	bl	8005134 <HAL_Delay>
	for(uint32_t i=0; i<24; i++){
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b17      	cmp	r3, #23
 8001830:	f67f aece 	bls.w	80015d0 <LCD_State_WIN+0x28>
	}
	set_LED(LED_1, 0, 0, 0);
 8001834:	2300      	movs	r3, #0
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	2000      	movs	r0, #0
 800183c:	f000 fd42 	bl	80022c4 <set_LED>
	set_LED(LED_2, 0, 0, 0);
 8001840:	2300      	movs	r3, #0
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2001      	movs	r0, #1
 8001848:	f000 fd3c 	bl	80022c4 <set_LED>
	set_LED(LED_3, 0, 0, 0);
 800184c:	2300      	movs	r3, #0
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2002      	movs	r0, #2
 8001854:	f000 fd36 	bl	80022c4 <set_LED>
	set_LED(LED_4, 0, 0, 0);
 8001858:	2300      	movs	r3, #0
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	2003      	movs	r0, #3
 8001860:	f000 fd30 	bl	80022c4 <set_LED>
	set_LED(LED_5, 0, 0, 0);
 8001864:	2300      	movs	r3, #0
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	2004      	movs	r0, #4
 800186c:	f000 fd2a 	bl	80022c4 <set_LED>
	set_LED(LED_6, 0, 0, 0);
 8001870:	2300      	movs	r3, #0
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2005      	movs	r0, #5
 8001878:	f000 fd24 	bl	80022c4 <set_LED>
	send();
 800187c:	f000 fd50 	bl	8002320 <send>
	MDL_LCD_Init();
 8001880:	f7ff fd8c 	bl	800139c <MDL_LCD_Init>
}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200002f0 	.word	0x200002f0
 8001890:	0800b96c 	.word	0x0800b96c
 8001894:	20000040 	.word	0x20000040
 8001898:	ffff0000 	.word	0xffff0000
 800189c:	ffffa500 	.word	0xffffa500
 80018a0:	ff0000ff 	.word	0xff0000ff
 80018a4:	0800b978 	.word	0x0800b978
 80018a8:	aaaaaaab 	.word	0xaaaaaaab

080018ac <LCD_State_PLAYERS>:



//displays the PLAYERx screen on the LCD
void LCD_State_PLAYERS(void){
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(BGCOLOR);
 80018b2:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80018b6:	f002 fe67 	bl	8004588 <BSP_LCD_Clear>
	switch(lcd_handler.num_of_players){
 80018ba:	4bca      	ldr	r3, [pc, #808]	; (8001be4 <LCD_State_PLAYERS+0x338>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	3b02      	subs	r3, #2
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	f200 84b9 	bhi.w	8002238 <LCD_State_PLAYERS+0x98c>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <LCD_State_PLAYERS+0x20>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	080018e1 	.word	0x080018e1
 80018d0:	080019eb 	.word	0x080019eb
 80018d4:	08001b83 	.word	0x08001b83
 80018d8:	08001dc9 	.word	0x08001dc9
 80018dc:	08002015 	.word	0x08002015
		case 2:
			switch(lcd_handler.game_state){
 80018e0:	4bc0      	ldr	r3, [pc, #768]	; (8001be4 <LCD_State_PLAYERS+0x338>)
 80018e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d002      	beq.n	80018f0 <LCD_State_PLAYERS+0x44>
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d01b      	beq.n	8001926 <LCD_State_PLAYERS+0x7a>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2);
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
					break;
				default:
					break;
 80018ee:	e03b      	b.n	8001968 <LCD_State_PLAYERS+0xbc>
					BSP_LCD_Clear(BGCOLOR);
 80018f0:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80018f4:	f002 fe48 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80018f8:	48bb      	ldr	r0, [pc, #748]	; (8001be8 <LCD_State_PLAYERS+0x33c>)
 80018fa:	f002 fdfd 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2);
 80018fe:	f002 fd6f 	bl	80043e0 <BSP_LCD_GetXSize>
 8001902:	4603      	mov	r3, r0
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	b29c      	uxth	r4, r3
 8001908:	f002 fd76 	bl	80043f8 <BSP_LCD_GetYSize>
 800190c:	4603      	mov	r3, r0
 800190e:	085b      	lsrs	r3, r3, #1
 8001910:	b29b      	uxth	r3, r3
 8001912:	4622      	mov	r2, r4
 8001914:	2100      	movs	r1, #0
 8001916:	2000      	movs	r0, #0
 8001918:	f002 ff78 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800191c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001920:	f002 fdea 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001924:	e020      	b.n	8001968 <LCD_State_PLAYERS+0xbc>
					BSP_LCD_Clear(BGCOLOR);
 8001926:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800192a:	f002 fe2d 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800192e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001932:	f002 fde1 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2);
 8001936:	f002 fd53 	bl	80043e0 <BSP_LCD_GetXSize>
 800193a:	4603      	mov	r3, r0
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	b29c      	uxth	r4, r3
 8001940:	f002 fd4e 	bl	80043e0 <BSP_LCD_GetXSize>
 8001944:	4603      	mov	r3, r0
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	b29d      	uxth	r5, r3
 800194a:	f002 fd55 	bl	80043f8 <BSP_LCD_GetYSize>
 800194e:	4603      	mov	r3, r0
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	b29b      	uxth	r3, r3
 8001954:	462a      	mov	r2, r5
 8001956:	2100      	movs	r1, #0
 8001958:	4620      	mov	r0, r4
 800195a:	f002 ff57 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800195e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001962:	f002 fdc9 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001966:	bf00      	nop
			}
			BSP_LCD_SetFont(&Font20);
 8001968:	48a0      	ldr	r0, [pc, #640]	; (8001bec <LCD_State_PLAYERS+0x340>)
 800196a:	f002 fddd 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 800196e:	2303      	movs	r3, #3
 8001970:	4a9f      	ldr	r2, [pc, #636]	; (8001bf0 <LCD_State_PLAYERS+0x344>)
 8001972:	210a      	movs	r1, #10
 8001974:	200a      	movs	r0, #10
 8001976:	f002 fe73 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 800197a:	2302      	movs	r3, #2
 800197c:	4a9d      	ldr	r2, [pc, #628]	; (8001bf4 <LCD_State_PLAYERS+0x348>)
 800197e:	210a      	movs	r1, #10
 8001980:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001984:	f002 fe6c 	bl	8004660 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font24);
 8001988:	489b      	ldr	r0, [pc, #620]	; (8001bf8 <LCD_State_PLAYERS+0x34c>)
 800198a:	f002 fdcd 	bl	8004528 <BSP_LCD_SetFont>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[0].mL);
 800198e:	4b95      	ldr	r3, [pc, #596]	; (8001be4 <LCD_State_PLAYERS+0x338>)
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	461a      	mov	r2, r3
 8001994:	4999      	ldr	r1, [pc, #612]	; (8001bfc <LCD_State_PLAYERS+0x350>)
 8001996:	489a      	ldr	r0, [pc, #616]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 8001998:	f008 fdf4 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(10, 60,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 800199c:	2303      	movs	r3, #3
 800199e:	4a98      	ldr	r2, [pc, #608]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 80019a0:	213c      	movs	r1, #60	; 0x3c
 80019a2:	200a      	movs	r0, #10
 80019a4:	f002 fe5c 	bl	8004660 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[1].mL);
 80019a8:	4b8e      	ldr	r3, [pc, #568]	; (8001be4 <LCD_State_PLAYERS+0x338>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4993      	ldr	r1, [pc, #588]	; (8001bfc <LCD_State_PLAYERS+0x350>)
 80019b0:	4893      	ldr	r0, [pc, #588]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 80019b2:	f008 fde7 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 60,(uint8_t *)lcd_handler.mLs_of_players_print, RIGHT_MODE);
 80019b6:	2302      	movs	r3, #2
 80019b8:	4a91      	ldr	r2, [pc, #580]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 80019ba:	213c      	movs	r1, #60	; 0x3c
 80019bc:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 80019c0:	f002 fe4e 	bl	8004660 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font16);
 80019c4:	488f      	ldr	r0, [pc, #572]	; (8001c04 <LCD_State_PLAYERS+0x358>)
 80019c6:	f002 fdaf 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 80019ca:	2301      	movs	r3, #1
 80019cc:	4a8e      	ldr	r2, [pc, #568]	; (8001c08 <LCD_State_PLAYERS+0x35c>)
 80019ce:	f44f 718c 	mov.w	r1, #280	; 0x118
 80019d2:	2000      	movs	r0, #0
 80019d4:	f002 fe44 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 80019d8:	2301      	movs	r3, #1
 80019da:	4a8c      	ldr	r2, [pc, #560]	; (8001c0c <LCD_State_PLAYERS+0x360>)
 80019dc:	f240 1127 	movw	r1, #295	; 0x127
 80019e0:	2000      	movs	r0, #0
 80019e2:	f002 fe3d 	bl	8004660 <BSP_LCD_DisplayStringAt>

			break;
 80019e6:	f000 bc28 	b.w	800223a <LCD_State_PLAYERS+0x98e>

		case 3:
			switch(lcd_handler.game_state){
 80019ea:	4b7e      	ldr	r3, [pc, #504]	; (8001be4 <LCD_State_PLAYERS+0x338>)
 80019ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d046      	beq.n	8001a82 <LCD_State_PLAYERS+0x1d6>
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	dc70      	bgt.n	8001ada <LCD_State_PLAYERS+0x22e>
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d002      	beq.n	8001a02 <LCD_State_PLAYERS+0x156>
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d01d      	beq.n	8001a3c <LCD_State_PLAYERS+0x190>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2-60,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-25);
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
					break;
				default:
					break;
 8001a00:	e06b      	b.n	8001ada <LCD_State_PLAYERS+0x22e>
					BSP_LCD_Clear(BGCOLOR);
 8001a02:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001a06:	f002 fdbf 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001a0a:	4877      	ldr	r0, [pc, #476]	; (8001be8 <LCD_State_PLAYERS+0x33c>)
 8001a0c:	f002 fd74 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8001a10:	f002 fce6 	bl	80043e0 <BSP_LCD_GetXSize>
 8001a14:	4603      	mov	r3, r0
 8001a16:	085b      	lsrs	r3, r3, #1
 8001a18:	b29c      	uxth	r4, r3
 8001a1a:	f002 fced 	bl	80043f8 <BSP_LCD_GetYSize>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b14      	subs	r3, #20
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4622      	mov	r2, r4
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f002 feed 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a32:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a36:	f002 fd5f 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001a3a:	e04f      	b.n	8001adc <LCD_State_PLAYERS+0x230>
					BSP_LCD_Clear(BGCOLOR);
 8001a3c:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001a40:	f002 fda2 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001a44:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001a48:	f002 fd56 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8001a4c:	f002 fcc8 	bl	80043e0 <BSP_LCD_GetXSize>
 8001a50:	4603      	mov	r3, r0
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	b29c      	uxth	r4, r3
 8001a56:	f002 fcc3 	bl	80043e0 <BSP_LCD_GetXSize>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	b29d      	uxth	r5, r3
 8001a60:	f002 fcca 	bl	80043f8 <BSP_LCD_GetYSize>
 8001a64:	4603      	mov	r3, r0
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b14      	subs	r3, #20
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	462a      	mov	r2, r5
 8001a70:	2100      	movs	r1, #0
 8001a72:	4620      	mov	r0, r4
 8001a74:	f002 feca 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a78:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a7c:	f002 fd3c 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001a80:	e02c      	b.n	8001adc <LCD_State_PLAYERS+0x230>
					BSP_LCD_Clear(BGCOLOR);
 8001a82:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001a86:	f002 fd7f 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001a8a:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001a8e:	f002 fd33 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2-60,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-25);
 8001a92:	f002 fca5 	bl	80043e0 <BSP_LCD_GetXSize>
 8001a96:	4603      	mov	r3, r0
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b3c      	subs	r3, #60	; 0x3c
 8001a9e:	b29c      	uxth	r4, r3
 8001aa0:	f002 fcaa 	bl	80043f8 <BSP_LCD_GetYSize>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b14      	subs	r3, #20
 8001aac:	b29d      	uxth	r5, r3
 8001aae:	f002 fc97 	bl	80043e0 <BSP_LCD_GetXSize>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	b29e      	uxth	r6, r3
 8001ab8:	f002 fc9e 	bl	80043f8 <BSP_LCD_GetYSize>
 8001abc:	4603      	mov	r3, r0
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b19      	subs	r3, #25
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4632      	mov	r2, r6
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4620      	mov	r0, r4
 8001acc:	f002 fe9e 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ad0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ad4:	f002 fd10 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001ad8:	e000      	b.n	8001adc <LCD_State_PLAYERS+0x230>
					break;
 8001ada:	bf00      	nop

			}
			BSP_LCD_SetFont(&Font20);
 8001adc:	4843      	ldr	r0, [pc, #268]	; (8001bec <LCD_State_PLAYERS+0x340>)
 8001ade:	f002 fd23 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	4a42      	ldr	r2, [pc, #264]	; (8001bf0 <LCD_State_PLAYERS+0x344>)
 8001ae6:	210a      	movs	r1, #10
 8001ae8:	200a      	movs	r0, #10
 8001aea:	f002 fdb9 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8001aee:	2302      	movs	r3, #2
 8001af0:	4a40      	ldr	r2, [pc, #256]	; (8001bf4 <LCD_State_PLAYERS+0x348>)
 8001af2:	210a      	movs	r1, #10
 8001af4:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001af8:	f002 fdb2 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)"igrac 3", CENTER_MODE);
 8001afc:	2301      	movs	r3, #1
 8001afe:	4a44      	ldr	r2, [pc, #272]	; (8001c10 <LCD_State_PLAYERS+0x364>)
 8001b00:	2196      	movs	r1, #150	; 0x96
 8001b02:	2000      	movs	r0, #0
 8001b04:	f002 fdac 	bl	8004660 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font24);
 8001b08:	483b      	ldr	r0, [pc, #236]	; (8001bf8 <LCD_State_PLAYERS+0x34c>)
 8001b0a:	f002 fd0d 	bl	8004528 <BSP_LCD_SetFont>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[0].mL);
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <LCD_State_PLAYERS+0x338>)
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	461a      	mov	r2, r3
 8001b14:	4939      	ldr	r1, [pc, #228]	; (8001bfc <LCD_State_PLAYERS+0x350>)
 8001b16:	483a      	ldr	r0, [pc, #232]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 8001b18:	f008 fd34 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(10, 60,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	4a38      	ldr	r2, [pc, #224]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 8001b20:	213c      	movs	r1, #60	; 0x3c
 8001b22:	200a      	movs	r0, #10
 8001b24:	f002 fd9c 	bl	8004660 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[1].mL);
 8001b28:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <LCD_State_PLAYERS+0x338>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4933      	ldr	r1, [pc, #204]	; (8001bfc <LCD_State_PLAYERS+0x350>)
 8001b30:	4833      	ldr	r0, [pc, #204]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 8001b32:	f008 fd27 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 60,(uint8_t *)lcd_handler.mLs_of_players_print, RIGHT_MODE);
 8001b36:	2302      	movs	r3, #2
 8001b38:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 8001b3a:	213c      	movs	r1, #60	; 0x3c
 8001b3c:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001b40:	f002 fd8e 	bl	8004660 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[2].mL);
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <LCD_State_PLAYERS+0x338>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	492c      	ldr	r1, [pc, #176]	; (8001bfc <LCD_State_PLAYERS+0x350>)
 8001b4c:	482c      	ldr	r0, [pc, #176]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 8001b4e:	f008 fd19 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(0, 200,(uint8_t *)lcd_handler.mLs_of_players_print, CENTER_MODE);
 8001b52:	2301      	movs	r3, #1
 8001b54:	4a2a      	ldr	r2, [pc, #168]	; (8001c00 <LCD_State_PLAYERS+0x354>)
 8001b56:	21c8      	movs	r1, #200	; 0xc8
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f002 fd81 	bl	8004660 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font16);
 8001b5e:	4829      	ldr	r0, [pc, #164]	; (8001c04 <LCD_State_PLAYERS+0x358>)
 8001b60:	f002 fce2 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 8001b64:	2301      	movs	r3, #1
 8001b66:	4a28      	ldr	r2, [pc, #160]	; (8001c08 <LCD_State_PLAYERS+0x35c>)
 8001b68:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f002 fd77 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8001b72:	2301      	movs	r3, #1
 8001b74:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <LCD_State_PLAYERS+0x360>)
 8001b76:	f240 1127 	movw	r1, #295	; 0x127
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f002 fd70 	bl	8004660 <BSP_LCD_DisplayStringAt>

			break;
 8001b80:	e35b      	b.n	800223a <LCD_State_PLAYERS+0x98e>

		case 4:
			switch(lcd_handler.game_state){
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <LCD_State_PLAYERS+0x338>)
 8001b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b88:	3b02      	subs	r3, #2
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	f200 80b3 	bhi.w	8001cf6 <LCD_State_PLAYERS+0x44a>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <LCD_State_PLAYERS+0x2ec>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001c15 	.word	0x08001c15
 8001ba0:	08001c5b 	.word	0x08001c5b
 8001ba4:	08001ca5 	.word	0x08001ca5
				case PLAYER1:
					BSP_LCD_Clear(BGCOLOR);
 8001ba8:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001bac:	f002 fcec 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <LCD_State_PLAYERS+0x33c>)
 8001bb2:	f002 fca1 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8001bb6:	f002 fc13 	bl	80043e0 <BSP_LCD_GetXSize>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	b29c      	uxth	r4, r3
 8001bc0:	f002 fc1a 	bl	80043f8 <BSP_LCD_GetYSize>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b14      	subs	r3, #20
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4622      	mov	r2, r4
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f002 fe1a 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001bd8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001bdc:	f002 fc8c 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001be0:	e08a      	b.n	8001cf8 <LCD_State_PLAYERS+0x44c>
 8001be2:	bf00      	nop
 8001be4:	200002f0 	.word	0x200002f0
 8001be8:	ffff0000 	.word	0xffff0000
 8001bec:	20000048 	.word	0x20000048
 8001bf0:	0800b988 	.word	0x0800b988
 8001bf4:	0800b990 	.word	0x0800b990
 8001bf8:	20000040 	.word	0x20000040
 8001bfc:	0800b998 	.word	0x0800b998
 8001c00:	200002f3 	.word	0x200002f3
 8001c04:	20000050 	.word	0x20000050
 8001c08:	0800b9a0 	.word	0x0800b9a0
 8001c0c:	0800b9b0 	.word	0x0800b9b0
 8001c10:	0800b9c0 	.word	0x0800b9c0
				case PLAYER2:
					BSP_LCD_Clear(BGCOLOR);
 8001c14:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001c18:	f002 fcb6 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001c1c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001c20:	f002 fc6a 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8001c24:	f002 fbdc 	bl	80043e0 <BSP_LCD_GetXSize>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	b29c      	uxth	r4, r3
 8001c2e:	f002 fbd7 	bl	80043e0 <BSP_LCD_GetXSize>
 8001c32:	4603      	mov	r3, r0
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	b29d      	uxth	r5, r3
 8001c38:	f002 fbde 	bl	80043f8 <BSP_LCD_GetYSize>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	085b      	lsrs	r3, r3, #1
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b14      	subs	r3, #20
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	462a      	mov	r2, r5
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f002 fdde 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c50:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c54:	f002 fc50 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001c58:	e04e      	b.n	8001cf8 <LCD_State_PLAYERS+0x44c>
				case PLAYER3:
					BSP_LCD_Clear(BGCOLOR);
 8001c5a:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001c5e:	f002 fc93 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001c62:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001c66:	f002 fc47 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8001c6a:	f002 fbc5 	bl	80043f8 <BSP_LCD_GetYSize>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b14      	subs	r3, #20
 8001c76:	b29c      	uxth	r4, r3
 8001c78:	f002 fbb2 	bl	80043e0 <BSP_LCD_GetXSize>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	085b      	lsrs	r3, r3, #1
 8001c80:	b29d      	uxth	r5, r3
 8001c82:	f002 fbb9 	bl	80043f8 <BSP_LCD_GetYSize>
 8001c86:	4603      	mov	r3, r0
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b14      	subs	r3, #20
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	462a      	mov	r2, r5
 8001c92:	4621      	mov	r1, r4
 8001c94:	2000      	movs	r0, #0
 8001c96:	f002 fdb9 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c9a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c9e:	f002 fc2b 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001ca2:	e029      	b.n	8001cf8 <LCD_State_PLAYERS+0x44c>
				case PLAYER4:
					BSP_LCD_Clear(BGCOLOR);
 8001ca4:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001ca8:	f002 fc6e 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001cac:	48c9      	ldr	r0, [pc, #804]	; (8001fd4 <LCD_State_PLAYERS+0x728>)
 8001cae:	f002 fc23 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8001cb2:	f002 fb95 	bl	80043e0 <BSP_LCD_GetXSize>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	085b      	lsrs	r3, r3, #1
 8001cba:	b29c      	uxth	r4, r3
 8001cbc:	f002 fb9c 	bl	80043f8 <BSP_LCD_GetYSize>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b14      	subs	r3, #20
 8001cc8:	b29d      	uxth	r5, r3
 8001cca:	f002 fb89 	bl	80043e0 <BSP_LCD_GetXSize>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	085b      	lsrs	r3, r3, #1
 8001cd2:	b29e      	uxth	r6, r3
 8001cd4:	f002 fb90 	bl	80043f8 <BSP_LCD_GetYSize>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3b14      	subs	r3, #20
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4632      	mov	r2, r6
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f002 fd90 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001cec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001cf0:	f002 fc02 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001cf4:	e000      	b.n	8001cf8 <LCD_State_PLAYERS+0x44c>

				default:
					break;
 8001cf6:	bf00      	nop
			}

			BSP_LCD_SetFont(&Font20);
 8001cf8:	48b7      	ldr	r0, [pc, #732]	; (8001fd8 <LCD_State_PLAYERS+0x72c>)
 8001cfa:	f002 fc15 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8001cfe:	2303      	movs	r3, #3
 8001d00:	4ab6      	ldr	r2, [pc, #728]	; (8001fdc <LCD_State_PLAYERS+0x730>)
 8001d02:	210a      	movs	r1, #10
 8001d04:	200a      	movs	r0, #10
 8001d06:	f002 fcab 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	4ab4      	ldr	r2, [pc, #720]	; (8001fe0 <LCD_State_PLAYERS+0x734>)
 8001d0e:	210a      	movs	r1, #10
 8001d10:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001d14:	f002 fca4 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(10, 150, (uint8_t *)"igrac 3", LEFT_MODE);
 8001d18:	2303      	movs	r3, #3
 8001d1a:	4ab2      	ldr	r2, [pc, #712]	; (8001fe4 <LCD_State_PLAYERS+0x738>)
 8001d1c:	2196      	movs	r1, #150	; 0x96
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f002 fc9e 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 150, (uint8_t *)"igrac 4", RIGHT_MODE);
 8001d24:	2302      	movs	r3, #2
 8001d26:	4ab0      	ldr	r2, [pc, #704]	; (8001fe8 <LCD_State_PLAYERS+0x73c>)
 8001d28:	2196      	movs	r1, #150	; 0x96
 8001d2a:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001d2e:	f002 fc97 	bl	8004660 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font24);
 8001d32:	48ae      	ldr	r0, [pc, #696]	; (8001fec <LCD_State_PLAYERS+0x740>)
 8001d34:	f002 fbf8 	bl	8004528 <BSP_LCD_SetFont>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[0].mL);
 8001d38:	4bad      	ldr	r3, [pc, #692]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	49ad      	ldr	r1, [pc, #692]	; (8001ff4 <LCD_State_PLAYERS+0x748>)
 8001d40:	48ad      	ldr	r0, [pc, #692]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001d42:	f008 fc1f 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(10, 60,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 8001d46:	2303      	movs	r3, #3
 8001d48:	4aab      	ldr	r2, [pc, #684]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001d4a:	213c      	movs	r1, #60	; 0x3c
 8001d4c:	200a      	movs	r0, #10
 8001d4e:	f002 fc87 	bl	8004660 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[1].mL);
 8001d52:	4ba7      	ldr	r3, [pc, #668]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	461a      	mov	r2, r3
 8001d58:	49a6      	ldr	r1, [pc, #664]	; (8001ff4 <LCD_State_PLAYERS+0x748>)
 8001d5a:	48a7      	ldr	r0, [pc, #668]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001d5c:	f008 fc12 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 60,(uint8_t *)lcd_handler.mLs_of_players_print, RIGHT_MODE);
 8001d60:	2302      	movs	r3, #2
 8001d62:	4aa5      	ldr	r2, [pc, #660]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001d64:	213c      	movs	r1, #60	; 0x3c
 8001d66:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001d6a:	f002 fc79 	bl	8004660 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[2].mL);
 8001d6e:	4ba0      	ldr	r3, [pc, #640]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	461a      	mov	r2, r3
 8001d74:	499f      	ldr	r1, [pc, #636]	; (8001ff4 <LCD_State_PLAYERS+0x748>)
 8001d76:	48a0      	ldr	r0, [pc, #640]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001d78:	f008 fc04 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(10, 200,(uint8_t *)lcd_handler.mLs_of_players_print, LEFT_MODE);
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	4a9e      	ldr	r2, [pc, #632]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001d80:	21c8      	movs	r1, #200	; 0xc8
 8001d82:	200a      	movs	r0, #10
 8001d84:	f002 fc6c 	bl	8004660 <BSP_LCD_DisplayStringAt>

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[3].mL);
 8001d88:	4b99      	ldr	r3, [pc, #612]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4999      	ldr	r1, [pc, #612]	; (8001ff4 <LCD_State_PLAYERS+0x748>)
 8001d90:	4899      	ldr	r0, [pc, #612]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001d92:	f008 fbf7 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 200,(uint8_t *)lcd_handler.mLs_of_players_print, RIGHT_MODE);
 8001d96:	2302      	movs	r3, #2
 8001d98:	4a97      	ldr	r2, [pc, #604]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001d9a:	21c8      	movs	r1, #200	; 0xc8
 8001d9c:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001da0:	f002 fc5e 	bl	8004660 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font16);
 8001da4:	4895      	ldr	r0, [pc, #596]	; (8001ffc <LCD_State_PLAYERS+0x750>)
 8001da6:	f002 fbbf 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 8001daa:	2301      	movs	r3, #1
 8001dac:	4a94      	ldr	r2, [pc, #592]	; (8002000 <LCD_State_PLAYERS+0x754>)
 8001dae:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001db2:	2000      	movs	r0, #0
 8001db4:	f002 fc54 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8001db8:	2301      	movs	r3, #1
 8001dba:	4a92      	ldr	r2, [pc, #584]	; (8002004 <LCD_State_PLAYERS+0x758>)
 8001dbc:	f240 1127 	movw	r1, #295	; 0x127
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f002 fc4d 	bl	8004660 <BSP_LCD_DisplayStringAt>

			break;
 8001dc6:	e238      	b.n	800223a <LCD_State_PLAYERS+0x98e>

		case 5:
			switch(lcd_handler.game_state){
 8001dc8:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dce:	3b02      	subs	r3, #2
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d869      	bhi.n	8001ea8 <LCD_State_PLAYERS+0x5fc>
 8001dd4:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <LCD_State_PLAYERS+0x530>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001df1 	.word	0x08001df1
 8001de0:	08001e15 	.word	0x08001e15
 8001de4:	08001e3b 	.word	0x08001e3b
 8001de8:	08001e61 	.word	0x08001e61
 8001dec:	08001e85 	.word	0x08001e85
				case PLAYER1:
					BSP_LCD_Clear(BGCOLOR);
 8001df0:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001df4:	f002 fbc8 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001df8:	4883      	ldr	r0, [pc, #524]	; (8002008 <LCD_State_PLAYERS+0x75c>)
 8001dfa:	f002 fb7d 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,120, 80);
 8001dfe:	2350      	movs	r3, #80	; 0x50
 8001e00:	2278      	movs	r2, #120	; 0x78
 8001e02:	2100      	movs	r1, #0
 8001e04:	2000      	movs	r0, #0
 8001e06:	f002 fd01 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e0a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e0e:	f002 fb73 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001e12:	e04a      	b.n	8001eaa <LCD_State_PLAYERS+0x5fe>
				case PLAYER2:
					BSP_LCD_Clear(BGCOLOR);
 8001e14:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001e18:	f002 fbb6 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001e1c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001e20:	f002 fb6a 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,0,120, 80);
 8001e24:	2350      	movs	r3, #80	; 0x50
 8001e26:	2278      	movs	r2, #120	; 0x78
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2078      	movs	r0, #120	; 0x78
 8001e2c:	f002 fcee 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e30:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e34:	f002 fb60 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001e38:	e037      	b.n	8001eaa <LCD_State_PLAYERS+0x5fe>
				case PLAYER3:
					BSP_LCD_Clear(BGCOLOR);
 8001e3a:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001e3e:	f002 fba3 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8001e42:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8001e46:	f002 fb57 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,80+10,120, 80);
 8001e4a:	2350      	movs	r3, #80	; 0x50
 8001e4c:	2278      	movs	r2, #120	; 0x78
 8001e4e:	215a      	movs	r1, #90	; 0x5a
 8001e50:	2000      	movs	r0, #0
 8001e52:	f002 fcdb 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e56:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e5a:	f002 fb4d 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001e5e:	e024      	b.n	8001eaa <LCD_State_PLAYERS+0x5fe>
				case PLAYER4:
					BSP_LCD_Clear(BGCOLOR);
 8001e60:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001e64:	f002 fb90 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001e68:	485a      	ldr	r0, [pc, #360]	; (8001fd4 <LCD_State_PLAYERS+0x728>)
 8001e6a:	f002 fb45 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,80+10,120, 80);
 8001e6e:	2350      	movs	r3, #80	; 0x50
 8001e70:	2278      	movs	r2, #120	; 0x78
 8001e72:	215a      	movs	r1, #90	; 0x5a
 8001e74:	2078      	movs	r0, #120	; 0x78
 8001e76:	f002 fcc9 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e7a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e7e:	f002 fb3b 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001e82:	e012      	b.n	8001eaa <LCD_State_PLAYERS+0x5fe>
				case PLAYER5:
					BSP_LCD_Clear(BGCOLOR);
 8001e84:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8001e88:	f002 fb7e 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001e8c:	485f      	ldr	r0, [pc, #380]	; (800200c <LCD_State_PLAYERS+0x760>)
 8001e8e:	f002 fb33 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(60,160+20,120, 80);
 8001e92:	2350      	movs	r3, #80	; 0x50
 8001e94:	2278      	movs	r2, #120	; 0x78
 8001e96:	21b4      	movs	r1, #180	; 0xb4
 8001e98:	203c      	movs	r0, #60	; 0x3c
 8001e9a:	f002 fcb7 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e9e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ea2:	f002 fb29 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8001ea6:	e000      	b.n	8001eaa <LCD_State_PLAYERS+0x5fe>

				default:
					break;
 8001ea8:	bf00      	nop
			}


			BSP_LCD_SetFont(&Font16);
 8001eaa:	4854      	ldr	r0, [pc, #336]	; (8001ffc <LCD_State_PLAYERS+0x750>)
 8001eac:	f002 fb3c 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <LCD_State_PLAYERS+0x730>)
 8001eb4:	210a      	movs	r1, #10
 8001eb6:	200a      	movs	r0, #10
 8001eb8:	f002 fbd2 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	4a48      	ldr	r2, [pc, #288]	; (8001fe0 <LCD_State_PLAYERS+0x734>)
 8001ec0:	210a      	movs	r1, #10
 8001ec2:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001ec6:	f002 fbcb 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(10, 100, (uint8_t *)"igrac 3", LEFT_MODE);
 8001eca:	2303      	movs	r3, #3
 8001ecc:	4a45      	ldr	r2, [pc, #276]	; (8001fe4 <LCD_State_PLAYERS+0x738>)
 8001ece:	2164      	movs	r1, #100	; 0x64
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f002 fbc5 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 100, (uint8_t *)"igrac 4", RIGHT_MODE);
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	4a43      	ldr	r2, [pc, #268]	; (8001fe8 <LCD_State_PLAYERS+0x73c>)
 8001eda:	2164      	movs	r1, #100	; 0x64
 8001edc:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001ee0:	f002 fbbe 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 190, (uint8_t *)"igrac 5", CENTER_MODE);
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <LCD_State_PLAYERS+0x764>)
 8001ee8:	21be      	movs	r1, #190	; 0xbe
 8001eea:	2000      	movs	r0, #0
 8001eec:	f002 fbb8 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetFont(&Font24);
 8001ef0:	483e      	ldr	r0, [pc, #248]	; (8001fec <LCD_State_PLAYERS+0x740>)
 8001ef2:	f002 fb19 	bl	8004528 <BSP_LCD_SetFont>

			for(uint32_t i =1; i<= lcd_handler.num_of_players-1; i=i+2){
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e01c      	b.n	8001f36 <LCD_State_PLAYERS+0x68a>
				sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[i-1].mL);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	4a3b      	ldr	r2, [pc, #236]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001f02:	3301      	adds	r3, #1
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4939      	ldr	r1, [pc, #228]	; (8001ff4 <LCD_State_PLAYERS+0x748>)
 8001f0e:	483a      	ldr	r0, [pc, #232]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001f10:	f008 fb38 	bl	800a584 <siprintf>
				BSP_LCD_DisplayStringAt(10, 10+90*(i-1)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	225a      	movs	r2, #90	; 0x5a
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	3b5a      	subs	r3, #90	; 0x5a
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	332d      	adds	r3, #45	; 0x2d
 8001f24:	b299      	uxth	r1, r3
 8001f26:	2303      	movs	r3, #3
 8001f28:	4a33      	ldr	r2, [pc, #204]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001f2a:	200a      	movs	r0, #10
 8001f2c:	f002 fb98 	bl	8004660 <BSP_LCD_DisplayStringAt>
			for(uint32_t i =1; i<= lcd_handler.num_of_players-1; i=i+2){
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3302      	adds	r3, #2
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d9db      	bls.n	8001efc <LCD_State_PLAYERS+0x650>
			}

			for(uint32_t i = 2; i<= lcd_handler.num_of_players-1; i=i+2){
 8001f44:	2302      	movs	r3, #2
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	e01d      	b.n	8001f86 <LCD_State_PLAYERS+0x6da>
				sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[i-1].mL);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001f50:	3301      	adds	r3, #1
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4926      	ldr	r1, [pc, #152]	; (8001ff4 <LCD_State_PLAYERS+0x748>)
 8001f5c:	4826      	ldr	r0, [pc, #152]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001f5e:	f008 fb11 	bl	800a584 <siprintf>
				BSP_LCD_DisplayStringAt(-10, 10+90*(i-2)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,RIGHT_MODE);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	225a      	movs	r2, #90	; 0x5a
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	3bb4      	subs	r3, #180	; 0xb4
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	332d      	adds	r3, #45	; 0x2d
 8001f72:	b299      	uxth	r1, r3
 8001f74:	2302      	movs	r3, #2
 8001f76:	4a20      	ldr	r2, [pc, #128]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001f78:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8001f7c:	f002 fb70 	bl	8004660 <BSP_LCD_DisplayStringAt>
			for(uint32_t i = 2; i<= lcd_handler.num_of_players-1; i=i+2){
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3302      	adds	r3, #2
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d9da      	bls.n	8001f4a <LCD_State_PLAYERS+0x69e>
			}

			sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[4].mL);
 8001f94:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <LCD_State_PLAYERS+0x744>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4916      	ldr	r1, [pc, #88]	; (8001ff4 <LCD_State_PLAYERS+0x748>)
 8001f9c:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001f9e:	f008 faf1 	bl	800a584 <siprintf>
			BSP_LCD_DisplayStringAt(0, 10+90*(6-2)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,CENTER_MODE);
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <LCD_State_PLAYERS+0x74c>)
 8001fa6:	21e1      	movs	r1, #225	; 0xe1
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f002 fb59 	bl	8004660 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font16);
 8001fae:	4813      	ldr	r0, [pc, #76]	; (8001ffc <LCD_State_PLAYERS+0x750>)
 8001fb0:	f002 faba 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <LCD_State_PLAYERS+0x754>)
 8001fb8:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f002 fb4f 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	4a0f      	ldr	r2, [pc, #60]	; (8002004 <LCD_State_PLAYERS+0x758>)
 8001fc6:	f240 1127 	movw	r1, #295	; 0x127
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f002 fb48 	bl	8004660 <BSP_LCD_DisplayStringAt>

		break;
 8001fd0:	e133      	b.n	800223a <LCD_State_PLAYERS+0x98e>
 8001fd2:	bf00      	nop
 8001fd4:	ffffa500 	.word	0xffffa500
 8001fd8:	20000048 	.word	0x20000048
 8001fdc:	0800b988 	.word	0x0800b988
 8001fe0:	0800b990 	.word	0x0800b990
 8001fe4:	0800b9c0 	.word	0x0800b9c0
 8001fe8:	0800b9c8 	.word	0x0800b9c8
 8001fec:	20000040 	.word	0x20000040
 8001ff0:	200002f0 	.word	0x200002f0
 8001ff4:	0800b998 	.word	0x0800b998
 8001ff8:	200002f3 	.word	0x200002f3
 8001ffc:	20000050 	.word	0x20000050
 8002000:	0800b9a0 	.word	0x0800b9a0
 8002004:	0800b9b0 	.word	0x0800b9b0
 8002008:	ffff0000 	.word	0xffff0000
 800200c:	ff0000ff 	.word	0xff0000ff
 8002010:	0800b9d0 	.word	0x0800b9d0

		case 6:
			switch(lcd_handler.game_state){
 8002014:	4b8b      	ldr	r3, [pc, #556]	; (8002244 <LCD_State_PLAYERS+0x998>)
 8002016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201a:	3b02      	subs	r3, #2
 800201c:	2b05      	cmp	r3, #5
 800201e:	d87e      	bhi.n	800211e <LCD_State_PLAYERS+0x872>
 8002020:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <LCD_State_PLAYERS+0x77c>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	08002041 	.word	0x08002041
 800202c:	08002065 	.word	0x08002065
 8002030:	0800208b 	.word	0x0800208b
 8002034:	080020b1 	.word	0x080020b1
 8002038:	080020d5 	.word	0x080020d5
 800203c:	080020f9 	.word	0x080020f9
				case PLAYER1:
					BSP_LCD_Clear(BGCOLOR);
 8002040:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8002044:	f002 faa0 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002048:	487f      	ldr	r0, [pc, #508]	; (8002248 <LCD_State_PLAYERS+0x99c>)
 800204a:	f002 fa55 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,120, 80);
 800204e:	2350      	movs	r3, #80	; 0x50
 8002050:	2278      	movs	r2, #120	; 0x78
 8002052:	2100      	movs	r1, #0
 8002054:	2000      	movs	r0, #0
 8002056:	f002 fbd9 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800205a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800205e:	f002 fa4b 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8002062:	e05d      	b.n	8002120 <LCD_State_PLAYERS+0x874>
				case PLAYER2:
					BSP_LCD_Clear(BGCOLOR);
 8002064:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8002068:	f002 fa8e 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800206c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8002070:	f002 fa42 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,0,120, 80);
 8002074:	2350      	movs	r3, #80	; 0x50
 8002076:	2278      	movs	r2, #120	; 0x78
 8002078:	2100      	movs	r1, #0
 800207a:	2078      	movs	r0, #120	; 0x78
 800207c:	f002 fbc6 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002080:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002084:	f002 fa38 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 8002088:	e04a      	b.n	8002120 <LCD_State_PLAYERS+0x874>
				case PLAYER3:
					BSP_LCD_Clear(BGCOLOR);
 800208a:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800208e:	f002 fa7b 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8002092:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8002096:	f002 fa2f 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,80+10,120, 80);
 800209a:	2350      	movs	r3, #80	; 0x50
 800209c:	2278      	movs	r2, #120	; 0x78
 800209e:	215a      	movs	r1, #90	; 0x5a
 80020a0:	2000      	movs	r0, #0
 80020a2:	f002 fbb3 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020a6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020aa:	f002 fa25 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 80020ae:	e037      	b.n	8002120 <LCD_State_PLAYERS+0x874>
				case PLAYER4:
					BSP_LCD_Clear(BGCOLOR);
 80020b0:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80020b4:	f002 fa68 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80020b8:	4864      	ldr	r0, [pc, #400]	; (800224c <LCD_State_PLAYERS+0x9a0>)
 80020ba:	f002 fa1d 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,80+10,120, 80);
 80020be:	2350      	movs	r3, #80	; 0x50
 80020c0:	2278      	movs	r2, #120	; 0x78
 80020c2:	215a      	movs	r1, #90	; 0x5a
 80020c4:	2078      	movs	r0, #120	; 0x78
 80020c6:	f002 fba1 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020ca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020ce:	f002 fa13 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 80020d2:	e025      	b.n	8002120 <LCD_State_PLAYERS+0x874>
				case PLAYER5:
					BSP_LCD_Clear(BGCOLOR);
 80020d4:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80020d8:	f002 fa56 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80020dc:	485c      	ldr	r0, [pc, #368]	; (8002250 <LCD_State_PLAYERS+0x9a4>)
 80020de:	f002 fa0b 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,160+20,120, 80);
 80020e2:	2350      	movs	r3, #80	; 0x50
 80020e4:	2278      	movs	r2, #120	; 0x78
 80020e6:	21b4      	movs	r1, #180	; 0xb4
 80020e8:	2000      	movs	r0, #0
 80020ea:	f002 fb8f 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80020f2:	f002 fa01 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 80020f6:	e013      	b.n	8002120 <LCD_State_PLAYERS+0x874>
				case PLAYER6:
					BSP_LCD_Clear(BGCOLOR);
 80020f8:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80020fc:	f002 fa44 	bl	8004588 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002100:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8002104:	f002 f9f8 	bl	80044f8 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(120,160+20,120, 80);
 8002108:	2350      	movs	r3, #80	; 0x50
 800210a:	2278      	movs	r2, #120	; 0x78
 800210c:	21b4      	movs	r1, #180	; 0xb4
 800210e:	2078      	movs	r0, #120	; 0x78
 8002110:	f002 fb7c 	bl	800480c <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002114:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002118:	f002 f9ee 	bl	80044f8 <BSP_LCD_SetTextColor>
					break;
 800211c:	e000      	b.n	8002120 <LCD_State_PLAYERS+0x874>

				default:
					break;
 800211e:	bf00      	nop
			}

			BSP_LCD_SetFont(&Font16);
 8002120:	484c      	ldr	r0, [pc, #304]	; (8002254 <LCD_State_PLAYERS+0x9a8>)
 8002122:	f002 fa01 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8002126:	2303      	movs	r3, #3
 8002128:	4a4b      	ldr	r2, [pc, #300]	; (8002258 <LCD_State_PLAYERS+0x9ac>)
 800212a:	210a      	movs	r1, #10
 800212c:	200a      	movs	r0, #10
 800212e:	f002 fa97 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8002132:	2302      	movs	r3, #2
 8002134:	4a49      	ldr	r2, [pc, #292]	; (800225c <LCD_State_PLAYERS+0x9b0>)
 8002136:	210a      	movs	r1, #10
 8002138:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 800213c:	f002 fa90 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(10, 100, (uint8_t *)"igrac 3", LEFT_MODE);
 8002140:	2303      	movs	r3, #3
 8002142:	4a47      	ldr	r2, [pc, #284]	; (8002260 <LCD_State_PLAYERS+0x9b4>)
 8002144:	2164      	movs	r1, #100	; 0x64
 8002146:	200a      	movs	r0, #10
 8002148:	f002 fa8a 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 100, (uint8_t *)"igrac 4", RIGHT_MODE);
 800214c:	2302      	movs	r3, #2
 800214e:	4a45      	ldr	r2, [pc, #276]	; (8002264 <LCD_State_PLAYERS+0x9b8>)
 8002150:	2164      	movs	r1, #100	; 0x64
 8002152:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8002156:	f002 fa83 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(10, 190, (uint8_t *)"igrac 5", LEFT_MODE);
 800215a:	2303      	movs	r3, #3
 800215c:	4a42      	ldr	r2, [pc, #264]	; (8002268 <LCD_State_PLAYERS+0x9bc>)
 800215e:	21be      	movs	r1, #190	; 0xbe
 8002160:	200a      	movs	r0, #10
 8002162:	f002 fa7d 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 190, (uint8_t *)"igrac 6", RIGHT_MODE);
 8002166:	2302      	movs	r3, #2
 8002168:	4a40      	ldr	r2, [pc, #256]	; (800226c <LCD_State_PLAYERS+0x9c0>)
 800216a:	21be      	movs	r1, #190	; 0xbe
 800216c:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8002170:	f002 fa76 	bl	8004660 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetFont(&Font24);
 8002174:	483e      	ldr	r0, [pc, #248]	; (8002270 <LCD_State_PLAYERS+0x9c4>)
 8002176:	f002 f9d7 	bl	8004528 <BSP_LCD_SetFont>

			for(uint32_t i =1; i<= lcd_handler.num_of_players; i=i+2){
 800217a:	2301      	movs	r3, #1
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	e01c      	b.n	80021ba <LCD_State_PLAYERS+0x90e>
				sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[i-1].mL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	4a2f      	ldr	r2, [pc, #188]	; (8002244 <LCD_State_PLAYERS+0x998>)
 8002186:	3301      	adds	r3, #1
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	461a      	mov	r2, r3
 8002190:	4938      	ldr	r1, [pc, #224]	; (8002274 <LCD_State_PLAYERS+0x9c8>)
 8002192:	4839      	ldr	r0, [pc, #228]	; (8002278 <LCD_State_PLAYERS+0x9cc>)
 8002194:	f008 f9f6 	bl	800a584 <siprintf>
				BSP_LCD_DisplayStringAt(10, 10+90*(i-1)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,LEFT_MODE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	225a      	movs	r2, #90	; 0x5a
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	3b5a      	subs	r3, #90	; 0x5a
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	332d      	adds	r3, #45	; 0x2d
 80021a8:	b299      	uxth	r1, r3
 80021aa:	2303      	movs	r3, #3
 80021ac:	4a32      	ldr	r2, [pc, #200]	; (8002278 <LCD_State_PLAYERS+0x9cc>)
 80021ae:	200a      	movs	r0, #10
 80021b0:	f002 fa56 	bl	8004660 <BSP_LCD_DisplayStringAt>
			for(uint32_t i =1; i<= lcd_handler.num_of_players; i=i+2){
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3302      	adds	r3, #2
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <LCD_State_PLAYERS+0x998>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d9dc      	bls.n	8002180 <LCD_State_PLAYERS+0x8d4>
			}

			for(uint32_t i = 2; i<= lcd_handler.num_of_players; i=i+2){
 80021c6:	2302      	movs	r3, #2
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	e01d      	b.n	8002208 <LCD_State_PLAYERS+0x95c>
				sprintf(lcd_handler.mLs_of_players_print, "%ld mL", lcd_handler.Players[i-1].mL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <LCD_State_PLAYERS+0x998>)
 80021d2:	3301      	adds	r3, #1
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	461a      	mov	r2, r3
 80021dc:	4925      	ldr	r1, [pc, #148]	; (8002274 <LCD_State_PLAYERS+0x9c8>)
 80021de:	4826      	ldr	r0, [pc, #152]	; (8002278 <LCD_State_PLAYERS+0x9cc>)
 80021e0:	f008 f9d0 	bl	800a584 <siprintf>
				BSP_LCD_DisplayStringAt(-10, 10+90*(i-2)/2+35,(uint8_t *)lcd_handler.mLs_of_players_print,RIGHT_MODE);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	225a      	movs	r2, #90	; 0x5a
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	3bb4      	subs	r3, #180	; 0xb4
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	332d      	adds	r3, #45	; 0x2d
 80021f4:	b299      	uxth	r1, r3
 80021f6:	2302      	movs	r3, #2
 80021f8:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <LCD_State_PLAYERS+0x9cc>)
 80021fa:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 80021fe:	f002 fa2f 	bl	8004660 <BSP_LCD_DisplayStringAt>
			for(uint32_t i = 2; i<= lcd_handler.num_of_players; i=i+2){
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3302      	adds	r3, #2
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <LCD_State_PLAYERS+0x998>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4293      	cmp	r3, r2
 8002212:	d9db      	bls.n	80021cc <LCD_State_PLAYERS+0x920>
			}


			BSP_LCD_SetFont(&Font16);
 8002214:	480f      	ldr	r0, [pc, #60]	; (8002254 <LCD_State_PLAYERS+0x9a8>)
 8002216:	f002 f987 	bl	8004528 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 800221a:	2301      	movs	r3, #1
 800221c:	4a17      	ldr	r2, [pc, #92]	; (800227c <LCD_State_PLAYERS+0x9d0>)
 800221e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002222:	2000      	movs	r0, #0
 8002224:	f002 fa1c 	bl	8004660 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8002228:	2301      	movs	r3, #1
 800222a:	4a15      	ldr	r2, [pc, #84]	; (8002280 <LCD_State_PLAYERS+0x9d4>)
 800222c:	f240 1127 	movw	r1, #295	; 0x127
 8002230:	2000      	movs	r0, #0
 8002232:	f002 fa15 	bl	8004660 <BSP_LCD_DisplayStringAt>

			break;
 8002236:	e000      	b.n	800223a <LCD_State_PLAYERS+0x98e>
	default:
		break;
 8002238:	bf00      	nop
	}
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002242:	bf00      	nop
 8002244:	200002f0 	.word	0x200002f0
 8002248:	ffff0000 	.word	0xffff0000
 800224c:	ffffa500 	.word	0xffffa500
 8002250:	ff0000ff 	.word	0xff0000ff
 8002254:	20000050 	.word	0x20000050
 8002258:	0800b988 	.word	0x0800b988
 800225c:	0800b990 	.word	0x0800b990
 8002260:	0800b9c0 	.word	0x0800b9c0
 8002264:	0800b9c8 	.word	0x0800b9c8
 8002268:	0800b9d0 	.word	0x0800b9d0
 800226c:	0800b9d8 	.word	0x0800b9d8
 8002270:	20000040 	.word	0x20000040
 8002274:	0800b998 	.word	0x0800b998
 8002278:	200002f3 	.word	0x200002f3
 800227c:	0800b9a0 	.word	0x0800b9a0
 8002280:	0800b9b0 	.word	0x0800b9b0

08002284 <MDL_leds_init>:
void send();

struct LED_handler ledHandler;


void MDL_leds_init() {
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <MDL_leds_init+0x3c>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_LEDS; i++) {
 8002290:	2300      	movs	r3, #0
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	e00a      	b.n	80022ac <MDL_leds_init+0x28>
		ledHandler.led[i] = i;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	b2d9      	uxtb	r1, r3
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <MDL_leds_init+0x3c>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	3301      	adds	r3, #1
 80022a2:	460a      	mov	r2, r1
 80022a4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_OF_LEDS; i++) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3301      	adds	r3, #1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	ddf1      	ble.n	8002296 <MDL_leds_init+0x12>
	}
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	20000334 	.word	0x20000334

080022c4 <set_LED>:

void set_LED(uint8_t LEDnum, uint8_t Red, uint8_t Green, uint8_t Blue) {
 80022c4:	b490      	push	{r4, r7}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4604      	mov	r4, r0
 80022cc:	4608      	mov	r0, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	4623      	mov	r3, r4
 80022d4:	71fb      	strb	r3, [r7, #7]
 80022d6:	4603      	mov	r3, r0
 80022d8:	71bb      	strb	r3, [r7, #6]
 80022da:	460b      	mov	r3, r1
 80022dc:	717b      	strb	r3, [r7, #5]
 80022de:	4613      	mov	r3, r2
 80022e0:	713b      	strb	r3, [r7, #4]
	ledHandler.LED_Data[LEDnum][0] = LEDnum;
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <set_LED+0x58>)
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	79fa      	ldrb	r2, [r7, #7]
 80022ec:	71da      	strb	r2, [r3, #7]
	ledHandler.LED_Data[LEDnum][1] = Red;
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <set_LED+0x58>)
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	79ba      	ldrb	r2, [r7, #6]
 80022f8:	721a      	strb	r2, [r3, #8]
	ledHandler.LED_Data[LEDnum][2] = Green;
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <set_LED+0x58>)
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	797a      	ldrb	r2, [r7, #5]
 8002304:	725a      	strb	r2, [r3, #9]
	ledHandler.LED_Data[LEDnum][3] = Blue;
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <set_LED+0x58>)
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	793a      	ldrb	r2, [r7, #4]
 8002310:	729a      	strb	r2, [r3, #10]
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bc90      	pop	{r4, r7}
 800231a:	4770      	bx	lr
 800231c:	20000334 	.word	0x20000334

08002320 <send>:

void send(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
	uint32_t index = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
	uint32_t color;

	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 800232a:	2300      	movs	r3, #0
 800232c:	72fb      	strb	r3, [r7, #11]
 800232e:	e039      	b.n	80023a4 <send+0x84>
		color = ((ledHandler.LED_Data[i][1] << 16) | (ledHandler.LED_Data[i][2] << 8) | (ledHandler.LED_Data[i][3]));
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <send+0xd8>)
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	7a1b      	ldrb	r3, [r3, #8]
 800233a:	041a      	lsls	r2, r3, #16
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	492e      	ldr	r1, [pc, #184]	; (80023f8 <send+0xd8>)
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	7a5b      	ldrb	r3, [r3, #9]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	431a      	orrs	r2, r3
 800234a:	7afb      	ldrb	r3, [r7, #11]
 800234c:	492a      	ldr	r1, [pc, #168]	; (80023f8 <send+0xd8>)
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	7a9b      	ldrb	r3, [r3, #10]
 8002354:	4313      	orrs	r3, r2
 8002356:	607b      	str	r3, [r7, #4]

		for (uint8_t i = 24; i > 0; i--) {
 8002358:	2318      	movs	r3, #24
 800235a:	72bb      	strb	r3, [r7, #10]
 800235c:	e01c      	b.n	8002398 <send+0x78>
			if (color & (1 << (i - 1)))
 800235e:	7abb      	ldrb	r3, [r7, #10]
 8002360:	3b01      	subs	r3, #1
 8002362:	2201      	movs	r2, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	461a      	mov	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <send+0x60>
				ledHandler.pwmData[index] = 75; //19  //60  //150
 8002372:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <send+0xd8>)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3310      	adds	r3, #16
 8002378:	214b      	movs	r1, #75	; 0x4b
 800237a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800237e:	e005      	b.n	800238c <send+0x6c>
			else
				ledHandler.pwmData[index] = 37; //9  //30 //75
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <send+0xd8>)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3310      	adds	r3, #16
 8002386:	2125      	movs	r1, #37	; 0x25
 8002388:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			index++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3301      	adds	r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 24; i > 0; i--) {
 8002392:	7abb      	ldrb	r3, [r7, #10]
 8002394:	3b01      	subs	r3, #1
 8002396:	72bb      	strb	r3, [r7, #10]
 8002398:	7abb      	ldrb	r3, [r7, #10]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1df      	bne.n	800235e <send+0x3e>
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	3301      	adds	r3, #1
 80023a2:	72fb      	strb	r3, [r7, #11]
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d9c2      	bls.n	8002330 <send+0x10>
		}
	}

	for (uint8_t i = 0; i < 50; i++) {
 80023aa:	2300      	movs	r3, #0
 80023ac:	727b      	strb	r3, [r7, #9]
 80023ae:	e00b      	b.n	80023c8 <send+0xa8>
		ledHandler.pwmData[index] = 0;
 80023b0:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <send+0xd8>)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3310      	adds	r3, #16
 80023b6:	2100      	movs	r1, #0
 80023b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		index++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 50; i++) {
 80023c2:	7a7b      	ldrb	r3, [r7, #9]
 80023c4:	3301      	adds	r3, #1
 80023c6:	727b      	strb	r3, [r7, #9]
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	2b31      	cmp	r3, #49	; 0x31
 80023cc:	d9f0      	bls.n	80023b0 <send+0x90>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*) ledHandler.pwmData, index);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <send+0xdc>)
 80023d4:	2100      	movs	r1, #0
 80023d6:	480a      	ldr	r0, [pc, #40]	; (8002400 <send+0xe0>)
 80023d8:	f006 ff86 	bl	80092e8 <HAL_TIM_PWM_Start_DMA>
	ledHandler.datasentflag = TRANSFER_NOT_FINISHED;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <send+0xd8>)
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
	while (ledHandler.datasentflag == TRANSFER_NOT_FINISHED) {};
 80023e2:	bf00      	nop
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <send+0xd8>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d0fb      	beq.n	80023e4 <send+0xc4>

}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000334 	.word	0x20000334
 80023fc:	20000354 	.word	0x20000354
 8002400:	2000078c 	.word	0x2000078c

08002404 <MDL_leds_next_round>:

void MDL_leds_next_round(void) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < NUM_OF_LEDS - 1; i++) {
 800240a:	2300      	movs	r3, #0
 800240c:	71fb      	strb	r3, [r7, #7]
 800240e:	e026      	b.n	800245e <MDL_leds_next_round+0x5a>
		uint8_t n = i + rand() / (RAND_MAX / (NUM_OF_LEDS - i) + 1);
 8002410:	f008 f878 	bl	800a504 <rand>
 8002414:	4602      	mov	r2, r0
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f1c3 0306 	rsb	r3, r3, #6
 800241c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002420:	fb91 f3f3 	sdiv	r3, r1, r3
 8002424:	3301      	adds	r3, #1
 8002426:	fb92 f3f3 	sdiv	r3, r2, r3
 800242a:	b2da      	uxtb	r2, r3
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	4413      	add	r3, r2
 8002430:	71bb      	strb	r3, [r7, #6]
		uint8_t pom = ledHandler.led[n];
 8002432:	79bb      	ldrb	r3, [r7, #6]
 8002434:	4a38      	ldr	r2, [pc, #224]	; (8002518 <MDL_leds_next_round+0x114>)
 8002436:	4413      	add	r3, r2
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	717b      	strb	r3, [r7, #5]
		ledHandler.led[n] = ledHandler.led[i];
 800243c:	79fa      	ldrb	r2, [r7, #7]
 800243e:	79bb      	ldrb	r3, [r7, #6]
 8002440:	4935      	ldr	r1, [pc, #212]	; (8002518 <MDL_leds_next_round+0x114>)
 8002442:	440a      	add	r2, r1
 8002444:	7851      	ldrb	r1, [r2, #1]
 8002446:	4a34      	ldr	r2, [pc, #208]	; (8002518 <MDL_leds_next_round+0x114>)
 8002448:	4413      	add	r3, r2
 800244a:	460a      	mov	r2, r1
 800244c:	705a      	strb	r2, [r3, #1]
		ledHandler.led[i] = pom;
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	4a31      	ldr	r2, [pc, #196]	; (8002518 <MDL_leds_next_round+0x114>)
 8002452:	4413      	add	r3, r2
 8002454:	797a      	ldrb	r2, [r7, #5]
 8002456:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < NUM_OF_LEDS - 1; i++) {
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	3301      	adds	r3, #1
 800245c:	71fb      	strb	r3, [r7, #7]
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d9d5      	bls.n	8002410 <MDL_leds_next_round+0xc>
	}

	set_LED(LED_1, 0, 0, 0);
 8002464:	2300      	movs	r3, #0
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	2000      	movs	r0, #0
 800246c:	f7ff ff2a 	bl	80022c4 <set_LED>
	set_LED(LED_2, 0, 0, 0);
 8002470:	2300      	movs	r3, #0
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff ff24 	bl	80022c4 <set_LED>
	set_LED(LED_3, 0, 0, 0);
 800247c:	2300      	movs	r3, #0
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2002      	movs	r0, #2
 8002484:	f7ff ff1e 	bl	80022c4 <set_LED>
	set_LED(LED_4, 0, 0, 0);
 8002488:	2300      	movs	r3, #0
 800248a:	2200      	movs	r2, #0
 800248c:	2100      	movs	r1, #0
 800248e:	2003      	movs	r0, #3
 8002490:	f7ff ff18 	bl	80022c4 <set_LED>
	set_LED(LED_5, 0, 0, 0);
 8002494:	2300      	movs	r3, #0
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	2004      	movs	r0, #4
 800249c:	f7ff ff12 	bl	80022c4 <set_LED>
	set_LED(LED_6, 0, 0, 0);
 80024a0:	2300      	movs	r3, #0
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2005      	movs	r0, #5
 80024a8:	f7ff ff0c 	bl	80022c4 <set_LED>
	send();
 80024ac:	f7ff ff38 	bl	8002320 <send>
	HAL_Delay(200);
 80024b0:	20c8      	movs	r0, #200	; 0xc8
 80024b2:	f002 fe3f 	bl	8005134 <HAL_Delay>

	set_LED(ledHandler.led[0], 255, 0, 0);
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <MDL_leds_next_round+0x114>)
 80024b8:	7858      	ldrb	r0, [r3, #1]
 80024ba:	2300      	movs	r3, #0
 80024bc:	2200      	movs	r2, #0
 80024be:	21ff      	movs	r1, #255	; 0xff
 80024c0:	f7ff ff00 	bl	80022c4 <set_LED>
	set_LED(ledHandler.led[1], 0, 255, 0);
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MDL_leds_next_round+0x114>)
 80024c6:	7898      	ldrb	r0, [r3, #2]
 80024c8:	2300      	movs	r3, #0
 80024ca:	22ff      	movs	r2, #255	; 0xff
 80024cc:	2100      	movs	r1, #0
 80024ce:	f7ff fef9 	bl	80022c4 <set_LED>
	set_LED(ledHandler.led[2], 0, 255, 0);
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MDL_leds_next_round+0x114>)
 80024d4:	78d8      	ldrb	r0, [r3, #3]
 80024d6:	2300      	movs	r3, #0
 80024d8:	22ff      	movs	r2, #255	; 0xff
 80024da:	2100      	movs	r1, #0
 80024dc:	f7ff fef2 	bl	80022c4 <set_LED>
	set_LED(ledHandler.led[3], 0, 0, 255);
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <MDL_leds_next_round+0x114>)
 80024e2:	7918      	ldrb	r0, [r3, #4]
 80024e4:	23ff      	movs	r3, #255	; 0xff
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	f7ff feeb 	bl	80022c4 <set_LED>
	set_LED(ledHandler.led[4], 0, 0, 255);
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <MDL_leds_next_round+0x114>)
 80024f0:	7958      	ldrb	r0, [r3, #5]
 80024f2:	23ff      	movs	r3, #255	; 0xff
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	f7ff fee4 	bl	80022c4 <set_LED>
	set_LED(ledHandler.led[5], 0, 0, 255);
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MDL_leds_next_round+0x114>)
 80024fe:	7998      	ldrb	r0, [r3, #6]
 8002500:	23ff      	movs	r3, #255	; 0xff
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	f7ff fedd 	bl	80022c4 <set_LED>
	send();
 800250a:	f7ff ff09 	bl	8002320 <send>
	//HAL_Delay(1);


}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000334 	.word	0x20000334

0800251c <MDL_leds_scored>:

void MDL_leds_scored(uint8_t sensorNum) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	uint8_t index;
	uint8_t points = 25;  // plava
 8002526:	2319      	movs	r3, #25
 8002528:	73bb      	strb	r3, [r7, #14]
	uint8_t color = 3;
 800252a:	2303      	movs	r3, #3
 800252c:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 800252e:	2300      	movs	r3, #0
 8002530:	733b      	strb	r3, [r7, #12]
 8002532:	e00b      	b.n	800254c <MDL_leds_scored+0x30>
		if (ledHandler.led[i] == sensorNum) index = i;
 8002534:	7b3b      	ldrb	r3, [r7, #12]
 8002536:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <MDL_leds_scored+0xdc>)
 8002538:	4413      	add	r3, r2
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	79fa      	ldrb	r2, [r7, #7]
 800253e:	429a      	cmp	r2, r3
 8002540:	d101      	bne.n	8002546 <MDL_leds_scored+0x2a>
 8002542:	7b3b      	ldrb	r3, [r7, #12]
 8002544:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < NUM_OF_LEDS; i++) {
 8002546:	7b3b      	ldrb	r3, [r7, #12]
 8002548:	3301      	adds	r3, #1
 800254a:	733b      	strb	r3, [r7, #12]
 800254c:	7b3b      	ldrb	r3, [r7, #12]
 800254e:	2b05      	cmp	r3, #5
 8002550:	d9f0      	bls.n	8002534 <MDL_leds_scored+0x18>
	}

	if (index == 0) {  // crvena
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d104      	bne.n	8002562 <MDL_leds_scored+0x46>
		color = 1;
 8002558:	2301      	movs	r3, #1
 800255a:	737b      	strb	r3, [r7, #13]
		points = 100;
 800255c:	2364      	movs	r3, #100	; 0x64
 800255e:	73bb      	strb	r3, [r7, #14]
 8002560:	e009      	b.n	8002576 <MDL_leds_scored+0x5a>
	}
	else if (index == 1 || index == 2) { //zelena
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d002      	beq.n	800256e <MDL_leds_scored+0x52>
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d103      	bne.n	8002576 <MDL_leds_scored+0x5a>
		color = 2;
 800256e:	2302      	movs	r3, #2
 8002570:	737b      	strb	r3, [r7, #13]
		points = 50;
 8002572:	2332      	movs	r3, #50	; 0x32
 8002574:	73bb      	strb	r3, [r7, #14]
	}

	for (uint8_t j = 0; j < 3; j++) {
 8002576:	2300      	movs	r3, #0
 8002578:	72fb      	strb	r3, [r7, #11]
 800257a:	e02c      	b.n	80025d6 <MDL_leds_scored+0xba>
		set_LED(sensorNum, 0, 0, 0);
 800257c:	79f8      	ldrb	r0, [r7, #7]
 800257e:	2300      	movs	r3, #0
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	f7ff fe9e 	bl	80022c4 <set_LED>
		send();
 8002588:	f7ff feca 	bl	8002320 <send>
		HAL_Delay(100);
 800258c:	2064      	movs	r0, #100	; 0x64
 800258e:	f002 fdd1 	bl	8005134 <HAL_Delay>
		if (color == 1)	set_LED(sensorNum, 255, 0, 0);
 8002592:	7b7b      	ldrb	r3, [r7, #13]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d106      	bne.n	80025a6 <MDL_leds_scored+0x8a>
 8002598:	79f8      	ldrb	r0, [r7, #7]
 800259a:	2300      	movs	r3, #0
 800259c:	2200      	movs	r2, #0
 800259e:	21ff      	movs	r1, #255	; 0xff
 80025a0:	f7ff fe90 	bl	80022c4 <set_LED>
 80025a4:	e00f      	b.n	80025c6 <MDL_leds_scored+0xaa>
		else if (color == 2) set_LED(sensorNum, 0, 255, 0);
 80025a6:	7b7b      	ldrb	r3, [r7, #13]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d106      	bne.n	80025ba <MDL_leds_scored+0x9e>
 80025ac:	79f8      	ldrb	r0, [r7, #7]
 80025ae:	2300      	movs	r3, #0
 80025b0:	22ff      	movs	r2, #255	; 0xff
 80025b2:	2100      	movs	r1, #0
 80025b4:	f7ff fe86 	bl	80022c4 <set_LED>
 80025b8:	e005      	b.n	80025c6 <MDL_leds_scored+0xaa>
		else set_LED(sensorNum, 0, 0, 255);
 80025ba:	79f8      	ldrb	r0, [r7, #7]
 80025bc:	23ff      	movs	r3, #255	; 0xff
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	f7ff fe7f 	bl	80022c4 <set_LED>
		send();
 80025c6:	f7ff feab 	bl	8002320 <send>
		HAL_Delay(100);
 80025ca:	2064      	movs	r0, #100	; 0x64
 80025cc:	f002 fdb2 	bl	8005134 <HAL_Delay>
	for (uint8_t j = 0; j < 3; j++) {
 80025d0:	7afb      	ldrb	r3, [r7, #11]
 80025d2:	3301      	adds	r3, #1
 80025d4:	72fb      	strb	r3, [r7, #11]
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d9cf      	bls.n	800257c <MDL_leds_scored+0x60>
	}

	MDL_LCD_Hit_Update(points);
 80025dc:	7bbb      	ldrb	r3, [r7, #14]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fe24 	bl	800122c <MDL_LCD_Hit_Update>
	sumator(points);
 80025e4:	7bbb      	ldrb	r3, [r7, #14]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fd13 	bl	8001014 <sumator>

}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000334 	.word	0x20000334

080025fc <HAL_TIM_PWM_PulseFinishedCallback>:

}



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	ledHandler.datasentflag = TRANSFER_FINISHED;
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000334 	.word	0x20000334

0800261c <MDL_sensors_init>:

//************************************************************************************

//*******************************PUBLIC FUNCTIONS*************************************

void MDL_sensors_init() {
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
	sensors_handler.state = START_CALIBRATION;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <MDL_sensors_init+0x48>)
 8002624:	2205      	movs	r2, #5
 8002626:	701a      	strb	r2, [r3, #0]
	sensors_handler.ordinalNumOfMeasurement = 0;
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MDL_sensors_init+0x48>)
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	sensors_handler.ordinalNumOfMeasurementForCalibration = 0;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MDL_sensors_init+0x48>)
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8002638:	2300      	movs	r3, #0
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	e008      	b.n	8002650 <MDL_sensors_init+0x34>
		sensors_handler.sensors[i].currentState = PASIVE;
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <MDL_sensors_init+0x48>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	2201      	movs	r2, #1
 8002648:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3301      	adds	r3, #1
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b05      	cmp	r3, #5
 8002654:	ddf3      	ble.n	800263e <MDL_sensors_init+0x22>
	}

}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	200004d8 	.word	0x200004d8

08002668 <MDL_sensors_handler>:

void MDL_sensors_handler() {
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0

	switch (sensors_handler.state) {
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <MDL_sensors_handler+0xa8>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b08      	cmp	r3, #8
 8002674:	d84a      	bhi.n	800270c <MDL_sensors_handler+0xa4>
 8002676:	a201      	add	r2, pc, #4	; (adr r2, 800267c <MDL_sensors_handler+0x14>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	080026a1 	.word	0x080026a1
 8002680:	080026cf 	.word	0x080026cf
 8002684:	080026d3 	.word	0x080026d3
 8002688:	080026d9 	.word	0x080026d9
 800268c:	080026df 	.word	0x080026df
 8002690:	080026e5 	.word	0x080026e5
 8002694:	080026fd 	.word	0x080026fd
 8002698:	08002701 	.word	0x08002701
 800269c:	08002707 	.word	0x08002707
	case GETTING_DATA:
		if(sensors_handler.timer == 0) {
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <MDL_sensors_handler+0xa8>)
 80026a2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <MDL_sensors_handler+0x54>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensors_handler.buffer,
 80026aa:	2206      	movs	r2, #6
 80026ac:	4919      	ldr	r1, [pc, #100]	; (8002714 <MDL_sensors_handler+0xac>)
 80026ae:	481a      	ldr	r0, [pc, #104]	; (8002718 <MDL_sensors_handler+0xb0>)
 80026b0:	f002 fdda 	bl	8005268 <HAL_ADC_Start_DMA>
			NUM_OF_SENSORS);
			sensors_handler.state = WAITING_FOR_DATA;
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <MDL_sensors_handler+0xa8>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
		} else {
			sensors_handler.timer--;
		}
		break;
 80026ba:	e027      	b.n	800270c <MDL_sensors_handler+0xa4>
			sensors_handler.timer--;
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <MDL_sensors_handler+0xa8>)
 80026be:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <MDL_sensors_handler+0xa8>)
 80026c8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		break;
 80026cc:	e01e      	b.n	800270c <MDL_sensors_handler+0xa4>
	case WAITING_FOR_DATA:
		__NOP();
 80026ce:	bf00      	nop
		break;
 80026d0:	e01c      	b.n	800270c <MDL_sensors_handler+0xa4>
	case CALCULATING_DATA:
		sensors_calculateCurrentData();
 80026d2:	f000 f8f7 	bl	80028c4 <sensors_calculateCurrentData>
		break;
 80026d6:	e019      	b.n	800270c <MDL_sensors_handler+0xa4>
	case DETERMINING_SENSOR_STATE:
		sensors_determineIfSensorsDetectedObject();
 80026d8:	f000 f88e 	bl	80027f8 <sensors_determineIfSensorsDetectedObject>
		break;
 80026dc:	e016      	b.n	800270c <MDL_sensors_handler+0xa4>
	case CHECKING_SENSOR_STATE:
		sensors_checkSensorState();
 80026de:	f000 f8c7 	bl	8002870 <sensors_checkSensorState>
		break;
 80026e2:	e013      	b.n	800270c <MDL_sensors_handler+0xa4>
	case START_CALIBRATION:
		HAL_ADC_Stop(&hadc1);
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <MDL_sensors_handler+0xb0>)
 80026e6:	f002 fd8c 	bl	8005202 <HAL_ADC_Stop>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) sensors_handler.buffer,
 80026ea:	2206      	movs	r2, #6
 80026ec:	4909      	ldr	r1, [pc, #36]	; (8002714 <MDL_sensors_handler+0xac>)
 80026ee:	480a      	ldr	r0, [pc, #40]	; (8002718 <MDL_sensors_handler+0xb0>)
 80026f0:	f002 fdba 	bl	8005268 <HAL_ADC_Start_DMA>
				NUM_OF_SENSORS);
		sensors_handler.state = WAITING_FOR_CALIBRATION_DATA;
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <MDL_sensors_handler+0xa8>)
 80026f6:	2206      	movs	r2, #6
 80026f8:	701a      	strb	r2, [r3, #0]
		break;
 80026fa:	e007      	b.n	800270c <MDL_sensors_handler+0xa4>
	case WAITING_FOR_CALIBRATION_DATA:
		__NOP();
 80026fc:	bf00      	nop
		break;
 80026fe:	e005      	b.n	800270c <MDL_sensors_handler+0xa4>
	case CALCULATING_DATA_FOR_CALIBRATION:
		sensors_calculateCurrentDataForCalibration();
 8002700:	f000 f83e 	bl	8002780 <sensors_calculateCurrentDataForCalibration>
		break;
 8002704:	e002      	b.n	800270c <MDL_sensors_handler+0xa4>
	case CALIBRATING:
		sensors_calibrateSensors();
 8002706:	f000 f809 	bl	800271c <sensors_calibrateSensors>
		break;
 800270a:	bf00      	nop
	}
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	200004d8 	.word	0x200004d8
 8002714:	2000050c 	.word	0x2000050c
 8002718:	2000051c 	.word	0x2000051c

0800271c <sensors_calibrateSensors>:

//************************************************************************************

//**********************PRIVATE FUNCTION DEFINITIONS**********************************

void sensors_calibrateSensors() {
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	e01a      	b.n	800275e <sensors_calibrateSensors+0x42>
		sensors_handler.sensors[i].sensor_threshold =
				sensors_handler.sensors[i].sumOfDistances
 8002728:	4a13      	ldr	r2, [pc, #76]	; (8002778 <sensors_calibrateSensors+0x5c>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	689b      	ldr	r3, [r3, #8]
						/ NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <sensors_calibrateSensors+0x60>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	095b      	lsrs	r3, r3, #5
						- THRESHOLD_REDUCER;
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3b3c      	subs	r3, #60	; 0x3c
 800273e:	b2d9      	uxtb	r1, r3
		sensors_handler.sensors[i].sensor_threshold =
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <sensors_calibrateSensors+0x5c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	460a      	mov	r2, r1
 800274a:	71da      	strb	r2, [r3, #7]
		sensors_handler.sensors[i].sumOfDistances = 0;
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <sensors_calibrateSensors+0x5c>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b05      	cmp	r3, #5
 8002762:	dde1      	ble.n	8002728 <sensors_calibrateSensors+0xc>
	}

	sensors_handler.state = GETTING_DATA;
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <sensors_calibrateSensors+0x5c>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	200004d8 	.word	0x200004d8
 800277c:	51eb851f 	.word	0x51eb851f

08002780 <sensors_calculateCurrentDataForCalibration>:

void sensors_calculateCurrentDataForCalibration() {
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	e015      	b.n	80027b8 <sensors_calculateCurrentDataForCalibration+0x38>
		sensors_handler.sensors[i].sumOfDistances += sensors_handler.buffer[i];
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <sensors_calculateCurrentDataForCalibration+0x74>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3318      	adds	r3, #24
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	889b      	ldrh	r3, [r3, #4]
 8002798:	b299      	uxth	r1, r3
 800279a:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <sensors_calculateCurrentDataForCalibration+0x74>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	460a      	mov	r2, r1
 80027a6:	441a      	add	r2, r3
 80027a8:	4912      	ldr	r1, [pc, #72]	; (80027f4 <sensors_calculateCurrentDataForCalibration+0x74>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3301      	adds	r3, #1
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	dde6      	ble.n	800278c <sensors_calculateCurrentDataForCalibration+0xc>
	}

	if (++sensors_handler.ordinalNumOfMeasurementForCalibration
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <sensors_calculateCurrentDataForCalibration+0x74>)
 80027c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c4:	3301      	adds	r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <sensors_calculateCurrentDataForCalibration+0x74>)
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <sensors_calculateCurrentDataForCalibration+0x74>)
 80027d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d103      	bne.n	80027e0 <sensors_calculateCurrentDataForCalibration+0x60>
			== NUM_OF_REQUIRED_MEASURMENTS_FOR_CALIBRATION) {
		sensors_handler.state = CALIBRATING;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <sensors_calculateCurrentDataForCalibration+0x74>)
 80027da:	2208      	movs	r2, #8
 80027dc:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = START_CALIBRATION;
	}

}
 80027de:	e002      	b.n	80027e6 <sensors_calculateCurrentDataForCalibration+0x66>
		sensors_handler.state = START_CALIBRATION;
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <sensors_calculateCurrentDataForCalibration+0x74>)
 80027e2:	2205      	movs	r2, #5
 80027e4:	701a      	strb	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	200004d8 	.word	0x200004d8

080027f8 <sensors_determineIfSensorsDetectedObject>:

void sensors_determineIfSensorsDetectedObject() {
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	e025      	b.n	8002850 <sensors_determineIfSensorsDetectedObject+0x58>
		if (sensors_handler.sensors[i].sumOfDistances
 8002804:	4a18      	ldr	r2, [pc, #96]	; (8002868 <sensors_determineIfSensorsDetectedObject+0x70>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	689b      	ldr	r3, [r3, #8]
				/ (NUM_OF_REQUIRED_MEASURMENTS)
 800280e:	4a17      	ldr	r2, [pc, #92]	; (800286c <sensors_determineIfSensorsDetectedObject+0x74>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	091a      	lsrs	r2, r3, #4
				< sensors_handler.sensors[i].sensor_threshold) {
 8002816:	4914      	ldr	r1, [pc, #80]	; (8002868 <sensors_determineIfSensorsDetectedObject+0x70>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	79db      	ldrb	r3, [r3, #7]
		if (sensors_handler.sensors[i].sumOfDistances
 8002820:	429a      	cmp	r2, r3
 8002822:	d206      	bcs.n	8002832 <sensors_determineIfSensorsDetectedObject+0x3a>
			sensors_handler.sensors[i].currentState = ACTIVE;
 8002824:	4a10      	ldr	r2, [pc, #64]	; (8002868 <sensors_determineIfSensorsDetectedObject+0x70>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	2200      	movs	r2, #0
 800282e:	719a      	strb	r2, [r3, #6]
 8002830:	e005      	b.n	800283e <sensors_determineIfSensorsDetectedObject+0x46>
		} else {
			sensors_handler.sensors[i].currentState = PASIVE;
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <sensors_determineIfSensorsDetectedObject+0x70>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	2201      	movs	r2, #1
 800283c:	719a      	strb	r2, [r3, #6]
		}

		sensors_handler.sensors[i].sumOfDistances = 0;
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <sensors_determineIfSensorsDetectedObject+0x70>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3301      	adds	r3, #1
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b05      	cmp	r3, #5
 8002854:	ddd6      	ble.n	8002804 <sensors_determineIfSensorsDetectedObject+0xc>
	}

	sensors_handler.state = CHECKING_SENSOR_STATE;
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <sensors_determineIfSensorsDetectedObject+0x70>)
 8002858:	2204      	movs	r2, #4
 800285a:	701a      	strb	r2, [r3, #0]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	200004d8 	.word	0x200004d8
 800286c:	cccccccd 	.word	0xcccccccd

08002870 <sensors_checkSensorState>:

void sensors_checkSensorState() {
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0

	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	e013      	b.n	80028a4 <sensors_checkSensorState+0x34>
		if (sensors_handler.sensors[i].currentState == ACTIVE) {
 800287c:	4a10      	ldr	r2, [pc, #64]	; (80028c0 <sensors_checkSensorState+0x50>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	799b      	ldrb	r3, [r3, #6]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <sensors_checkSensorState+0x2e>

			MDL_leds_scored(i);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fe44 	bl	800251c <MDL_leds_scored>
			sensors_handler.timer = SENSOR_TIMER;
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <sensors_checkSensorState+0x50>)
 8002896:	f644 6220 	movw	r2, #20000	; 0x4e20
 800289a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3301      	adds	r3, #1
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	dde8      	ble.n	800287c <sensors_checkSensorState+0xc>
		}
	}

	sensors_handler.state = GETTING_DATA;
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <sensors_checkSensorState+0x50>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
	sensors_handler.ordinalNumOfMeasurement = 0;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <sensors_checkSensorState+0x50>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	200004d8 	.word	0x200004d8

080028c4 <sensors_calculateCurrentData>:

void sensors_calculateCurrentData() {
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	e015      	b.n	80028fc <sensors_calculateCurrentData+0x38>
		sensors_handler.sensors[i].sumOfDistances += sensors_handler.buffer[i];
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <sensors_calculateCurrentData+0x74>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3318      	adds	r3, #24
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	889b      	ldrh	r3, [r3, #4]
 80028dc:	b299      	uxth	r1, r3
 80028de:	4a16      	ldr	r2, [pc, #88]	; (8002938 <sensors_calculateCurrentData+0x74>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	460a      	mov	r2, r1
 80028ea:	441a      	add	r2, r3
 80028ec:	4912      	ldr	r1, [pc, #72]	; (8002938 <sensors_calculateCurrentData+0x74>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < NUM_OF_SENSORS; i++) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3301      	adds	r3, #1
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	dde6      	ble.n	80028d0 <sensors_calculateCurrentData+0xc>
	}

	if (++sensors_handler.ordinalNumOfMeasurement == NUM_OF_REQUIRED_MEASURMENTS) {
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <sensors_calculateCurrentData+0x74>)
 8002904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002908:	3301      	adds	r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <sensors_calculateCurrentData+0x74>)
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <sensors_calculateCurrentData+0x74>)
 8002914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002918:	2b14      	cmp	r3, #20
 800291a:	d103      	bne.n	8002924 <sensors_calculateCurrentData+0x60>
		sensors_handler.state = DETERMINING_SENSOR_STATE;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <sensors_calculateCurrentData+0x74>)
 800291e:	2203      	movs	r2, #3
 8002920:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = GETTING_DATA;
	}

}
 8002922:	e002      	b.n	800292a <sensors_calculateCurrentData+0x66>
		sensors_handler.state = GETTING_DATA;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <sensors_calculateCurrentData+0x74>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	200004d8 	.word	0x200004d8

0800293c <HAL_ADC_ConvCpltCallback>:

//************************************************************************************

// when DMA finishes transferring data this function is called

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

	if (sensors_handler.state == WAITING_FOR_CALIBRATION_DATA) {
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b06      	cmp	r3, #6
 800294c:	d103      	bne.n	8002956 <HAL_ADC_ConvCpltCallback+0x1a>
		sensors_handler.state = CALCULATING_DATA_FOR_CALIBRATION;
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002950:	2207      	movs	r2, #7
 8002952:	701a      	strb	r2, [r3, #0]
	} else {
		sensors_handler.state = CALCULATING_DATA;
	}
}
 8002954:	e002      	b.n	800295c <HAL_ADC_ConvCpltCallback+0x20>
		sensors_handler.state = CALCULATING_DATA;
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002958:	2202      	movs	r2, #2
 800295a:	701a      	strb	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	200004d8 	.word	0x200004d8

0800296c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002972:	463b      	mov	r3, r7
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800297e:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <MX_ADC1_Init+0x124>)
 8002980:	4a44      	ldr	r2, [pc, #272]	; (8002a94 <MX_ADC1_Init+0x128>)
 8002982:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002984:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <MX_ADC1_Init+0x124>)
 8002986:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800298a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800298c:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <MX_ADC1_Init+0x124>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002992:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <MX_ADC1_Init+0x124>)
 8002994:	2201      	movs	r2, #1
 8002996:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <MX_ADC1_Init+0x124>)
 800299a:	2200      	movs	r2, #0
 800299c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800299e:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <MX_ADC1_Init+0x124>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029a6:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <MX_ADC1_Init+0x124>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029ac:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <MX_ADC1_Init+0x124>)
 80029ae:	4a3a      	ldr	r2, [pc, #232]	; (8002a98 <MX_ADC1_Init+0x12c>)
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <MX_ADC1_Init+0x124>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <MX_ADC1_Init+0x124>)
 80029ba:	2206      	movs	r2, #6
 80029bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029be:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <MX_ADC1_Init+0x124>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80029c6:	4b32      	ldr	r3, [pc, #200]	; (8002a90 <MX_ADC1_Init+0x124>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029cc:	4830      	ldr	r0, [pc, #192]	; (8002a90 <MX_ADC1_Init+0x124>)
 80029ce:	f002 fbd5 	bl	800517c <HAL_ADC_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029d8:	f000 fe30 	bl	800363c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80029dc:	2305      	movs	r3, #5
 80029de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029e0:	2301      	movs	r3, #1
 80029e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029e8:	463b      	mov	r3, r7
 80029ea:	4619      	mov	r1, r3
 80029ec:	4828      	ldr	r0, [pc, #160]	; (8002a90 <MX_ADC1_Init+0x124>)
 80029ee:	f002 fd5f 	bl	80054b0 <HAL_ADC_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029f8:	f000 fe20 	bl	800363c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80029fc:	2307      	movs	r3, #7
 80029fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a04:	463b      	mov	r3, r7
 8002a06:	4619      	mov	r1, r3
 8002a08:	4821      	ldr	r0, [pc, #132]	; (8002a90 <MX_ADC1_Init+0x124>)
 8002a0a:	f002 fd51 	bl	80054b0 <HAL_ADC_ConfigChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002a14:	f000 fe12 	bl	800363c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002a18:	230b      	movs	r3, #11
 8002a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a20:	463b      	mov	r3, r7
 8002a22:	4619      	mov	r1, r3
 8002a24:	481a      	ldr	r0, [pc, #104]	; (8002a90 <MX_ADC1_Init+0x124>)
 8002a26:	f002 fd43 	bl	80054b0 <HAL_ADC_ConfigChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002a30:	f000 fe04 	bl	800363c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002a34:	230c      	movs	r3, #12
 8002a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002a38:	2304      	movs	r3, #4
 8002a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4813      	ldr	r0, [pc, #76]	; (8002a90 <MX_ADC1_Init+0x124>)
 8002a42:	f002 fd35 	bl	80054b0 <HAL_ADC_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002a4c:	f000 fdf6 	bl	800363c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002a50:	230d      	movs	r3, #13
 8002a52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002a54:	2305      	movs	r3, #5
 8002a56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a58:	463b      	mov	r3, r7
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	480c      	ldr	r0, [pc, #48]	; (8002a90 <MX_ADC1_Init+0x124>)
 8002a5e:	f002 fd27 	bl	80054b0 <HAL_ADC_ConfigChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002a68:	f000 fde8 	bl	800363c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002a6c:	230e      	movs	r3, #14
 8002a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002a70:	2306      	movs	r3, #6
 8002a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a74:	463b      	mov	r3, r7
 8002a76:	4619      	mov	r1, r3
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <MX_ADC1_Init+0x124>)
 8002a7a:	f002 fd19 	bl	80054b0 <HAL_ADC_ConfigChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002a84:	f000 fdda 	bl	800363c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	2000051c 	.word	0x2000051c
 8002a94:	40012000 	.word	0x40012000
 8002a98:	0f000001 	.word	0x0f000001

08002a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a3c      	ldr	r2, [pc, #240]	; (8002bac <HAL_ADC_MspInit+0x110>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d172      	bne.n	8002ba4 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_ADC_MspInit+0x114>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a3a      	ldr	r2, [pc, #232]	; (8002bb0 <HAL_ADC_MspInit+0x114>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_ADC_MspInit+0x114>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_ADC_MspInit+0x114>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a33      	ldr	r2, [pc, #204]	; (8002bb0 <HAL_ADC_MspInit+0x114>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <HAL_ADC_MspInit+0x114>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_ADC_MspInit+0x114>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <HAL_ADC_MspInit+0x114>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_ADC_MspInit+0x114>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002b12:	231e      	movs	r3, #30
 8002b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b16:	2303      	movs	r3, #3
 8002b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	4823      	ldr	r0, [pc, #140]	; (8002bb4 <HAL_ADC_MspInit+0x118>)
 8002b26:	f003 fedf 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b2a:	23a0      	movs	r3, #160	; 0xa0
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 0314 	add.w	r3, r7, #20
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	481e      	ldr	r0, [pc, #120]	; (8002bb8 <HAL_ADC_MspInit+0x11c>)
 8002b3e:	f003 fed3 	bl	80068e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_ADC_MspInit+0x124>)
 8002b46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b6a:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b80:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b8a:	f003 f853 	bl	8005c34 <HAL_DMA_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002b94:	f000 fd52 	bl	800363c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b9e:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_ADC_MspInit+0x120>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	; 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40012000 	.word	0x40012000
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	20000564 	.word	0x20000564
 8002bc0:	40026470 	.word	0x40026470

08002bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <MX_DMA_Init+0x68>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <MX_DMA_Init+0x68>)
 8002bd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <MX_DMA_Init+0x68>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <MX_DMA_Init+0x68>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <MX_DMA_Init+0x68>)
 8002bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <MX_DMA_Init+0x68>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2100      	movs	r1, #0
 8002c06:	200b      	movs	r0, #11
 8002c08:	f002 ffdd 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c0c:	200b      	movs	r0, #11
 8002c0e:	f002 fff6 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2100      	movs	r1, #0
 8002c16:	203c      	movs	r0, #60	; 0x3c
 8002c18:	f002 ffd5 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002c1c:	203c      	movs	r0, #60	; 0x3c
 8002c1e:	f002 ffee 	bl	8005bfe <HAL_NVIC_EnableIRQ>

}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <MX_DMA2D_Init+0x60>)
 8002c38:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c42:	2202      	movs	r2, #2
 8002c44:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c54:	2202      	movs	r2, #2
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002c64:	4809      	ldr	r0, [pc, #36]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c66:	f003 fbb3 	bl	80063d0 <HAL_DMA2D_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002c70:	f000 fce4 	bl	800363c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002c74:	2101      	movs	r1, #1
 8002c76:	4805      	ldr	r0, [pc, #20]	; (8002c8c <MX_DMA2D_Init+0x5c>)
 8002c78:	f003 fd08 	bl	800668c <HAL_DMA2D_ConfigLayer>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002c82:	f000 fcdb 	bl	800363c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200005c4 	.word	0x200005c4
 8002c90:	4002b000 	.word	0x4002b000

08002c94 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_DMA2D_MspInit+0x3c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_DMA2D_MspInit+0x40>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_DMA2D_MspInit+0x40>)
 8002cb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <HAL_DMA2D_MspInit+0x40>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	4002b000 	.word	0x4002b000
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
 8002cec:	615a      	str	r2, [r3, #20]
 8002cee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <MX_FMC_Init+0x94>)
 8002cf2:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <MX_FMC_Init+0x98>)
 8002cf4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <MX_FMC_Init+0x94>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <MX_FMC_Init+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <MX_FMC_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <MX_FMC_Init+0x94>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <MX_FMC_Init+0x94>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <MX_FMC_Init+0x94>)
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MX_FMC_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <MX_FMC_Init+0x94>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_FMC_Init+0x94>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_FMC_Init+0x94>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002d32:	2310      	movs	r3, #16
 8002d34:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8002d36:	2310      	movs	r3, #16
 8002d38:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002d3e:	2310      	movs	r3, #16
 8002d40:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002d42:	2310      	movs	r3, #16
 8002d44:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8002d46:	2310      	movs	r3, #16
 8002d48:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4806      	ldr	r0, [pc, #24]	; (8002d6c <MX_FMC_Init+0x94>)
 8002d54:	f005 fbb0 	bl	80084b8 <HAL_SDRAM_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002d5e:	f000 fc6d 	bl	800363c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002d62:	bf00      	nop
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000604 	.word	0x20000604
 8002d70:	a0000140 	.word	0xa0000140

08002d74 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002d88:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <HAL_FMC_MspInit+0x104>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d16f      	bne.n	8002e70 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <HAL_FMC_MspInit+0x104>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4b38      	ldr	r3, [pc, #224]	; (8002e7c <HAL_FMC_MspInit+0x108>)
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <HAL_FMC_MspInit+0x108>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6393      	str	r3, [r2, #56]	; 0x38
 8002da6:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <HAL_FMC_MspInit+0x108>)
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002db2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002db6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dc4:	230c      	movs	r3, #12
 8002dc6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	4619      	mov	r1, r3
 8002dcc:	482c      	ldr	r0, [pc, #176]	; (8002e80 <HAL_FMC_MspInit+0x10c>)
 8002dce:	f003 fd8b 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002de2:	230c      	movs	r3, #12
 8002de4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4826      	ldr	r0, [pc, #152]	; (8002e84 <HAL_FMC_MspInit+0x110>)
 8002dec:	f003 fd7c 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8002df0:	f248 1311 	movw	r3, #33041	; 0x8111
 8002df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e02:	230c      	movs	r3, #12
 8002e04:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	481f      	ldr	r0, [pc, #124]	; (8002e88 <HAL_FMC_MspInit+0x114>)
 8002e0c:	f003 fd6c 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002e10:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002e14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e22:	230c      	movs	r3, #12
 8002e24:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4818      	ldr	r0, [pc, #96]	; (8002e8c <HAL_FMC_MspInit+0x118>)
 8002e2c:	f003 fd5c 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8002e30:	f24c 0303 	movw	r3, #49155	; 0xc003
 8002e34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e42:	230c      	movs	r3, #12
 8002e44:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4811      	ldr	r0, [pc, #68]	; (8002e90 <HAL_FMC_MspInit+0x11c>)
 8002e4c:	f003 fd4c 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e50:	2360      	movs	r3, #96	; 0x60
 8002e52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e60:	230c      	movs	r3, #12
 8002e62:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	480a      	ldr	r0, [pc, #40]	; (8002e94 <HAL_FMC_MspInit+0x120>)
 8002e6a:	f003 fd3d 	bl	80068e8 <HAL_GPIO_Init>
 8002e6e:	e000      	b.n	8002e72 <HAL_FMC_MspInit+0xfe>
    return;
 8002e70:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	200000f0 	.word	0x200000f0
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40021400 	.word	0x40021400
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40021800 	.word	0x40021800
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40020c00 	.word	0x40020c00
 8002e94:	40020400 	.word	0x40020400

08002e98 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ea0:	f7ff ff68 	bl	8002d74 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	; 0x38
 8002eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
 8002ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	4b50      	ldr	r3, [pc, #320]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a4f      	ldr	r2, [pc, #316]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002ecc:	f043 0310 	orr.w	r3, r3, #16
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	4b49      	ldr	r3, [pc, #292]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4a48      	ldr	r2, [pc, #288]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002ee8:	f043 0320 	orr.w	r3, r3, #32
 8002eec:	6313      	str	r3, [r2, #48]	; 0x30
 8002eee:	4b46      	ldr	r3, [pc, #280]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	4b42      	ldr	r3, [pc, #264]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a41      	ldr	r2, [pc, #260]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a3a      	ldr	r2, [pc, #232]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a33      	ldr	r2, [pc, #204]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a2c      	ldr	r2, [pc, #176]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a25      	ldr	r2, [pc, #148]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b23      	ldr	r3, [pc, #140]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f90:	f043 0308 	orr.w	r3, r3, #8
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <MX_GPIO_Init+0x15c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f242 0104 	movw	r1, #8196	; 0x2004
 8002fa8:	4818      	ldr	r0, [pc, #96]	; (800300c <MX_GPIO_Init+0x160>)
 8002faa:	f003 ff6d 	bl	8006e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8002fae:	235c      	movs	r3, #92	; 0x5c
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4813      	ldr	r0, [pc, #76]	; (8003010 <MX_GPIO_Init+0x164>)
 8002fc2:	f003 fc91 	bl	80068e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fda:	4619      	mov	r1, r3
 8002fdc:	480b      	ldr	r0, [pc, #44]	; (800300c <MX_GPIO_Init+0x160>)
 8002fde:	f003 fc83 	bl	80068e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4804      	ldr	r0, [pc, #16]	; (800300c <MX_GPIO_Init+0x160>)
 8002ffc:	f003 fc74 	bl	80068e8 <HAL_GPIO_Init>

}
 8003000:	bf00      	nop
 8003002:	3738      	adds	r7, #56	; 0x38
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40023800 	.word	0x40023800
 800300c:	40021800 	.word	0x40021800
 8003010:	40021000 	.word	0x40021000

08003014 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <MX_I2C3_Init+0x74>)
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <MX_I2C3_Init+0x78>)
 800301c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <MX_I2C3_Init+0x74>)
 8003020:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <MX_I2C3_Init+0x7c>)
 8003022:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003024:	4b18      	ldr	r3, [pc, #96]	; (8003088 <MX_I2C3_Init+0x74>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <MX_I2C3_Init+0x74>)
 800302c:	2200      	movs	r2, #0
 800302e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <MX_I2C3_Init+0x74>)
 8003032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003036:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <MX_I2C3_Init+0x74>)
 800303a:	2200      	movs	r2, #0
 800303c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <MX_I2C3_Init+0x74>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <MX_I2C3_Init+0x74>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <MX_I2C3_Init+0x74>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003050:	480d      	ldr	r0, [pc, #52]	; (8003088 <MX_I2C3_Init+0x74>)
 8003052:	f003 ff33 	bl	8006ebc <HAL_I2C_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800305c:	f000 faee 	bl	800363c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003060:	2100      	movs	r1, #0
 8003062:	4809      	ldr	r0, [pc, #36]	; (8003088 <MX_I2C3_Init+0x74>)
 8003064:	f004 f86e 	bl	8007144 <HAL_I2CEx_ConfigAnalogFilter>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800306e:	f000 fae5 	bl	800363c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003072:	2100      	movs	r1, #0
 8003074:	4804      	ldr	r0, [pc, #16]	; (8003088 <MX_I2C3_Init+0x74>)
 8003076:	f004 f8a1 	bl	80071bc <HAL_I2CEx_ConfigDigitalFilter>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003080:	f000 fadc 	bl	800363c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000638 	.word	0x20000638
 800308c:	40005c00 	.word	0x40005c00
 8003090:	000186a0 	.word	0x000186a0

08003094 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a29      	ldr	r2, [pc, #164]	; (8003158 <HAL_I2C_MspInit+0xc4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d14b      	bne.n	800314e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_I2C_MspInit+0xc8>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a27      	ldr	r2, [pc, #156]	; (800315c <HAL_I2C_MspInit+0xc8>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <HAL_I2C_MspInit+0xc8>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b21      	ldr	r3, [pc, #132]	; (800315c <HAL_I2C_MspInit+0xc8>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a20      	ldr	r2, [pc, #128]	; (800315c <HAL_I2C_MspInit+0xc8>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b1e      	ldr	r3, [pc, #120]	; (800315c <HAL_I2C_MspInit+0xc8>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030f4:	2312      	movs	r3, #18
 80030f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fc:	2303      	movs	r3, #3
 80030fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003100:	2304      	movs	r3, #4
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	4619      	mov	r1, r3
 800310a:	4815      	ldr	r0, [pc, #84]	; (8003160 <HAL_I2C_MspInit+0xcc>)
 800310c:	f003 fbec 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003116:	2312      	movs	r3, #18
 8003118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311e:	2303      	movs	r3, #3
 8003120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003122:	2304      	movs	r3, #4
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003126:	f107 0314 	add.w	r3, r7, #20
 800312a:	4619      	mov	r1, r3
 800312c:	480d      	ldr	r0, [pc, #52]	; (8003164 <HAL_I2C_MspInit+0xd0>)
 800312e:	f003 fbdb 	bl	80068e8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_I2C_MspInit+0xc8>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a08      	ldr	r2, [pc, #32]	; (800315c <HAL_I2C_MspInit+0xc8>)
 800313c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_I2C_MspInit+0xc8>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800314e:	bf00      	nop
 8003150:	3728      	adds	r7, #40	; 0x28
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40005c00 	.word	0x40005c00
 800315c:	40023800 	.word	0x40023800
 8003160:	40020800 	.word	0x40020800
 8003164:	40020000 	.word	0x40020000

08003168 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b09a      	sub	sp, #104	; 0x68
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800316e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003172:	2234      	movs	r2, #52	; 0x34
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f007 f9bc 	bl	800a4f4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800317c:	463b      	mov	r3, r7
 800317e:	2234      	movs	r2, #52	; 0x34
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f007 f9b6 	bl	800a4f4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003188:	4b4e      	ldr	r3, [pc, #312]	; (80032c4 <MX_LTDC_Init+0x15c>)
 800318a:	4a4f      	ldr	r2, [pc, #316]	; (80032c8 <MX_LTDC_Init+0x160>)
 800318c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800318e:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <MX_LTDC_Init+0x15c>)
 8003190:	2200      	movs	r2, #0
 8003192:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <MX_LTDC_Init+0x15c>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <MX_LTDC_Init+0x15c>)
 800319c:	2200      	movs	r2, #0
 800319e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80031a0:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80031a6:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80031ac:	4b45      	ldr	r3, [pc, #276]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031ae:	2203      	movs	r2, #3
 80031b0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80031b2:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031b4:	220e      	movs	r2, #14
 80031b6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80031b8:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031ba:	2205      	movs	r2, #5
 80031bc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031c0:	f240 228e 	movw	r2, #654	; 0x28e
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80031c6:	4b3f      	ldr	r3, [pc, #252]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031c8:	f240 12e5 	movw	r2, #485	; 0x1e5
 80031cc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80031ce:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031d0:	f44f 7225 	mov.w	r2, #660	; 0x294
 80031d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80031d6:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031d8:	f240 12e7 	movw	r2, #487	; 0x1e7
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80031de:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80031e6:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80031ee:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80031f6:	4833      	ldr	r0, [pc, #204]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80031f8:	f004 f820 	bl	800723c <HAL_LTDC_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003202:	f000 fa1b 	bl	800363c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003216:	2300      	movs	r3, #0
 8003218:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003226:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003228:	2305      	movs	r3, #5
 800322a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800324a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800324e:	2200      	movs	r2, #0
 8003250:	4619      	mov	r1, r3
 8003252:	481c      	ldr	r0, [pc, #112]	; (80032c4 <MX_LTDC_Init+0x15c>)
 8003254:	f004 f8c2 	bl	80073dc <HAL_LTDC_ConfigLayer>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800325e:	f000 f9ed 	bl	800363c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800327e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003282:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003284:	2305      	movs	r3, #5
 8003286:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80032a6:	463b      	mov	r3, r7
 80032a8:	2201      	movs	r2, #1
 80032aa:	4619      	mov	r1, r3
 80032ac:	4805      	ldr	r0, [pc, #20]	; (80032c4 <MX_LTDC_Init+0x15c>)
 80032ae:	f004 f895 	bl	80073dc <HAL_LTDC_ConfigLayer>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80032b8:	f000 f9c0 	bl	800363c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80032bc:	bf00      	nop
 80032be:	3768      	adds	r7, #104	; 0x68
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	2000068c 	.word	0x2000068c
 80032c8:	40016800 	.word	0x40016800

080032cc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b09a      	sub	sp, #104	; 0x68
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e8:	2230      	movs	r2, #48	; 0x30
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f007 f901 	bl	800a4f4 <memset>
  if(ltdcHandle->Instance==LTDC)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a78      	ldr	r2, [pc, #480]	; (80034d8 <HAL_LTDC_MspInit+0x20c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	f040 80e9 	bne.w	80034d0 <HAL_LTDC_MspInit+0x204>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80032fe:	2308      	movs	r3, #8
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003302:	2332      	movs	r3, #50	; 0x32
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003306:	2304      	movs	r3, #4
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800330a:	2300      	movs	r3, #0
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800330e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003312:	4618      	mov	r0, r3
 8003314:	f004 ff12 	bl	800813c <HAL_RCCEx_PeriphCLKConfig>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800331e:	f000 f98d 	bl	800363c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	623b      	str	r3, [r7, #32]
 8003326:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a6c      	ldr	r2, [pc, #432]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 800332c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003348:	f043 0320 	orr.w	r3, r3, #32
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	4b5f      	ldr	r3, [pc, #380]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a5e      	ldr	r2, [pc, #376]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b5c      	ldr	r3, [pc, #368]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	4b58      	ldr	r3, [pc, #352]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a57      	ldr	r2, [pc, #348]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b55      	ldr	r3, [pc, #340]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a50      	ldr	r2, [pc, #320]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 800339c:	f043 0310 	orr.w	r3, r3, #16
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a49      	ldr	r2, [pc, #292]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 80033b8:	f043 0308 	orr.w	r3, r3, #8
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	4b43      	ldr	r3, [pc, #268]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a42      	ldr	r2, [pc, #264]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b40      	ldr	r3, [pc, #256]	; (80034dc <HAL_LTDC_MspInit+0x210>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> LTDC_R5
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f4:	2300      	movs	r3, #0
 80033f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033f8:	230e      	movs	r3, #14
 80033fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003400:	4619      	mov	r1, r3
 8003402:	4837      	ldr	r0, [pc, #220]	; (80034e0 <HAL_LTDC_MspInit+0x214>)
 8003404:	f003 fa70 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8003408:	f641 0358 	movw	r3, #6232	; 0x1858
 800340c:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	2302      	movs	r3, #2
 8003410:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	2300      	movs	r3, #0
 8003418:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800341a:	230e      	movs	r3, #14
 800341c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003422:	4619      	mov	r1, r3
 8003424:	482f      	ldr	r0, [pc, #188]	; (80034e4 <HAL_LTDC_MspInit+0x218>)
 8003426:	f003 fa5f 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800342a:	2303      	movs	r3, #3
 800342c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342e:	2302      	movs	r3, #2
 8003430:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800343a:	2309      	movs	r3, #9
 800343c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003442:	4619      	mov	r1, r3
 8003444:	4828      	ldr	r0, [pc, #160]	; (80034e8 <HAL_LTDC_MspInit+0x21c>)
 8003446:	f003 fa4f 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800344a:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 800344e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800345c:	230e      	movs	r3, #14
 800345e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003460:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003464:	4619      	mov	r1, r3
 8003466:	4821      	ldr	r0, [pc, #132]	; (80034ec <HAL_LTDC_MspInit+0x220>)
 8003468:	f003 fa3e 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800346c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003470:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347a:	2300      	movs	r3, #0
 800347c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800347e:	230e      	movs	r3, #14
 8003480:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003482:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003486:	4619      	mov	r1, r3
 8003488:	4817      	ldr	r0, [pc, #92]	; (80034e8 <HAL_LTDC_MspInit+0x21c>)
 800348a:	f003 fa2d 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800348e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003492:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349c:	2300      	movs	r3, #0
 800349e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034a0:	230e      	movs	r3, #14
 80034a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034a8:	4619      	mov	r1, r3
 80034aa:	4811      	ldr	r0, [pc, #68]	; (80034f0 <HAL_LTDC_MspInit+0x224>)
 80034ac:	f003 fa1c 	bl	80068e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034b0:	23c0      	movs	r3, #192	; 0xc0
 80034b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	2300      	movs	r3, #0
 80034be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034c0:	230e      	movs	r3, #14
 80034c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034c8:	4619      	mov	r1, r3
 80034ca:	480a      	ldr	r0, [pc, #40]	; (80034f4 <HAL_LTDC_MspInit+0x228>)
 80034cc:	f003 fa0c 	bl	80068e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80034d0:	bf00      	nop
 80034d2:	3768      	adds	r7, #104	; 0x68
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40016800 	.word	0x40016800
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40021400 	.word	0x40021400
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40020400 	.word	0x40020400
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40020c00 	.word	0x40020c00
 80034f4:	40020800 	.word	0x40020800

080034f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034fc:	f001 fda8 	bl	8005050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003500:	f000 f82c 	bl	800355c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003504:	f7ff fcd2 	bl	8002eac <MX_GPIO_Init>

  MX_DMA2D_Init();
 8003508:	f7ff fb92 	bl	8002c30 <MX_DMA2D_Init>
  MX_FMC_Init();
 800350c:	f7ff fbe4 	bl	8002cd8 <MX_FMC_Init>
  MX_I2C3_Init();
 8003510:	f7ff fd80 	bl	8003014 <MX_I2C3_Init>
  MX_SPI5_Init();
 8003514:	f000 f898 	bl	8003648 <MX_SPI5_Init>
  MX_LTDC_Init();
 8003518:	f7ff fe26 	bl	8003168 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */

  MDL_buttons_init();
 800351c:	f7fd fc22 	bl	8000d64 <MDL_buttons_init>
  MDL_dispenser_init();
 8003520:	f7fd fcfe 	bl	8000f20 <MDL_dispenser_init>

  MDL_LCD_Init(); //funkcija za mjenjanje ledica (MDL_leds_next_round) ne mijenja boju ledice nakon inicijalizacije LCD-a
 8003524:	f7fd ff3a 	bl	800139c <MDL_LCD_Init>

  MX_DMA_Init();
 8003528:	f7ff fb4c 	bl	8002bc4 <MX_DMA_Init>
   MX_ADC1_Init();
 800352c:	f7ff fa1e 	bl	800296c <MX_ADC1_Init>
   MX_TIM4_Init();
 8003530:	f000 fa64 	bl	80039fc <MX_TIM4_Init>

   MDL_sensors_init();
 8003534:	f7ff f872 	bl	800261c <MDL_sensors_init>
   MDL_leds_init();
 8003538:	f7fe fea4 	bl	8002284 <MDL_leds_init>

   MDL_LCD_Bttn_Pressed(START);
 800353c:	2000      	movs	r0, #0
 800353e:	f7fd fd8b 	bl	8001058 <MDL_LCD_Bttn_Pressed>
   MDL_LCD_Bttn_Pressed(START);
 8003542:	2000      	movs	r0, #0
 8003544:	f7fd fd88 	bl	8001058 <MDL_LCD_Bttn_Pressed>
   MDL_LCD_Hit_Update(1000);
 8003548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800354c:	f7fd fe6e 	bl	800122c <MDL_LCD_Hit_Update>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		MDL_sensors_handler();
 8003550:	f7ff f88a 	bl	8002668 <MDL_sensors_handler>
		MDL_Buttons_Handler();
 8003554:	f7fd fcd0 	bl	8000ef8 <MDL_Buttons_Handler>
		MDL_sensors_handler();
 8003558:	e7fa      	b.n	8003550 <main+0x58>
	...

0800355c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b094      	sub	sp, #80	; 0x50
 8003560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003562:	f107 0320 	add.w	r3, r7, #32
 8003566:	2230      	movs	r2, #48	; 0x30
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f006 ffc2 	bl	800a4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <SystemClock_Config+0xd8>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a2a      	ldr	r2, [pc, #168]	; (8003634 <SystemClock_Config+0xd8>)
 800358a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358e:	6413      	str	r3, [r2, #64]	; 0x40
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <SystemClock_Config+0xd8>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800359c:	2300      	movs	r3, #0
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	4b25      	ldr	r3, [pc, #148]	; (8003638 <SystemClock_Config+0xdc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <SystemClock_Config+0xdc>)
 80035a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b22      	ldr	r3, [pc, #136]	; (8003638 <SystemClock_Config+0xdc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80035bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035c2:	2302      	movs	r3, #2
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80035cc:	2304      	movs	r3, #4
 80035ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80035d0:	23b4      	movs	r3, #180	; 0xb4
 80035d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035d4:	2302      	movs	r3, #2
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035d8:	2304      	movs	r3, #4
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035dc:	f107 0320 	add.w	r3, r7, #32
 80035e0:	4618      	mov	r0, r3
 80035e2:	f004 f94b 	bl	800787c <HAL_RCC_OscConfig>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035ec:	f000 f826 	bl	800363c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80035f0:	f004 f8f4 	bl	80077dc <HAL_PWREx_EnableOverDrive>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80035fa:	f000 f81f 	bl	800363c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035fe:	230f      	movs	r3, #15
 8003600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003602:	2302      	movs	r3, #2
 8003604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800360a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800360e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003616:	f107 030c 	add.w	r3, r7, #12
 800361a:	2105      	movs	r1, #5
 800361c:	4618      	mov	r0, r3
 800361e:	f004 fba5 	bl	8007d6c <HAL_RCC_ClockConfig>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003628:	f000 f808 	bl	800363c <Error_Handler>
  }
}
 800362c:	bf00      	nop
 800362e:	3750      	adds	r7, #80	; 0x50
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	40007000 	.word	0x40007000

0800363c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003640:	b672      	cpsid	i
}
 8003642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003644:	e7fe      	b.n	8003644 <Error_Handler+0x8>
	...

08003648 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800364c:	4b17      	ldr	r3, [pc, #92]	; (80036ac <MX_SPI5_Init+0x64>)
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <MX_SPI5_Init+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003652:	4b16      	ldr	r3, [pc, #88]	; (80036ac <MX_SPI5_Init+0x64>)
 8003654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003658:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <MX_SPI5_Init+0x64>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <MX_SPI5_Init+0x64>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <MX_SPI5_Init+0x64>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <MX_SPI5_Init+0x64>)
 800366e:	2200      	movs	r2, #0
 8003670:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <MX_SPI5_Init+0x64>)
 8003674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003678:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <MX_SPI5_Init+0x64>)
 800367c:	2200      	movs	r2, #0
 800367e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <MX_SPI5_Init+0x64>)
 8003682:	2200      	movs	r2, #0
 8003684:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <MX_SPI5_Init+0x64>)
 8003688:	2200      	movs	r2, #0
 800368a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800368c:	4b07      	ldr	r3, [pc, #28]	; (80036ac <MX_SPI5_Init+0x64>)
 800368e:	2200      	movs	r2, #0
 8003690:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <MX_SPI5_Init+0x64>)
 8003694:	220a      	movs	r2, #10
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003698:	4804      	ldr	r0, [pc, #16]	; (80036ac <MX_SPI5_Init+0x64>)
 800369a:	f004 ff9e 	bl	80085da <HAL_SPI_Init>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80036a4:	f7ff ffca 	bl	800363c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000734 	.word	0x20000734
 80036b0:	40015000 	.word	0x40015000

080036b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_SPI_MspInit+0x84>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d12c      	bne.n	8003730 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <HAL_SPI_MspInit+0x88>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	4a17      	ldr	r2, [pc, #92]	; (800373c <HAL_SPI_MspInit+0x88>)
 80036e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e4:	6453      	str	r3, [r2, #68]	; 0x44
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_SPI_MspInit+0x88>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_SPI_MspInit+0x88>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	4a10      	ldr	r2, [pc, #64]	; (800373c <HAL_SPI_MspInit+0x88>)
 80036fc:	f043 0320 	orr.w	r3, r3, #32
 8003700:	6313      	str	r3, [r2, #48]	; 0x30
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <HAL_SPI_MspInit+0x88>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800370e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003714:	2302      	movs	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371c:	2303      	movs	r3, #3
 800371e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003720:	2305      	movs	r3, #5
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	4619      	mov	r1, r3
 800372a:	4805      	ldr	r0, [pc, #20]	; (8003740 <HAL_SPI_MspInit+0x8c>)
 800372c:	f003 f8dc 	bl	80068e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003730:	bf00      	nop
 8003732:	3728      	adds	r7, #40	; 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40015000 	.word	0x40015000
 800373c:	40023800 	.word	0x40023800
 8003740:	40021400 	.word	0x40021400

08003744 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a08      	ldr	r2, [pc, #32]	; (8003774 <HAL_SPI_MspDeInit+0x30>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d10a      	bne.n	800376c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_SPI_MspDeInit+0x34>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_SPI_MspDeInit+0x34>)
 800375c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003760:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8003762:	f44f 7160 	mov.w	r1, #896	; 0x380
 8003766:	4805      	ldr	r0, [pc, #20]	; (800377c <HAL_SPI_MspDeInit+0x38>)
 8003768:	f003 fa6a 	bl	8006c40 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40015000 	.word	0x40015000
 8003778:	40023800 	.word	0x40023800
 800377c:	40021400 	.word	0x40021400

08003780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_MspInit+0x4c>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	4a0f      	ldr	r2, [pc, #60]	; (80037cc <HAL_MspInit+0x4c>)
 8003790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003794:	6453      	str	r3, [r2, #68]	; 0x44
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_MspInit+0x4c>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_MspInit+0x4c>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <HAL_MspInit+0x4c>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_MspInit+0x4c>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800

080037d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037d4:	e7fe      	b.n	80037d4 <NMI_Handler+0x4>

080037d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037da:	e7fe      	b.n	80037da <HardFault_Handler+0x4>

080037dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037e0:	e7fe      	b.n	80037e0 <MemManage_Handler+0x4>

080037e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e6:	e7fe      	b.n	80037e6 <BusFault_Handler+0x4>

080037e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037ec:	e7fe      	b.n	80037ec <UsageFault_Handler+0x4>

080037ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800381c:	f001 fc6a 	bl	80050f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}

08003824 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <DMA1_Stream0_IRQHandler+0x10>)
 800382a:	f002 fb67 	bl	8005efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200007d4 	.word	0x200007d4

08003838 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800383c:	4802      	ldr	r0, [pc, #8]	; (8003848 <DMA2_Stream4_IRQHandler+0x10>)
 800383e:	f002 fb5d 	bl	8005efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000564 	.word	0x20000564

0800384c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
	return 1;
 8003850:	2301      	movs	r3, #1
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <_kill>:

int _kill(int pid, int sig)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003866:	f006 fe1b 	bl	800a4a0 <__errno>
 800386a:	4603      	mov	r3, r0
 800386c:	2216      	movs	r2, #22
 800386e:	601a      	str	r2, [r3, #0]
	return -1;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_exit>:

void _exit (int status)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ffe7 	bl	800385c <_kill>
	while (1) {}		/* Make sure we hang here */
 800388e:	e7fe      	b.n	800388e <_exit+0x12>

08003890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e00a      	b.n	80038b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038a2:	f3af 8000 	nop.w
 80038a6:	4601      	mov	r1, r0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	60ba      	str	r2, [r7, #8]
 80038ae:	b2ca      	uxtb	r2, r1
 80038b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3301      	adds	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	dbf0      	blt.n	80038a2 <_read+0x12>
	}

return len;
 80038c0:	687b      	ldr	r3, [r7, #4]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e009      	b.n	80038f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	60ba      	str	r2, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3301      	adds	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	dbf1      	blt.n	80038dc <_write+0x12>
	}
	return len;
 80038f8:	687b      	ldr	r3, [r7, #4]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <_close>:

int _close(int file)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
	return -1;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800392a:	605a      	str	r2, [r3, #4]
	return 0;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <_isatty>:

int _isatty(int file)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
	return 1;
 8003942:	2301      	movs	r3, #1
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
	return 0;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <_sbrk+0x5c>)
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <_sbrk+0x60>)
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <_sbrk+0x64>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <_sbrk+0x64>)
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <_sbrk+0x68>)
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <_sbrk+0x64>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	429a      	cmp	r2, r3
 800399a:	d207      	bcs.n	80039ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800399c:	f006 fd80 	bl	800a4a0 <__errno>
 80039a0:	4603      	mov	r3, r0
 80039a2:	220c      	movs	r2, #12
 80039a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295
 80039aa:	e009      	b.n	80039c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <_sbrk+0x64>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <_sbrk+0x64>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	4a05      	ldr	r2, [pc, #20]	; (80039d0 <_sbrk+0x64>)
 80039bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20030000 	.word	0x20030000
 80039cc:	00000400 	.word	0x00000400
 80039d0:	200000f4 	.word	0x200000f4
 80039d4:	200008f8 	.word	0x200008f8

080039d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <SystemInit+0x20>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <SystemInit+0x20>)
 80039e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08e      	sub	sp, #56	; 0x38
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a10:	f107 0320 	add.w	r3, r7, #32
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
 8003a28:	615a      	str	r2, [r3, #20]
 8003a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ae4 <MX_TIM4_Init+0xe8>)
 8003a30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003a32:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a38:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 112-1;
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a40:	226f      	movs	r2, #111	; 0x6f
 8003a42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a44:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a4a:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a50:	4823      	ldr	r0, [pc, #140]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a52:	f005 fba1 	bl	8009198 <HAL_TIM_Base_Init>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8003a5c:	f7ff fdee 	bl	800363c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	481c      	ldr	r0, [pc, #112]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a6e:	f005 fec5 	bl	80097fc <HAL_TIM_ConfigClockSource>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8003a78:	f7ff fde0 	bl	800363c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a7c:	4818      	ldr	r0, [pc, #96]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a7e:	f005 fbda 	bl	8009236 <HAL_TIM_PWM_Init>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8003a88:	f7ff fdd8 	bl	800363c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a94:	f107 0320 	add.w	r3, r7, #32
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4811      	ldr	r0, [pc, #68]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003a9c:	f006 fb6a 	bl	800a174 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8003aa6:	f7ff fdc9 	bl	800363c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aaa:	2360      	movs	r3, #96	; 0x60
 8003aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	2200      	movs	r2, #0
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003ac2:	f005 fdd9 	bl	8009678 <HAL_TIM_PWM_ConfigChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8003acc:	f7ff fdb6 	bl	800363c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003ad0:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <MX_TIM4_Init+0xe4>)
 8003ad2:	f000 f85d 	bl	8003b90 <HAL_TIM_MspPostInit>

}
 8003ad6:	bf00      	nop
 8003ad8:	3738      	adds	r7, #56	; 0x38
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2000078c 	.word	0x2000078c
 8003ae4:	40000800 	.word	0x40000800

08003ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <HAL_TIM_Base_MspInit+0x98>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d13d      	bne.n	8003b76 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <HAL_TIM_Base_MspInit+0x9c>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a20      	ldr	r2, [pc, #128]	; (8003b84 <HAL_TIM_Base_MspInit+0x9c>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <HAL_TIM_Base_MspInit+0x9c>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8003b16:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b18:	4a1c      	ldr	r2, [pc, #112]	; (8003b8c <HAL_TIM_Base_MspInit+0xa4>)
 8003b1a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b22:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b24:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b2a:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003b30:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b36:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b3e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b46:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8003b5a:	480b      	ldr	r0, [pc, #44]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b5c:	f002 f86a 	bl	8005c34 <HAL_DMA_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003b66:	f7ff fd69 	bl	800363c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a06      	ldr	r2, [pc, #24]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b70:	4a05      	ldr	r2, [pc, #20]	; (8003b88 <HAL_TIM_Base_MspInit+0xa0>)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40023800 	.word	0x40023800
 8003b88:	200007d4 	.word	0x200007d4
 8003b8c:	40026010 	.word	0x40026010

08003b90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b98:	f107 030c 	add.w	r3, r7, #12
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <HAL_TIM_MspPostInit+0x68>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d11e      	bne.n	8003bf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_TIM_MspPostInit+0x6c>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	4a10      	ldr	r2, [pc, #64]	; (8003bfc <HAL_TIM_MspPostInit+0x6c>)
 8003bbc:	f043 0308 	orr.w	r3, r3, #8
 8003bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <HAL_TIM_MspPostInit+0x6c>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003be0:	2302      	movs	r3, #2
 8003be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	4619      	mov	r1, r3
 8003bea:	4805      	ldr	r0, [pc, #20]	; (8003c00 <HAL_TIM_MspPostInit+0x70>)
 8003bec:	f002 fe7c 	bl	80068e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003bf0:	bf00      	nop
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40020c00 	.word	0x40020c00

08003c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c3c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c08:	480d      	ldr	r0, [pc, #52]	; (8003c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c0a:	490e      	ldr	r1, [pc, #56]	; (8003c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c10:	e002      	b.n	8003c18 <LoopCopyDataInit>

08003c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c16:	3304      	adds	r3, #4

08003c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c1c:	d3f9      	bcc.n	8003c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c1e:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c20:	4c0b      	ldr	r4, [pc, #44]	; (8003c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c24:	e001      	b.n	8003c2a <LoopFillZerobss>

08003c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c28:	3204      	adds	r2, #4

08003c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c2c:	d3fb      	bcc.n	8003c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c2e:	f7ff fed3 	bl	80039d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c32:	f006 fc3b 	bl	800a4ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c36:	f7ff fc5f 	bl	80034f8 <main>
  bx  lr    
 8003c3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003c3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c44:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8003c48:	0800f540 	.word	0x0800f540
  ldr r2, =_sbss
 8003c4c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8003c50:	200008f4 	.word	0x200008f4

08003c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c54:	e7fe      	b.n	8003c54 <ADC_IRQHandler>

08003c56 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003c5a:	f000 fa5d 	bl	8004118 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8003c5e:	20ca      	movs	r0, #202	; 0xca
 8003c60:	f000 f95d 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003c64:	20c3      	movs	r0, #195	; 0xc3
 8003c66:	f000 f967 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8003c6a:	2008      	movs	r0, #8
 8003c6c:	f000 f964 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8003c70:	2050      	movs	r0, #80	; 0x50
 8003c72:	f000 f961 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8003c76:	20cf      	movs	r0, #207	; 0xcf
 8003c78:	f000 f951 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f000 f95b 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8003c82:	20c1      	movs	r0, #193	; 0xc1
 8003c84:	f000 f958 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8003c88:	2030      	movs	r0, #48	; 0x30
 8003c8a:	f000 f955 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8003c8e:	20ed      	movs	r0, #237	; 0xed
 8003c90:	f000 f945 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8003c94:	2064      	movs	r0, #100	; 0x64
 8003c96:	f000 f94f 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8003c9a:	2003      	movs	r0, #3
 8003c9c:	f000 f94c 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003ca0:	2012      	movs	r0, #18
 8003ca2:	f000 f949 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8003ca6:	2081      	movs	r0, #129	; 0x81
 8003ca8:	f000 f946 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8003cac:	20e8      	movs	r0, #232	; 0xe8
 8003cae:	f000 f936 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8003cb2:	2085      	movs	r0, #133	; 0x85
 8003cb4:	f000 f940 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f000 f93d 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003cbe:	2078      	movs	r0, #120	; 0x78
 8003cc0:	f000 f93a 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8003cc4:	20cb      	movs	r0, #203	; 0xcb
 8003cc6:	f000 f92a 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8003cca:	2039      	movs	r0, #57	; 0x39
 8003ccc:	f000 f934 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8003cd0:	202c      	movs	r0, #44	; 0x2c
 8003cd2:	f000 f931 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f000 f92e 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8003cdc:	2034      	movs	r0, #52	; 0x34
 8003cde:	f000 f92b 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8003ce2:	2002      	movs	r0, #2
 8003ce4:	f000 f928 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8003ce8:	20f7      	movs	r0, #247	; 0xf7
 8003cea:	f000 f918 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8003cee:	2020      	movs	r0, #32
 8003cf0:	f000 f922 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8003cf4:	20ea      	movs	r0, #234	; 0xea
 8003cf6:	f000 f912 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f000 f91c 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003d00:	2000      	movs	r0, #0
 8003d02:	f000 f919 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8003d06:	20b1      	movs	r0, #177	; 0xb1
 8003d08:	f000 f909 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f000 f913 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003d12:	201b      	movs	r0, #27
 8003d14:	f000 f910 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003d18:	20b6      	movs	r0, #182	; 0xb6
 8003d1a:	f000 f900 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003d1e:	200a      	movs	r0, #10
 8003d20:	f000 f90a 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8003d24:	20a2      	movs	r0, #162	; 0xa2
 8003d26:	f000 f907 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8003d2a:	20c0      	movs	r0, #192	; 0xc0
 8003d2c:	f000 f8f7 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003d30:	2010      	movs	r0, #16
 8003d32:	f000 f901 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8003d36:	20c1      	movs	r0, #193	; 0xc1
 8003d38:	f000 f8f1 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003d3c:	2010      	movs	r0, #16
 8003d3e:	f000 f8fb 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8003d42:	20c5      	movs	r0, #197	; 0xc5
 8003d44:	f000 f8eb 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8003d48:	2045      	movs	r0, #69	; 0x45
 8003d4a:	f000 f8f5 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8003d4e:	2015      	movs	r0, #21
 8003d50:	f000 f8f2 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003d54:	20c7      	movs	r0, #199	; 0xc7
 8003d56:	f000 f8e2 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8003d5a:	2090      	movs	r0, #144	; 0x90
 8003d5c:	f000 f8ec 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003d60:	2036      	movs	r0, #54	; 0x36
 8003d62:	f000 f8dc 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003d66:	20c8      	movs	r0, #200	; 0xc8
 8003d68:	f000 f8e6 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003d6c:	20f2      	movs	r0, #242	; 0xf2
 8003d6e:	f000 f8d6 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003d72:	2000      	movs	r0, #0
 8003d74:	f000 f8e0 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8003d78:	20b0      	movs	r0, #176	; 0xb0
 8003d7a:	f000 f8d0 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003d7e:	20c2      	movs	r0, #194	; 0xc2
 8003d80:	f000 f8da 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003d84:	20b6      	movs	r0, #182	; 0xb6
 8003d86:	f000 f8ca 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003d8a:	200a      	movs	r0, #10
 8003d8c:	f000 f8d4 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003d90:	20a7      	movs	r0, #167	; 0xa7
 8003d92:	f000 f8d1 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8003d96:	2027      	movs	r0, #39	; 0x27
 8003d98:	f000 f8ce 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003d9c:	2004      	movs	r0, #4
 8003d9e:	f000 f8cb 	bl	8003f38 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003da2:	202a      	movs	r0, #42	; 0x2a
 8003da4:	f000 f8bb 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f000 f8c5 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003dae:	2000      	movs	r0, #0
 8003db0:	f000 f8c2 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003db4:	2000      	movs	r0, #0
 8003db6:	f000 f8bf 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8003dba:	20ef      	movs	r0, #239	; 0xef
 8003dbc:	f000 f8bc 	bl	8003f38 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003dc0:	202b      	movs	r0, #43	; 0x2b
 8003dc2:	f000 f8ac 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f000 f8b6 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f000 f8b3 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f000 f8b0 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8003dd8:	203f      	movs	r0, #63	; 0x3f
 8003dda:	f000 f8ad 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003dde:	20f6      	movs	r0, #246	; 0xf6
 8003de0:	f000 f89d 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003de4:	2001      	movs	r0, #1
 8003de6:	f000 f8a7 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003dea:	2000      	movs	r0, #0
 8003dec:	f000 f8a4 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003df0:	2006      	movs	r0, #6
 8003df2:	f000 f8a1 	bl	8003f38 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8003df6:	202c      	movs	r0, #44	; 0x2c
 8003df8:	f000 f891 	bl	8003f1e <ili9341_WriteReg>
  LCD_Delay(200);
 8003dfc:	20c8      	movs	r0, #200	; 0xc8
 8003dfe:	f000 fa79 	bl	80042f4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8003e02:	2026      	movs	r0, #38	; 0x26
 8003e04:	f000 f88b 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f000 f895 	bl	8003f38 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8003e0e:	20e0      	movs	r0, #224	; 0xe0
 8003e10:	f000 f885 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003e14:	200f      	movs	r0, #15
 8003e16:	f000 f88f 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8003e1a:	2029      	movs	r0, #41	; 0x29
 8003e1c:	f000 f88c 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8003e20:	2024      	movs	r0, #36	; 0x24
 8003e22:	f000 f889 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003e26:	200c      	movs	r0, #12
 8003e28:	f000 f886 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8003e2c:	200e      	movs	r0, #14
 8003e2e:	f000 f883 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003e32:	2009      	movs	r0, #9
 8003e34:	f000 f880 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8003e38:	204e      	movs	r0, #78	; 0x4e
 8003e3a:	f000 f87d 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003e3e:	2078      	movs	r0, #120	; 0x78
 8003e40:	f000 f87a 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003e44:	203c      	movs	r0, #60	; 0x3c
 8003e46:	f000 f877 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003e4a:	2009      	movs	r0, #9
 8003e4c:	f000 f874 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003e50:	2013      	movs	r0, #19
 8003e52:	f000 f871 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003e56:	2005      	movs	r0, #5
 8003e58:	f000 f86e 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003e5c:	2017      	movs	r0, #23
 8003e5e:	f000 f86b 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003e62:	2011      	movs	r0, #17
 8003e64:	f000 f868 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f000 f865 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003e6e:	20e1      	movs	r0, #225	; 0xe1
 8003e70:	f000 f855 	bl	8003f1e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f000 f85f 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8003e7a:	2016      	movs	r0, #22
 8003e7c:	f000 f85c 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003e80:	201b      	movs	r0, #27
 8003e82:	f000 f859 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003e86:	2004      	movs	r0, #4
 8003e88:	f000 f856 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003e8c:	2011      	movs	r0, #17
 8003e8e:	f000 f853 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003e92:	2007      	movs	r0, #7
 8003e94:	f000 f850 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8003e98:	2031      	movs	r0, #49	; 0x31
 8003e9a:	f000 f84d 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003e9e:	2033      	movs	r0, #51	; 0x33
 8003ea0:	f000 f84a 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003ea4:	2042      	movs	r0, #66	; 0x42
 8003ea6:	f000 f847 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003eaa:	2005      	movs	r0, #5
 8003eac:	f000 f844 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003eb0:	200c      	movs	r0, #12
 8003eb2:	f000 f841 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8003eb6:	200a      	movs	r0, #10
 8003eb8:	f000 f83e 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003ebc:	2028      	movs	r0, #40	; 0x28
 8003ebe:	f000 f83b 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003ec2:	202f      	movs	r0, #47	; 0x2f
 8003ec4:	f000 f838 	bl	8003f38 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8003ec8:	200f      	movs	r0, #15
 8003eca:	f000 f835 	bl	8003f38 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003ece:	2011      	movs	r0, #17
 8003ed0:	f000 f825 	bl	8003f1e <ili9341_WriteReg>
  LCD_Delay(200);
 8003ed4:	20c8      	movs	r0, #200	; 0xc8
 8003ed6:	f000 fa0d 	bl	80042f4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003eda:	2029      	movs	r0, #41	; 0x29
 8003edc:	f000 f81f 	bl	8003f1e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003ee0:	202c      	movs	r0, #44	; 0x2c
 8003ee2:	f000 f81c 	bl	8003f1e <ili9341_WriteReg>
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003eee:	f000 f913 	bl	8004118 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8003ef2:	2103      	movs	r1, #3
 8003ef4:	20d3      	movs	r0, #211	; 0xd3
 8003ef6:	f000 f82c 	bl	8003f52 <ili9341_ReadData>
 8003efa:	4603      	mov	r3, r0
 8003efc:	b29b      	uxth	r3, r3
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003f06:	2029      	movs	r0, #41	; 0x29
 8003f08:	f000 f809 	bl	8003f1e <ili9341_WriteReg>
}
 8003f0c:	bf00      	nop
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8003f14:	2028      	movs	r0, #40	; 0x28
 8003f16:	f000 f802 	bl	8003f1e <ili9341_WriteReg>
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f98e 	bl	800424c <LCD_IO_WriteReg>
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f95f 	bl	8004208 <LCD_IO_WriteData>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	460a      	mov	r2, r1
 8003f5c:	80fb      	strh	r3, [r7, #6]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003f62:	797a      	ldrb	r2, [r7, #5]
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f991 	bl	8004290 <LCD_IO_ReadData>
 8003f6e:	4603      	mov	r3, r0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003f7c:	23f0      	movs	r3, #240	; 0xf0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003f8c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003fa0:	4819      	ldr	r0, [pc, #100]	; (8004008 <SPIx_Init+0x6c>)
 8003fa2:	f004 ffba 	bl	8008f1a <HAL_SPI_GetState>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d12b      	bne.n	8004004 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003fac:	4b16      	ldr	r3, [pc, #88]	; (8004008 <SPIx_Init+0x6c>)
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <SPIx_Init+0x70>)
 8003fb0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <SPIx_Init+0x6c>)
 8003fb4:	2218      	movs	r2, #24
 8003fb6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003fb8:	4b13      	ldr	r3, [pc, #76]	; (8004008 <SPIx_Init+0x6c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <SPIx_Init+0x6c>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003fc4:	4b10      	ldr	r3, [pc, #64]	; (8004008 <SPIx_Init+0x6c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003fca:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <SPIx_Init+0x6c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <SPIx_Init+0x6c>)
 8003fd2:	2207      	movs	r2, #7
 8003fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <SPIx_Init+0x6c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <SPIx_Init+0x6c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <SPIx_Init+0x6c>)
 8003fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <SPIx_Init+0x6c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003ff0:	4b05      	ldr	r3, [pc, #20]	; (8004008 <SPIx_Init+0x6c>)
 8003ff2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ff6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003ff8:	4803      	ldr	r0, [pc, #12]	; (8004008 <SPIx_Init+0x6c>)
 8003ffa:	f000 f853 	bl	80040a4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003ffe:	4802      	ldr	r0, [pc, #8]	; (8004008 <SPIx_Init+0x6c>)
 8004000:	f004 faeb 	bl	80085da <HAL_SPI_Init>
  } 
}
 8004004:	bf00      	nop
 8004006:	bd80      	pop	{r7, pc}
 8004008:	200000f8 	.word	0x200000f8
 800400c:	40015000 	.word	0x40015000

08004010 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	b29a      	uxth	r2, r3
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <SPIx_Read+0x38>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f107 0108 	add.w	r1, r7, #8
 800402a:	4808      	ldr	r0, [pc, #32]	; (800404c <SPIx_Read+0x3c>)
 800402c:	f004 fcc2 	bl	80089b4 <HAL_SPI_Receive>
 8004030:	4603      	mov	r3, r0
 8004032:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800403a:	f000 f827 	bl	800408c <SPIx_Error>
  }
  
  return readvalue;
 800403e:	68bb      	ldr	r3, [r7, #8]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	2000003c 	.word	0x2000003c
 800404c:	200000f8 	.word	0x200000f8

08004050 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <SPIx_Write+0x34>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	1db9      	adds	r1, r7, #6
 8004064:	2201      	movs	r2, #1
 8004066:	4808      	ldr	r0, [pc, #32]	; (8004088 <SPIx_Write+0x38>)
 8004068:	f004 fb68 	bl	800873c <HAL_SPI_Transmit>
 800406c:	4603      	mov	r3, r0
 800406e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8004076:	f000 f809 	bl	800408c <SPIx_Error>
  }
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	2000003c 	.word	0x2000003c
 8004088:	200000f8 	.word	0x200000f8

0800408c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004090:	4803      	ldr	r0, [pc, #12]	; (80040a0 <SPIx_Error+0x14>)
 8004092:	f004 fb2b 	bl	80086ec <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8004096:	f7ff ff81 	bl	8003f9c <SPIx_Init>
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200000f8 	.word	0x200000f8

080040a4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <SPIx_MspInit+0x6c>)
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	4a16      	ldr	r2, [pc, #88]	; (8004110 <SPIx_MspInit+0x6c>)
 80040b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ba:	6453      	str	r3, [r2, #68]	; 0x44
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <SPIx_MspInit+0x6c>)
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <SPIx_MspInit+0x6c>)
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <SPIx_MspInit+0x6c>)
 80040d2:	f043 0320 	orr.w	r3, r3, #32
 80040d6:	6313      	str	r3, [r2, #48]	; 0x30
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <SPIx_MspInit+0x6c>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80040e4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80040e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80040ea:	2302      	movs	r3, #2
 80040ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80040ee:	2302      	movs	r3, #2
 80040f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80040f2:	2301      	movs	r3, #1
 80040f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80040f6:	2305      	movs	r3, #5
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80040fa:	f107 0314 	add.w	r3, r7, #20
 80040fe:	4619      	mov	r1, r3
 8004100:	4804      	ldr	r0, [pc, #16]	; (8004114 <SPIx_MspInit+0x70>)
 8004102:	f002 fbf1 	bl	80068e8 <HAL_GPIO_Init>
}
 8004106:	bf00      	nop
 8004108:	3728      	adds	r7, #40	; 0x28
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40023800 	.word	0x40023800
 8004114:	40021400 	.word	0x40021400

08004118 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800411e:	4b36      	ldr	r3, [pc, #216]	; (80041f8 <LCD_IO_Init+0xe0>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d164      	bne.n	80041f0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8004126:	4b34      	ldr	r3, [pc, #208]	; (80041f8 <LCD_IO_Init+0xe0>)
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	4b32      	ldr	r3, [pc, #200]	; (80041fc <LCD_IO_Init+0xe4>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	4a31      	ldr	r2, [pc, #196]	; (80041fc <LCD_IO_Init+0xe4>)
 8004136:	f043 0308 	orr.w	r3, r3, #8
 800413a:	6313      	str	r3, [r2, #48]	; 0x30
 800413c:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <LCD_IO_Init+0xe4>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8004148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800414c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800414e:	2301      	movs	r3, #1
 8004150:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004156:	2302      	movs	r3, #2
 8004158:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800415a:	f107 030c 	add.w	r3, r7, #12
 800415e:	4619      	mov	r1, r3
 8004160:	4827      	ldr	r0, [pc, #156]	; (8004200 <LCD_IO_Init+0xe8>)
 8004162:	f002 fbc1 	bl	80068e8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <LCD_IO_Init+0xe4>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	4a23      	ldr	r2, [pc, #140]	; (80041fc <LCD_IO_Init+0xe4>)
 8004170:	f043 0308 	orr.w	r3, r3, #8
 8004174:	6313      	str	r3, [r2, #48]	; 0x30
 8004176:	4b21      	ldr	r3, [pc, #132]	; (80041fc <LCD_IO_Init+0xe4>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	607b      	str	r3, [r7, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8004182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004186:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004188:	2301      	movs	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004190:	2302      	movs	r3, #2
 8004192:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8004194:	f107 030c 	add.w	r3, r7, #12
 8004198:	4619      	mov	r1, r3
 800419a:	4819      	ldr	r0, [pc, #100]	; (8004200 <LCD_IO_Init+0xe8>)
 800419c:	f002 fba4 	bl	80068e8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80041a0:	2300      	movs	r3, #0
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	4b15      	ldr	r3, [pc, #84]	; (80041fc <LCD_IO_Init+0xe4>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	4a14      	ldr	r2, [pc, #80]	; (80041fc <LCD_IO_Init+0xe4>)
 80041aa:	f043 0304 	orr.w	r3, r3, #4
 80041ae:	6313      	str	r3, [r2, #48]	; 0x30
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <LCD_IO_Init+0xe4>)
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80041bc:	2304      	movs	r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80041c0:	2301      	movs	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80041c8:	2302      	movs	r3, #2
 80041ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80041cc:	f107 030c 	add.w	r3, r7, #12
 80041d0:	4619      	mov	r1, r3
 80041d2:	480c      	ldr	r0, [pc, #48]	; (8004204 <LCD_IO_Init+0xec>)
 80041d4:	f002 fb88 	bl	80068e8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80041d8:	2200      	movs	r2, #0
 80041da:	2104      	movs	r1, #4
 80041dc:	4809      	ldr	r0, [pc, #36]	; (8004204 <LCD_IO_Init+0xec>)
 80041de:	f002 fe53 	bl	8006e88 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80041e2:	2201      	movs	r2, #1
 80041e4:	2104      	movs	r1, #4
 80041e6:	4807      	ldr	r0, [pc, #28]	; (8004204 <LCD_IO_Init+0xec>)
 80041e8:	f002 fe4e 	bl	8006e88 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80041ec:	f7ff fed6 	bl	8003f9c <SPIx_Init>
  }
}
 80041f0:	bf00      	nop
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20000150 	.word	0x20000150
 80041fc:	40023800 	.word	0x40023800
 8004200:	40020c00 	.word	0x40020c00
 8004204:	40020800 	.word	0x40020800

08004208 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004212:	2201      	movs	r2, #1
 8004214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004218:	480a      	ldr	r0, [pc, #40]	; (8004244 <LCD_IO_WriteData+0x3c>)
 800421a:	f002 fe35 	bl	8006e88 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800421e:	2200      	movs	r2, #0
 8004220:	2104      	movs	r1, #4
 8004222:	4809      	ldr	r0, [pc, #36]	; (8004248 <LCD_IO_WriteData+0x40>)
 8004224:	f002 fe30 	bl	8006e88 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ff10 	bl	8004050 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004230:	2201      	movs	r2, #1
 8004232:	2104      	movs	r1, #4
 8004234:	4804      	ldr	r0, [pc, #16]	; (8004248 <LCD_IO_WriteData+0x40>)
 8004236:	f002 fe27 	bl	8006e88 <HAL_GPIO_WritePin>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40020c00 	.word	0x40020c00
 8004248:	40020800 	.word	0x40020800

0800424c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004256:	2200      	movs	r2, #0
 8004258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800425c:	480a      	ldr	r0, [pc, #40]	; (8004288 <LCD_IO_WriteReg+0x3c>)
 800425e:	f002 fe13 	bl	8006e88 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8004262:	2200      	movs	r2, #0
 8004264:	2104      	movs	r1, #4
 8004266:	4809      	ldr	r0, [pc, #36]	; (800428c <LCD_IO_WriteReg+0x40>)
 8004268:	f002 fe0e 	bl	8006e88 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	b29b      	uxth	r3, r3
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff feed 	bl	8004050 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004276:	2201      	movs	r2, #1
 8004278:	2104      	movs	r1, #4
 800427a:	4804      	ldr	r0, [pc, #16]	; (800428c <LCD_IO_WriteReg+0x40>)
 800427c:	f002 fe04 	bl	8006e88 <HAL_GPIO_WritePin>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40020c00 	.word	0x40020c00
 800428c:	40020800 	.word	0x40020800

08004290 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	460a      	mov	r2, r1
 800429a:	80fb      	strh	r3, [r7, #6]
 800429c:	4613      	mov	r3, r2
 800429e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80042a4:	2200      	movs	r2, #0
 80042a6:	2104      	movs	r1, #4
 80042a8:	4810      	ldr	r0, [pc, #64]	; (80042ec <LCD_IO_ReadData+0x5c>)
 80042aa:	f002 fded 	bl	8006e88 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80042ae:	2200      	movs	r2, #0
 80042b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042b4:	480e      	ldr	r0, [pc, #56]	; (80042f0 <LCD_IO_ReadData+0x60>)
 80042b6:	f002 fde7 	bl	8006e88 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fec7 	bl	8004050 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80042c2:	797b      	ldrb	r3, [r7, #5]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff fea3 	bl	8004010 <SPIx_Read>
 80042ca:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80042cc:	2201      	movs	r2, #1
 80042ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042d2:	4807      	ldr	r0, [pc, #28]	; (80042f0 <LCD_IO_ReadData+0x60>)
 80042d4:	f002 fdd8 	bl	8006e88 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80042d8:	2201      	movs	r2, #1
 80042da:	2104      	movs	r1, #4
 80042dc:	4803      	ldr	r0, [pc, #12]	; (80042ec <LCD_IO_ReadData+0x5c>)
 80042de:	f002 fdd3 	bl	8006e88 <HAL_GPIO_WritePin>
  
  return readvalue;
 80042e2:	68fb      	ldr	r3, [r7, #12]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40020800 	.word	0x40020800
 80042f0:	40020c00 	.word	0x40020c00

080042f4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 ff19 	bl	8005134 <HAL_Delay>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8004310:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004312:	4a2e      	ldr	r2, [pc, #184]	; (80043cc <BSP_LCD_Init+0xc0>)
 8004314:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8004316:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004318:	2209      	movs	r2, #9
 800431a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800431c:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <BSP_LCD_Init+0xbc>)
 800431e:	2201      	movs	r2, #1
 8004320:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8004322:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004324:	221d      	movs	r2, #29
 8004326:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8004328:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <BSP_LCD_Init+0xbc>)
 800432a:	2203      	movs	r2, #3
 800432c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800432e:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004330:	f240 120d 	movw	r2, #269	; 0x10d
 8004334:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8004336:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004338:	f240 1243 	movw	r2, #323	; 0x143
 800433c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800433e:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004340:	f240 1217 	movw	r2, #279	; 0x117
 8004344:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004348:	f240 1247 	movw	r2, #327	; 0x147
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800434e:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004366:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <BSP_LCD_Init+0xc4>)
 8004368:	2208      	movs	r2, #8
 800436a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800436c:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <BSP_LCD_Init+0xc4>)
 800436e:	22c0      	movs	r2, #192	; 0xc0
 8004370:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8004372:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <BSP_LCD_Init+0xc4>)
 8004374:	2204      	movs	r2, #4
 8004376:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <BSP_LCD_Init+0xc4>)
 800437a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800437e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8004380:	4813      	ldr	r0, [pc, #76]	; (80043d0 <BSP_LCD_Init+0xc4>)
 8004382:	f003 fedb 	bl	800813c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004388:	2200      	movs	r2, #0
 800438a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <BSP_LCD_Init+0xbc>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <BSP_LCD_Init+0xbc>)
 8004394:	2200      	movs	r2, #0
 8004396:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <BSP_LCD_Init+0xbc>)
 800439a:	2200      	movs	r2, #0
 800439c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800439e:	f000 fa9f 	bl	80048e0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80043a2:	4809      	ldr	r0, [pc, #36]	; (80043c8 <BSP_LCD_Init+0xbc>)
 80043a4:	f002 ff4a 	bl	800723c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <BSP_LCD_Init+0xc8>)
 80043aa:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <BSP_LCD_Init+0xcc>)
 80043ac:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <BSP_LCD_Init+0xc8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80043b6:	f000 fc81 	bl	8004cbc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80043ba:	4808      	ldr	r0, [pc, #32]	; (80043dc <BSP_LCD_Init+0xd0>)
 80043bc:	f000 f8b4 	bl	8004528 <BSP_LCD_SetFont>

  return LCD_OK;
 80043c0:	2300      	movs	r3, #0
}  
 80043c2:	4618      	mov	r0, r3
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000834 	.word	0x20000834
 80043cc:	40016800 	.word	0x40016800
 80043d0:	20000194 	.word	0x20000194
 80043d4:	200008dc 	.word	0x200008dc
 80043d8:	20000004 	.word	0x20000004
 80043dc:	20000040 	.word	0x20000040

080043e0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <BSP_LCD_GetXSize+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	4798      	blx	r3
 80043ec:	4603      	mov	r3, r0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	200008dc 	.word	0x200008dc

080043f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <BSP_LCD_GetYSize+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4798      	blx	r3
 8004404:	4603      	mov	r3, r0
}
 8004406:	4618      	mov	r0, r3
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	200008dc 	.word	0x200008dc

08004410 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004410:	b580      	push	{r7, lr}
 8004412:	b090      	sub	sp, #64	; 0x40
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	6039      	str	r1, [r7, #0]
 800441a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004420:	f7ff ffde 	bl	80043e0 <BSP_LCD_GetXSize>
 8004424:	4603      	mov	r3, r0
 8004426:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800442c:	f7ff ffe4 	bl	80043f8 <BSP_LCD_GetYSize>
 8004430:	4603      	mov	r3, r0
 8004432:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800443c:	23ff      	movs	r3, #255	; 0xff
 800443e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004456:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800445c:	2307      	movs	r3, #7
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004460:	f7ff ffbe 	bl	80043e0 <BSP_LCD_GetXSize>
 8004464:	4603      	mov	r3, r0
 8004466:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004468:	f7ff ffc6 	bl	80043f8 <BSP_LCD_GetYSize>
 800446c:	4603      	mov	r3, r0
 800446e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8004470:	88fa      	ldrh	r2, [r7, #6]
 8004472:	f107 030c 	add.w	r3, r7, #12
 8004476:	4619      	mov	r1, r3
 8004478:	4814      	ldr	r0, [pc, #80]	; (80044cc <BSP_LCD_LayerDefaultInit+0xbc>)
 800447a:	f002 ffaf 	bl	80073dc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	4913      	ldr	r1, [pc, #76]	; (80044d0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3304      	adds	r3, #4
 800448e:	f04f 32ff 	mov.w	r2, #4294967295
 8004492:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004494:	88fa      	ldrh	r2, [r7, #6]
 8004496:	490e      	ldr	r1, [pc, #56]	; (80044d0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004498:	4613      	mov	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	3308      	adds	r3, #8
 80044a4:	4a0b      	ldr	r2, [pc, #44]	; (80044d4 <BSP_LCD_LayerDefaultInit+0xc4>)
 80044a6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	4909      	ldr	r1, [pc, #36]	; (80044d0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80044ac:	4613      	mov	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80044ba:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80044bc:	4803      	ldr	r0, [pc, #12]	; (80044cc <BSP_LCD_LayerDefaultInit+0xbc>)
 80044be:	f002 ffcb 	bl	8007458 <HAL_LTDC_EnableDither>
}
 80044c2:	bf00      	nop
 80044c4:	3740      	adds	r7, #64	; 0x40
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000834 	.word	0x20000834
 80044d0:	200001c8 	.word	0x200001c8
 80044d4:	20000040 	.word	0x20000040

080044d8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80044e0:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <BSP_LCD_SelectLayer+0x1c>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6013      	str	r3, [r2, #0]
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	200001c4 	.word	0x200001c4

080044f8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004500:	4b07      	ldr	r3, [pc, #28]	; (8004520 <BSP_LCD_SetTextColor+0x28>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <BSP_LCD_SetTextColor+0x2c>)
 8004506:	4613      	mov	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	200001c4 	.word	0x200001c4
 8004524:	200001c8 	.word	0x200001c8

08004528 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8004530:	4b08      	ldr	r3, [pc, #32]	; (8004554 <BSP_LCD_SetFont+0x2c>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4908      	ldr	r1, [pc, #32]	; (8004558 <BSP_LCD_SetFont+0x30>)
 8004536:	4613      	mov	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	3308      	adds	r3, #8
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	200001c4 	.word	0x200001c4
 8004558:	200001c8 	.word	0x200001c8

0800455c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <BSP_LCD_GetFont+0x24>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	4907      	ldr	r1, [pc, #28]	; (8004584 <BSP_LCD_GetFont+0x28>)
 8004566:	4613      	mov	r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3308      	adds	r3, #8
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	200001c4 	.word	0x200001c4
 8004584:	200001c8 	.word	0x200001c8

08004588 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458a:	b085      	sub	sp, #20
 800458c:	af02      	add	r7, sp, #8
 800458e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004590:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <BSP_LCD_Clear+0x48>)
 8004592:	681c      	ldr	r4, [r3, #0]
 8004594:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <BSP_LCD_Clear+0x48>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a0e      	ldr	r2, [pc, #56]	; (80045d4 <BSP_LCD_Clear+0x4c>)
 800459a:	2134      	movs	r1, #52	; 0x34
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	335c      	adds	r3, #92	; 0x5c
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461e      	mov	r6, r3
 80045a8:	f7ff ff1a 	bl	80043e0 <BSP_LCD_GetXSize>
 80045ac:	4605      	mov	r5, r0
 80045ae:	f7ff ff23 	bl	80043f8 <BSP_LCD_GetYSize>
 80045b2:	4602      	mov	r2, r0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	2300      	movs	r3, #0
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	462a      	mov	r2, r5
 80045c0:	4631      	mov	r1, r6
 80045c2:	4620      	mov	r0, r4
 80045c4:	f000 fb42 	bl	8004c4c <FillBuffer>
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d0:	200001c4 	.word	0x200001c4
 80045d4:	20000834 	.word	0x20000834

080045d8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	80fb      	strh	r3, [r7, #6]
 80045e2:	460b      	mov	r3, r1
 80045e4:	80bb      	strh	r3, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80045ea:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <BSP_LCD_DisplayChar+0x80>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	491b      	ldr	r1, [pc, #108]	; (800465c <BSP_LCD_DisplayChar+0x84>)
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	3308      	adds	r3, #8
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <BSP_LCD_DisplayChar+0x80>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4c14      	ldr	r4, [pc, #80]	; (800465c <BSP_LCD_DisplayChar+0x84>)
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4423      	add	r3, r4
 8004616:	3308      	adds	r3, #8
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800461c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004620:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <BSP_LCD_DisplayChar+0x80>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4c0d      	ldr	r4, [pc, #52]	; (800465c <BSP_LCD_DisplayChar+0x84>)
 8004626:	4613      	mov	r3, r2
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4423      	add	r3, r4
 8004630:	3308      	adds	r3, #8
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	889b      	ldrh	r3, [r3, #4]
 8004636:	3307      	adds	r3, #7
 8004638:	2b00      	cmp	r3, #0
 800463a:	da00      	bge.n	800463e <BSP_LCD_DisplayChar+0x66>
 800463c:	3307      	adds	r3, #7
 800463e:	10db      	asrs	r3, r3, #3
 8004640:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004644:	18ca      	adds	r2, r1, r3
 8004646:	88b9      	ldrh	r1, [r7, #4]
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fa44 	bl	8004ad8 <DrawChar>
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bd90      	pop	{r4, r7, pc}
 8004658:	200001c4 	.word	0x200001c4
 800465c:	200001c8 	.word	0x200001c8

08004660 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004660:	b5b0      	push	{r4, r5, r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	60ba      	str	r2, [r7, #8]
 8004668:	461a      	mov	r2, r3
 800466a:	4603      	mov	r3, r0
 800466c:	81fb      	strh	r3, [r7, #14]
 800466e:	460b      	mov	r3, r1
 8004670:	81bb      	strh	r3, [r7, #12]
 8004672:	4613      	mov	r3, r2
 8004674:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8004676:	2301      	movs	r3, #1
 8004678:	83fb      	strh	r3, [r7, #30]
 800467a:	2300      	movs	r3, #0
 800467c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800468a:	e002      	b.n	8004692 <BSP_LCD_DisplayStringAt+0x32>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	3301      	adds	r3, #1
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	617a      	str	r2, [r7, #20]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f6      	bne.n	800468c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800469e:	f7ff fe9f 	bl	80043e0 <BSP_LCD_GetXSize>
 80046a2:	4601      	mov	r1, r0
 80046a4:	4b4b      	ldr	r3, [pc, #300]	; (80047d4 <BSP_LCD_DisplayStringAt+0x174>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	484b      	ldr	r0, [pc, #300]	; (80047d8 <BSP_LCD_DisplayStringAt+0x178>)
 80046aa:	4613      	mov	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4403      	add	r3, r0
 80046b4:	3308      	adds	r3, #8
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	889b      	ldrh	r3, [r3, #4]
 80046ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80046be:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d01c      	beq.n	8004700 <BSP_LCD_DisplayStringAt+0xa0>
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	dc33      	bgt.n	8004732 <BSP_LCD_DisplayStringAt+0xd2>
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d002      	beq.n	80046d4 <BSP_LCD_DisplayStringAt+0x74>
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d019      	beq.n	8004706 <BSP_LCD_DisplayStringAt+0xa6>
 80046d2:	e02e      	b.n	8004732 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	1ad1      	subs	r1, r2, r3
 80046da:	4b3e      	ldr	r3, [pc, #248]	; (80047d4 <BSP_LCD_DisplayStringAt+0x174>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	483e      	ldr	r0, [pc, #248]	; (80047d8 <BSP_LCD_DisplayStringAt+0x178>)
 80046e0:	4613      	mov	r3, r2
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4403      	add	r3, r0
 80046ea:	3308      	adds	r3, #8
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	889b      	ldrh	r3, [r3, #4]
 80046f0:	fb03 f301 	mul.w	r3, r3, r1
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	4413      	add	r3, r2
 80046fc:	83fb      	strh	r3, [r7, #30]
      break;
 80046fe:	e01b      	b.n	8004738 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8004700:	89fb      	ldrh	r3, [r7, #14]
 8004702:	83fb      	strh	r3, [r7, #30]
      break;
 8004704:	e018      	b.n	8004738 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	b299      	uxth	r1, r3
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <BSP_LCD_DisplayStringAt+0x174>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4831      	ldr	r0, [pc, #196]	; (80047d8 <BSP_LCD_DisplayStringAt+0x178>)
 8004714:	4613      	mov	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4403      	add	r3, r0
 800471e:	3308      	adds	r3, #8
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	889b      	ldrh	r3, [r3, #4]
 8004724:	fb11 f303 	smulbb	r3, r1, r3
 8004728:	b29a      	uxth	r2, r3
 800472a:	89fb      	ldrh	r3, [r7, #14]
 800472c:	4413      	add	r3, r2
 800472e:	83fb      	strh	r3, [r7, #30]
      break;
 8004730:	e002      	b.n	8004738 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	83fb      	strh	r3, [r7, #30]
      break;
 8004736:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004738:	e01a      	b.n	8004770 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	89b9      	ldrh	r1, [r7, #12]
 8004740:	8bfb      	ldrh	r3, [r7, #30]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff ff48 	bl	80045d8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004748:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <BSP_LCD_DisplayStringAt+0x174>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4922      	ldr	r1, [pc, #136]	; (80047d8 <BSP_LCD_DisplayStringAt+0x178>)
 800474e:	4613      	mov	r3, r2
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	3308      	adds	r3, #8
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	889a      	ldrh	r2, [r3, #4]
 800475e:	8bfb      	ldrh	r3, [r7, #30]
 8004760:	4413      	add	r3, r2
 8004762:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	3301      	adds	r3, #1
 8004768:	60bb      	str	r3, [r7, #8]
    i++;
 800476a:	8bbb      	ldrh	r3, [r7, #28]
 800476c:	3301      	adds	r3, #1
 800476e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2dc      	uxtb	r4, r3
 800477e:	f7ff fe2f 	bl	80043e0 <BSP_LCD_GetXSize>
 8004782:	8bb9      	ldrh	r1, [r7, #28]
 8004784:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <BSP_LCD_DisplayStringAt+0x174>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4d13      	ldr	r5, [pc, #76]	; (80047d8 <BSP_LCD_DisplayStringAt+0x178>)
 800478a:	4613      	mov	r3, r2
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	442b      	add	r3, r5
 8004794:	3308      	adds	r3, #8
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	889b      	ldrh	r3, [r3, #4]
 800479a:	fb03 f301 	mul.w	r3, r3, r1
 800479e:	1ac3      	subs	r3, r0, r3
 80047a0:	b299      	uxth	r1, r3
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <BSP_LCD_DisplayStringAt+0x174>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	480c      	ldr	r0, [pc, #48]	; (80047d8 <BSP_LCD_DisplayStringAt+0x178>)
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4403      	add	r3, r0
 80047b2:	3308      	adds	r3, #8
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	889b      	ldrh	r3, [r3, #4]
 80047b8:	4299      	cmp	r1, r3
 80047ba:	bf2c      	ite	cs
 80047bc:	2301      	movcs	r3, #1
 80047be:	2300      	movcc	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	4023      	ands	r3, r4
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1b7      	bne.n	800473a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bdb0      	pop	{r4, r5, r7, pc}
 80047d4:	200001c4 	.word	0x200001c4
 80047d8:	200001c8 	.word	0x200001c8

080047dc <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, CENTER_MODE);
 80047e8:	f7ff feb8 	bl	800455c <BSP_LCD_GetFont>
 80047ec:	4603      	mov	r3, r0
 80047ee:	88db      	ldrh	r3, [r3, #6]
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	fb12 f303 	smulbb	r3, r2, r3
 80047f6:	b299      	uxth	r1, r3
 80047f8:	2301      	movs	r3, #1
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	2000      	movs	r0, #0
 80047fe:	f7ff ff2f 	bl	8004660 <BSP_LCD_DisplayStringAt>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004810:	b086      	sub	sp, #24
 8004812:	af02      	add	r7, sp, #8
 8004814:	4604      	mov	r4, r0
 8004816:	4608      	mov	r0, r1
 8004818:	4611      	mov	r1, r2
 800481a:	461a      	mov	r2, r3
 800481c:	4623      	mov	r3, r4
 800481e:	80fb      	strh	r3, [r7, #6]
 8004820:	4603      	mov	r3, r0
 8004822:	80bb      	strh	r3, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
 8004828:	4613      	mov	r3, r2
 800482a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004830:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <BSP_LCD_FillRect+0xa8>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	4920      	ldr	r1, [pc, #128]	; (80048b8 <BSP_LCD_FillRect+0xac>)
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fe58 	bl	80044f8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <BSP_LCD_FillRect+0xa8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <BSP_LCD_FillRect+0xb0>)
 800484e:	2134      	movs	r1, #52	; 0x34
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	4413      	add	r3, r2
 8004856:	335c      	adds	r3, #92	; 0x5c
 8004858:	681c      	ldr	r4, [r3, #0]
 800485a:	f7ff fdc1 	bl	80043e0 <BSP_LCD_GetXSize>
 800485e:	4602      	mov	r2, r0
 8004860:	88bb      	ldrh	r3, [r7, #4]
 8004862:	fb03 f202 	mul.w	r2, r3, r2
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4423      	add	r3, r4
 800486e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004870:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <BSP_LCD_FillRect+0xa8>)
 8004872:	681c      	ldr	r4, [r3, #0]
 8004874:	68fd      	ldr	r5, [r7, #12]
 8004876:	887e      	ldrh	r6, [r7, #2]
 8004878:	f8b7 8000 	ldrh.w	r8, [r7]
 800487c:	f7ff fdb0 	bl	80043e0 <BSP_LCD_GetXSize>
 8004880:	4602      	mov	r2, r0
 8004882:	887b      	ldrh	r3, [r7, #2]
 8004884:	1ad1      	subs	r1, r2, r3
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <BSP_LCD_FillRect+0xa8>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	480b      	ldr	r0, [pc, #44]	; (80048b8 <BSP_LCD_FillRect+0xac>)
 800488c:	4613      	mov	r3, r2
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4403      	add	r3, r0
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	9100      	str	r1, [sp, #0]
 800489c:	4643      	mov	r3, r8
 800489e:	4632      	mov	r2, r6
 80048a0:	4629      	mov	r1, r5
 80048a2:	4620      	mov	r0, r4
 80048a4:	f000 f9d2 	bl	8004c4c <FillBuffer>
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b2:	bf00      	nop
 80048b4:	200001c4 	.word	0x200001c4
 80048b8:	200001c8 	.word	0x200001c8
 80048bc:	20000834 	.word	0x20000834

080048c0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <BSP_LCD_DisplayOn+0x1c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80048ce:	4b03      	ldr	r3, [pc, #12]	; (80048dc <BSP_LCD_DisplayOn+0x1c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4798      	blx	r3
  }
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200008dc 	.word	0x200008dc

080048e0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08e      	sub	sp, #56	; 0x38
 80048e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	623b      	str	r3, [r7, #32]
 80048ea:	4b61      	ldr	r3, [pc, #388]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	4a60      	ldr	r2, [pc, #384]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 80048f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048f4:	6453      	str	r3, [r2, #68]	; 0x44
 80048f6:	4b5e      	ldr	r3, [pc, #376]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
 8004906:	4b5a      	ldr	r3, [pc, #360]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	4a59      	ldr	r2, [pc, #356]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 800490c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004910:	6313      	str	r3, [r2, #48]	; 0x30
 8004912:	4b57      	ldr	r3, [pc, #348]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	6313      	str	r3, [r2, #48]	; 0x30
 800492e:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	4b4c      	ldr	r3, [pc, #304]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a4b      	ldr	r2, [pc, #300]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004944:	f043 0302 	orr.w	r3, r3, #2
 8004948:	6313      	str	r3, [r2, #48]	; 0x30
 800494a:	4b49      	ldr	r3, [pc, #292]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	4b45      	ldr	r3, [pc, #276]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	4a44      	ldr	r2, [pc, #272]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004960:	f043 0304 	orr.w	r3, r3, #4
 8004964:	6313      	str	r3, [r2, #48]	; 0x30
 8004966:	4b42      	ldr	r3, [pc, #264]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	4b3e      	ldr	r3, [pc, #248]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a3d      	ldr	r2, [pc, #244]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 800497c:	f043 0308 	orr.w	r3, r3, #8
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
 8004982:	4b3b      	ldr	r3, [pc, #236]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4a36      	ldr	r2, [pc, #216]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 8004998:	f043 0320 	orr.w	r3, r3, #32
 800499c:	6313      	str	r3, [r2, #48]	; 0x30
 800499e:	4b34      	ldr	r3, [pc, #208]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	4b30      	ldr	r3, [pc, #192]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 80049b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ba:	4b2d      	ldr	r3, [pc, #180]	; (8004a70 <BSP_LCD_MspInit+0x190>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80049c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80049cc:	2302      	movs	r3, #2
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80049d4:	2302      	movs	r3, #2
 80049d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80049d8:	230e      	movs	r3, #14
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80049dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e0:	4619      	mov	r1, r3
 80049e2:	4824      	ldr	r0, [pc, #144]	; (8004a74 <BSP_LCD_MspInit+0x194>)
 80049e4:	f001 ff80 	bl	80068e8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80049e8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80049ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049f2:	4619      	mov	r1, r3
 80049f4:	4820      	ldr	r0, [pc, #128]	; (8004a78 <BSP_LCD_MspInit+0x198>)
 80049f6:	f001 ff77 	bl	80068e8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80049fa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a04:	4619      	mov	r1, r3
 8004a06:	481d      	ldr	r0, [pc, #116]	; (8004a7c <BSP_LCD_MspInit+0x19c>)
 8004a08:	f001 ff6e 	bl	80068e8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004a0c:	2348      	movs	r3, #72	; 0x48
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a14:	4619      	mov	r1, r3
 8004a16:	481a      	ldr	r0, [pc, #104]	; (8004a80 <BSP_LCD_MspInit+0x1a0>)
 8004a18:	f001 ff66 	bl	80068e8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a26:	4619      	mov	r1, r3
 8004a28:	4816      	ldr	r0, [pc, #88]	; (8004a84 <BSP_LCD_MspInit+0x1a4>)
 8004a2a:	f001 ff5d 	bl	80068e8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004a2e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4813      	ldr	r0, [pc, #76]	; (8004a88 <BSP_LCD_MspInit+0x1a8>)
 8004a3c:	f001 ff54 	bl	80068e8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004a40:	2303      	movs	r3, #3
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004a44:	2309      	movs	r3, #9
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	480a      	ldr	r0, [pc, #40]	; (8004a78 <BSP_LCD_MspInit+0x198>)
 8004a50:	f001 ff4a 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004a54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4809      	ldr	r0, [pc, #36]	; (8004a88 <BSP_LCD_MspInit+0x1a8>)
 8004a62:	f001 ff41 	bl	80068e8 <HAL_GPIO_Init>
}
 8004a66:	bf00      	nop
 8004a68:	3738      	adds	r7, #56	; 0x38
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40020000 	.word	0x40020000
 8004a78:	40020400 	.word	0x40020400
 8004a7c:	40020800 	.word	0x40020800
 8004a80:	40020c00 	.word	0x40020c00
 8004a84:	40021400 	.word	0x40021400
 8004a88:	40021800 	.word	0x40021800

08004a8c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004a8c:	b5b0      	push	{r4, r5, r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	603a      	str	r2, [r7, #0]
 8004a96:	80fb      	strh	r3, [r7, #6]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <BSP_LCD_DrawPixel+0x44>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <BSP_LCD_DrawPixel+0x48>)
 8004aa2:	2134      	movs	r1, #52	; 0x34
 8004aa4:	fb01 f303 	mul.w	r3, r1, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	335c      	adds	r3, #92	; 0x5c
 8004aac:	681c      	ldr	r4, [r3, #0]
 8004aae:	88bd      	ldrh	r5, [r7, #4]
 8004ab0:	f7ff fc96 	bl	80043e0 <BSP_LCD_GetXSize>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	fb03 f205 	mul.w	r2, r3, r5
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4423      	add	r3, r4
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	6013      	str	r3, [r2, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bdb0      	pop	{r4, r5, r7, pc}
 8004ad0:	200001c4 	.word	0x200001c4
 8004ad4:	20000834 	.word	0x20000834

08004ad8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	603a      	str	r2, [r7, #0]
 8004ae2:	80fb      	strh	r3, [r7, #6]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	2300      	movs	r3, #0
 8004aee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004af4:	4b53      	ldr	r3, [pc, #332]	; (8004c44 <DrawChar+0x16c>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4953      	ldr	r1, [pc, #332]	; (8004c48 <DrawChar+0x170>)
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	440b      	add	r3, r1
 8004b04:	3308      	adds	r3, #8
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	88db      	ldrh	r3, [r3, #6]
 8004b0a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004b0c:	4b4d      	ldr	r3, [pc, #308]	; (8004c44 <DrawChar+0x16c>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	494d      	ldr	r1, [pc, #308]	; (8004c48 <DrawChar+0x170>)
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	889b      	ldrh	r3, [r3, #4]
 8004b22:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004b24:	8a3b      	ldrh	r3, [r7, #16]
 8004b26:	3307      	adds	r3, #7
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	da00      	bge.n	8004b2e <DrawChar+0x56>
 8004b2c:	3307      	adds	r3, #7
 8004b2e:	10db      	asrs	r3, r3, #3
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	8a3b      	ldrh	r3, [r7, #16]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
 8004b42:	e076      	b.n	8004c32 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004b44:	8a3b      	ldrh	r3, [r7, #16]
 8004b46:	3307      	adds	r3, #7
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da00      	bge.n	8004b4e <DrawChar+0x76>
 8004b4c:	3307      	adds	r3, #7
 8004b4e:	10db      	asrs	r3, r3, #3
 8004b50:	461a      	mov	r2, r3
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	fb03 f302 	mul.w	r3, r3, r2
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004b5e:	8a3b      	ldrh	r3, [r7, #16]
 8004b60:	3307      	adds	r3, #7
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	da00      	bge.n	8004b68 <DrawChar+0x90>
 8004b66:	3307      	adds	r3, #7
 8004b68:	10db      	asrs	r3, r3, #3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d002      	beq.n	8004b74 <DrawChar+0x9c>
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d004      	beq.n	8004b7c <DrawChar+0xa4>
 8004b72:	e00c      	b.n	8004b8e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	617b      	str	r3, [r7, #20]
      break;
 8004b7a:	e016      	b.n	8004baa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	3201      	adds	r2, #1
 8004b86:	7812      	ldrb	r2, [r2, #0]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
      break;
 8004b8c:	e00d      	b.n	8004baa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	041a      	lsls	r2, r3, #16
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	3301      	adds	r3, #1
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	3202      	adds	r2, #2
 8004ba2:	7812      	ldrb	r2, [r2, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
      break;
 8004ba8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	e036      	b.n	8004c1e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004bb0:	8a3a      	ldrh	r2, [r7, #16]
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	4413      	add	r3, r2
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	88fb      	ldrh	r3, [r7, #6]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b298      	uxth	r0, r3
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <DrawChar+0x16c>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	491b      	ldr	r1, [pc, #108]	; (8004c48 <DrawChar+0x170>)
 8004bdc:	4613      	mov	r3, r2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	88bb      	ldrh	r3, [r7, #4]
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7ff ff4e 	bl	8004a8c <BSP_LCD_DrawPixel>
 8004bf0:	e012      	b.n	8004c18 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	b298      	uxth	r0, r3
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <DrawChar+0x16c>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4911      	ldr	r1, [pc, #68]	; (8004c48 <DrawChar+0x170>)
 8004c02:	4613      	mov	r3, r2
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	88bb      	ldrh	r3, [r7, #4]
 8004c12:	4619      	mov	r1, r3
 8004c14:	f7ff ff3a 	bl	8004a8c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	8a3b      	ldrh	r3, [r7, #16]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d3c4      	bcc.n	8004bb0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004c26:	88bb      	ldrh	r3, [r7, #4]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	8a7b      	ldrh	r3, [r7, #18]
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d384      	bcc.n	8004b44 <DrawChar+0x6c>
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	200001c4 	.word	0x200001c4
 8004c48:	200001c8 	.word	0x200001c8

08004c4c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004c5a:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <FillBuffer+0x68>)
 8004c5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004c60:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004c62:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <FillBuffer+0x68>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004c68:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <FillBuffer+0x68>)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <FillBuffer+0x68>)
 8004c70:	4a11      	ldr	r2, [pc, #68]	; (8004cb8 <FillBuffer+0x6c>)
 8004c72:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004c74:	480f      	ldr	r0, [pc, #60]	; (8004cb4 <FillBuffer+0x68>)
 8004c76:	f001 fbab 	bl	80063d0 <HAL_DMA2D_Init>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d115      	bne.n	8004cac <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	480c      	ldr	r0, [pc, #48]	; (8004cb4 <FillBuffer+0x68>)
 8004c84:	f001 fd02 	bl	800668c <HAL_DMA2D_ConfigLayer>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10e      	bne.n	8004cac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69f9      	ldr	r1, [r7, #28]
 8004c98:	4806      	ldr	r0, [pc, #24]	; (8004cb4 <FillBuffer+0x68>)
 8004c9a:	f001 fbe2 	bl	8006462 <HAL_DMA2D_Start>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004ca4:	210a      	movs	r1, #10
 8004ca6:	4803      	ldr	r0, [pc, #12]	; (8004cb4 <FillBuffer+0x68>)
 8004ca8:	f001 fc06 	bl	80064b8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000154 	.word	0x20000154
 8004cb8:	4002b000 	.word	0x4002b000

08004cbc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004cc0:	4b29      	ldr	r3, [pc, #164]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004cc2:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <BSP_SDRAM_Init+0xb0>)
 8004cc4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004cc6:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <BSP_SDRAM_Init+0xb4>)
 8004cc8:	2202      	movs	r2, #2
 8004cca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004ccc:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <BSP_SDRAM_Init+0xb4>)
 8004cce:	2207      	movs	r2, #7
 8004cd0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <BSP_SDRAM_Init+0xb4>)
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <BSP_SDRAM_Init+0xb4>)
 8004cda:	2207      	movs	r2, #7
 8004cdc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004cde:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <BSP_SDRAM_Init+0xb4>)
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004ce4:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <BSP_SDRAM_Init+0xb4>)
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004cea:	4b21      	ldr	r3, [pc, #132]	; (8004d70 <BSP_SDRAM_Init+0xb4>)
 8004cec:	2202      	movs	r2, #2
 8004cee:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004cf0:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004cfe:	2204      	movs	r2, #4
 8004d00:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004d02:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004d04:	2210      	movs	r2, #16
 8004d06:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004d08:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004d0a:	2240      	movs	r2, #64	; 0x40
 8004d0c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004d10:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004d14:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004d1c:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d22:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004d24:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004d2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d30:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004d32:	2100      	movs	r1, #0
 8004d34:	480c      	ldr	r0, [pc, #48]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004d36:	f000 f87f 	bl	8004e38 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004d3a:	490d      	ldr	r1, [pc, #52]	; (8004d70 <BSP_SDRAM_Init+0xb4>)
 8004d3c:	480a      	ldr	r0, [pc, #40]	; (8004d68 <BSP_SDRAM_Init+0xac>)
 8004d3e:	f003 fbbb 	bl	80084b8 <HAL_SDRAM_Init>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <BSP_SDRAM_Init+0xb8>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e002      	b.n	8004d56 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <BSP_SDRAM_Init+0xb8>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004d56:	f240 506a 	movw	r0, #1386	; 0x56a
 8004d5a:	f000 f80d 	bl	8004d78 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <BSP_SDRAM_Init+0xb8>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200001e0 	.word	0x200001e0
 8004d6c:	a0000140 	.word	0xa0000140
 8004d70:	20000214 	.word	0x20000214
 8004d74:	20000060 	.word	0x20000060

08004d78 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004d84:	4b2a      	ldr	r3, [pc, #168]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004d8a:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004d90:	4b27      	ldr	r3, [pc, #156]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004d96:	4b26      	ldr	r3, [pc, #152]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004da0:	4923      	ldr	r1, [pc, #140]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004da2:	4824      	ldr	r0, [pc, #144]	; (8004e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004da4:	f003 fbbc 	bl	8008520 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004da8:	2001      	movs	r0, #1
 8004daa:	f000 f9c3 	bl	8005134 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004db0:	2202      	movs	r2, #2
 8004db2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004db4:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004db6:	2208      	movs	r2, #8
 8004db8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004dba:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dca:	4919      	ldr	r1, [pc, #100]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dcc:	4819      	ldr	r0, [pc, #100]	; (8004e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004dce:	f003 fba7 	bl	8008520 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004dd2:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004dd8:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dda:	2208      	movs	r2, #8
 8004ddc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004dde:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de0:	2204      	movs	r2, #4
 8004de2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004de4:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dee:	4910      	ldr	r1, [pc, #64]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004df0:	4810      	ldr	r0, [pc, #64]	; (8004e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004df2:	f003 fb95 	bl	8008520 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004df6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004dfa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004dfe:	2204      	movs	r2, #4
 8004e00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e04:	2208      	movs	r2, #8
 8004e06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a07      	ldr	r2, [pc, #28]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e12:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e18:	4905      	ldr	r1, [pc, #20]	; (8004e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004e1a:	4806      	ldr	r0, [pc, #24]	; (8004e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e1c:	f003 fb80 	bl	8008520 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4804      	ldr	r0, [pc, #16]	; (8004e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004e24:	f003 fbb1 	bl	800858a <HAL_SDRAM_ProgramRefreshRate>
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000230 	.word	0x20000230
 8004e34:	200001e0 	.word	0x200001e0

08004e38 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b090      	sub	sp, #64	; 0x40
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80ec 	beq.w	8005022 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4e:	4b77      	ldr	r3, [pc, #476]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	4a76      	ldr	r2, [pc, #472]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	6393      	str	r3, [r2, #56]	; 0x38
 8004e5a:	4b74      	ldr	r3, [pc, #464]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6a:	4b70      	ldr	r3, [pc, #448]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	4a6f      	ldr	r2, [pc, #444]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e74:	6313      	str	r3, [r2, #48]	; 0x30
 8004e76:	4b6d      	ldr	r3, [pc, #436]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	623b      	str	r3, [r7, #32]
 8004e86:	4b69      	ldr	r3, [pc, #420]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	4a68      	ldr	r2, [pc, #416]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004e8c:	f043 0302 	orr.w	r3, r3, #2
 8004e90:	6313      	str	r3, [r2, #48]	; 0x30
 8004e92:	4b66      	ldr	r3, [pc, #408]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	4b62      	ldr	r3, [pc, #392]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	4a61      	ldr	r2, [pc, #388]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004ea8:	f043 0304 	orr.w	r3, r3, #4
 8004eac:	6313      	str	r3, [r2, #48]	; 0x30
 8004eae:	4b5f      	ldr	r3, [pc, #380]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	4b5b      	ldr	r3, [pc, #364]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	4a5a      	ldr	r2, [pc, #360]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004ec4:	f043 0308 	orr.w	r3, r3, #8
 8004ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eca:	4b58      	ldr	r3, [pc, #352]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	4b54      	ldr	r3, [pc, #336]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	4a53      	ldr	r2, [pc, #332]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004ee0:	f043 0310 	orr.w	r3, r3, #16
 8004ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee6:	4b51      	ldr	r3, [pc, #324]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	4b4d      	ldr	r3, [pc, #308]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	4a4c      	ldr	r2, [pc, #304]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	6313      	str	r3, [r2, #48]	; 0x30
 8004f02:	4b4a      	ldr	r3, [pc, #296]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	4b46      	ldr	r3, [pc, #280]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	4a45      	ldr	r2, [pc, #276]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f1e:	4b43      	ldr	r3, [pc, #268]	; (800502c <BSP_SDRAM_MspInit+0x1f4>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004f36:	230c      	movs	r3, #12
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004f3a:	2360      	movs	r3, #96	; 0x60
 8004f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f42:	4619      	mov	r1, r3
 8004f44:	483a      	ldr	r0, [pc, #232]	; (8005030 <BSP_SDRAM_MspInit+0x1f8>)
 8004f46:	f001 fccf 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f52:	4619      	mov	r1, r3
 8004f54:	4837      	ldr	r0, [pc, #220]	; (8005034 <BSP_SDRAM_MspInit+0x1fc>)
 8004f56:	f001 fcc7 	bl	80068e8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004f5a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f64:	4619      	mov	r1, r3
 8004f66:	4834      	ldr	r0, [pc, #208]	; (8005038 <BSP_SDRAM_MspInit+0x200>)
 8004f68:	f001 fcbe 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004f6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f76:	4619      	mov	r1, r3
 8004f78:	4830      	ldr	r0, [pc, #192]	; (800503c <BSP_SDRAM_MspInit+0x204>)
 8004f7a:	f001 fcb5 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004f7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f88:	4619      	mov	r1, r3
 8004f8a:	482d      	ldr	r0, [pc, #180]	; (8005040 <BSP_SDRAM_MspInit+0x208>)
 8004f8c:	f001 fcac 	bl	80068e8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004f90:	f248 1333 	movw	r3, #33075	; 0x8133
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4829      	ldr	r0, [pc, #164]	; (8005044 <BSP_SDRAM_MspInit+0x20c>)
 8004f9e:	f001 fca3 	bl	80068e8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004fa2:	4b29      	ldr	r3, [pc, #164]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004fa8:	4b27      	ldr	r3, [pc, #156]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004faa:	2280      	movs	r2, #128	; 0x80
 8004fac:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004fae:	4b26      	ldr	r3, [pc, #152]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fbc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fbe:	4b22      	ldr	r3, [pc, #136]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fc4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fcc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004fce:	4b1e      	ldr	r3, [pc, #120]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004fd4:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fda:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004fe2:	4b19      	ldr	r3, [pc, #100]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004fe8:	4b17      	ldr	r3, [pc, #92]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004fee:	4b16      	ldr	r3, [pc, #88]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004ff4:	4b14      	ldr	r3, [pc, #80]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004ff6:	4a15      	ldr	r2, [pc, #84]	; (800504c <BSP_SDRAM_MspInit+0x214>)
 8004ff8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a12      	ldr	r2, [pc, #72]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8005000:	4a11      	ldr	r2, [pc, #68]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8005006:	4810      	ldr	r0, [pc, #64]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 8005008:	f000 fec2 	bl	8005d90 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800500c:	480e      	ldr	r0, [pc, #56]	; (8005048 <BSP_SDRAM_MspInit+0x210>)
 800500e:	f000 fe11 	bl	8005c34 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005012:	2200      	movs	r2, #0
 8005014:	210f      	movs	r1, #15
 8005016:	2038      	movs	r0, #56	; 0x38
 8005018:	f000 fdd5 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800501c:	2038      	movs	r0, #56	; 0x38
 800501e:	f000 fdee 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8005022:	bf00      	nop
 8005024:	3740      	adds	r7, #64	; 0x40
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	40020400 	.word	0x40020400
 8005034:	40020800 	.word	0x40020800
 8005038:	40020c00 	.word	0x40020c00
 800503c:	40021000 	.word	0x40021000
 8005040:	40021400 	.word	0x40021400
 8005044:	40021800 	.word	0x40021800
 8005048:	20000240 	.word	0x20000240
 800504c:	40026410 	.word	0x40026410

08005050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <HAL_Init+0x40>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <HAL_Init+0x40>)
 800505a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800505e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_Init+0x40>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <HAL_Init+0x40>)
 8005066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800506a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800506c:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_Init+0x40>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a07      	ldr	r2, [pc, #28]	; (8005090 <HAL_Init+0x40>)
 8005072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005078:	2003      	movs	r0, #3
 800507a:	f000 fd99 	bl	8005bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800507e:	200f      	movs	r0, #15
 8005080:	f000 f808 	bl	8005094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005084:	f7fe fb7c 	bl	8003780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40023c00 	.word	0x40023c00

08005094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800509c:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <HAL_InitTick+0x54>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_InitTick+0x58>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4619      	mov	r1, r3
 80050a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fdb1 	bl	8005c1a <HAL_SYSTICK_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e00e      	b.n	80050e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b0f      	cmp	r3, #15
 80050c6:	d80a      	bhi.n	80050de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050c8:	2200      	movs	r2, #0
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	f000 fd79 	bl	8005bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050d4:	4a06      	ldr	r2, [pc, #24]	; (80050f0 <HAL_InitTick+0x5c>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000000 	.word	0x20000000
 80050ec:	20000068 	.word	0x20000068
 80050f0:	20000064 	.word	0x20000064

080050f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_IncTick+0x20>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_IncTick+0x24>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4413      	add	r3, r2
 8005104:	4a04      	ldr	r2, [pc, #16]	; (8005118 <HAL_IncTick+0x24>)
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000068 	.word	0x20000068
 8005118:	200008e0 	.word	0x200008e0

0800511c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return uwTick;
 8005120:	4b03      	ldr	r3, [pc, #12]	; (8005130 <HAL_GetTick+0x14>)
 8005122:	681b      	ldr	r3, [r3, #0]
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	200008e0 	.word	0x200008e0

08005134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800513c:	f7ff ffee 	bl	800511c <HAL_GetTick>
 8005140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d005      	beq.n	800515a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <HAL_Delay+0x44>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800515a:	bf00      	nop
 800515c:	f7ff ffde 	bl	800511c <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	429a      	cmp	r2, r3
 800516a:	d8f7      	bhi.n	800515c <HAL_Delay+0x28>
  {
  }
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000068 	.word	0x20000068

0800517c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e033      	b.n	80051fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fd fc7e 	bl	8002a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d118      	bne.n	80051ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80051c2:	f023 0302 	bic.w	r3, r3, #2
 80051c6:	f043 0202 	orr.w	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 faa0 	bl	8005714 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f023 0303 	bic.w	r3, r3, #3
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
 80051ea:	e001      	b.n	80051f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_ADC_Stop+0x16>
 8005214:	2302      	movs	r3, #2
 8005216:	e021      	b.n	800525c <HAL_ADC_Stop+0x5a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0201 	bic.w	r2, r2, #1
 800522e:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005246:	f023 0301 	bic.w	r3, r3, #1
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_ADC_Start_DMA+0x1e>
 8005282:	2302      	movs	r3, #2
 8005284:	e0e9      	b.n	800545a <HAL_ADC_Start_DMA+0x1f2>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	d018      	beq.n	80052ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052ac:	4b6d      	ldr	r3, [pc, #436]	; (8005464 <HAL_ADC_Start_DMA+0x1fc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a6d      	ldr	r2, [pc, #436]	; (8005468 <HAL_ADC_Start_DMA+0x200>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	0c9a      	lsrs	r2, r3, #18
 80052b8:	4613      	mov	r3, r2
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4413      	add	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052c0:	e002      	b.n	80052c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f9      	bne.n	80052c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052dc:	d107      	bne.n	80052ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	f040 80a1 	bne.w	8005440 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005328:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533c:	d106      	bne.n	800534c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	f023 0206 	bic.w	r2, r3, #6
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
 800534a:	e002      	b.n	8005352 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800535a:	4b44      	ldr	r3, [pc, #272]	; (800546c <HAL_ADC_Start_DMA+0x204>)
 800535c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	4a43      	ldr	r2, [pc, #268]	; (8005470 <HAL_ADC_Start_DMA+0x208>)
 8005364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	4a42      	ldr	r2, [pc, #264]	; (8005474 <HAL_ADC_Start_DMA+0x20c>)
 800536c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	4a41      	ldr	r2, [pc, #260]	; (8005478 <HAL_ADC_Start_DMA+0x210>)
 8005374:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800537e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800538e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	334c      	adds	r3, #76	; 0x4c
 80053aa:	4619      	mov	r1, r3
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f000 fd4c 	bl	8005e4c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d12a      	bne.n	8005416 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a2d      	ldr	r2, [pc, #180]	; (800547c <HAL_ADC_Start_DMA+0x214>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d015      	beq.n	80053f6 <HAL_ADC_Start_DMA+0x18e>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a2c      	ldr	r2, [pc, #176]	; (8005480 <HAL_ADC_Start_DMA+0x218>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d105      	bne.n	80053e0 <HAL_ADC_Start_DMA+0x178>
 80053d4:	4b25      	ldr	r3, [pc, #148]	; (800546c <HAL_ADC_Start_DMA+0x204>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a27      	ldr	r2, [pc, #156]	; (8005484 <HAL_ADC_Start_DMA+0x21c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d136      	bne.n	8005458 <HAL_ADC_Start_DMA+0x1f0>
 80053ea:	4b20      	ldr	r3, [pc, #128]	; (800546c <HAL_ADC_Start_DMA+0x204>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d130      	bne.n	8005458 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d129      	bne.n	8005458 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005412:	609a      	str	r2, [r3, #8]
 8005414:	e020      	b.n	8005458 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a18      	ldr	r2, [pc, #96]	; (800547c <HAL_ADC_Start_DMA+0x214>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d11b      	bne.n	8005458 <HAL_ADC_Start_DMA+0x1f0>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d114      	bne.n	8005458 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800543c:	609a      	str	r2, [r3, #8]
 800543e:	e00b      	b.n	8005458 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	f043 0210 	orr.w	r2, r3, #16
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005450:	f043 0201 	orr.w	r2, r3, #1
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000000 	.word	0x20000000
 8005468:	431bde83 	.word	0x431bde83
 800546c:	40012300 	.word	0x40012300
 8005470:	0800590d 	.word	0x0800590d
 8005474:	080059c7 	.word	0x080059c7
 8005478:	080059e3 	.word	0x080059e3
 800547c:	40012000 	.word	0x40012000
 8005480:	40012100 	.word	0x40012100
 8005484:	40012200 	.word	0x40012200

08005488 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x1c>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e113      	b.n	80056f4 <HAL_ADC_ConfigChannel+0x244>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b09      	cmp	r3, #9
 80054da:	d925      	bls.n	8005528 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68d9      	ldr	r1, [r3, #12]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	4613      	mov	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4413      	add	r3, r2
 80054f0:	3b1e      	subs	r3, #30
 80054f2:	2207      	movs	r2, #7
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	43da      	mvns	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	400a      	ands	r2, r1
 8005500:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68d9      	ldr	r1, [r3, #12]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	4618      	mov	r0, r3
 8005514:	4603      	mov	r3, r0
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4403      	add	r3, r0
 800551a:	3b1e      	subs	r3, #30
 800551c:	409a      	lsls	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	e022      	b.n	800556e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6919      	ldr	r1, [r3, #16]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	4613      	mov	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4413      	add	r3, r2
 800553c:	2207      	movs	r2, #7
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43da      	mvns	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	400a      	ands	r2, r1
 800554a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6919      	ldr	r1, [r3, #16]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	4618      	mov	r0, r3
 800555e:	4603      	mov	r3, r0
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4403      	add	r3, r0
 8005564:	409a      	lsls	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b06      	cmp	r3, #6
 8005574:	d824      	bhi.n	80055c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	3b05      	subs	r3, #5
 8005588:	221f      	movs	r2, #31
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43da      	mvns	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	400a      	ands	r2, r1
 8005596:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4618      	mov	r0, r3
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	3b05      	subs	r3, #5
 80055b2:	fa00 f203 	lsl.w	r2, r0, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	635a      	str	r2, [r3, #52]	; 0x34
 80055be:	e04c      	b.n	800565a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b0c      	cmp	r3, #12
 80055c6:	d824      	bhi.n	8005612 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	3b23      	subs	r3, #35	; 0x23
 80055da:	221f      	movs	r2, #31
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43da      	mvns	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	400a      	ands	r2, r1
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	4618      	mov	r0, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	3b23      	subs	r3, #35	; 0x23
 8005604:	fa00 f203 	lsl.w	r2, r0, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
 8005610:	e023      	b.n	800565a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	3b41      	subs	r3, #65	; 0x41
 8005624:	221f      	movs	r2, #31
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43da      	mvns	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	400a      	ands	r2, r1
 8005632:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	4618      	mov	r0, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	3b41      	subs	r3, #65	; 0x41
 800564e:	fa00 f203 	lsl.w	r2, r0, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800565a:	4b29      	ldr	r3, [pc, #164]	; (8005700 <HAL_ADC_ConfigChannel+0x250>)
 800565c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a28      	ldr	r2, [pc, #160]	; (8005704 <HAL_ADC_ConfigChannel+0x254>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d10f      	bne.n	8005688 <HAL_ADC_ConfigChannel+0x1d8>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b12      	cmp	r3, #18
 800566e:	d10b      	bne.n	8005688 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <HAL_ADC_ConfigChannel+0x254>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d12b      	bne.n	80056ea <HAL_ADC_ConfigChannel+0x23a>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <HAL_ADC_ConfigChannel+0x258>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <HAL_ADC_ConfigChannel+0x1f4>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b11      	cmp	r3, #17
 80056a2:	d122      	bne.n	80056ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a11      	ldr	r2, [pc, #68]	; (8005708 <HAL_ADC_ConfigChannel+0x258>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d111      	bne.n	80056ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <HAL_ADC_ConfigChannel+0x25c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a11      	ldr	r2, [pc, #68]	; (8005710 <HAL_ADC_ConfigChannel+0x260>)
 80056cc:	fba2 2303 	umull	r2, r3, r2, r3
 80056d0:	0c9a      	lsrs	r2, r3, #18
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056dc:	e002      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f9      	bne.n	80056de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40012300 	.word	0x40012300
 8005704:	40012000 	.word	0x40012000
 8005708:	10000012 	.word	0x10000012
 800570c:	20000000 	.word	0x20000000
 8005710:	431bde83 	.word	0x431bde83

08005714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800571c:	4b79      	ldr	r3, [pc, #484]	; (8005904 <ADC_Init+0x1f0>)
 800571e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6859      	ldr	r1, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	021a      	lsls	r2, r3, #8
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800576c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6859      	ldr	r1, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6899      	ldr	r1, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	4a58      	ldr	r2, [pc, #352]	; (8005908 <ADC_Init+0x1f4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d022      	beq.n	80057f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6899      	ldr	r1, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6899      	ldr	r1, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	e00f      	b.n	8005812 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005810:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0202 	bic.w	r2, r2, #2
 8005820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6899      	ldr	r1, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	7e1b      	ldrb	r3, [r3, #24]
 800582c:	005a      	lsls	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01b      	beq.n	8005878 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800584e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800585e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	3b01      	subs	r3, #1
 800586c:	035a      	lsls	r2, r3, #13
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
 8005876:	e007      	b.n	8005888 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005886:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	051a      	lsls	r2, r3, #20
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6899      	ldr	r1, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058ca:	025a      	lsls	r2, r3, #9
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6899      	ldr	r1, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	029a      	lsls	r2, r3, #10
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40012300 	.word	0x40012300
 8005908:	0f000001 	.word	0x0f000001

0800590c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005922:	2b00      	cmp	r3, #0
 8005924:	d13c      	bne.n	80059a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d12b      	bne.n	8005998 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005944:	2b00      	cmp	r3, #0
 8005946:	d127      	bne.n	8005998 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005952:	2b00      	cmp	r3, #0
 8005954:	d006      	beq.n	8005964 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005960:	2b00      	cmp	r3, #0
 8005962:	d119      	bne.n	8005998 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0220 	bic.w	r2, r2, #32
 8005972:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d105      	bne.n	8005998 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	f043 0201 	orr.w	r2, r3, #1
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7fc ffcf 	bl	800293c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800599e:	e00e      	b.n	80059be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff fd75 	bl	800549c <HAL_ADC_ErrorCallback>
}
 80059b2:	e004      	b.n	80059be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7ff fd57 	bl	8005488 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2240      	movs	r2, #64	; 0x40
 80059f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f043 0204 	orr.w	r2, r3, #4
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f7ff fd4a 	bl	800549c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <__NVIC_SetPriorityGrouping+0x44>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a42:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <__NVIC_SetPriorityGrouping+0x44>)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	60d3      	str	r3, [r2, #12]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <__NVIC_GetPriorityGrouping+0x18>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	f003 0307 	and.w	r3, r3, #7
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	e000ed00 	.word	0xe000ed00

08005a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	db0b      	blt.n	8005a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	f003 021f 	and.w	r2, r3, #31
 8005a8c:	4907      	ldr	r1, [pc, #28]	; (8005aac <__NVIC_EnableIRQ+0x38>)
 8005a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	2001      	movs	r0, #1
 8005a96:	fa00 f202 	lsl.w	r2, r0, r2
 8005a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	e000e100 	.word	0xe000e100

08005ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db0a      	blt.n	8005ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	490c      	ldr	r1, [pc, #48]	; (8005afc <__NVIC_SetPriority+0x4c>)
 8005aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad8:	e00a      	b.n	8005af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4908      	ldr	r1, [pc, #32]	; (8005b00 <__NVIC_SetPriority+0x50>)
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	3b04      	subs	r3, #4
 8005ae8:	0112      	lsls	r2, r2, #4
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	440b      	add	r3, r1
 8005aee:	761a      	strb	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000e100 	.word	0xe000e100
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	; 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f1c3 0307 	rsb	r3, r3, #7
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf28      	it	cs
 8005b22:	2304      	movcs	r3, #4
 8005b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d902      	bls.n	8005b34 <NVIC_EncodePriority+0x30>
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3b03      	subs	r3, #3
 8005b32:	e000      	b.n	8005b36 <NVIC_EncodePriority+0x32>
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	401a      	ands	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	43d9      	mvns	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	4313      	orrs	r3, r2
         );
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3724      	adds	r7, #36	; 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b7c:	d301      	bcc.n	8005b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e00f      	b.n	8005ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <SysTick_Config+0x40>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b8a:	210f      	movs	r1, #15
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	f7ff ff8e 	bl	8005ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <SysTick_Config+0x40>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b9a:	4b04      	ldr	r3, [pc, #16]	; (8005bac <SysTick_Config+0x40>)
 8005b9c:	2207      	movs	r2, #7
 8005b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	e000e010 	.word	0xe000e010

08005bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff29 	bl	8005a10 <__NVIC_SetPriorityGrouping>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	4603      	mov	r3, r0
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd8:	f7ff ff3e 	bl	8005a58 <__NVIC_GetPriorityGrouping>
 8005bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff ff8e 	bl	8005b04 <NVIC_EncodePriority>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff5d 	bl	8005ab0 <__NVIC_SetPriority>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	4603      	mov	r3, r0
 8005c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff ff31 	bl	8005a74 <__NVIC_EnableIRQ>
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff ffa2 	bl	8005b6c <SysTick_Config>
 8005c28:	4603      	mov	r3, r0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c40:	f7ff fa6c 	bl	800511c <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e099      	b.n	8005d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c70:	e00f      	b.n	8005c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c72:	f7ff fa53 	bl	800511c <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	d908      	bls.n	8005c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e078      	b.n	8005d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e8      	bne.n	8005c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4b38      	ldr	r3, [pc, #224]	; (8005d8c <HAL_DMA_Init+0x158>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d107      	bne.n	8005cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0307 	bic.w	r3, r3, #7
 8005d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d117      	bne.n	8005d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00e      	beq.n	8005d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 facd 	bl	80062d8 <DMA_CheckFifoParam>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2240      	movs	r2, #64	; 0x40
 8005d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d52:	2301      	movs	r3, #1
 8005d54:	e016      	b.n	8005d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa84 	bl	800626c <DMA_CalcBaseAndBitshift>
 8005d64:	4603      	mov	r3, r0
 8005d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6c:	223f      	movs	r2, #63	; 0x3f
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	f010803f 	.word	0xf010803f

08005d90 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e050      	b.n	8005e44 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d101      	bne.n	8005db2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005dae:	2302      	movs	r3, #2
 8005db0:	e048      	b.n	8005e44 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2200      	movs	r2, #0
 8005de0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2221      	movs	r2, #33	; 0x21
 8005df0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa3a 	bl	800626c <DMA_CalcBaseAndBitshift>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e24:	223f      	movs	r2, #63	; 0x3f
 8005e26:	409a      	lsls	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_DMA_Start_IT+0x26>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e040      	b.n	8005ef4 <HAL_DMA_Start_IT+0xa8>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d12f      	bne.n	8005ee6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f9b8 	bl	8006210 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea4:	223f      	movs	r2, #63	; 0x3f
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0216 	orr.w	r2, r2, #22
 8005eba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0208 	orr.w	r2, r2, #8
 8005ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e005      	b.n	8005ef2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005eee:	2302      	movs	r3, #2
 8005ef0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f08:	4b92      	ldr	r3, [pc, #584]	; (8006154 <HAL_DMA_IRQHandler+0x258>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a92      	ldr	r2, [pc, #584]	; (8006158 <HAL_DMA_IRQHandler+0x25c>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	0a9b      	lsrs	r3, r3, #10
 8005f14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f26:	2208      	movs	r2, #8
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01a      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d013      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0204 	bic.w	r2, r2, #4
 8005f4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f54:	2208      	movs	r2, #8
 8005f56:	409a      	lsls	r2, r3
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f60:	f043 0201 	orr.w	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d012      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	f043 0202 	orr.w	r2, r3, #2
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa2:	2204      	movs	r2, #4
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d012      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00b      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	409a      	lsls	r2, r3
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fcc:	f043 0204 	orr.w	r2, r3, #4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd8:	2210      	movs	r2, #16
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d043      	beq.n	800606c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d03c      	beq.n	800606c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	409a      	lsls	r2, r3
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d018      	beq.n	800603e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d108      	bne.n	800602c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d024      	beq.n	800606c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	4798      	blx	r3
 800602a:	e01f      	b.n	800606c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01b      	beq.n	800606c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4798      	blx	r3
 800603c:	e016      	b.n	800606c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d107      	bne.n	800605c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0208 	bic.w	r2, r2, #8
 800605a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	2220      	movs	r2, #32
 8006072:	409a      	lsls	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4013      	ands	r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 808e 	beq.w	800619a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8086 	beq.w	800619a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006092:	2220      	movs	r2, #32
 8006094:	409a      	lsls	r2, r3
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d136      	bne.n	8006114 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0216 	bic.w	r2, r2, #22
 80060b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <HAL_DMA_IRQHandler+0x1da>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0208 	bic.w	r2, r2, #8
 80060e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ea:	223f      	movs	r2, #63	; 0x3f
 80060ec:	409a      	lsls	r2, r3
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006106:	2b00      	cmp	r3, #0
 8006108:	d07d      	beq.n	8006206 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
        }
        return;
 8006112:	e078      	b.n	8006206 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01c      	beq.n	800615c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d108      	bne.n	8006142 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006134:	2b00      	cmp	r3, #0
 8006136:	d030      	beq.n	800619a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
 8006140:	e02b      	b.n	800619a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d027      	beq.n	800619a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
 8006152:	e022      	b.n	800619a <HAL_DMA_IRQHandler+0x29e>
 8006154:	20000000 	.word	0x20000000
 8006158:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0210 	bic.w	r2, r2, #16
 8006178:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d032      	beq.n	8006208 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d022      	beq.n	80061f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2205      	movs	r2, #5
 80061b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0201 	bic.w	r2, r2, #1
 80061c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	3301      	adds	r3, #1
 80061ca:	60bb      	str	r3, [r7, #8]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d307      	bcc.n	80061e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f2      	bne.n	80061c6 <HAL_DMA_IRQHandler+0x2ca>
 80061e0:	e000      	b.n	80061e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80061e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
 8006204:	e000      	b.n	8006208 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006206:	bf00      	nop
    }
  }
}
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop

08006210 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800622c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d108      	bne.n	8006250 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800624e:	e007      	b.n	8006260 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	3b10      	subs	r3, #16
 800627c:	4a14      	ldr	r2, [pc, #80]	; (80062d0 <DMA_CalcBaseAndBitshift+0x64>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006286:	4a13      	ldr	r2, [pc, #76]	; (80062d4 <DMA_CalcBaseAndBitshift+0x68>)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d909      	bls.n	80062ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	1d1a      	adds	r2, r3, #4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	659a      	str	r2, [r3, #88]	; 0x58
 80062ac:	e007      	b.n	80062be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	aaaaaaab 	.word	0xaaaaaaab
 80062d4:	0800f3dc 	.word	0x0800f3dc

080062d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d11f      	bne.n	8006332 <DMA_CheckFifoParam+0x5a>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d856      	bhi.n	80063a6 <DMA_CheckFifoParam+0xce>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <DMA_CheckFifoParam+0x28>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006311 	.word	0x08006311
 8006304:	08006323 	.word	0x08006323
 8006308:	08006311 	.word	0x08006311
 800630c:	080063a7 	.word	0x080063a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d046      	beq.n	80063aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006320:	e043      	b.n	80063aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006326:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800632a:	d140      	bne.n	80063ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006330:	e03d      	b.n	80063ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633a:	d121      	bne.n	8006380 <DMA_CheckFifoParam+0xa8>
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d837      	bhi.n	80063b2 <DMA_CheckFifoParam+0xda>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <DMA_CheckFifoParam+0x70>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006359 	.word	0x08006359
 800634c:	0800635f 	.word	0x0800635f
 8006350:	08006359 	.word	0x08006359
 8006354:	08006371 	.word	0x08006371
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
      break;
 800635c:	e030      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d025      	beq.n	80063b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800636e:	e022      	b.n	80063b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006378:	d11f      	bne.n	80063ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800637e:	e01c      	b.n	80063ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d903      	bls.n	800638e <DMA_CheckFifoParam+0xb6>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b03      	cmp	r3, #3
 800638a:	d003      	beq.n	8006394 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800638c:	e018      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
      break;
 8006392:	e015      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00e      	beq.n	80063be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
      break;
 80063a4:	e00b      	b.n	80063be <DMA_CheckFifoParam+0xe6>
      break;
 80063a6:	bf00      	nop
 80063a8:	e00a      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063aa:	bf00      	nop
 80063ac:	e008      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063ae:	bf00      	nop
 80063b0:	e006      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063b2:	bf00      	nop
 80063b4:	e004      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063b6:	bf00      	nop
 80063b8:	e002      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80063ba:	bf00      	nop
 80063bc:	e000      	b.n	80063c0 <DMA_CheckFifoParam+0xe8>
      break;
 80063be:	bf00      	nop
    }
  } 
  
  return status; 
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop

080063d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e03b      	b.n	800645a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fc fc4c 	bl	8002c94 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006420:	f023 0107 	bic.w	r1, r3, #7
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800643a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68d1      	ldr	r1, [r2, #12]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	430b      	orrs	r3, r1
 8006448:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b086      	sub	sp, #24
 8006466:	af02      	add	r7, sp, #8
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
 800646e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_DMA2D_Start+0x1c>
 800647a:	2302      	movs	r3, #2
 800647c:	e018      	b.n	80064b0 <HAL_DMA2D_Start+0x4e>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2202      	movs	r2, #2
 800648a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f989 	bl	80067b0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0201 	orr.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d056      	beq.n	8006582 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80064d4:	f7fe fe22 	bl	800511c <HAL_GetTick>
 80064d8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80064da:	e04b      	b.n	8006574 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d023      	beq.n	8006536 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	f043 0202 	orr.w	r2, r3, #2
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	f043 0201 	orr.w	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2221      	movs	r2, #33	; 0x21
 8006520:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2204      	movs	r2, #4
 8006526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e0a5      	b.n	8006682 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d01a      	beq.n	8006574 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800653e:	f7fe fded 	bl	800511c <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d302      	bcc.n	8006554 <HAL_DMA2D_PollForTransfer+0x9c>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10f      	bne.n	8006574 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006558:	f043 0220 	orr.w	r2, r3, #32
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2203      	movs	r2, #3
 8006564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e086      	b.n	8006682 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0ac      	beq.n	80064dc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d061      	beq.n	8006668 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80065a4:	f7fe fdba 	bl	800511c <HAL_GetTick>
 80065a8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80065aa:	e056      	b.n	800665a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d02e      	beq.n	800661c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065cc:	f043 0204 	orr.w	r2, r3, #4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	f043 0202 	orr.w	r2, r3, #2
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f8:	f043 0201 	orr.w	r2, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2229      	movs	r2, #41	; 0x29
 8006606:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2204      	movs	r2, #4
 800660c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e032      	b.n	8006682 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d01a      	beq.n	800665a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006624:	f7fe fd7a 	bl	800511c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d302      	bcc.n	800663a <HAL_DMA2D_PollForTransfer+0x182>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10f      	bne.n	800665a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663e:	f043 0220 	orr.w	r2, r3, #32
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e013      	b.n	8006682 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0a1      	beq.n	80065ac <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2212      	movs	r2, #18
 800666e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_DMA2D_ConfigLayer+0x20>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e079      	b.n	80067a0 <HAL_DMA2D_ConfigLayer+0x114>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	3318      	adds	r3, #24
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4413      	add	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80066d6:	4b35      	ldr	r3, [pc, #212]	; (80067ac <HAL_DMA2D_ConfigLayer+0x120>)
 80066d8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b0a      	cmp	r3, #10
 80066e0:	d003      	beq.n	80066ea <HAL_DMA2D_ConfigLayer+0x5e>
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b09      	cmp	r3, #9
 80066e8:	d107      	bne.n	80066fa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e005      	b.n	8006706 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	061b      	lsls	r3, r3, #24
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d120      	bne.n	800674e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	43db      	mvns	r3, r3
 8006716:	ea02 0103 	and.w	r1, r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	430a      	orrs	r2, r1
 8006722:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b0a      	cmp	r3, #10
 8006734:	d003      	beq.n	800673e <HAL_DMA2D_ConfigLayer+0xb2>
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b09      	cmp	r3, #9
 800673c:	d127      	bne.n	800678e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800674a:	629a      	str	r2, [r3, #40]	; 0x28
 800674c:	e01f      	b.n	800678e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	43db      	mvns	r3, r3
 8006758:	ea02 0103 	and.w	r1, r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	430a      	orrs	r2, r1
 8006764:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b0a      	cmp	r3, #10
 8006776:	d003      	beq.n	8006780 <HAL_DMA2D_ConfigLayer+0xf4>
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b09      	cmp	r3, #9
 800677e:	d106      	bne.n	800678e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800678c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	ff03000f 	.word	0xff03000f

080067b0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b08b      	sub	sp, #44	; 0x2c
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	041a      	lsls	r2, r3, #16
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	431a      	orrs	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067e8:	d174      	bne.n	80068d4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80067f0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067f8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006800:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d108      	bne.n	8006822 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	431a      	orrs	r2, r3
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	4313      	orrs	r3, r2
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
 8006820:	e053      	b.n	80068ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d106      	bne.n	8006838 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	4313      	orrs	r3, r2
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
 8006836:	e048      	b.n	80068ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d111      	bne.n	8006864 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	0cdb      	lsrs	r3, r3, #19
 8006844:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	0a9b      	lsrs	r3, r3, #10
 800684a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	08db      	lsrs	r3, r3, #3
 8006850:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	02db      	lsls	r3, r3, #11
 800685a:	4313      	orrs	r3, r2
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
 8006862:	e032      	b.n	80068ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b03      	cmp	r3, #3
 800686a:	d117      	bne.n	800689c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	0fdb      	lsrs	r3, r3, #31
 8006870:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	0cdb      	lsrs	r3, r3, #19
 8006876:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	0adb      	lsrs	r3, r3, #11
 800687c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	08db      	lsrs	r3, r3, #3
 8006882:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	029b      	lsls	r3, r3, #10
 800688c:	431a      	orrs	r2, r3
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	03db      	lsls	r3, r3, #15
 8006892:	4313      	orrs	r3, r2
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
 800689a:	e016      	b.n	80068ca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	0f1b      	lsrs	r3, r3, #28
 80068a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	0d1b      	lsrs	r3, r3, #20
 80068a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	0b1b      	lsrs	r3, r3, #12
 80068ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	091b      	lsrs	r3, r3, #4
 80068b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	011a      	lsls	r2, r3, #4
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	431a      	orrs	r2, r3
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	031b      	lsls	r3, r3, #12
 80068c2:	4313      	orrs	r3, r2
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80068d2:	e003      	b.n	80068dc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	60da      	str	r2, [r3, #12]
}
 80068dc:	bf00      	nop
 80068de:	372c      	adds	r7, #44	; 0x2c
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b089      	sub	sp, #36	; 0x24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068fe:	2300      	movs	r3, #0
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	e177      	b.n	8006bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006904:	2201      	movs	r2, #1
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	fa02 f303 	lsl.w	r3, r2, r3
 800690c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4013      	ands	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	429a      	cmp	r2, r3
 800691e:	f040 8166 	bne.w	8006bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b01      	cmp	r3, #1
 800692c:	d005      	beq.n	800693a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006936:	2b02      	cmp	r3, #2
 8006938:	d130      	bne.n	800699c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	2203      	movs	r2, #3
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43db      	mvns	r3, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4013      	ands	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	4313      	orrs	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006970:	2201      	movs	r2, #1
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	43db      	mvns	r3, r3
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	4013      	ands	r3, r2
 800697e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	091b      	lsrs	r3, r3, #4
 8006986:	f003 0201 	and.w	r2, r3, #1
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	fa02 f303 	lsl.w	r3, r2, r3
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	4313      	orrs	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d017      	beq.n	80069d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	2203      	movs	r2, #3
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	43db      	mvns	r3, r3
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	4013      	ands	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d123      	bne.n	8006a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	08da      	lsrs	r2, r3, #3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3208      	adds	r2, #8
 80069ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	220f      	movs	r2, #15
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	43db      	mvns	r3, r3
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	4013      	ands	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	08da      	lsrs	r2, r3, #3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3208      	adds	r2, #8
 8006a26:	69b9      	ldr	r1, [r7, #24]
 8006a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	2203      	movs	r2, #3
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	43db      	mvns	r3, r3
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	4013      	ands	r3, r2
 8006a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f003 0203 	and.w	r2, r3, #3
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 80c0 	beq.w	8006bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	4b66      	ldr	r3, [pc, #408]	; (8006c0c <HAL_GPIO_Init+0x324>)
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	4a65      	ldr	r2, [pc, #404]	; (8006c0c <HAL_GPIO_Init+0x324>)
 8006a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a7e:	4b63      	ldr	r3, [pc, #396]	; (8006c0c <HAL_GPIO_Init+0x324>)
 8006a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a8a:	4a61      	ldr	r2, [pc, #388]	; (8006c10 <HAL_GPIO_Init+0x328>)
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	089b      	lsrs	r3, r3, #2
 8006a90:	3302      	adds	r3, #2
 8006a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	220f      	movs	r2, #15
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43db      	mvns	r3, r3
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a58      	ldr	r2, [pc, #352]	; (8006c14 <HAL_GPIO_Init+0x32c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d037      	beq.n	8006b26 <HAL_GPIO_Init+0x23e>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a57      	ldr	r2, [pc, #348]	; (8006c18 <HAL_GPIO_Init+0x330>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d031      	beq.n	8006b22 <HAL_GPIO_Init+0x23a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a56      	ldr	r2, [pc, #344]	; (8006c1c <HAL_GPIO_Init+0x334>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d02b      	beq.n	8006b1e <HAL_GPIO_Init+0x236>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a55      	ldr	r2, [pc, #340]	; (8006c20 <HAL_GPIO_Init+0x338>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d025      	beq.n	8006b1a <HAL_GPIO_Init+0x232>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a54      	ldr	r2, [pc, #336]	; (8006c24 <HAL_GPIO_Init+0x33c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01f      	beq.n	8006b16 <HAL_GPIO_Init+0x22e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a53      	ldr	r2, [pc, #332]	; (8006c28 <HAL_GPIO_Init+0x340>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d019      	beq.n	8006b12 <HAL_GPIO_Init+0x22a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a52      	ldr	r2, [pc, #328]	; (8006c2c <HAL_GPIO_Init+0x344>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <HAL_GPIO_Init+0x226>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a51      	ldr	r2, [pc, #324]	; (8006c30 <HAL_GPIO_Init+0x348>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00d      	beq.n	8006b0a <HAL_GPIO_Init+0x222>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a50      	ldr	r2, [pc, #320]	; (8006c34 <HAL_GPIO_Init+0x34c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <HAL_GPIO_Init+0x21e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a4f      	ldr	r2, [pc, #316]	; (8006c38 <HAL_GPIO_Init+0x350>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d101      	bne.n	8006b02 <HAL_GPIO_Init+0x21a>
 8006afe:	2309      	movs	r3, #9
 8006b00:	e012      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b02:	230a      	movs	r3, #10
 8006b04:	e010      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b06:	2308      	movs	r3, #8
 8006b08:	e00e      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b0a:	2307      	movs	r3, #7
 8006b0c:	e00c      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b0e:	2306      	movs	r3, #6
 8006b10:	e00a      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b12:	2305      	movs	r3, #5
 8006b14:	e008      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b16:	2304      	movs	r3, #4
 8006b18:	e006      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e004      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e002      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <HAL_GPIO_Init+0x240>
 8006b26:	2300      	movs	r3, #0
 8006b28:	69fa      	ldr	r2, [r7, #28]
 8006b2a:	f002 0203 	and.w	r2, r2, #3
 8006b2e:	0092      	lsls	r2, r2, #2
 8006b30:	4093      	lsls	r3, r2
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b38:	4935      	ldr	r1, [pc, #212]	; (8006c10 <HAL_GPIO_Init+0x328>)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	089b      	lsrs	r3, r3, #2
 8006b3e:	3302      	adds	r3, #2
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b46:	4b3d      	ldr	r3, [pc, #244]	; (8006c3c <HAL_GPIO_Init+0x354>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	4013      	ands	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b6a:	4a34      	ldr	r2, [pc, #208]	; (8006c3c <HAL_GPIO_Init+0x354>)
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b70:	4b32      	ldr	r3, [pc, #200]	; (8006c3c <HAL_GPIO_Init+0x354>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b94:	4a29      	ldr	r2, [pc, #164]	; (8006c3c <HAL_GPIO_Init+0x354>)
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b9a:	4b28      	ldr	r3, [pc, #160]	; (8006c3c <HAL_GPIO_Init+0x354>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bbe:	4a1f      	ldr	r2, [pc, #124]	; (8006c3c <HAL_GPIO_Init+0x354>)
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bc4:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <HAL_GPIO_Init+0x354>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	43db      	mvns	r3, r3
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006be8:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <HAL_GPIO_Init+0x354>)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2b0f      	cmp	r3, #15
 8006bf8:	f67f ae84 	bls.w	8006904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	3724      	adds	r7, #36	; 0x24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	40013800 	.word	0x40013800
 8006c14:	40020000 	.word	0x40020000
 8006c18:	40020400 	.word	0x40020400
 8006c1c:	40020800 	.word	0x40020800
 8006c20:	40020c00 	.word	0x40020c00
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40021400 	.word	0x40021400
 8006c2c:	40021800 	.word	0x40021800
 8006c30:	40021c00 	.word	0x40021c00
 8006c34:	40022000 	.word	0x40022000
 8006c38:	40022400 	.word	0x40022400
 8006c3c:	40013c00 	.word	0x40013c00

08006c40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c56:	2300      	movs	r3, #0
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	e0d9      	b.n	8006e10 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	f040 80c9 	bne.w	8006e0a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006c78:	4a6b      	ldr	r2, [pc, #428]	; (8006e28 <HAL_GPIO_DeInit+0x1e8>)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	089b      	lsrs	r3, r3, #2
 8006c7e:	3302      	adds	r3, #2
 8006c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c84:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	220f      	movs	r2, #15
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	4013      	ands	r3, r2
 8006c98:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a63      	ldr	r2, [pc, #396]	; (8006e2c <HAL_GPIO_DeInit+0x1ec>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d037      	beq.n	8006d12 <HAL_GPIO_DeInit+0xd2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a62      	ldr	r2, [pc, #392]	; (8006e30 <HAL_GPIO_DeInit+0x1f0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d031      	beq.n	8006d0e <HAL_GPIO_DeInit+0xce>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a61      	ldr	r2, [pc, #388]	; (8006e34 <HAL_GPIO_DeInit+0x1f4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d02b      	beq.n	8006d0a <HAL_GPIO_DeInit+0xca>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a60      	ldr	r2, [pc, #384]	; (8006e38 <HAL_GPIO_DeInit+0x1f8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d025      	beq.n	8006d06 <HAL_GPIO_DeInit+0xc6>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a5f      	ldr	r2, [pc, #380]	; (8006e3c <HAL_GPIO_DeInit+0x1fc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01f      	beq.n	8006d02 <HAL_GPIO_DeInit+0xc2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a5e      	ldr	r2, [pc, #376]	; (8006e40 <HAL_GPIO_DeInit+0x200>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d019      	beq.n	8006cfe <HAL_GPIO_DeInit+0xbe>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a5d      	ldr	r2, [pc, #372]	; (8006e44 <HAL_GPIO_DeInit+0x204>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <HAL_GPIO_DeInit+0xba>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a5c      	ldr	r2, [pc, #368]	; (8006e48 <HAL_GPIO_DeInit+0x208>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00d      	beq.n	8006cf6 <HAL_GPIO_DeInit+0xb6>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a5b      	ldr	r2, [pc, #364]	; (8006e4c <HAL_GPIO_DeInit+0x20c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d007      	beq.n	8006cf2 <HAL_GPIO_DeInit+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a5a      	ldr	r2, [pc, #360]	; (8006e50 <HAL_GPIO_DeInit+0x210>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <HAL_GPIO_DeInit+0xae>
 8006cea:	2309      	movs	r3, #9
 8006cec:	e012      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006cee:	230a      	movs	r3, #10
 8006cf0:	e010      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	e00e      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006cf6:	2307      	movs	r3, #7
 8006cf8:	e00c      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006cfa:	2306      	movs	r3, #6
 8006cfc:	e00a      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006cfe:	2305      	movs	r3, #5
 8006d00:	e008      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006d02:	2304      	movs	r3, #4
 8006d04:	e006      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006d06:	2303      	movs	r3, #3
 8006d08:	e004      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e002      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <HAL_GPIO_DeInit+0xd4>
 8006d12:	2300      	movs	r3, #0
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	f002 0203 	and.w	r2, r2, #3
 8006d1a:	0092      	lsls	r2, r2, #2
 8006d1c:	4093      	lsls	r3, r2
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d132      	bne.n	8006d8a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006d24:	4b4b      	ldr	r3, [pc, #300]	; (8006e54 <HAL_GPIO_DeInit+0x214>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	4949      	ldr	r1, [pc, #292]	; (8006e54 <HAL_GPIO_DeInit+0x214>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006d32:	4b48      	ldr	r3, [pc, #288]	; (8006e54 <HAL_GPIO_DeInit+0x214>)
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	4946      	ldr	r1, [pc, #280]	; (8006e54 <HAL_GPIO_DeInit+0x214>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006d40:	4b44      	ldr	r3, [pc, #272]	; (8006e54 <HAL_GPIO_DeInit+0x214>)
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	4942      	ldr	r1, [pc, #264]	; (8006e54 <HAL_GPIO_DeInit+0x214>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d4e:	4b41      	ldr	r3, [pc, #260]	; (8006e54 <HAL_GPIO_DeInit+0x214>)
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	493f      	ldr	r1, [pc, #252]	; (8006e54 <HAL_GPIO_DeInit+0x214>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	220f      	movs	r2, #15
 8006d66:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006d6c:	4a2e      	ldr	r2, [pc, #184]	; (8006e28 <HAL_GPIO_DeInit+0x1e8>)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	089b      	lsrs	r3, r3, #2
 8006d72:	3302      	adds	r3, #2
 8006d74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	43da      	mvns	r2, r3
 8006d7c:	482a      	ldr	r0, [pc, #168]	; (8006e28 <HAL_GPIO_DeInit+0x1e8>)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	089b      	lsrs	r3, r3, #2
 8006d82:	400a      	ands	r2, r1
 8006d84:	3302      	adds	r3, #2
 8006d86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	2103      	movs	r1, #3
 8006d94:	fa01 f303 	lsl.w	r3, r1, r3
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	08da      	lsrs	r2, r3, #3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3208      	adds	r2, #8
 8006da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	220f      	movs	r2, #15
 8006db6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	08d2      	lsrs	r2, r2, #3
 8006dc0:	4019      	ands	r1, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3208      	adds	r2, #8
 8006dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	2103      	movs	r1, #3
 8006dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd8:	43db      	mvns	r3, r3
 8006dda:	401a      	ands	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	2101      	movs	r1, #1
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	43db      	mvns	r3, r3
 8006dee:	401a      	ands	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	2103      	movs	r1, #3
 8006dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	401a      	ands	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b0f      	cmp	r3, #15
 8006e14:	f67f af22 	bls.w	8006c5c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40013800 	.word	0x40013800
 8006e2c:	40020000 	.word	0x40020000
 8006e30:	40020400 	.word	0x40020400
 8006e34:	40020800 	.word	0x40020800
 8006e38:	40020c00 	.word	0x40020c00
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	40021400 	.word	0x40021400
 8006e44:	40021800 	.word	0x40021800
 8006e48:	40021c00 	.word	0x40021c00
 8006e4c:	40022000 	.word	0x40022000
 8006e50:	40022400 	.word	0x40022400
 8006e54:	40013c00 	.word	0x40013c00

08006e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	887b      	ldrh	r3, [r7, #2]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e70:	2301      	movs	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e001      	b.n	8006e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	807b      	strh	r3, [r7, #2]
 8006e94:	4613      	mov	r3, r2
 8006e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e98:	787b      	ldrb	r3, [r7, #1]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e9e:	887a      	ldrh	r2, [r7, #2]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ea4:	e003      	b.n	8006eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ea6:	887b      	ldrh	r3, [r7, #2]
 8006ea8:	041a      	lsls	r2, r3, #16
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	619a      	str	r2, [r3, #24]
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
	...

08006ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e12b      	b.n	8007126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fc f8d6 	bl	8003094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2224      	movs	r2, #36	; 0x24
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0201 	bic.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f20:	f001 f8f8 	bl	8008114 <HAL_RCC_GetPCLK1Freq>
 8006f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	4a81      	ldr	r2, [pc, #516]	; (8007130 <HAL_I2C_Init+0x274>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d807      	bhi.n	8006f40 <HAL_I2C_Init+0x84>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4a80      	ldr	r2, [pc, #512]	; (8007134 <HAL_I2C_Init+0x278>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	bf94      	ite	ls
 8006f38:	2301      	movls	r3, #1
 8006f3a:	2300      	movhi	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	e006      	b.n	8006f4e <HAL_I2C_Init+0x92>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a7d      	ldr	r2, [pc, #500]	; (8007138 <HAL_I2C_Init+0x27c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	bf94      	ite	ls
 8006f48:	2301      	movls	r3, #1
 8006f4a:	2300      	movhi	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e0e7      	b.n	8007126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4a78      	ldr	r2, [pc, #480]	; (800713c <HAL_I2C_Init+0x280>)
 8006f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5e:	0c9b      	lsrs	r3, r3, #18
 8006f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	4a6a      	ldr	r2, [pc, #424]	; (8007130 <HAL_I2C_Init+0x274>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d802      	bhi.n	8006f90 <HAL_I2C_Init+0xd4>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	e009      	b.n	8006fa4 <HAL_I2C_Init+0xe8>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f96:	fb02 f303 	mul.w	r3, r2, r3
 8006f9a:	4a69      	ldr	r2, [pc, #420]	; (8007140 <HAL_I2C_Init+0x284>)
 8006f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa0:	099b      	lsrs	r3, r3, #6
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006fb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	495c      	ldr	r1, [pc, #368]	; (8007130 <HAL_I2C_Init+0x274>)
 8006fc0:	428b      	cmp	r3, r1
 8006fc2:	d819      	bhi.n	8006ff8 <HAL_I2C_Init+0x13c>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	1e59      	subs	r1, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fd2:	1c59      	adds	r1, r3, #1
 8006fd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006fd8:	400b      	ands	r3, r1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <HAL_I2C_Init+0x138>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1e59      	subs	r1, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fec:	3301      	adds	r3, #1
 8006fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ff2:	e051      	b.n	8007098 <HAL_I2C_Init+0x1dc>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	e04f      	b.n	8007098 <HAL_I2C_Init+0x1dc>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d111      	bne.n	8007024 <HAL_I2C_Init+0x168>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	1e58      	subs	r0, r3, #1
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6859      	ldr	r1, [r3, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	440b      	add	r3, r1
 800700e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007012:	3301      	adds	r3, #1
 8007014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007018:	2b00      	cmp	r3, #0
 800701a:	bf0c      	ite	eq
 800701c:	2301      	moveq	r3, #1
 800701e:	2300      	movne	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	e012      	b.n	800704a <HAL_I2C_Init+0x18e>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	1e58      	subs	r0, r3, #1
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6859      	ldr	r1, [r3, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	0099      	lsls	r1, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	fbb0 f3f3 	udiv	r3, r0, r3
 800703a:	3301      	adds	r3, #1
 800703c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_I2C_Init+0x196>
 800704e:	2301      	movs	r3, #1
 8007050:	e022      	b.n	8007098 <HAL_I2C_Init+0x1dc>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10e      	bne.n	8007078 <HAL_I2C_Init+0x1bc>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1e58      	subs	r0, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6859      	ldr	r1, [r3, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	440b      	add	r3, r1
 8007068:	fbb0 f3f3 	udiv	r3, r0, r3
 800706c:	3301      	adds	r3, #1
 800706e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007076:	e00f      	b.n	8007098 <HAL_I2C_Init+0x1dc>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	1e58      	subs	r0, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6859      	ldr	r1, [r3, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	0099      	lsls	r1, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	fbb0 f3f3 	udiv	r3, r0, r3
 800708e:	3301      	adds	r3, #1
 8007090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007094:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	6809      	ldr	r1, [r1, #0]
 800709c:	4313      	orrs	r3, r2
 800709e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69da      	ldr	r2, [r3, #28]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80070c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6911      	ldr	r1, [r2, #16]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	68d2      	ldr	r2, [r2, #12]
 80070d2:	4311      	orrs	r1, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	430b      	orrs	r3, r1
 80070da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695a      	ldr	r2, [r3, #20]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	000186a0 	.word	0x000186a0
 8007134:	001e847f 	.word	0x001e847f
 8007138:	003d08ff 	.word	0x003d08ff
 800713c:	431bde83 	.word	0x431bde83
 8007140:	10624dd3 	.word	0x10624dd3

08007144 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b20      	cmp	r3, #32
 8007158:	d129      	bne.n	80071ae <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2224      	movs	r2, #36	; 0x24
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0201 	bic.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0210 	bic.w	r2, r2, #16
 8007180:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0201 	orr.w	r2, r2, #1
 80071a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e000      	b.n	80071b0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80071ae:	2302      	movs	r3, #2
  }
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d12a      	bne.n	800722c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2224      	movs	r2, #36	; 0x24
 80071da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80071f6:	89fb      	ldrh	r3, [r7, #14]
 80071f8:	f023 030f 	bic.w	r3, r3, #15
 80071fc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	b29a      	uxth	r2, r3
 8007202:	89fb      	ldrh	r3, [r7, #14]
 8007204:	4313      	orrs	r3, r2
 8007206:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	89fa      	ldrh	r2, [r7, #14]
 800720e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	e000      	b.n	800722e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800722c:	2302      	movs	r3, #2
  }
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e0bf      	b.n	80073ce <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fc f832 	bl	80032cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800727e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6999      	ldr	r1, [r3, #24]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007294:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6899      	ldr	r1, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4b4a      	ldr	r3, [pc, #296]	; (80073d8 <HAL_LTDC_Init+0x19c>)
 80072b0:	400b      	ands	r3, r1
 80072b2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	041b      	lsls	r3, r3, #16
 80072ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6899      	ldr	r1, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699a      	ldr	r2, [r3, #24]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68d9      	ldr	r1, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4b3e      	ldr	r3, [pc, #248]	; (80073d8 <HAL_LTDC_Init+0x19c>)
 80072de:	400b      	ands	r3, r1
 80072e0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	041b      	lsls	r3, r3, #16
 80072e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68d9      	ldr	r1, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1a      	ldr	r2, [r3, #32]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	431a      	orrs	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6919      	ldr	r1, [r3, #16]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <HAL_LTDC_Init+0x19c>)
 800730c:	400b      	ands	r3, r1
 800730e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6919      	ldr	r1, [r3, #16]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6959      	ldr	r1, [r3, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4b27      	ldr	r3, [pc, #156]	; (80073d8 <HAL_LTDC_Init+0x19c>)
 800733a:	400b      	ands	r3, r1
 800733c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6959      	ldr	r1, [r3, #20]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007362:	021b      	lsls	r3, r3, #8
 8007364:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800737e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0206 	orr.w	r2, r2, #6
 80073aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0201 	orr.w	r2, r2, #1
 80073ba:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	f000f800 	.word	0xf000f800

080073dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80073dc:	b5b0      	push	{r4, r5, r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_LTDC_ConfigLayer+0x1a>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e02c      	b.n	8007450 <HAL_LTDC_ConfigLayer+0x74>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2202      	movs	r2, #2
 8007402:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2134      	movs	r1, #52	; 0x34
 800740c:	fb01 f303 	mul.w	r3, r1, r3
 8007410:	4413      	add	r3, r2
 8007412:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	4614      	mov	r4, r2
 800741a:	461d      	mov	r5, r3
 800741c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800741e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 f83b 	bl	80074ac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2201      	movs	r2, #1
 800743c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bdb0      	pop	{r4, r5, r7, pc}

08007458 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_LTDC_EnableDither+0x16>
 800746a:	2302      	movs	r3, #2
 800746c:	e016      	b.n	800749c <HAL_LTDC_EnableDither+0x44>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800747e:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <HAL_LTDC_EnableDither+0x50>)
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <HAL_LTDC_EnableDither+0x50>)
 8007484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007488:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40016800 	.word	0x40016800

080074ac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b089      	sub	sp, #36	; 0x24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	0c1b      	lsrs	r3, r3, #16
 80074c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074c8:	4413      	add	r3, r2
 80074ca:	041b      	lsls	r3, r3, #16
 80074cc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	01db      	lsls	r3, r3, #7
 80074d8:	4413      	add	r3, r2
 80074da:	3384      	adds	r3, #132	; 0x84
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	4611      	mov	r1, r2
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	01d2      	lsls	r2, r2, #7
 80074e8:	440a      	add	r2, r1
 80074ea:	3284      	adds	r2, #132	; 0x84
 80074ec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074f0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007502:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007504:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4619      	mov	r1, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	01db      	lsls	r3, r3, #7
 8007510:	440b      	add	r3, r1
 8007512:	3384      	adds	r3, #132	; 0x84
 8007514:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800751a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800752a:	4413      	add	r3, r2
 800752c:	041b      	lsls	r3, r3, #16
 800752e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	01db      	lsls	r3, r3, #7
 800753a:	4413      	add	r3, r2
 800753c:	3384      	adds	r3, #132	; 0x84
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	6812      	ldr	r2, [r2, #0]
 8007544:	4611      	mov	r1, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	01d2      	lsls	r2, r2, #7
 800754a:	440a      	add	r2, r1
 800754c:	3284      	adds	r2, #132	; 0x84
 800754e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007552:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007562:	4413      	add	r3, r2
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4619      	mov	r1, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	01db      	lsls	r3, r3, #7
 8007570:	440b      	add	r3, r1
 8007572:	3384      	adds	r3, #132	; 0x84
 8007574:	4619      	mov	r1, r3
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4313      	orrs	r3, r2
 800757a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	01db      	lsls	r3, r3, #7
 8007586:	4413      	add	r3, r2
 8007588:	3384      	adds	r3, #132	; 0x84
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	6812      	ldr	r2, [r2, #0]
 8007590:	4611      	mov	r1, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	01d2      	lsls	r2, r2, #7
 8007596:	440a      	add	r2, r1
 8007598:	3284      	adds	r2, #132	; 0x84
 800759a:	f023 0307 	bic.w	r3, r3, #7
 800759e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	01db      	lsls	r3, r3, #7
 80075aa:	4413      	add	r3, r2
 80075ac:	3384      	adds	r3, #132	; 0x84
 80075ae:	461a      	mov	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	061b      	lsls	r3, r3, #24
 80075d0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	01db      	lsls	r3, r3, #7
 80075dc:	4413      	add	r3, r2
 80075de:	3384      	adds	r3, #132	; 0x84
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	01db      	lsls	r3, r3, #7
 80075ec:	4413      	add	r3, r2
 80075ee:	3384      	adds	r3, #132	; 0x84
 80075f0:	461a      	mov	r2, r3
 80075f2:	2300      	movs	r3, #0
 80075f4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075fc:	461a      	mov	r2, r3
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	431a      	orrs	r2, r3
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	431a      	orrs	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4619      	mov	r1, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	01db      	lsls	r3, r3, #7
 8007610:	440b      	add	r3, r1
 8007612:	3384      	adds	r3, #132	; 0x84
 8007614:	4619      	mov	r1, r3
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	01db      	lsls	r3, r3, #7
 8007626:	4413      	add	r3, r2
 8007628:	3384      	adds	r3, #132	; 0x84
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	6812      	ldr	r2, [r2, #0]
 8007630:	4611      	mov	r1, r2
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	01d2      	lsls	r2, r2, #7
 8007636:	440a      	add	r2, r1
 8007638:	3284      	adds	r2, #132	; 0x84
 800763a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800763e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	01db      	lsls	r3, r3, #7
 800764a:	4413      	add	r3, r2
 800764c:	3384      	adds	r3, #132	; 0x84
 800764e:	461a      	mov	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	01db      	lsls	r3, r3, #7
 8007660:	4413      	add	r3, r2
 8007662:	3384      	adds	r3, #132	; 0x84
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	4611      	mov	r1, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	01d2      	lsls	r2, r2, #7
 8007670:	440a      	add	r2, r1
 8007672:	3284      	adds	r2, #132	; 0x84
 8007674:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007678:	f023 0307 	bic.w	r3, r3, #7
 800767c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	6809      	ldr	r1, [r1, #0]
 800768a:	4608      	mov	r0, r1
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	01c9      	lsls	r1, r1, #7
 8007690:	4401      	add	r1, r0
 8007692:	3184      	adds	r1, #132	; 0x84
 8007694:	4313      	orrs	r3, r2
 8007696:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	01db      	lsls	r3, r3, #7
 80076a2:	4413      	add	r3, r2
 80076a4:	3384      	adds	r3, #132	; 0x84
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	01db      	lsls	r3, r3, #7
 80076b2:	4413      	add	r3, r2
 80076b4:	3384      	adds	r3, #132	; 0x84
 80076b6:	461a      	mov	r2, r3
 80076b8:	2300      	movs	r3, #0
 80076ba:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	01db      	lsls	r3, r3, #7
 80076c6:	4413      	add	r3, r2
 80076c8:	3384      	adds	r3, #132	; 0x84
 80076ca:	461a      	mov	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d102      	bne.n	80076e0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80076da:	2304      	movs	r3, #4
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	e01b      	b.n	8007718 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d102      	bne.n	80076ee <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80076e8:	2303      	movs	r3, #3
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	e014      	b.n	8007718 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d00b      	beq.n	800770e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d007      	beq.n	800770e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007702:	2b03      	cmp	r3, #3
 8007704:	d003      	beq.n	800770e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800770a:	2b07      	cmp	r3, #7
 800770c:	d102      	bne.n	8007714 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800770e:	2302      	movs	r3, #2
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	e001      	b.n	8007718 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007714:	2301      	movs	r3, #1
 8007716:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	01db      	lsls	r3, r3, #7
 8007722:	4413      	add	r3, r2
 8007724:	3384      	adds	r3, #132	; 0x84
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	4611      	mov	r1, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	01d2      	lsls	r2, r2, #7
 8007732:	440a      	add	r2, r1
 8007734:	3284      	adds	r2, #132	; 0x84
 8007736:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800773a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	fb02 f303 	mul.w	r3, r2, r3
 8007746:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6859      	ldr	r1, [r3, #4]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	1acb      	subs	r3, r1, r3
 8007752:	69f9      	ldr	r1, [r7, #28]
 8007754:	fb01 f303 	mul.w	r3, r1, r3
 8007758:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800775a:	68f9      	ldr	r1, [r7, #12]
 800775c:	6809      	ldr	r1, [r1, #0]
 800775e:	4608      	mov	r0, r1
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	01c9      	lsls	r1, r1, #7
 8007764:	4401      	add	r1, r0
 8007766:	3184      	adds	r1, #132	; 0x84
 8007768:	4313      	orrs	r3, r2
 800776a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	01db      	lsls	r3, r3, #7
 8007776:	4413      	add	r3, r2
 8007778:	3384      	adds	r3, #132	; 0x84
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	4611      	mov	r1, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	01d2      	lsls	r2, r2, #7
 8007786:	440a      	add	r2, r1
 8007788:	3284      	adds	r2, #132	; 0x84
 800778a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800778e:	f023 0307 	bic.w	r3, r3, #7
 8007792:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	01db      	lsls	r3, r3, #7
 800779e:	4413      	add	r3, r2
 80077a0:	3384      	adds	r3, #132	; 0x84
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	01db      	lsls	r3, r3, #7
 80077b4:	4413      	add	r3, r2
 80077b6:	3384      	adds	r3, #132	; 0x84
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	4611      	mov	r1, r2
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	01d2      	lsls	r2, r2, #7
 80077c4:	440a      	add	r2, r1
 80077c6:	3284      	adds	r2, #132	; 0x84
 80077c8:	f043 0301 	orr.w	r3, r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
}
 80077ce:	bf00      	nop
 80077d0:	3724      	adds	r7, #36	; 0x24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80077e6:	2300      	movs	r3, #0
 80077e8:	603b      	str	r3, [r7, #0]
 80077ea:	4b20      	ldr	r3, [pc, #128]	; (800786c <HAL_PWREx_EnableOverDrive+0x90>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	4a1f      	ldr	r2, [pc, #124]	; (800786c <HAL_PWREx_EnableOverDrive+0x90>)
 80077f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f4:	6413      	str	r3, [r2, #64]	; 0x40
 80077f6:	4b1d      	ldr	r3, [pc, #116]	; (800786c <HAL_PWREx_EnableOverDrive+0x90>)
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007802:	4b1b      	ldr	r3, [pc, #108]	; (8007870 <HAL_PWREx_EnableOverDrive+0x94>)
 8007804:	2201      	movs	r2, #1
 8007806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007808:	f7fd fc88 	bl	800511c <HAL_GetTick>
 800780c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800780e:	e009      	b.n	8007824 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007810:	f7fd fc84 	bl	800511c <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800781e:	d901      	bls.n	8007824 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e01f      	b.n	8007864 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007824:	4b13      	ldr	r3, [pc, #76]	; (8007874 <HAL_PWREx_EnableOverDrive+0x98>)
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800782c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007830:	d1ee      	bne.n	8007810 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007832:	4b11      	ldr	r3, [pc, #68]	; (8007878 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007834:	2201      	movs	r2, #1
 8007836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007838:	f7fd fc70 	bl	800511c <HAL_GetTick>
 800783c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800783e:	e009      	b.n	8007854 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007840:	f7fd fc6c 	bl	800511c <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800784e:	d901      	bls.n	8007854 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e007      	b.n	8007864 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007854:	4b07      	ldr	r3, [pc, #28]	; (8007874 <HAL_PWREx_EnableOverDrive+0x98>)
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007860:	d1ee      	bne.n	8007840 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	40023800 	.word	0x40023800
 8007870:	420e0040 	.word	0x420e0040
 8007874:	40007000 	.word	0x40007000
 8007878:	420e0044 	.word	0x420e0044

0800787c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e264      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d075      	beq.n	8007986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800789a:	4ba3      	ldr	r3, [pc, #652]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f003 030c 	and.w	r3, r3, #12
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d00c      	beq.n	80078c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078a6:	4ba0      	ldr	r3, [pc, #640]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d112      	bne.n	80078d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078b2:	4b9d      	ldr	r3, [pc, #628]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078be:	d10b      	bne.n	80078d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078c0:	4b99      	ldr	r3, [pc, #612]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d05b      	beq.n	8007984 <HAL_RCC_OscConfig+0x108>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d157      	bne.n	8007984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e23f      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078e0:	d106      	bne.n	80078f0 <HAL_RCC_OscConfig+0x74>
 80078e2:	4b91      	ldr	r3, [pc, #580]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a90      	ldr	r2, [pc, #576]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80078e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e01d      	b.n	800792c <HAL_RCC_OscConfig+0xb0>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078f8:	d10c      	bne.n	8007914 <HAL_RCC_OscConfig+0x98>
 80078fa:	4b8b      	ldr	r3, [pc, #556]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a8a      	ldr	r2, [pc, #552]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	4b88      	ldr	r3, [pc, #544]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a87      	ldr	r2, [pc, #540]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 800790c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	e00b      	b.n	800792c <HAL_RCC_OscConfig+0xb0>
 8007914:	4b84      	ldr	r3, [pc, #528]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a83      	ldr	r2, [pc, #524]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 800791a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	4b81      	ldr	r3, [pc, #516]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a80      	ldr	r2, [pc, #512]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800792a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d013      	beq.n	800795c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007934:	f7fd fbf2 	bl	800511c <HAL_GetTick>
 8007938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800793c:	f7fd fbee 	bl	800511c <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b64      	cmp	r3, #100	; 0x64
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e204      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800794e:	4b76      	ldr	r3, [pc, #472]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0f0      	beq.n	800793c <HAL_RCC_OscConfig+0xc0>
 800795a:	e014      	b.n	8007986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800795c:	f7fd fbde 	bl	800511c <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007964:	f7fd fbda 	bl	800511c <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b64      	cmp	r3, #100	; 0x64
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e1f0      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007976:	4b6c      	ldr	r3, [pc, #432]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f0      	bne.n	8007964 <HAL_RCC_OscConfig+0xe8>
 8007982:	e000      	b.n	8007986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d063      	beq.n	8007a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007992:	4b65      	ldr	r3, [pc, #404]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 030c 	and.w	r3, r3, #12
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00b      	beq.n	80079b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800799e:	4b62      	ldr	r3, [pc, #392]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079a6:	2b08      	cmp	r3, #8
 80079a8:	d11c      	bne.n	80079e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079aa:	4b5f      	ldr	r3, [pc, #380]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d116      	bne.n	80079e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079b6:	4b5c      	ldr	r3, [pc, #368]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <HAL_RCC_OscConfig+0x152>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d001      	beq.n	80079ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e1c4      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ce:	4b56      	ldr	r3, [pc, #344]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	4952      	ldr	r1, [pc, #328]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079e2:	e03a      	b.n	8007a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d020      	beq.n	8007a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079ec:	4b4f      	ldr	r3, [pc, #316]	; (8007b2c <HAL_RCC_OscConfig+0x2b0>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f2:	f7fd fb93 	bl	800511c <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079fa:	f7fd fb8f 	bl	800511c <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e1a5      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a0c:	4b46      	ldr	r3, [pc, #280]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f0      	beq.n	80079fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a18:	4b43      	ldr	r3, [pc, #268]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	4940      	ldr	r1, [pc, #256]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	600b      	str	r3, [r1, #0]
 8007a2c:	e015      	b.n	8007a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a2e:	4b3f      	ldr	r3, [pc, #252]	; (8007b2c <HAL_RCC_OscConfig+0x2b0>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a34:	f7fd fb72 	bl	800511c <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a3c:	f7fd fb6e 	bl	800511c <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e184      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a4e:	4b36      	ldr	r3, [pc, #216]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f0      	bne.n	8007a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d030      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d016      	beq.n	8007a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a6e:	4b30      	ldr	r3, [pc, #192]	; (8007b30 <HAL_RCC_OscConfig+0x2b4>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a74:	f7fd fb52 	bl	800511c <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a7c:	f7fd fb4e 	bl	800511c <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e164      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a8e:	4b26      	ldr	r3, [pc, #152]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0f0      	beq.n	8007a7c <HAL_RCC_OscConfig+0x200>
 8007a9a:	e015      	b.n	8007ac8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a9c:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <HAL_RCC_OscConfig+0x2b4>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007aa2:	f7fd fb3b 	bl	800511c <HAL_GetTick>
 8007aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aa8:	e008      	b.n	8007abc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007aaa:	f7fd fb37 	bl	800511c <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d901      	bls.n	8007abc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e14d      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007abc:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1f0      	bne.n	8007aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80a0 	beq.w	8007c16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ada:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10f      	bne.n	8007b06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	4a0e      	ldr	r2, [pc, #56]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007af4:	6413      	str	r3, [r2, #64]	; 0x40
 8007af6:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <HAL_RCC_OscConfig+0x2ac>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007afe:	60bb      	str	r3, [r7, #8]
 8007b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b02:	2301      	movs	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b06:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <HAL_RCC_OscConfig+0x2b8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d121      	bne.n	8007b56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b12:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <HAL_RCC_OscConfig+0x2b8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a07      	ldr	r2, [pc, #28]	; (8007b34 <HAL_RCC_OscConfig+0x2b8>)
 8007b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b1e:	f7fd fafd 	bl	800511c <HAL_GetTick>
 8007b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b24:	e011      	b.n	8007b4a <HAL_RCC_OscConfig+0x2ce>
 8007b26:	bf00      	nop
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	42470000 	.word	0x42470000
 8007b30:	42470e80 	.word	0x42470e80
 8007b34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b38:	f7fd faf0 	bl	800511c <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e106      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b4a:	4b85      	ldr	r3, [pc, #532]	; (8007d60 <HAL_RCC_OscConfig+0x4e4>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f0      	beq.n	8007b38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d106      	bne.n	8007b6c <HAL_RCC_OscConfig+0x2f0>
 8007b5e:	4b81      	ldr	r3, [pc, #516]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	4a80      	ldr	r2, [pc, #512]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007b64:	f043 0301 	orr.w	r3, r3, #1
 8007b68:	6713      	str	r3, [r2, #112]	; 0x70
 8007b6a:	e01c      	b.n	8007ba6 <HAL_RCC_OscConfig+0x32a>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b05      	cmp	r3, #5
 8007b72:	d10c      	bne.n	8007b8e <HAL_RCC_OscConfig+0x312>
 8007b74:	4b7b      	ldr	r3, [pc, #492]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b78:	4a7a      	ldr	r2, [pc, #488]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007b7a:	f043 0304 	orr.w	r3, r3, #4
 8007b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b80:	4b78      	ldr	r3, [pc, #480]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b84:	4a77      	ldr	r2, [pc, #476]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007b86:	f043 0301 	orr.w	r3, r3, #1
 8007b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b8c:	e00b      	b.n	8007ba6 <HAL_RCC_OscConfig+0x32a>
 8007b8e:	4b75      	ldr	r3, [pc, #468]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b92:	4a74      	ldr	r2, [pc, #464]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	6713      	str	r3, [r2, #112]	; 0x70
 8007b9a:	4b72      	ldr	r3, [pc, #456]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	4a71      	ldr	r2, [pc, #452]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007ba0:	f023 0304 	bic.w	r3, r3, #4
 8007ba4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d015      	beq.n	8007bda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bae:	f7fd fab5 	bl	800511c <HAL_GetTick>
 8007bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb4:	e00a      	b.n	8007bcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bb6:	f7fd fab1 	bl	800511c <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e0c5      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bcc:	4b65      	ldr	r3, [pc, #404]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0ee      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x33a>
 8007bd8:	e014      	b.n	8007c04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bda:	f7fd fa9f 	bl	800511c <HAL_GetTick>
 8007bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007be0:	e00a      	b.n	8007bf8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007be2:	f7fd fa9b 	bl	800511c <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e0af      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bf8:	4b5a      	ldr	r3, [pc, #360]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1ee      	bne.n	8007be2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d105      	bne.n	8007c16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c0a:	4b56      	ldr	r3, [pc, #344]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	4a55      	ldr	r2, [pc, #340]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 809b 	beq.w	8007d56 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c20:	4b50      	ldr	r3, [pc, #320]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f003 030c 	and.w	r3, r3, #12
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d05c      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d141      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c34:	4b4c      	ldr	r3, [pc, #304]	; (8007d68 <HAL_RCC_OscConfig+0x4ec>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3a:	f7fd fa6f 	bl	800511c <HAL_GetTick>
 8007c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c40:	e008      	b.n	8007c54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c42:	f7fd fa6b 	bl	800511c <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e081      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c54:	4b43      	ldr	r3, [pc, #268]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f0      	bne.n	8007c42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	69da      	ldr	r2, [r3, #28]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	019b      	lsls	r3, r3, #6
 8007c70:	431a      	orrs	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	085b      	lsrs	r3, r3, #1
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	041b      	lsls	r3, r3, #16
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	061b      	lsls	r3, r3, #24
 8007c84:	4937      	ldr	r1, [pc, #220]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c8a:	4b37      	ldr	r3, [pc, #220]	; (8007d68 <HAL_RCC_OscConfig+0x4ec>)
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c90:	f7fd fa44 	bl	800511c <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c98:	f7fd fa40 	bl	800511c <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e056      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007caa:	4b2e      	ldr	r3, [pc, #184]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0f0      	beq.n	8007c98 <HAL_RCC_OscConfig+0x41c>
 8007cb6:	e04e      	b.n	8007d56 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cb8:	4b2b      	ldr	r3, [pc, #172]	; (8007d68 <HAL_RCC_OscConfig+0x4ec>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cbe:	f7fd fa2d 	bl	800511c <HAL_GetTick>
 8007cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cc4:	e008      	b.n	8007cd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cc6:	f7fd fa29 	bl	800511c <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d901      	bls.n	8007cd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e03f      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd8:	4b22      	ldr	r3, [pc, #136]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1f0      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x44a>
 8007ce4:	e037      	b.n	8007d56 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e032      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cf2:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <HAL_RCC_OscConfig+0x4e8>)
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d028      	beq.n	8007d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d121      	bne.n	8007d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d11a      	bne.n	8007d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d22:	4013      	ands	r3, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d28:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d111      	bne.n	8007d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d107      	bne.n	8007d52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d001      	beq.n	8007d56 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e000      	b.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40007000 	.word	0x40007000
 8007d64:	40023800 	.word	0x40023800
 8007d68:	42470060 	.word	0x42470060

08007d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e0cc      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d80:	4b68      	ldr	r3, [pc, #416]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d90c      	bls.n	8007da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d8e:	4b65      	ldr	r3, [pc, #404]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d96:	4b63      	ldr	r3, [pc, #396]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d001      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e0b8      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d020      	beq.n	8007df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007dc0:	4b59      	ldr	r3, [pc, #356]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	4a58      	ldr	r2, [pc, #352]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dd8:	4b53      	ldr	r3, [pc, #332]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	4a52      	ldr	r2, [pc, #328]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007de4:	4b50      	ldr	r3, [pc, #320]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	494d      	ldr	r1, [pc, #308]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d044      	beq.n	8007e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d107      	bne.n	8007e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e0a:	4b47      	ldr	r3, [pc, #284]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d119      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e07f      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d003      	beq.n	8007e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d107      	bne.n	8007e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e2a:	4b3f      	ldr	r3, [pc, #252]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e06f      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e3a:	4b3b      	ldr	r3, [pc, #236]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e067      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e4a:	4b37      	ldr	r3, [pc, #220]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f023 0203 	bic.w	r2, r3, #3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4934      	ldr	r1, [pc, #208]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e5c:	f7fd f95e 	bl	800511c <HAL_GetTick>
 8007e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e62:	e00a      	b.n	8007e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e64:	f7fd f95a 	bl	800511c <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e04f      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e7a:	4b2b      	ldr	r3, [pc, #172]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 020c 	and.w	r2, r3, #12
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d1eb      	bne.n	8007e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e8c:	4b25      	ldr	r3, [pc, #148]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d20c      	bcs.n	8007eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9a:	4b22      	ldr	r3, [pc, #136]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ea2:	4b20      	ldr	r3, [pc, #128]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d001      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e032      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d008      	beq.n	8007ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ec0:	4b19      	ldr	r3, [pc, #100]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	4916      	ldr	r1, [pc, #88]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0308 	and.w	r3, r3, #8
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ede:	4b12      	ldr	r3, [pc, #72]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	490e      	ldr	r1, [pc, #56]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ef2:	f000 f821 	bl	8007f38 <HAL_RCC_GetSysClockFreq>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	091b      	lsrs	r3, r3, #4
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	490a      	ldr	r1, [pc, #40]	; (8007f2c <HAL_RCC_ClockConfig+0x1c0>)
 8007f04:	5ccb      	ldrb	r3, [r1, r3]
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <HAL_RCC_ClockConfig+0x1c4>)
 8007f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f0e:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <HAL_RCC_ClockConfig+0x1c8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fd f8be 	bl	8005094 <HAL_InitTick>

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	40023c00 	.word	0x40023c00
 8007f28:	40023800 	.word	0x40023800
 8007f2c:	0800b9e0 	.word	0x0800b9e0
 8007f30:	20000000 	.word	0x20000000
 8007f34:	20000064 	.word	0x20000064

08007f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	607b      	str	r3, [r7, #4]
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f50:	4b67      	ldr	r3, [pc, #412]	; (80080f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f003 030c 	and.w	r3, r3, #12
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d00d      	beq.n	8007f78 <HAL_RCC_GetSysClockFreq+0x40>
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	f200 80bd 	bhi.w	80080dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_RCC_GetSysClockFreq+0x34>
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d003      	beq.n	8007f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f6a:	e0b7      	b.n	80080dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f6c:	4b61      	ldr	r3, [pc, #388]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007f6e:	60bb      	str	r3, [r7, #8]
       break;
 8007f70:	e0b7      	b.n	80080e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f72:	4b61      	ldr	r3, [pc, #388]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007f74:	60bb      	str	r3, [r7, #8]
      break;
 8007f76:	e0b4      	b.n	80080e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f78:	4b5d      	ldr	r3, [pc, #372]	; (80080f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f82:	4b5b      	ldr	r3, [pc, #364]	; (80080f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d04d      	beq.n	800802a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f8e:	4b58      	ldr	r3, [pc, #352]	; (80080f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	099b      	lsrs	r3, r3, #6
 8007f94:	461a      	mov	r2, r3
 8007f96:	f04f 0300 	mov.w	r3, #0
 8007f9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f9e:	f04f 0100 	mov.w	r1, #0
 8007fa2:	ea02 0800 	and.w	r8, r2, r0
 8007fa6:	ea03 0901 	and.w	r9, r3, r1
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f04f 0200 	mov.w	r2, #0
 8007fb2:	f04f 0300 	mov.w	r3, #0
 8007fb6:	014b      	lsls	r3, r1, #5
 8007fb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007fbc:	0142      	lsls	r2, r0, #5
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	ebb0 0008 	subs.w	r0, r0, r8
 8007fc6:	eb61 0109 	sbc.w	r1, r1, r9
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	018b      	lsls	r3, r1, #6
 8007fd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007fd8:	0182      	lsls	r2, r0, #6
 8007fda:	1a12      	subs	r2, r2, r0
 8007fdc:	eb63 0301 	sbc.w	r3, r3, r1
 8007fe0:	f04f 0000 	mov.w	r0, #0
 8007fe4:	f04f 0100 	mov.w	r1, #0
 8007fe8:	00d9      	lsls	r1, r3, #3
 8007fea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fee:	00d0      	lsls	r0, r2, #3
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	eb12 0208 	adds.w	r2, r2, r8
 8007ff8:	eb43 0309 	adc.w	r3, r3, r9
 8007ffc:	f04f 0000 	mov.w	r0, #0
 8008000:	f04f 0100 	mov.w	r1, #0
 8008004:	0259      	lsls	r1, r3, #9
 8008006:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800800a:	0250      	lsls	r0, r2, #9
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	461a      	mov	r2, r3
 8008018:	f04f 0300 	mov.w	r3, #0
 800801c:	f7f8 fd26 	bl	8000a6c <__aeabi_uldivmod>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4613      	mov	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	e04a      	b.n	80080c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800802a:	4b31      	ldr	r3, [pc, #196]	; (80080f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	099b      	lsrs	r3, r3, #6
 8008030:	461a      	mov	r2, r3
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	f240 10ff 	movw	r0, #511	; 0x1ff
 800803a:	f04f 0100 	mov.w	r1, #0
 800803e:	ea02 0400 	and.w	r4, r2, r0
 8008042:	ea03 0501 	and.w	r5, r3, r1
 8008046:	4620      	mov	r0, r4
 8008048:	4629      	mov	r1, r5
 800804a:	f04f 0200 	mov.w	r2, #0
 800804e:	f04f 0300 	mov.w	r3, #0
 8008052:	014b      	lsls	r3, r1, #5
 8008054:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008058:	0142      	lsls	r2, r0, #5
 800805a:	4610      	mov	r0, r2
 800805c:	4619      	mov	r1, r3
 800805e:	1b00      	subs	r0, r0, r4
 8008060:	eb61 0105 	sbc.w	r1, r1, r5
 8008064:	f04f 0200 	mov.w	r2, #0
 8008068:	f04f 0300 	mov.w	r3, #0
 800806c:	018b      	lsls	r3, r1, #6
 800806e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008072:	0182      	lsls	r2, r0, #6
 8008074:	1a12      	subs	r2, r2, r0
 8008076:	eb63 0301 	sbc.w	r3, r3, r1
 800807a:	f04f 0000 	mov.w	r0, #0
 800807e:	f04f 0100 	mov.w	r1, #0
 8008082:	00d9      	lsls	r1, r3, #3
 8008084:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008088:	00d0      	lsls	r0, r2, #3
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	1912      	adds	r2, r2, r4
 8008090:	eb45 0303 	adc.w	r3, r5, r3
 8008094:	f04f 0000 	mov.w	r0, #0
 8008098:	f04f 0100 	mov.w	r1, #0
 800809c:	0299      	lsls	r1, r3, #10
 800809e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80080a2:	0290      	lsls	r0, r2, #10
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4610      	mov	r0, r2
 80080aa:	4619      	mov	r1, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	f7f8 fcda 	bl	8000a6c <__aeabi_uldivmod>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4613      	mov	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	0c1b      	lsrs	r3, r3, #16
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	3301      	adds	r3, #1
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d8:	60bb      	str	r3, [r7, #8]
      break;
 80080da:	e002      	b.n	80080e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080dc:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80080de:	60bb      	str	r3, [r7, #8]
      break;
 80080e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080e2:	68bb      	ldr	r3, [r7, #8]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80080ee:	bf00      	nop
 80080f0:	40023800 	.word	0x40023800
 80080f4:	00f42400 	.word	0x00f42400
 80080f8:	007a1200 	.word	0x007a1200

080080fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008100:	4b03      	ldr	r3, [pc, #12]	; (8008110 <HAL_RCC_GetHCLKFreq+0x14>)
 8008102:	681b      	ldr	r3, [r3, #0]
}
 8008104:	4618      	mov	r0, r3
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000000 	.word	0x20000000

08008114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008118:	f7ff fff0 	bl	80080fc <HAL_RCC_GetHCLKFreq>
 800811c:	4602      	mov	r2, r0
 800811e:	4b05      	ldr	r3, [pc, #20]	; (8008134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	0a9b      	lsrs	r3, r3, #10
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	4903      	ldr	r1, [pc, #12]	; (8008138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800812a:	5ccb      	ldrb	r3, [r1, r3]
 800812c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008130:	4618      	mov	r0, r3
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40023800 	.word	0x40023800
 8008138:	0800b9f0 	.word	0x0800b9f0

0800813c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10b      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008160:	2b00      	cmp	r3, #0
 8008162:	d105      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800816c:	2b00      	cmp	r3, #0
 800816e:	d075      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008170:	4bad      	ldr	r3, [pc, #692]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008176:	f7fc ffd1 	bl	800511c <HAL_GetTick>
 800817a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800817c:	e008      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800817e:	f7fc ffcd 	bl	800511c <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	2b02      	cmp	r3, #2
 800818a:	d901      	bls.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e18b      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008190:	4ba6      	ldr	r3, [pc, #664]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1f0      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	019a      	lsls	r2, r3, #6
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	071b      	lsls	r3, r3, #28
 80081b4:	499d      	ldr	r1, [pc, #628]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01f      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081c8:	4b98      	ldr	r3, [pc, #608]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ce:	0f1b      	lsrs	r3, r3, #28
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	019a      	lsls	r2, r3, #6
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	061b      	lsls	r3, r3, #24
 80081e2:	431a      	orrs	r2, r3
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	071b      	lsls	r3, r3, #28
 80081e8:	4990      	ldr	r1, [pc, #576]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80081f0:	4b8e      	ldr	r3, [pc, #568]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f6:	f023 021f 	bic.w	r2, r3, #31
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	3b01      	subs	r3, #1
 8008200:	498a      	ldr	r1, [pc, #552]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008202:	4313      	orrs	r3, r2
 8008204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00d      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	019a      	lsls	r2, r3, #6
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	061b      	lsls	r3, r3, #24
 8008220:	431a      	orrs	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	071b      	lsls	r3, r3, #28
 8008228:	4980      	ldr	r1, [pc, #512]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800822a:	4313      	orrs	r3, r2
 800822c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008230:	4b7d      	ldr	r3, [pc, #500]	; (8008428 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008232:	2201      	movs	r2, #1
 8008234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008236:	f7fc ff71 	bl	800511c <HAL_GetTick>
 800823a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800823c:	e008      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800823e:	f7fc ff6d 	bl	800511c <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d901      	bls.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e12b      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008250:	4b76      	ldr	r3, [pc, #472]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0f0      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d105      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008270:	2b00      	cmp	r3, #0
 8008272:	d079      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008274:	4b6e      	ldr	r3, [pc, #440]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800827a:	f7fc ff4f 	bl	800511c <HAL_GetTick>
 800827e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008280:	e008      	b.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008282:	f7fc ff4b 	bl	800511c <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d901      	bls.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e109      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008294:	4b65      	ldr	r3, [pc, #404]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800829c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a0:	d0ef      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d020      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082ae:	4b5f      	ldr	r3, [pc, #380]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b4:	0f1b      	lsrs	r3, r3, #28
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	019a      	lsls	r2, r3, #6
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	061b      	lsls	r3, r3, #24
 80082c8:	431a      	orrs	r2, r3
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	071b      	lsls	r3, r3, #28
 80082ce:	4957      	ldr	r1, [pc, #348]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80082d6:	4b55      	ldr	r3, [pc, #340]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	021b      	lsls	r3, r3, #8
 80082e8:	4950      	ldr	r1, [pc, #320]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d01e      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80082fc:	4b4b      	ldr	r3, [pc, #300]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008302:	0e1b      	lsrs	r3, r3, #24
 8008304:	f003 030f 	and.w	r3, r3, #15
 8008308:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	019a      	lsls	r2, r3, #6
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	061b      	lsls	r3, r3, #24
 8008314:	431a      	orrs	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	071b      	lsls	r3, r3, #28
 800831c:	4943      	ldr	r1, [pc, #268]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800831e:	4313      	orrs	r3, r2
 8008320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008324:	4b41      	ldr	r3, [pc, #260]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	493e      	ldr	r1, [pc, #248]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008334:	4313      	orrs	r3, r2
 8008336:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800833a:	4b3d      	ldr	r3, [pc, #244]	; (8008430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800833c:	2201      	movs	r2, #1
 800833e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008340:	f7fc feec 	bl	800511c <HAL_GetTick>
 8008344:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008346:	e008      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008348:	f7fc fee8 	bl	800511c <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b02      	cmp	r3, #2
 8008354:	d901      	bls.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e0a6      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800835a:	4b34      	ldr	r3, [pc, #208]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008366:	d1ef      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 808d 	beq.w	8008490 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	4b2c      	ldr	r3, [pc, #176]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	4a2b      	ldr	r2, [pc, #172]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008384:	6413      	str	r3, [r2, #64]	; 0x40
 8008386:	4b29      	ldr	r3, [pc, #164]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008392:	4b28      	ldr	r3, [pc, #160]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a27      	ldr	r2, [pc, #156]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800839e:	f7fc febd 	bl	800511c <HAL_GetTick>
 80083a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083a4:	e008      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80083a6:	f7fc feb9 	bl	800511c <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e077      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0f0      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083c4:	4b19      	ldr	r3, [pc, #100]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d039      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d032      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083ec:	4b12      	ldr	r3, [pc, #72]	; (8008438 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80083ee:	2201      	movs	r2, #1
 80083f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083f2:	4b11      	ldr	r3, [pc, #68]	; (8008438 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80083f8:	4a0c      	ldr	r2, [pc, #48]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083fe:	4b0b      	ldr	r3, [pc, #44]	; (800842c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b01      	cmp	r3, #1
 8008408:	d11e      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800840a:	f7fc fe87 	bl	800511c <HAL_GetTick>
 800840e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008410:	e014      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008412:	f7fc fe83 	bl	800511c <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008420:	4293      	cmp	r3, r2
 8008422:	d90b      	bls.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e03f      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008428:	42470068 	.word	0x42470068
 800842c:	40023800 	.word	0x40023800
 8008430:	42470070 	.word	0x42470070
 8008434:	40007000 	.word	0x40007000
 8008438:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800843c:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800843e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0e4      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008454:	d10d      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008456:	4b16      	ldr	r3, [pc, #88]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008462:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800846a:	4911      	ldr	r1, [pc, #68]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800846c:	4313      	orrs	r3, r2
 800846e:	608b      	str	r3, [r1, #8]
 8008470:	e005      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008472:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	4a0e      	ldr	r2, [pc, #56]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008478:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800847c:	6093      	str	r3, [r2, #8]
 800847e:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008480:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800848a:	4909      	ldr	r1, [pc, #36]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800848c:	4313      	orrs	r3, r2
 800848e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	d004      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80084a2:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80084a4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40023800 	.word	0x40023800
 80084b4:	424711e0 	.word	0x424711e0

080084b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e025      	b.n	8008518 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d106      	bne.n	80084e6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7fa fcd9 	bl	8002e98 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3304      	adds	r3, #4
 80084f6:	4619      	mov	r1, r3
 80084f8:	4610      	mov	r0, r2
 80084fa:	f001 feb7 	bl	800a26c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	461a      	mov	r2, r3
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	f001 ff0c 	bl	800a326 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008532:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	2b02      	cmp	r3, #2
 8008538:	d101      	bne.n	800853e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800853a:	2302      	movs	r3, #2
 800853c:	e021      	b.n	8008582 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d002      	beq.n	800854a <HAL_SDRAM_SendCommand+0x2a>
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	2b05      	cmp	r3, #5
 8008548:	d118      	bne.n	800857c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2202      	movs	r2, #2
 800854e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	4618      	mov	r0, r3
 800855c:	f001 ff4c 	bl	800a3f8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b02      	cmp	r3, #2
 8008566:	d104      	bne.n	8008572 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2205      	movs	r2, #5
 800856c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008570:	e006      	b.n	8008580 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800857a:	e001      	b.n	8008580 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e000      	b.n	8008582 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d101      	bne.n	80085a4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80085a0:	2302      	movs	r3, #2
 80085a2:	e016      	b.n	80085d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d10f      	bne.n	80085d0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f001 ff57 	bl	800a472 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	e000      	b.n	80085d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e07b      	b.n	80086e4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d108      	bne.n	8008606 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085fc:	d009      	beq.n	8008612 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	61da      	str	r2, [r3, #28]
 8008604:	e005      	b.n	8008612 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d106      	bne.n	8008632 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7fb f841 	bl	80036b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2202      	movs	r2, #2
 8008636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008648:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800865a:	431a      	orrs	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800868c:	431a      	orrs	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008696:	ea42 0103 	orr.w	r1, r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	0c1b      	lsrs	r3, r3, #16
 80086b0:	f003 0104 	and.w	r1, r3, #4
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	f003 0210 	and.w	r2, r3, #16
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	69da      	ldr	r2, [r3, #28]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e01a      	b.n	8008734 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2202      	movs	r2, #2
 8008702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008714:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7fb f814 	bl	8003744 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	4613      	mov	r3, r2
 800874a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008756:	2b01      	cmp	r3, #1
 8008758:	d101      	bne.n	800875e <HAL_SPI_Transmit+0x22>
 800875a:	2302      	movs	r3, #2
 800875c:	e126      	b.n	80089ac <HAL_SPI_Transmit+0x270>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008766:	f7fc fcd9 	bl	800511c <HAL_GetTick>
 800876a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	d002      	beq.n	8008782 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800877c:	2302      	movs	r3, #2
 800877e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008780:	e10b      	b.n	800899a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <HAL_SPI_Transmit+0x52>
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d102      	bne.n	8008794 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008792:	e102      	b.n	800899a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2203      	movs	r2, #3
 8008798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	88fa      	ldrh	r2, [r7, #6]
 80087ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	88fa      	ldrh	r2, [r7, #6]
 80087b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087da:	d10f      	bne.n	80087fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008806:	2b40      	cmp	r3, #64	; 0x40
 8008808:	d007      	beq.n	800881a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008818:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008822:	d14b      	bne.n	80088bc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <HAL_SPI_Transmit+0xf6>
 800882c:	8afb      	ldrh	r3, [r7, #22]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d13e      	bne.n	80088b0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	881a      	ldrh	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008842:	1c9a      	adds	r2, r3, #2
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800884c:	b29b      	uxth	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	b29a      	uxth	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008856:	e02b      	b.n	80088b0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b02      	cmp	r3, #2
 8008864:	d112      	bne.n	800888c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	881a      	ldrh	r2, [r3, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	1c9a      	adds	r2, r3, #2
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008880:	b29b      	uxth	r3, r3
 8008882:	3b01      	subs	r3, #1
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	86da      	strh	r2, [r3, #54]	; 0x36
 800888a:	e011      	b.n	80088b0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800888c:	f7fc fc46 	bl	800511c <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d803      	bhi.n	80088a4 <HAL_SPI_Transmit+0x168>
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d102      	bne.n	80088aa <HAL_SPI_Transmit+0x16e>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d102      	bne.n	80088b0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80088ae:	e074      	b.n	800899a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1ce      	bne.n	8008858 <HAL_SPI_Transmit+0x11c>
 80088ba:	e04c      	b.n	8008956 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <HAL_SPI_Transmit+0x18e>
 80088c4:	8afb      	ldrh	r3, [r7, #22]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d140      	bne.n	800894c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	330c      	adds	r3, #12
 80088d4:	7812      	ldrb	r2, [r2, #0]
 80088d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	3b01      	subs	r3, #1
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80088f0:	e02c      	b.n	800894c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d113      	bne.n	8008928 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	330c      	adds	r3, #12
 800890a:	7812      	ldrb	r2, [r2, #0]
 800890c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800891c:	b29b      	uxth	r3, r3
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	86da      	strh	r2, [r3, #54]	; 0x36
 8008926:	e011      	b.n	800894c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008928:	f7fc fbf8 	bl	800511c <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d803      	bhi.n	8008940 <HAL_SPI_Transmit+0x204>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d102      	bne.n	8008946 <HAL_SPI_Transmit+0x20a>
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	77fb      	strb	r3, [r7, #31]
          goto error;
 800894a:	e026      	b.n	800899a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008950:	b29b      	uxth	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1cd      	bne.n	80088f2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fbda 	bl	8009114 <SPI_EndRxTxTransaction>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10a      	bne.n	800898a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008974:	2300      	movs	r3, #0
 8008976:	613b      	str	r3, [r7, #16]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	613b      	str	r3, [r7, #16]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	613b      	str	r3, [r7, #16]
 8008988:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	77fb      	strb	r3, [r7, #31]
 8008996:	e000      	b.n	800899a <HAL_SPI_Transmit+0x25e>
  }

error:
 8008998:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3720      	adds	r7, #32
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	4613      	mov	r3, r2
 80089c2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d0:	d112      	bne.n	80089f8 <HAL_SPI_Receive+0x44>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10e      	bne.n	80089f8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2204      	movs	r2, #4
 80089de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80089e2:	88fa      	ldrh	r2, [r7, #6]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	4613      	mov	r3, r2
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	68b9      	ldr	r1, [r7, #8]
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f000 f8f1 	bl	8008bd6 <HAL_SPI_TransmitReceive>
 80089f4:	4603      	mov	r3, r0
 80089f6:	e0ea      	b.n	8008bce <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <HAL_SPI_Receive+0x52>
 8008a02:	2302      	movs	r3, #2
 8008a04:	e0e3      	b.n	8008bce <HAL_SPI_Receive+0x21a>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a0e:	f7fc fb85 	bl	800511c <HAL_GetTick>
 8008a12:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d002      	beq.n	8008a26 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008a20:	2302      	movs	r3, #2
 8008a22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a24:	e0ca      	b.n	8008bbc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <HAL_SPI_Receive+0x7e>
 8008a2c:	88fb      	ldrh	r3, [r7, #6]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d102      	bne.n	8008a38 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a36:	e0c1      	b.n	8008bbc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	88fa      	ldrh	r2, [r7, #6]
 8008a50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	88fa      	ldrh	r2, [r7, #6]
 8008a56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a7e:	d10f      	bne.n	8008aa0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a9e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b40      	cmp	r3, #64	; 0x40
 8008aac:	d007      	beq.n	8008abe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008abc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d162      	bne.n	8008b8c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ac6:	e02e      	b.n	8008b26 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d115      	bne.n	8008b02 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f103 020c 	add.w	r2, r3, #12
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	7812      	ldrb	r2, [r2, #0]
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b00:	e011      	b.n	8008b26 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b02:	f7fc fb0b 	bl	800511c <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d803      	bhi.n	8008b1a <HAL_SPI_Receive+0x166>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b18:	d102      	bne.n	8008b20 <HAL_SPI_Receive+0x16c>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d102      	bne.n	8008b26 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b24:	e04a      	b.n	8008bbc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1cb      	bne.n	8008ac8 <HAL_SPI_Receive+0x114>
 8008b30:	e031      	b.n	8008b96 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d113      	bne.n	8008b68 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	b292      	uxth	r2, r2
 8008b4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b52:	1c9a      	adds	r2, r3, #2
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b66:	e011      	b.n	8008b8c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b68:	f7fc fad8 	bl	800511c <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d803      	bhi.n	8008b80 <HAL_SPI_Receive+0x1cc>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d102      	bne.n	8008b86 <HAL_SPI_Receive+0x1d2>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d102      	bne.n	8008b8c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b8a:	e017      	b.n	8008bbc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1cd      	bne.n	8008b32 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 fa54 	bl	8009048 <SPI_EndRxTransaction>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
 8008bb8:	e000      	b.n	8008bbc <HAL_SPI_Receive+0x208>
  }

error :
 8008bba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b08c      	sub	sp, #48	; 0x30
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
 8008bde:	60b9      	str	r1, [r7, #8]
 8008be0:	607a      	str	r2, [r7, #4]
 8008be2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008be4:	2301      	movs	r3, #1
 8008be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d101      	bne.n	8008bfc <HAL_SPI_TransmitReceive+0x26>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	e18a      	b.n	8008f12 <HAL_SPI_TransmitReceive+0x33c>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c04:	f7fc fa8a 	bl	800511c <HAL_GetTick>
 8008c08:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c1a:	887b      	ldrh	r3, [r7, #2]
 8008c1c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d00f      	beq.n	8008c46 <HAL_SPI_TransmitReceive+0x70>
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c2c:	d107      	bne.n	8008c3e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d103      	bne.n	8008c3e <HAL_SPI_TransmitReceive+0x68>
 8008c36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	d003      	beq.n	8008c46 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c44:	e15b      	b.n	8008efe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <HAL_SPI_TransmitReceive+0x82>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <HAL_SPI_TransmitReceive+0x82>
 8008c52:	887b      	ldrh	r3, [r7, #2]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c5e:	e14e      	b.n	8008efe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d003      	beq.n	8008c74 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2205      	movs	r2, #5
 8008c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	887a      	ldrh	r2, [r7, #2]
 8008c84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	887a      	ldrh	r2, [r7, #2]
 8008c8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	887a      	ldrh	r2, [r7, #2]
 8008c96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	887a      	ldrh	r2, [r7, #2]
 8008c9c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb4:	2b40      	cmp	r3, #64	; 0x40
 8008cb6:	d007      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cd0:	d178      	bne.n	8008dc4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_SPI_TransmitReceive+0x10a>
 8008cda:	8b7b      	ldrh	r3, [r7, #26]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d166      	bne.n	8008dae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	881a      	ldrh	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf0:	1c9a      	adds	r2, r3, #2
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d04:	e053      	b.n	8008dae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d11b      	bne.n	8008d4c <HAL_SPI_TransmitReceive+0x176>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d016      	beq.n	8008d4c <HAL_SPI_TransmitReceive+0x176>
 8008d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d113      	bne.n	8008d4c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d28:	881a      	ldrh	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	1c9a      	adds	r2, r3, #2
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d119      	bne.n	8008d8e <HAL_SPI_TransmitReceive+0x1b8>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d014      	beq.n	8008d8e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6e:	b292      	uxth	r2, r2
 8008d70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	1c9a      	adds	r2, r3, #2
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008d8e:	f7fc f9c5 	bl	800511c <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d807      	bhi.n	8008dae <HAL_SPI_TransmitReceive+0x1d8>
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d003      	beq.n	8008dae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008dac:	e0a7      	b.n	8008efe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1a6      	bne.n	8008d06 <HAL_SPI_TransmitReceive+0x130>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1a1      	bne.n	8008d06 <HAL_SPI_TransmitReceive+0x130>
 8008dc2:	e07c      	b.n	8008ebe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <HAL_SPI_TransmitReceive+0x1fc>
 8008dcc:	8b7b      	ldrh	r3, [r7, #26]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d16b      	bne.n	8008eaa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	330c      	adds	r3, #12
 8008ddc:	7812      	ldrb	r2, [r2, #0]
 8008dde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df8:	e057      	b.n	8008eaa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d11c      	bne.n	8008e42 <HAL_SPI_TransmitReceive+0x26c>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d017      	beq.n	8008e42 <HAL_SPI_TransmitReceive+0x26c>
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d114      	bne.n	8008e42 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	330c      	adds	r3, #12
 8008e22:	7812      	ldrb	r2, [r2, #0]
 8008e24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d119      	bne.n	8008e84 <HAL_SPI_TransmitReceive+0x2ae>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d014      	beq.n	8008e84 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e80:	2301      	movs	r3, #1
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e84:	f7fc f94a 	bl	800511c <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d803      	bhi.n	8008e9c <HAL_SPI_TransmitReceive+0x2c6>
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	d102      	bne.n	8008ea2 <HAL_SPI_TransmitReceive+0x2cc>
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d103      	bne.n	8008eaa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ea8:	e029      	b.n	8008efe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1a2      	bne.n	8008dfa <HAL_SPI_TransmitReceive+0x224>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d19d      	bne.n	8008dfa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f926 	bl	8009114 <SPI_EndRxTxTransaction>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d006      	beq.n	8008edc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008eda:	e010      	b.n	8008efe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10b      	bne.n	8008efc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	e000      	b.n	8008efe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008efc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3730      	adds	r7, #48	; 0x30
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f28:	b2db      	uxtb	r3, r3
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	4613      	mov	r3, r2
 8008f46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008f48:	f7fc f8e8 	bl	800511c <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	1a9b      	subs	r3, r3, r2
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008f58:	f7fc f8e0 	bl	800511c <HAL_GetTick>
 8008f5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008f5e:	4b39      	ldr	r3, [pc, #228]	; (8009044 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	015b      	lsls	r3, r3, #5
 8008f64:	0d1b      	lsrs	r3, r3, #20
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	fb02 f303 	mul.w	r3, r2, r3
 8008f6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f6e:	e054      	b.n	800901a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f76:	d050      	beq.n	800901a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f78:	f7fc f8d0 	bl	800511c <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d902      	bls.n	8008f8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d13d      	bne.n	800900a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fa6:	d111      	bne.n	8008fcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fb0:	d004      	beq.n	8008fbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fba:	d107      	bne.n	8008fcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fd4:	d10f      	bne.n	8008ff6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ff4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e017      	b.n	800903a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	3b01      	subs	r3, #1
 8009018:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4013      	ands	r3, r2
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	429a      	cmp	r2, r3
 8009028:	bf0c      	ite	eq
 800902a:	2301      	moveq	r3, #1
 800902c:	2300      	movne	r3, #0
 800902e:	b2db      	uxtb	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	429a      	cmp	r2, r3
 8009036:	d19b      	bne.n	8008f70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3720      	adds	r7, #32
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000000 	.word	0x20000000

08009048 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af02      	add	r7, sp, #8
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800905c:	d111      	bne.n	8009082 <SPI_EndRxTransaction+0x3a>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009066:	d004      	beq.n	8009072 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009070:	d107      	bne.n	8009082 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009080:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800908a:	d12a      	bne.n	80090e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009094:	d012      	beq.n	80090bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2200      	movs	r2, #0
 800909e:	2180      	movs	r1, #128	; 0x80
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7ff ff49 	bl	8008f38 <SPI_WaitFlagStateUntilTimeout>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d02d      	beq.n	8009108 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b0:	f043 0220 	orr.w	r2, r3, #32
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e026      	b.n	800910a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2200      	movs	r2, #0
 80090c4:	2101      	movs	r1, #1
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff ff36 	bl	8008f38 <SPI_WaitFlagStateUntilTimeout>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d01a      	beq.n	8009108 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d6:	f043 0220 	orr.w	r2, r3, #32
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e013      	b.n	800910a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2200      	movs	r2, #0
 80090ea:	2101      	movs	r1, #1
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f7ff ff23 	bl	8008f38 <SPI_WaitFlagStateUntilTimeout>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d007      	beq.n	8009108 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fc:	f043 0220 	orr.w	r2, r3, #32
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e000      	b.n	800910a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009120:	4b1b      	ldr	r3, [pc, #108]	; (8009190 <SPI_EndRxTxTransaction+0x7c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a1b      	ldr	r2, [pc, #108]	; (8009194 <SPI_EndRxTxTransaction+0x80>)
 8009126:	fba2 2303 	umull	r2, r3, r2, r3
 800912a:	0d5b      	lsrs	r3, r3, #21
 800912c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009130:	fb02 f303 	mul.w	r3, r2, r3
 8009134:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800913e:	d112      	bne.n	8009166 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2200      	movs	r2, #0
 8009148:	2180      	movs	r1, #128	; 0x80
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f7ff fef4 	bl	8008f38 <SPI_WaitFlagStateUntilTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d016      	beq.n	8009184 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800915a:	f043 0220 	orr.w	r2, r3, #32
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e00f      	b.n	8009186 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3b01      	subs	r3, #1
 8009170:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917c:	2b80      	cmp	r3, #128	; 0x80
 800917e:	d0f2      	beq.n	8009166 <SPI_EndRxTxTransaction+0x52>
 8009180:	e000      	b.n	8009184 <SPI_EndRxTxTransaction+0x70>
        break;
 8009182:	bf00      	nop
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20000000 	.word	0x20000000
 8009194:	165e9f81 	.word	0x165e9f81

08009198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e041      	b.n	800922e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d106      	bne.n	80091c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7fa fc92 	bl	8003ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3304      	adds	r3, #4
 80091d4:	4619      	mov	r1, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	f000 fcbc 	bl	8009b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e041      	b.n	80092cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f839 	bl	80092d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2202      	movs	r2, #2
 8009266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f000 fc6d 	bl	8009b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d109      	bne.n	8009314 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b02      	cmp	r3, #2
 800930a:	bf0c      	ite	eq
 800930c:	2301      	moveq	r3, #1
 800930e:	2300      	movne	r3, #0
 8009310:	b2db      	uxtb	r3, r3
 8009312:	e022      	b.n	800935a <HAL_TIM_PWM_Start_DMA+0x72>
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b04      	cmp	r3, #4
 8009318:	d109      	bne.n	800932e <HAL_TIM_PWM_Start_DMA+0x46>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	bf0c      	ite	eq
 8009326:	2301      	moveq	r3, #1
 8009328:	2300      	movne	r3, #0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	e015      	b.n	800935a <HAL_TIM_PWM_Start_DMA+0x72>
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b08      	cmp	r3, #8
 8009332:	d109      	bne.n	8009348 <HAL_TIM_PWM_Start_DMA+0x60>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	bf0c      	ite	eq
 8009340:	2301      	moveq	r3, #1
 8009342:	2300      	movne	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	e008      	b.n	800935a <HAL_TIM_PWM_Start_DMA+0x72>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	bf0c      	ite	eq
 8009354:	2301      	moveq	r3, #1
 8009356:	2300      	movne	r3, #0
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800935e:	2302      	movs	r3, #2
 8009360:	e171      	b.n	8009646 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d109      	bne.n	800937c <HAL_TIM_PWM_Start_DMA+0x94>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b01      	cmp	r3, #1
 8009372:	bf0c      	ite	eq
 8009374:	2301      	moveq	r3, #1
 8009376:	2300      	movne	r3, #0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	e022      	b.n	80093c2 <HAL_TIM_PWM_Start_DMA+0xda>
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	2b04      	cmp	r3, #4
 8009380:	d109      	bne.n	8009396 <HAL_TIM_PWM_Start_DMA+0xae>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b01      	cmp	r3, #1
 800938c:	bf0c      	ite	eq
 800938e:	2301      	moveq	r3, #1
 8009390:	2300      	movne	r3, #0
 8009392:	b2db      	uxtb	r3, r3
 8009394:	e015      	b.n	80093c2 <HAL_TIM_PWM_Start_DMA+0xda>
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b08      	cmp	r3, #8
 800939a:	d109      	bne.n	80093b0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	bf0c      	ite	eq
 80093a8:	2301      	moveq	r3, #1
 80093aa:	2300      	movne	r3, #0
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	e008      	b.n	80093c2 <HAL_TIM_PWM_Start_DMA+0xda>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	bf0c      	ite	eq
 80093bc:	2301      	moveq	r3, #1
 80093be:	2300      	movne	r3, #0
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d024      	beq.n	8009410 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <HAL_TIM_PWM_Start_DMA+0xee>
 80093cc:	887b      	ldrh	r3, [r7, #2]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e137      	b.n	8009646 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2202      	movs	r2, #2
 80093e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093e4:	e016      	b.n	8009414 <HAL_TIM_PWM_Start_DMA+0x12c>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d104      	bne.n	80093f6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093f4:	e00e      	b.n	8009414 <HAL_TIM_PWM_Start_DMA+0x12c>
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d104      	bne.n	8009406 <HAL_TIM_PWM_Start_DMA+0x11e>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009404:	e006      	b.n	8009414 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2202      	movs	r2, #2
 800940a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800940e:	e001      	b.n	8009414 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e118      	b.n	8009646 <HAL_TIM_PWM_Start_DMA+0x35e>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b0c      	cmp	r3, #12
 8009418:	f200 80ae 	bhi.w	8009578 <HAL_TIM_PWM_Start_DMA+0x290>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009459 	.word	0x08009459
 8009428:	08009579 	.word	0x08009579
 800942c:	08009579 	.word	0x08009579
 8009430:	08009579 	.word	0x08009579
 8009434:	080094a1 	.word	0x080094a1
 8009438:	08009579 	.word	0x08009579
 800943c:	08009579 	.word	0x08009579
 8009440:	08009579 	.word	0x08009579
 8009444:	080094e9 	.word	0x080094e9
 8009448:	08009579 	.word	0x08009579
 800944c:	08009579 	.word	0x08009579
 8009450:	08009579 	.word	0x08009579
 8009454:	08009531 	.word	0x08009531
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	4a7c      	ldr	r2, [pc, #496]	; (8009650 <HAL_TIM_PWM_Start_DMA+0x368>)
 800945e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	4a7b      	ldr	r2, [pc, #492]	; (8009654 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	4a7a      	ldr	r2, [pc, #488]	; (8009658 <HAL_TIM_PWM_Start_DMA+0x370>)
 800946e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3334      	adds	r3, #52	; 0x34
 800947c:	461a      	mov	r2, r3
 800947e:	887b      	ldrh	r3, [r7, #2]
 8009480:	f7fc fce4 	bl	8005e4c <HAL_DMA_Start_IT>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e0db      	b.n	8009646 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800949c:	60da      	str	r2, [r3, #12]
      break;
 800949e:	e06e      	b.n	800957e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a4:	4a6a      	ldr	r2, [pc, #424]	; (8009650 <HAL_TIM_PWM_Start_DMA+0x368>)
 80094a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ac:	4a69      	ldr	r2, [pc, #420]	; (8009654 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80094ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	4a68      	ldr	r2, [pc, #416]	; (8009658 <HAL_TIM_PWM_Start_DMA+0x370>)
 80094b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3338      	adds	r3, #56	; 0x38
 80094c4:	461a      	mov	r2, r3
 80094c6:	887b      	ldrh	r3, [r7, #2]
 80094c8:	f7fc fcc0 	bl	8005e4c <HAL_DMA_Start_IT>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e0b7      	b.n	8009646 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094e4:	60da      	str	r2, [r3, #12]
      break;
 80094e6:	e04a      	b.n	800957e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ec:	4a58      	ldr	r2, [pc, #352]	; (8009650 <HAL_TIM_PWM_Start_DMA+0x368>)
 80094ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	4a57      	ldr	r2, [pc, #348]	; (8009654 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80094f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	4a56      	ldr	r2, [pc, #344]	; (8009658 <HAL_TIM_PWM_Start_DMA+0x370>)
 80094fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	333c      	adds	r3, #60	; 0x3c
 800950c:	461a      	mov	r2, r3
 800950e:	887b      	ldrh	r3, [r7, #2]
 8009510:	f7fc fc9c 	bl	8005e4c <HAL_DMA_Start_IT>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e093      	b.n	8009646 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800952c:	60da      	str	r2, [r3, #12]
      break;
 800952e:	e026      	b.n	800957e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009534:	4a46      	ldr	r2, [pc, #280]	; (8009650 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009536:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953c:	4a45      	ldr	r2, [pc, #276]	; (8009654 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800953e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009544:	4a44      	ldr	r2, [pc, #272]	; (8009658 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009546:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3340      	adds	r3, #64	; 0x40
 8009554:	461a      	mov	r2, r3
 8009556:	887b      	ldrh	r3, [r7, #2]
 8009558:	f7fc fc78 	bl	8005e4c <HAL_DMA_Start_IT>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e06f      	b.n	8009646 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009574:	60da      	str	r2, [r3, #12]
      break;
 8009576:	e002      	b.n	800957e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	75fb      	strb	r3, [r7, #23]
      break;
 800957c:	bf00      	nop
  }

  if (status == HAL_OK)
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d15f      	bne.n	8009644 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2201      	movs	r2, #1
 800958a:	68b9      	ldr	r1, [r7, #8]
 800958c:	4618      	mov	r0, r3
 800958e:	f000 fdcb 	bl	800a128 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a31      	ldr	r2, [pc, #196]	; (800965c <HAL_TIM_PWM_Start_DMA+0x374>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d004      	beq.n	80095a6 <HAL_TIM_PWM_Start_DMA+0x2be>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a2f      	ldr	r2, [pc, #188]	; (8009660 <HAL_TIM_PWM_Start_DMA+0x378>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d101      	bne.n	80095aa <HAL_TIM_PWM_Start_DMA+0x2c2>
 80095a6:	2301      	movs	r3, #1
 80095a8:	e000      	b.n	80095ac <HAL_TIM_PWM_Start_DMA+0x2c4>
 80095aa:	2300      	movs	r3, #0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a25      	ldr	r2, [pc, #148]	; (800965c <HAL_TIM_PWM_Start_DMA+0x374>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d022      	beq.n	8009610 <HAL_TIM_PWM_Start_DMA+0x328>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d2:	d01d      	beq.n	8009610 <HAL_TIM_PWM_Start_DMA+0x328>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a22      	ldr	r2, [pc, #136]	; (8009664 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d018      	beq.n	8009610 <HAL_TIM_PWM_Start_DMA+0x328>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a21      	ldr	r2, [pc, #132]	; (8009668 <HAL_TIM_PWM_Start_DMA+0x380>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d013      	beq.n	8009610 <HAL_TIM_PWM_Start_DMA+0x328>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a1f      	ldr	r2, [pc, #124]	; (800966c <HAL_TIM_PWM_Start_DMA+0x384>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00e      	beq.n	8009610 <HAL_TIM_PWM_Start_DMA+0x328>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a1a      	ldr	r2, [pc, #104]	; (8009660 <HAL_TIM_PWM_Start_DMA+0x378>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d009      	beq.n	8009610 <HAL_TIM_PWM_Start_DMA+0x328>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a1b      	ldr	r2, [pc, #108]	; (8009670 <HAL_TIM_PWM_Start_DMA+0x388>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d004      	beq.n	8009610 <HAL_TIM_PWM_Start_DMA+0x328>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a1a      	ldr	r2, [pc, #104]	; (8009674 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d111      	bne.n	8009634 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	2b06      	cmp	r3, #6
 8009620:	d010      	beq.n	8009644 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f042 0201 	orr.w	r2, r2, #1
 8009630:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009632:	e007      	b.n	8009644 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0201 	orr.w	r2, r2, #1
 8009642:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	08009a45 	.word	0x08009a45
 8009654:	08009aed 	.word	0x08009aed
 8009658:	080099b3 	.word	0x080099b3
 800965c:	40010000 	.word	0x40010000
 8009660:	40010400 	.word	0x40010400
 8009664:	40000400 	.word	0x40000400
 8009668:	40000800 	.word	0x40000800
 800966c:	40000c00 	.word	0x40000c00
 8009670:	40014000 	.word	0x40014000
 8009674:	40001800 	.word	0x40001800

08009678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009692:	2302      	movs	r3, #2
 8009694:	e0ae      	b.n	80097f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b0c      	cmp	r3, #12
 80096a2:	f200 809f 	bhi.w	80097e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	080096e1 	.word	0x080096e1
 80096b0:	080097e5 	.word	0x080097e5
 80096b4:	080097e5 	.word	0x080097e5
 80096b8:	080097e5 	.word	0x080097e5
 80096bc:	08009721 	.word	0x08009721
 80096c0:	080097e5 	.word	0x080097e5
 80096c4:	080097e5 	.word	0x080097e5
 80096c8:	080097e5 	.word	0x080097e5
 80096cc:	08009763 	.word	0x08009763
 80096d0:	080097e5 	.word	0x080097e5
 80096d4:	080097e5 	.word	0x080097e5
 80096d8:	080097e5 	.word	0x080097e5
 80096dc:	080097a3 	.word	0x080097a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fad4 	bl	8009c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	699a      	ldr	r2, [r3, #24]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0208 	orr.w	r2, r2, #8
 80096fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699a      	ldr	r2, [r3, #24]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0204 	bic.w	r2, r2, #4
 800970a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6999      	ldr	r1, [r3, #24]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	619a      	str	r2, [r3, #24]
      break;
 800971e:	e064      	b.n	80097ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fb24 	bl	8009d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	699a      	ldr	r2, [r3, #24]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	699a      	ldr	r2, [r3, #24]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800974a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6999      	ldr	r1, [r3, #24]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	021a      	lsls	r2, r3, #8
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	619a      	str	r2, [r3, #24]
      break;
 8009760:	e043      	b.n	80097ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fb79 	bl	8009e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	69da      	ldr	r2, [r3, #28]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f042 0208 	orr.w	r2, r2, #8
 800977c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	69da      	ldr	r2, [r3, #28]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 0204 	bic.w	r2, r2, #4
 800978c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	69d9      	ldr	r1, [r3, #28]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	430a      	orrs	r2, r1
 800979e:	61da      	str	r2, [r3, #28]
      break;
 80097a0:	e023      	b.n	80097ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68b9      	ldr	r1, [r7, #8]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fbcd 	bl	8009f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	69da      	ldr	r2, [r3, #28]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	69da      	ldr	r2, [r3, #28]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69d9      	ldr	r1, [r3, #28]
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	021a      	lsls	r2, r3, #8
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	61da      	str	r2, [r3, #28]
      break;
 80097e2:	e002      	b.n	80097ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	75fb      	strb	r3, [r7, #23]
      break;
 80097e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_TIM_ConfigClockSource+0x1c>
 8009814:	2302      	movs	r3, #2
 8009816:	e0b4      	b.n	8009982 <HAL_TIM_ConfigClockSource+0x186>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2202      	movs	r2, #2
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800983e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009850:	d03e      	beq.n	80098d0 <HAL_TIM_ConfigClockSource+0xd4>
 8009852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009856:	f200 8087 	bhi.w	8009968 <HAL_TIM_ConfigClockSource+0x16c>
 800985a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800985e:	f000 8086 	beq.w	800996e <HAL_TIM_ConfigClockSource+0x172>
 8009862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009866:	d87f      	bhi.n	8009968 <HAL_TIM_ConfigClockSource+0x16c>
 8009868:	2b70      	cmp	r3, #112	; 0x70
 800986a:	d01a      	beq.n	80098a2 <HAL_TIM_ConfigClockSource+0xa6>
 800986c:	2b70      	cmp	r3, #112	; 0x70
 800986e:	d87b      	bhi.n	8009968 <HAL_TIM_ConfigClockSource+0x16c>
 8009870:	2b60      	cmp	r3, #96	; 0x60
 8009872:	d050      	beq.n	8009916 <HAL_TIM_ConfigClockSource+0x11a>
 8009874:	2b60      	cmp	r3, #96	; 0x60
 8009876:	d877      	bhi.n	8009968 <HAL_TIM_ConfigClockSource+0x16c>
 8009878:	2b50      	cmp	r3, #80	; 0x50
 800987a:	d03c      	beq.n	80098f6 <HAL_TIM_ConfigClockSource+0xfa>
 800987c:	2b50      	cmp	r3, #80	; 0x50
 800987e:	d873      	bhi.n	8009968 <HAL_TIM_ConfigClockSource+0x16c>
 8009880:	2b40      	cmp	r3, #64	; 0x40
 8009882:	d058      	beq.n	8009936 <HAL_TIM_ConfigClockSource+0x13a>
 8009884:	2b40      	cmp	r3, #64	; 0x40
 8009886:	d86f      	bhi.n	8009968 <HAL_TIM_ConfigClockSource+0x16c>
 8009888:	2b30      	cmp	r3, #48	; 0x30
 800988a:	d064      	beq.n	8009956 <HAL_TIM_ConfigClockSource+0x15a>
 800988c:	2b30      	cmp	r3, #48	; 0x30
 800988e:	d86b      	bhi.n	8009968 <HAL_TIM_ConfigClockSource+0x16c>
 8009890:	2b20      	cmp	r3, #32
 8009892:	d060      	beq.n	8009956 <HAL_TIM_ConfigClockSource+0x15a>
 8009894:	2b20      	cmp	r3, #32
 8009896:	d867      	bhi.n	8009968 <HAL_TIM_ConfigClockSource+0x16c>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d05c      	beq.n	8009956 <HAL_TIM_ConfigClockSource+0x15a>
 800989c:	2b10      	cmp	r3, #16
 800989e:	d05a      	beq.n	8009956 <HAL_TIM_ConfigClockSource+0x15a>
 80098a0:	e062      	b.n	8009968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	6899      	ldr	r1, [r3, #8]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f000 fc19 	bl	800a0e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	609a      	str	r2, [r3, #8]
      break;
 80098ce:	e04f      	b.n	8009970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	6899      	ldr	r1, [r3, #8]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f000 fc02 	bl	800a0e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098f2:	609a      	str	r2, [r3, #8]
      break;
 80098f4:	e03c      	b.n	8009970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	6859      	ldr	r1, [r3, #4]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	461a      	mov	r2, r3
 8009904:	f000 fb76 	bl	8009ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2150      	movs	r1, #80	; 0x50
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fbcf 	bl	800a0b2 <TIM_ITRx_SetConfig>
      break;
 8009914:	e02c      	b.n	8009970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	6859      	ldr	r1, [r3, #4]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	461a      	mov	r2, r3
 8009924:	f000 fb95 	bl	800a052 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2160      	movs	r1, #96	; 0x60
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fbbf 	bl	800a0b2 <TIM_ITRx_SetConfig>
      break;
 8009934:	e01c      	b.n	8009970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6818      	ldr	r0, [r3, #0]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	6859      	ldr	r1, [r3, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	461a      	mov	r2, r3
 8009944:	f000 fb56 	bl	8009ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2140      	movs	r1, #64	; 0x40
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fbaf 	bl	800a0b2 <TIM_ITRx_SetConfig>
      break;
 8009954:	e00c      	b.n	8009970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4619      	mov	r1, r3
 8009960:	4610      	mov	r0, r2
 8009962:	f000 fba6 	bl	800a0b2 <TIM_ITRx_SetConfig>
      break;
 8009966:	e003      	b.n	8009970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	73fb      	strb	r3, [r7, #15]
      break;
 800996c:	e000      	b.n	8009970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800996e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009980:	7bfb      	ldrb	r3, [r7, #15]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d107      	bne.n	80099da <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099d8:	e02a      	b.n	8009a30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d107      	bne.n	80099f4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2202      	movs	r2, #2
 80099e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099f2:	e01d      	b.n	8009a30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d107      	bne.n	8009a0e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2204      	movs	r2, #4
 8009a02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a0c:	e010      	b.n	8009a30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d107      	bne.n	8009a28 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2208      	movs	r2, #8
 8009a1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a26:	e003      	b.n	8009a30 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f7ff ffb4 	bl	800999e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	771a      	strb	r2, [r3, #28]
}
 8009a3c:	bf00      	nop
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d10b      	bne.n	8009a74 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d136      	bne.n	8009ad8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a72:	e031      	b.n	8009ad8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d10b      	bne.n	8009a96 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2202      	movs	r2, #2
 8009a82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d125      	bne.n	8009ad8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a94:	e020      	b.n	8009ad8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d10b      	bne.n	8009ab8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d114      	bne.n	8009ad8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ab6:	e00f      	b.n	8009ad8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d10a      	bne.n	8009ad8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2208      	movs	r2, #8
 8009ac6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d103      	bne.n	8009ad8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f7f8 fd8f 	bl	80025fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	771a      	strb	r2, [r3, #28]
}
 8009ae4:	bf00      	nop
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d103      	bne.n	8009b0c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2201      	movs	r2, #1
 8009b08:	771a      	strb	r2, [r3, #28]
 8009b0a:	e019      	b.n	8009b40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d103      	bne.n	8009b1e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	771a      	strb	r2, [r3, #28]
 8009b1c:	e010      	b.n	8009b40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d103      	bne.n	8009b30 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	771a      	strb	r2, [r3, #28]
 8009b2e:	e007      	b.n	8009b40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d102      	bne.n	8009b40 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2208      	movs	r2, #8
 8009b3e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff ff22 	bl	800998a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	771a      	strb	r2, [r3, #28]
}
 8009b4c:	bf00      	nop
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a40      	ldr	r2, [pc, #256]	; (8009c68 <TIM_Base_SetConfig+0x114>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d013      	beq.n	8009b94 <TIM_Base_SetConfig+0x40>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b72:	d00f      	beq.n	8009b94 <TIM_Base_SetConfig+0x40>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a3d      	ldr	r2, [pc, #244]	; (8009c6c <TIM_Base_SetConfig+0x118>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d00b      	beq.n	8009b94 <TIM_Base_SetConfig+0x40>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a3c      	ldr	r2, [pc, #240]	; (8009c70 <TIM_Base_SetConfig+0x11c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d007      	beq.n	8009b94 <TIM_Base_SetConfig+0x40>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a3b      	ldr	r2, [pc, #236]	; (8009c74 <TIM_Base_SetConfig+0x120>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d003      	beq.n	8009b94 <TIM_Base_SetConfig+0x40>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a3a      	ldr	r2, [pc, #232]	; (8009c78 <TIM_Base_SetConfig+0x124>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d108      	bne.n	8009ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	4a2f      	ldr	r2, [pc, #188]	; (8009c68 <TIM_Base_SetConfig+0x114>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d02b      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb4:	d027      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a2c      	ldr	r2, [pc, #176]	; (8009c6c <TIM_Base_SetConfig+0x118>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d023      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a2b      	ldr	r2, [pc, #172]	; (8009c70 <TIM_Base_SetConfig+0x11c>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d01f      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a2a      	ldr	r2, [pc, #168]	; (8009c74 <TIM_Base_SetConfig+0x120>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d01b      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a29      	ldr	r2, [pc, #164]	; (8009c78 <TIM_Base_SetConfig+0x124>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d017      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a28      	ldr	r2, [pc, #160]	; (8009c7c <TIM_Base_SetConfig+0x128>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d013      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a27      	ldr	r2, [pc, #156]	; (8009c80 <TIM_Base_SetConfig+0x12c>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d00f      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a26      	ldr	r2, [pc, #152]	; (8009c84 <TIM_Base_SetConfig+0x130>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d00b      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a25      	ldr	r2, [pc, #148]	; (8009c88 <TIM_Base_SetConfig+0x134>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d007      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a24      	ldr	r2, [pc, #144]	; (8009c8c <TIM_Base_SetConfig+0x138>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d003      	beq.n	8009c06 <TIM_Base_SetConfig+0xb2>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a23      	ldr	r2, [pc, #140]	; (8009c90 <TIM_Base_SetConfig+0x13c>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d108      	bne.n	8009c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	689a      	ldr	r2, [r3, #8]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a0a      	ldr	r2, [pc, #40]	; (8009c68 <TIM_Base_SetConfig+0x114>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d003      	beq.n	8009c4c <TIM_Base_SetConfig+0xf8>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a0c      	ldr	r2, [pc, #48]	; (8009c78 <TIM_Base_SetConfig+0x124>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d103      	bne.n	8009c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	691a      	ldr	r2, [r3, #16]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	615a      	str	r2, [r3, #20]
}
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	40010000 	.word	0x40010000
 8009c6c:	40000400 	.word	0x40000400
 8009c70:	40000800 	.word	0x40000800
 8009c74:	40000c00 	.word	0x40000c00
 8009c78:	40010400 	.word	0x40010400
 8009c7c:	40014000 	.word	0x40014000
 8009c80:	40014400 	.word	0x40014400
 8009c84:	40014800 	.word	0x40014800
 8009c88:	40001800 	.word	0x40001800
 8009c8c:	40001c00 	.word	0x40001c00
 8009c90:	40002000 	.word	0x40002000

08009c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	f023 0201 	bic.w	r2, r3, #1
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f023 0303 	bic.w	r3, r3, #3
 8009cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f023 0302 	bic.w	r3, r3, #2
 8009cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a20      	ldr	r2, [pc, #128]	; (8009d6c <TIM_OC1_SetConfig+0xd8>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d003      	beq.n	8009cf8 <TIM_OC1_SetConfig+0x64>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a1f      	ldr	r2, [pc, #124]	; (8009d70 <TIM_OC1_SetConfig+0xdc>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d10c      	bne.n	8009d12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f023 0308 	bic.w	r3, r3, #8
 8009cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	f023 0304 	bic.w	r3, r3, #4
 8009d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a15      	ldr	r2, [pc, #84]	; (8009d6c <TIM_OC1_SetConfig+0xd8>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d003      	beq.n	8009d22 <TIM_OC1_SetConfig+0x8e>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a14      	ldr	r2, [pc, #80]	; (8009d70 <TIM_OC1_SetConfig+0xdc>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d111      	bne.n	8009d46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	621a      	str	r2, [r3, #32]
}
 8009d60:	bf00      	nop
 8009d62:	371c      	adds	r7, #28
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	40010000 	.word	0x40010000
 8009d70:	40010400 	.word	0x40010400

08009d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	f023 0210 	bic.w	r2, r3, #16
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	f023 0320 	bic.w	r3, r3, #32
 8009dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	011b      	lsls	r3, r3, #4
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a22      	ldr	r2, [pc, #136]	; (8009e58 <TIM_OC2_SetConfig+0xe4>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d003      	beq.n	8009ddc <TIM_OC2_SetConfig+0x68>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a21      	ldr	r2, [pc, #132]	; (8009e5c <TIM_OC2_SetConfig+0xe8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d10d      	bne.n	8009df8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009df6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a17      	ldr	r2, [pc, #92]	; (8009e58 <TIM_OC2_SetConfig+0xe4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d003      	beq.n	8009e08 <TIM_OC2_SetConfig+0x94>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a16      	ldr	r2, [pc, #88]	; (8009e5c <TIM_OC2_SetConfig+0xe8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d113      	bne.n	8009e30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	621a      	str	r2, [r3, #32]
}
 8009e4a:	bf00      	nop
 8009e4c:	371c      	adds	r7, #28
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	40010000 	.word	0x40010000
 8009e5c:	40010400 	.word	0x40010400

08009e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 0303 	bic.w	r3, r3, #3
 8009e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a21      	ldr	r2, [pc, #132]	; (8009f40 <TIM_OC3_SetConfig+0xe0>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d003      	beq.n	8009ec6 <TIM_OC3_SetConfig+0x66>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a20      	ldr	r2, [pc, #128]	; (8009f44 <TIM_OC3_SetConfig+0xe4>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d10d      	bne.n	8009ee2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a16      	ldr	r2, [pc, #88]	; (8009f40 <TIM_OC3_SetConfig+0xe0>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d003      	beq.n	8009ef2 <TIM_OC3_SetConfig+0x92>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a15      	ldr	r2, [pc, #84]	; (8009f44 <TIM_OC3_SetConfig+0xe4>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d113      	bne.n	8009f1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	695b      	ldr	r3, [r3, #20]
 8009f06:	011b      	lsls	r3, r3, #4
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	011b      	lsls	r3, r3, #4
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	621a      	str	r2, [r3, #32]
}
 8009f34:	bf00      	nop
 8009f36:	371c      	adds	r7, #28
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	40010000 	.word	0x40010000
 8009f44:	40010400 	.word	0x40010400

08009f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	021b      	lsls	r3, r3, #8
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	031b      	lsls	r3, r3, #12
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a12      	ldr	r2, [pc, #72]	; (8009fec <TIM_OC4_SetConfig+0xa4>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d003      	beq.n	8009fb0 <TIM_OC4_SetConfig+0x68>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a11      	ldr	r2, [pc, #68]	; (8009ff0 <TIM_OC4_SetConfig+0xa8>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d109      	bne.n	8009fc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	019b      	lsls	r3, r3, #6
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	621a      	str	r2, [r3, #32]
}
 8009fde:	bf00      	nop
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40010000 	.word	0x40010000
 8009ff0:	40010400 	.word	0x40010400

08009ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	f023 0201 	bic.w	r2, r3, #1
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a01e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4313      	orrs	r3, r2
 800a028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f023 030a 	bic.w	r3, r3, #10
 800a030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	4313      	orrs	r3, r2
 800a038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	621a      	str	r2, [r3, #32]
}
 800a046:	bf00      	nop
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a052:	b480      	push	{r7}
 800a054:	b087      	sub	sp, #28
 800a056:	af00      	add	r7, sp, #0
 800a058:	60f8      	str	r0, [r7, #12]
 800a05a:	60b9      	str	r1, [r7, #8]
 800a05c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f023 0210 	bic.w	r2, r3, #16
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a07c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	031b      	lsls	r3, r3, #12
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	4313      	orrs	r3, r2
 800a086:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a08e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	693a      	ldr	r2, [r7, #16]
 800a096:	4313      	orrs	r3, r2
 800a098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	621a      	str	r2, [r3, #32]
}
 800a0a6:	bf00      	nop
 800a0a8:	371c      	adds	r7, #28
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b085      	sub	sp, #20
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	f043 0307 	orr.w	r3, r3, #7
 800a0d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	609a      	str	r2, [r3, #8]
}
 800a0dc:	bf00      	nop
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	021a      	lsls	r2, r3, #8
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	431a      	orrs	r2, r3
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4313      	orrs	r3, r2
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	4313      	orrs	r3, r2
 800a114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	609a      	str	r2, [r3, #8]
}
 800a11c:	bf00      	nop
 800a11e:	371c      	adds	r7, #28
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a128:	b480      	push	{r7}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	f003 031f 	and.w	r3, r3, #31
 800a13a:	2201      	movs	r2, #1
 800a13c:	fa02 f303 	lsl.w	r3, r2, r3
 800a140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6a1a      	ldr	r2, [r3, #32]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	43db      	mvns	r3, r3
 800a14a:	401a      	ands	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6a1a      	ldr	r2, [r3, #32]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f003 031f 	and.w	r3, r3, #31
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	fa01 f303 	lsl.w	r3, r1, r3
 800a160:	431a      	orrs	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	621a      	str	r2, [r3, #32]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
	...

0800a174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a184:	2b01      	cmp	r3, #1
 800a186:	d101      	bne.n	800a18c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a188:	2302      	movs	r3, #2
 800a18a:	e05a      	b.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a21      	ldr	r2, [pc, #132]	; (800a250 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d022      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d8:	d01d      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a1d      	ldr	r2, [pc, #116]	; (800a254 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d018      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a1b      	ldr	r2, [pc, #108]	; (800a258 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d013      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a1a      	ldr	r2, [pc, #104]	; (800a25c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00e      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a18      	ldr	r2, [pc, #96]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d009      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a17      	ldr	r2, [pc, #92]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d004      	beq.n	800a216 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a15      	ldr	r2, [pc, #84]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d10c      	bne.n	800a230 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a21c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	4313      	orrs	r3, r2
 800a226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40010000 	.word	0x40010000
 800a254:	40000400 	.word	0x40000400
 800a258:	40000800 	.word	0x40000800
 800a25c:	40000c00 	.word	0x40000c00
 800a260:	40010400 	.word	0x40010400
 800a264:	40014000 	.word	0x40014000
 800a268:	40001800 	.word	0x40001800

0800a26c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d123      	bne.n	800a2c6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a286:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	6851      	ldr	r1, [r2, #4]
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	6892      	ldr	r2, [r2, #8]
 800a292:	4311      	orrs	r1, r2
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	68d2      	ldr	r2, [r2, #12]
 800a298:	4311      	orrs	r1, r2
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	6912      	ldr	r2, [r2, #16]
 800a29e:	4311      	orrs	r1, r2
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	6952      	ldr	r2, [r2, #20]
 800a2a4:	4311      	orrs	r1, r2
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	6992      	ldr	r2, [r2, #24]
 800a2aa:	4311      	orrs	r1, r2
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	69d2      	ldr	r2, [r2, #28]
 800a2b0:	4311      	orrs	r1, r2
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	6a12      	ldr	r2, [r2, #32]
 800a2b6:	4311      	orrs	r1, r2
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	e028      	b.n	800a318 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	69d9      	ldr	r1, [r3, #28]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	4319      	orrs	r1, r3
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2dc:	430b      	orrs	r3, r1
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a2ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	6851      	ldr	r1, [r2, #4]
 800a2f4:	683a      	ldr	r2, [r7, #0]
 800a2f6:	6892      	ldr	r2, [r2, #8]
 800a2f8:	4311      	orrs	r1, r2
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	68d2      	ldr	r2, [r2, #12]
 800a2fe:	4311      	orrs	r1, r2
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	6912      	ldr	r2, [r2, #16]
 800a304:	4311      	orrs	r1, r2
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	6952      	ldr	r2, [r2, #20]
 800a30a:	4311      	orrs	r1, r2
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	6992      	ldr	r2, [r2, #24]
 800a310:	430a      	orrs	r2, r1
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d128      	bne.n	800a38a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	1e59      	subs	r1, r3, #1
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	011b      	lsls	r3, r3, #4
 800a34e:	4319      	orrs	r1, r3
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	3b01      	subs	r3, #1
 800a356:	021b      	lsls	r3, r3, #8
 800a358:	4319      	orrs	r1, r3
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	3b01      	subs	r3, #1
 800a360:	031b      	lsls	r3, r3, #12
 800a362:	4319      	orrs	r1, r3
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	3b01      	subs	r3, #1
 800a36a:	041b      	lsls	r3, r3, #16
 800a36c:	4319      	orrs	r1, r3
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	3b01      	subs	r3, #1
 800a374:	051b      	lsls	r3, r3, #20
 800a376:	4319      	orrs	r1, r3
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	061b      	lsls	r3, r3, #24
 800a380:	430b      	orrs	r3, r1
 800a382:	431a      	orrs	r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	609a      	str	r2, [r3, #8]
 800a388:	e02f      	b.n	800a3ea <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a392:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	68d2      	ldr	r2, [r2, #12]
 800a39a:	3a01      	subs	r2, #1
 800a39c:	0311      	lsls	r1, r2, #12
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	6952      	ldr	r2, [r2, #20]
 800a3a2:	3a01      	subs	r2, #1
 800a3a4:	0512      	lsls	r2, r2, #20
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	1e59      	subs	r1, r3, #1
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	4319      	orrs	r1, r3
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	021b      	lsls	r3, r3, #8
 800a3ce:	4319      	orrs	r1, r3
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	041b      	lsls	r3, r3, #16
 800a3d8:	4319      	orrs	r1, r3
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	061b      	lsls	r3, r3, #24
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	0d9b      	lsrs	r3, r3, #22
 800a40e:	059b      	lsls	r3, r3, #22
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	6811      	ldr	r1, [r2, #0]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	6852      	ldr	r2, [r2, #4]
 800a418:	4311      	orrs	r1, r2
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	6892      	ldr	r2, [r2, #8]
 800a41e:	3a01      	subs	r2, #1
 800a420:	0152      	lsls	r2, r2, #5
 800a422:	4311      	orrs	r1, r2
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	68d2      	ldr	r2, [r2, #12]
 800a428:	0252      	lsls	r2, r2, #9
 800a42a:	430a      	orrs	r2, r1
 800a42c:	431a      	orrs	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a432:	f7fa fe73 	bl	800511c <HAL_GetTick>
 800a436:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a438:	e010      	b.n	800a45c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a440:	d00c      	beq.n	800a45c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d007      	beq.n	800a458 <FMC_SDRAM_SendCommand+0x60>
 800a448:	f7fa fe68 	bl	800511c <HAL_GetTick>
 800a44c:	4602      	mov	r2, r0
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d201      	bcs.n	800a45c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e006      	b.n	800a46a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	f003 0320 	and.w	r3, r3, #32
 800a464:	2b20      	cmp	r3, #32
 800a466:	d0e8      	beq.n	800a43a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a484:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	0052      	lsls	r2, r2, #1
 800a48c:	431a      	orrs	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <__errno>:
 800a4a0:	4b01      	ldr	r3, [pc, #4]	; (800a4a8 <__errno+0x8>)
 800a4a2:	6818      	ldr	r0, [r3, #0]
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	2000006c 	.word	0x2000006c

0800a4ac <__libc_init_array>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	4d0d      	ldr	r5, [pc, #52]	; (800a4e4 <__libc_init_array+0x38>)
 800a4b0:	4c0d      	ldr	r4, [pc, #52]	; (800a4e8 <__libc_init_array+0x3c>)
 800a4b2:	1b64      	subs	r4, r4, r5
 800a4b4:	10a4      	asrs	r4, r4, #2
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	42a6      	cmp	r6, r4
 800a4ba:	d109      	bne.n	800a4d0 <__libc_init_array+0x24>
 800a4bc:	4d0b      	ldr	r5, [pc, #44]	; (800a4ec <__libc_init_array+0x40>)
 800a4be:	4c0c      	ldr	r4, [pc, #48]	; (800a4f0 <__libc_init_array+0x44>)
 800a4c0:	f001 f9f4 	bl	800b8ac <_init>
 800a4c4:	1b64      	subs	r4, r4, r5
 800a4c6:	10a4      	asrs	r4, r4, #2
 800a4c8:	2600      	movs	r6, #0
 800a4ca:	42a6      	cmp	r6, r4
 800a4cc:	d105      	bne.n	800a4da <__libc_init_array+0x2e>
 800a4ce:	bd70      	pop	{r4, r5, r6, pc}
 800a4d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d4:	4798      	blx	r3
 800a4d6:	3601      	adds	r6, #1
 800a4d8:	e7ee      	b.n	800a4b8 <__libc_init_array+0xc>
 800a4da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4de:	4798      	blx	r3
 800a4e0:	3601      	adds	r6, #1
 800a4e2:	e7f2      	b.n	800a4ca <__libc_init_array+0x1e>
 800a4e4:	0800f538 	.word	0x0800f538
 800a4e8:	0800f538 	.word	0x0800f538
 800a4ec:	0800f538 	.word	0x0800f538
 800a4f0:	0800f53c 	.word	0x0800f53c

0800a4f4 <memset>:
 800a4f4:	4402      	add	r2, r0
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d100      	bne.n	800a4fe <memset+0xa>
 800a4fc:	4770      	bx	lr
 800a4fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a502:	e7f9      	b.n	800a4f8 <memset+0x4>

0800a504 <rand>:
 800a504:	4b17      	ldr	r3, [pc, #92]	; (800a564 <rand+0x60>)
 800a506:	b510      	push	{r4, lr}
 800a508:	681c      	ldr	r4, [r3, #0]
 800a50a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a50c:	b9b3      	cbnz	r3, 800a53c <rand+0x38>
 800a50e:	2018      	movs	r0, #24
 800a510:	f000 f888 	bl	800a624 <malloc>
 800a514:	63a0      	str	r0, [r4, #56]	; 0x38
 800a516:	b928      	cbnz	r0, 800a524 <rand+0x20>
 800a518:	4602      	mov	r2, r0
 800a51a:	4b13      	ldr	r3, [pc, #76]	; (800a568 <rand+0x64>)
 800a51c:	4813      	ldr	r0, [pc, #76]	; (800a56c <rand+0x68>)
 800a51e:	214e      	movs	r1, #78	; 0x4e
 800a520:	f000 f850 	bl	800a5c4 <__assert_func>
 800a524:	4a12      	ldr	r2, [pc, #72]	; (800a570 <rand+0x6c>)
 800a526:	4b13      	ldr	r3, [pc, #76]	; (800a574 <rand+0x70>)
 800a528:	e9c0 2300 	strd	r2, r3, [r0]
 800a52c:	4b12      	ldr	r3, [pc, #72]	; (800a578 <rand+0x74>)
 800a52e:	6083      	str	r3, [r0, #8]
 800a530:	230b      	movs	r3, #11
 800a532:	8183      	strh	r3, [r0, #12]
 800a534:	2201      	movs	r2, #1
 800a536:	2300      	movs	r3, #0
 800a538:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a53c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a53e:	480f      	ldr	r0, [pc, #60]	; (800a57c <rand+0x78>)
 800a540:	690a      	ldr	r2, [r1, #16]
 800a542:	694b      	ldr	r3, [r1, #20]
 800a544:	4c0e      	ldr	r4, [pc, #56]	; (800a580 <rand+0x7c>)
 800a546:	4350      	muls	r0, r2
 800a548:	fb04 0003 	mla	r0, r4, r3, r0
 800a54c:	fba2 3404 	umull	r3, r4, r2, r4
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	4404      	add	r4, r0
 800a554:	f144 0000 	adc.w	r0, r4, #0
 800a558:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800a55c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a560:	bd10      	pop	{r4, pc}
 800a562:	bf00      	nop
 800a564:	2000006c 	.word	0x2000006c
 800a568:	0800f3e8 	.word	0x0800f3e8
 800a56c:	0800f3ff 	.word	0x0800f3ff
 800a570:	abcd330e 	.word	0xabcd330e
 800a574:	e66d1234 	.word	0xe66d1234
 800a578:	0005deec 	.word	0x0005deec
 800a57c:	5851f42d 	.word	0x5851f42d
 800a580:	4c957f2d 	.word	0x4c957f2d

0800a584 <siprintf>:
 800a584:	b40e      	push	{r1, r2, r3}
 800a586:	b500      	push	{lr}
 800a588:	b09c      	sub	sp, #112	; 0x70
 800a58a:	ab1d      	add	r3, sp, #116	; 0x74
 800a58c:	9002      	str	r0, [sp, #8]
 800a58e:	9006      	str	r0, [sp, #24]
 800a590:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a594:	4809      	ldr	r0, [pc, #36]	; (800a5bc <siprintf+0x38>)
 800a596:	9107      	str	r1, [sp, #28]
 800a598:	9104      	str	r1, [sp, #16]
 800a59a:	4909      	ldr	r1, [pc, #36]	; (800a5c0 <siprintf+0x3c>)
 800a59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	6800      	ldr	r0, [r0, #0]
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	a902      	add	r1, sp, #8
 800a5a8:	f000 f94a 	bl	800a840 <_svfiprintf_r>
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	701a      	strb	r2, [r3, #0]
 800a5b2:	b01c      	add	sp, #112	; 0x70
 800a5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b8:	b003      	add	sp, #12
 800a5ba:	4770      	bx	lr
 800a5bc:	2000006c 	.word	0x2000006c
 800a5c0:	ffff0208 	.word	0xffff0208

0800a5c4 <__assert_func>:
 800a5c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5c6:	4614      	mov	r4, r2
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <__assert_func+0x2c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	68d8      	ldr	r0, [r3, #12]
 800a5d2:	b14c      	cbz	r4, 800a5e8 <__assert_func+0x24>
 800a5d4:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <__assert_func+0x30>)
 800a5d6:	9100      	str	r1, [sp, #0]
 800a5d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5dc:	4906      	ldr	r1, [pc, #24]	; (800a5f8 <__assert_func+0x34>)
 800a5de:	462b      	mov	r3, r5
 800a5e0:	f000 f80e 	bl	800a600 <fiprintf>
 800a5e4:	f000 fdea 	bl	800b1bc <abort>
 800a5e8:	4b04      	ldr	r3, [pc, #16]	; (800a5fc <__assert_func+0x38>)
 800a5ea:	461c      	mov	r4, r3
 800a5ec:	e7f3      	b.n	800a5d6 <__assert_func+0x12>
 800a5ee:	bf00      	nop
 800a5f0:	2000006c 	.word	0x2000006c
 800a5f4:	0800f45e 	.word	0x0800f45e
 800a5f8:	0800f46b 	.word	0x0800f46b
 800a5fc:	0800f499 	.word	0x0800f499

0800a600 <fiprintf>:
 800a600:	b40e      	push	{r1, r2, r3}
 800a602:	b503      	push	{r0, r1, lr}
 800a604:	4601      	mov	r1, r0
 800a606:	ab03      	add	r3, sp, #12
 800a608:	4805      	ldr	r0, [pc, #20]	; (800a620 <fiprintf+0x20>)
 800a60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a60e:	6800      	ldr	r0, [r0, #0]
 800a610:	9301      	str	r3, [sp, #4]
 800a612:	f000 fa3f 	bl	800aa94 <_vfiprintf_r>
 800a616:	b002      	add	sp, #8
 800a618:	f85d eb04 	ldr.w	lr, [sp], #4
 800a61c:	b003      	add	sp, #12
 800a61e:	4770      	bx	lr
 800a620:	2000006c 	.word	0x2000006c

0800a624 <malloc>:
 800a624:	4b02      	ldr	r3, [pc, #8]	; (800a630 <malloc+0xc>)
 800a626:	4601      	mov	r1, r0
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f000 b853 	b.w	800a6d4 <_malloc_r>
 800a62e:	bf00      	nop
 800a630:	2000006c 	.word	0x2000006c

0800a634 <_free_r>:
 800a634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a636:	2900      	cmp	r1, #0
 800a638:	d048      	beq.n	800a6cc <_free_r+0x98>
 800a63a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63e:	9001      	str	r0, [sp, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	f1a1 0404 	sub.w	r4, r1, #4
 800a646:	bfb8      	it	lt
 800a648:	18e4      	addlt	r4, r4, r3
 800a64a:	f001 f805 	bl	800b658 <__malloc_lock>
 800a64e:	4a20      	ldr	r2, [pc, #128]	; (800a6d0 <_free_r+0x9c>)
 800a650:	9801      	ldr	r0, [sp, #4]
 800a652:	6813      	ldr	r3, [r2, #0]
 800a654:	4615      	mov	r5, r2
 800a656:	b933      	cbnz	r3, 800a666 <_free_r+0x32>
 800a658:	6063      	str	r3, [r4, #4]
 800a65a:	6014      	str	r4, [r2, #0]
 800a65c:	b003      	add	sp, #12
 800a65e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a662:	f000 bfff 	b.w	800b664 <__malloc_unlock>
 800a666:	42a3      	cmp	r3, r4
 800a668:	d90b      	bls.n	800a682 <_free_r+0x4e>
 800a66a:	6821      	ldr	r1, [r4, #0]
 800a66c:	1862      	adds	r2, r4, r1
 800a66e:	4293      	cmp	r3, r2
 800a670:	bf04      	itt	eq
 800a672:	681a      	ldreq	r2, [r3, #0]
 800a674:	685b      	ldreq	r3, [r3, #4]
 800a676:	6063      	str	r3, [r4, #4]
 800a678:	bf04      	itt	eq
 800a67a:	1852      	addeq	r2, r2, r1
 800a67c:	6022      	streq	r2, [r4, #0]
 800a67e:	602c      	str	r4, [r5, #0]
 800a680:	e7ec      	b.n	800a65c <_free_r+0x28>
 800a682:	461a      	mov	r2, r3
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	b10b      	cbz	r3, 800a68c <_free_r+0x58>
 800a688:	42a3      	cmp	r3, r4
 800a68a:	d9fa      	bls.n	800a682 <_free_r+0x4e>
 800a68c:	6811      	ldr	r1, [r2, #0]
 800a68e:	1855      	adds	r5, r2, r1
 800a690:	42a5      	cmp	r5, r4
 800a692:	d10b      	bne.n	800a6ac <_free_r+0x78>
 800a694:	6824      	ldr	r4, [r4, #0]
 800a696:	4421      	add	r1, r4
 800a698:	1854      	adds	r4, r2, r1
 800a69a:	42a3      	cmp	r3, r4
 800a69c:	6011      	str	r1, [r2, #0]
 800a69e:	d1dd      	bne.n	800a65c <_free_r+0x28>
 800a6a0:	681c      	ldr	r4, [r3, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	6053      	str	r3, [r2, #4]
 800a6a6:	4421      	add	r1, r4
 800a6a8:	6011      	str	r1, [r2, #0]
 800a6aa:	e7d7      	b.n	800a65c <_free_r+0x28>
 800a6ac:	d902      	bls.n	800a6b4 <_free_r+0x80>
 800a6ae:	230c      	movs	r3, #12
 800a6b0:	6003      	str	r3, [r0, #0]
 800a6b2:	e7d3      	b.n	800a65c <_free_r+0x28>
 800a6b4:	6825      	ldr	r5, [r4, #0]
 800a6b6:	1961      	adds	r1, r4, r5
 800a6b8:	428b      	cmp	r3, r1
 800a6ba:	bf04      	itt	eq
 800a6bc:	6819      	ldreq	r1, [r3, #0]
 800a6be:	685b      	ldreq	r3, [r3, #4]
 800a6c0:	6063      	str	r3, [r4, #4]
 800a6c2:	bf04      	itt	eq
 800a6c4:	1949      	addeq	r1, r1, r5
 800a6c6:	6021      	streq	r1, [r4, #0]
 800a6c8:	6054      	str	r4, [r2, #4]
 800a6ca:	e7c7      	b.n	800a65c <_free_r+0x28>
 800a6cc:	b003      	add	sp, #12
 800a6ce:	bd30      	pop	{r4, r5, pc}
 800a6d0:	200002a0 	.word	0x200002a0

0800a6d4 <_malloc_r>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	1ccd      	adds	r5, r1, #3
 800a6d8:	f025 0503 	bic.w	r5, r5, #3
 800a6dc:	3508      	adds	r5, #8
 800a6de:	2d0c      	cmp	r5, #12
 800a6e0:	bf38      	it	cc
 800a6e2:	250c      	movcc	r5, #12
 800a6e4:	2d00      	cmp	r5, #0
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	db01      	blt.n	800a6ee <_malloc_r+0x1a>
 800a6ea:	42a9      	cmp	r1, r5
 800a6ec:	d903      	bls.n	800a6f6 <_malloc_r+0x22>
 800a6ee:	230c      	movs	r3, #12
 800a6f0:	6033      	str	r3, [r6, #0]
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6f6:	f000 ffaf 	bl	800b658 <__malloc_lock>
 800a6fa:	4921      	ldr	r1, [pc, #132]	; (800a780 <_malloc_r+0xac>)
 800a6fc:	680a      	ldr	r2, [r1, #0]
 800a6fe:	4614      	mov	r4, r2
 800a700:	b99c      	cbnz	r4, 800a72a <_malloc_r+0x56>
 800a702:	4f20      	ldr	r7, [pc, #128]	; (800a784 <_malloc_r+0xb0>)
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	b923      	cbnz	r3, 800a712 <_malloc_r+0x3e>
 800a708:	4621      	mov	r1, r4
 800a70a:	4630      	mov	r0, r6
 800a70c:	f000 fc86 	bl	800b01c <_sbrk_r>
 800a710:	6038      	str	r0, [r7, #0]
 800a712:	4629      	mov	r1, r5
 800a714:	4630      	mov	r0, r6
 800a716:	f000 fc81 	bl	800b01c <_sbrk_r>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d123      	bne.n	800a766 <_malloc_r+0x92>
 800a71e:	230c      	movs	r3, #12
 800a720:	6033      	str	r3, [r6, #0]
 800a722:	4630      	mov	r0, r6
 800a724:	f000 ff9e 	bl	800b664 <__malloc_unlock>
 800a728:	e7e3      	b.n	800a6f2 <_malloc_r+0x1e>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	1b5b      	subs	r3, r3, r5
 800a72e:	d417      	bmi.n	800a760 <_malloc_r+0x8c>
 800a730:	2b0b      	cmp	r3, #11
 800a732:	d903      	bls.n	800a73c <_malloc_r+0x68>
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	441c      	add	r4, r3
 800a738:	6025      	str	r5, [r4, #0]
 800a73a:	e004      	b.n	800a746 <_malloc_r+0x72>
 800a73c:	6863      	ldr	r3, [r4, #4]
 800a73e:	42a2      	cmp	r2, r4
 800a740:	bf0c      	ite	eq
 800a742:	600b      	streq	r3, [r1, #0]
 800a744:	6053      	strne	r3, [r2, #4]
 800a746:	4630      	mov	r0, r6
 800a748:	f000 ff8c 	bl	800b664 <__malloc_unlock>
 800a74c:	f104 000b 	add.w	r0, r4, #11
 800a750:	1d23      	adds	r3, r4, #4
 800a752:	f020 0007 	bic.w	r0, r0, #7
 800a756:	1ac2      	subs	r2, r0, r3
 800a758:	d0cc      	beq.n	800a6f4 <_malloc_r+0x20>
 800a75a:	1a1b      	subs	r3, r3, r0
 800a75c:	50a3      	str	r3, [r4, r2]
 800a75e:	e7c9      	b.n	800a6f4 <_malloc_r+0x20>
 800a760:	4622      	mov	r2, r4
 800a762:	6864      	ldr	r4, [r4, #4]
 800a764:	e7cc      	b.n	800a700 <_malloc_r+0x2c>
 800a766:	1cc4      	adds	r4, r0, #3
 800a768:	f024 0403 	bic.w	r4, r4, #3
 800a76c:	42a0      	cmp	r0, r4
 800a76e:	d0e3      	beq.n	800a738 <_malloc_r+0x64>
 800a770:	1a21      	subs	r1, r4, r0
 800a772:	4630      	mov	r0, r6
 800a774:	f000 fc52 	bl	800b01c <_sbrk_r>
 800a778:	3001      	adds	r0, #1
 800a77a:	d1dd      	bne.n	800a738 <_malloc_r+0x64>
 800a77c:	e7cf      	b.n	800a71e <_malloc_r+0x4a>
 800a77e:	bf00      	nop
 800a780:	200002a0 	.word	0x200002a0
 800a784:	200002a4 	.word	0x200002a4

0800a788 <__ssputs_r>:
 800a788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	688e      	ldr	r6, [r1, #8]
 800a78e:	429e      	cmp	r6, r3
 800a790:	4682      	mov	sl, r0
 800a792:	460c      	mov	r4, r1
 800a794:	4690      	mov	r8, r2
 800a796:	461f      	mov	r7, r3
 800a798:	d838      	bhi.n	800a80c <__ssputs_r+0x84>
 800a79a:	898a      	ldrh	r2, [r1, #12]
 800a79c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7a0:	d032      	beq.n	800a808 <__ssputs_r+0x80>
 800a7a2:	6825      	ldr	r5, [r4, #0]
 800a7a4:	6909      	ldr	r1, [r1, #16]
 800a7a6:	eba5 0901 	sub.w	r9, r5, r1
 800a7aa:	6965      	ldr	r5, [r4, #20]
 800a7ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	444b      	add	r3, r9
 800a7b8:	106d      	asrs	r5, r5, #1
 800a7ba:	429d      	cmp	r5, r3
 800a7bc:	bf38      	it	cc
 800a7be:	461d      	movcc	r5, r3
 800a7c0:	0553      	lsls	r3, r2, #21
 800a7c2:	d531      	bpl.n	800a828 <__ssputs_r+0xa0>
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f7ff ff85 	bl	800a6d4 <_malloc_r>
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	b950      	cbnz	r0, 800a7e4 <__ssputs_r+0x5c>
 800a7ce:	230c      	movs	r3, #12
 800a7d0:	f8ca 3000 	str.w	r3, [sl]
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e4:	6921      	ldr	r1, [r4, #16]
 800a7e6:	464a      	mov	r2, r9
 800a7e8:	f000 ff0e 	bl	800b608 <memcpy>
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	6126      	str	r6, [r4, #16]
 800a7fa:	6165      	str	r5, [r4, #20]
 800a7fc:	444e      	add	r6, r9
 800a7fe:	eba5 0509 	sub.w	r5, r5, r9
 800a802:	6026      	str	r6, [r4, #0]
 800a804:	60a5      	str	r5, [r4, #8]
 800a806:	463e      	mov	r6, r7
 800a808:	42be      	cmp	r6, r7
 800a80a:	d900      	bls.n	800a80e <__ssputs_r+0x86>
 800a80c:	463e      	mov	r6, r7
 800a80e:	4632      	mov	r2, r6
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	4641      	mov	r1, r8
 800a814:	f000 ff06 	bl	800b624 <memmove>
 800a818:	68a3      	ldr	r3, [r4, #8]
 800a81a:	6822      	ldr	r2, [r4, #0]
 800a81c:	1b9b      	subs	r3, r3, r6
 800a81e:	4432      	add	r2, r6
 800a820:	60a3      	str	r3, [r4, #8]
 800a822:	6022      	str	r2, [r4, #0]
 800a824:	2000      	movs	r0, #0
 800a826:	e7db      	b.n	800a7e0 <__ssputs_r+0x58>
 800a828:	462a      	mov	r2, r5
 800a82a:	f000 ff21 	bl	800b670 <_realloc_r>
 800a82e:	4606      	mov	r6, r0
 800a830:	2800      	cmp	r0, #0
 800a832:	d1e1      	bne.n	800a7f8 <__ssputs_r+0x70>
 800a834:	6921      	ldr	r1, [r4, #16]
 800a836:	4650      	mov	r0, sl
 800a838:	f7ff fefc 	bl	800a634 <_free_r>
 800a83c:	e7c7      	b.n	800a7ce <__ssputs_r+0x46>
	...

0800a840 <_svfiprintf_r>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	4698      	mov	r8, r3
 800a846:	898b      	ldrh	r3, [r1, #12]
 800a848:	061b      	lsls	r3, r3, #24
 800a84a:	b09d      	sub	sp, #116	; 0x74
 800a84c:	4607      	mov	r7, r0
 800a84e:	460d      	mov	r5, r1
 800a850:	4614      	mov	r4, r2
 800a852:	d50e      	bpl.n	800a872 <_svfiprintf_r+0x32>
 800a854:	690b      	ldr	r3, [r1, #16]
 800a856:	b963      	cbnz	r3, 800a872 <_svfiprintf_r+0x32>
 800a858:	2140      	movs	r1, #64	; 0x40
 800a85a:	f7ff ff3b 	bl	800a6d4 <_malloc_r>
 800a85e:	6028      	str	r0, [r5, #0]
 800a860:	6128      	str	r0, [r5, #16]
 800a862:	b920      	cbnz	r0, 800a86e <_svfiprintf_r+0x2e>
 800a864:	230c      	movs	r3, #12
 800a866:	603b      	str	r3, [r7, #0]
 800a868:	f04f 30ff 	mov.w	r0, #4294967295
 800a86c:	e0d1      	b.n	800aa12 <_svfiprintf_r+0x1d2>
 800a86e:	2340      	movs	r3, #64	; 0x40
 800a870:	616b      	str	r3, [r5, #20]
 800a872:	2300      	movs	r3, #0
 800a874:	9309      	str	r3, [sp, #36]	; 0x24
 800a876:	2320      	movs	r3, #32
 800a878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a87c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a880:	2330      	movs	r3, #48	; 0x30
 800a882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa2c <_svfiprintf_r+0x1ec>
 800a886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a88a:	f04f 0901 	mov.w	r9, #1
 800a88e:	4623      	mov	r3, r4
 800a890:	469a      	mov	sl, r3
 800a892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a896:	b10a      	cbz	r2, 800a89c <_svfiprintf_r+0x5c>
 800a898:	2a25      	cmp	r2, #37	; 0x25
 800a89a:	d1f9      	bne.n	800a890 <_svfiprintf_r+0x50>
 800a89c:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a0:	d00b      	beq.n	800a8ba <_svfiprintf_r+0x7a>
 800a8a2:	465b      	mov	r3, fp
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7ff ff6d 	bl	800a788 <__ssputs_r>
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f000 80aa 	beq.w	800aa08 <_svfiprintf_r+0x1c8>
 800a8b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8b6:	445a      	add	r2, fp
 800a8b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 80a2 	beq.w	800aa08 <_svfiprintf_r+0x1c8>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8ce:	f10a 0a01 	add.w	sl, sl, #1
 800a8d2:	9304      	str	r3, [sp, #16]
 800a8d4:	9307      	str	r3, [sp, #28]
 800a8d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8da:	931a      	str	r3, [sp, #104]	; 0x68
 800a8dc:	4654      	mov	r4, sl
 800a8de:	2205      	movs	r2, #5
 800a8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e4:	4851      	ldr	r0, [pc, #324]	; (800aa2c <_svfiprintf_r+0x1ec>)
 800a8e6:	f7f5 fc83 	bl	80001f0 <memchr>
 800a8ea:	9a04      	ldr	r2, [sp, #16]
 800a8ec:	b9d8      	cbnz	r0, 800a926 <_svfiprintf_r+0xe6>
 800a8ee:	06d0      	lsls	r0, r2, #27
 800a8f0:	bf44      	itt	mi
 800a8f2:	2320      	movmi	r3, #32
 800a8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f8:	0711      	lsls	r1, r2, #28
 800a8fa:	bf44      	itt	mi
 800a8fc:	232b      	movmi	r3, #43	; 0x2b
 800a8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a902:	f89a 3000 	ldrb.w	r3, [sl]
 800a906:	2b2a      	cmp	r3, #42	; 0x2a
 800a908:	d015      	beq.n	800a936 <_svfiprintf_r+0xf6>
 800a90a:	9a07      	ldr	r2, [sp, #28]
 800a90c:	4654      	mov	r4, sl
 800a90e:	2000      	movs	r0, #0
 800a910:	f04f 0c0a 	mov.w	ip, #10
 800a914:	4621      	mov	r1, r4
 800a916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a91a:	3b30      	subs	r3, #48	; 0x30
 800a91c:	2b09      	cmp	r3, #9
 800a91e:	d94e      	bls.n	800a9be <_svfiprintf_r+0x17e>
 800a920:	b1b0      	cbz	r0, 800a950 <_svfiprintf_r+0x110>
 800a922:	9207      	str	r2, [sp, #28]
 800a924:	e014      	b.n	800a950 <_svfiprintf_r+0x110>
 800a926:	eba0 0308 	sub.w	r3, r0, r8
 800a92a:	fa09 f303 	lsl.w	r3, r9, r3
 800a92e:	4313      	orrs	r3, r2
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	46a2      	mov	sl, r4
 800a934:	e7d2      	b.n	800a8dc <_svfiprintf_r+0x9c>
 800a936:	9b03      	ldr	r3, [sp, #12]
 800a938:	1d19      	adds	r1, r3, #4
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	9103      	str	r1, [sp, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bfbb      	ittet	lt
 800a942:	425b      	neglt	r3, r3
 800a944:	f042 0202 	orrlt.w	r2, r2, #2
 800a948:	9307      	strge	r3, [sp, #28]
 800a94a:	9307      	strlt	r3, [sp, #28]
 800a94c:	bfb8      	it	lt
 800a94e:	9204      	strlt	r2, [sp, #16]
 800a950:	7823      	ldrb	r3, [r4, #0]
 800a952:	2b2e      	cmp	r3, #46	; 0x2e
 800a954:	d10c      	bne.n	800a970 <_svfiprintf_r+0x130>
 800a956:	7863      	ldrb	r3, [r4, #1]
 800a958:	2b2a      	cmp	r3, #42	; 0x2a
 800a95a:	d135      	bne.n	800a9c8 <_svfiprintf_r+0x188>
 800a95c:	9b03      	ldr	r3, [sp, #12]
 800a95e:	1d1a      	adds	r2, r3, #4
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	9203      	str	r2, [sp, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	bfb8      	it	lt
 800a968:	f04f 33ff 	movlt.w	r3, #4294967295
 800a96c:	3402      	adds	r4, #2
 800a96e:	9305      	str	r3, [sp, #20]
 800a970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa3c <_svfiprintf_r+0x1fc>
 800a974:	7821      	ldrb	r1, [r4, #0]
 800a976:	2203      	movs	r2, #3
 800a978:	4650      	mov	r0, sl
 800a97a:	f7f5 fc39 	bl	80001f0 <memchr>
 800a97e:	b140      	cbz	r0, 800a992 <_svfiprintf_r+0x152>
 800a980:	2340      	movs	r3, #64	; 0x40
 800a982:	eba0 000a 	sub.w	r0, r0, sl
 800a986:	fa03 f000 	lsl.w	r0, r3, r0
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	4303      	orrs	r3, r0
 800a98e:	3401      	adds	r4, #1
 800a990:	9304      	str	r3, [sp, #16]
 800a992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a996:	4826      	ldr	r0, [pc, #152]	; (800aa30 <_svfiprintf_r+0x1f0>)
 800a998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a99c:	2206      	movs	r2, #6
 800a99e:	f7f5 fc27 	bl	80001f0 <memchr>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d038      	beq.n	800aa18 <_svfiprintf_r+0x1d8>
 800a9a6:	4b23      	ldr	r3, [pc, #140]	; (800aa34 <_svfiprintf_r+0x1f4>)
 800a9a8:	bb1b      	cbnz	r3, 800a9f2 <_svfiprintf_r+0x1b2>
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	3307      	adds	r3, #7
 800a9ae:	f023 0307 	bic.w	r3, r3, #7
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	9303      	str	r3, [sp, #12]
 800a9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b8:	4433      	add	r3, r6
 800a9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a9bc:	e767      	b.n	800a88e <_svfiprintf_r+0x4e>
 800a9be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	2001      	movs	r0, #1
 800a9c6:	e7a5      	b.n	800a914 <_svfiprintf_r+0xd4>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	3401      	adds	r4, #1
 800a9cc:	9305      	str	r3, [sp, #20]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	f04f 0c0a 	mov.w	ip, #10
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9da:	3a30      	subs	r2, #48	; 0x30
 800a9dc:	2a09      	cmp	r2, #9
 800a9de:	d903      	bls.n	800a9e8 <_svfiprintf_r+0x1a8>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d0c5      	beq.n	800a970 <_svfiprintf_r+0x130>
 800a9e4:	9105      	str	r1, [sp, #20]
 800a9e6:	e7c3      	b.n	800a970 <_svfiprintf_r+0x130>
 800a9e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e7f0      	b.n	800a9d4 <_svfiprintf_r+0x194>
 800a9f2:	ab03      	add	r3, sp, #12
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	462a      	mov	r2, r5
 800a9f8:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <_svfiprintf_r+0x1f8>)
 800a9fa:	a904      	add	r1, sp, #16
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	f3af 8000 	nop.w
 800aa02:	1c42      	adds	r2, r0, #1
 800aa04:	4606      	mov	r6, r0
 800aa06:	d1d6      	bne.n	800a9b6 <_svfiprintf_r+0x176>
 800aa08:	89ab      	ldrh	r3, [r5, #12]
 800aa0a:	065b      	lsls	r3, r3, #25
 800aa0c:	f53f af2c 	bmi.w	800a868 <_svfiprintf_r+0x28>
 800aa10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa12:	b01d      	add	sp, #116	; 0x74
 800aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa18:	ab03      	add	r3, sp, #12
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <_svfiprintf_r+0x1f8>)
 800aa20:	a904      	add	r1, sp, #16
 800aa22:	4638      	mov	r0, r7
 800aa24:	f000 f9d4 	bl	800add0 <_printf_i>
 800aa28:	e7eb      	b.n	800aa02 <_svfiprintf_r+0x1c2>
 800aa2a:	bf00      	nop
 800aa2c:	0800f49a 	.word	0x0800f49a
 800aa30:	0800f4a4 	.word	0x0800f4a4
 800aa34:	00000000 	.word	0x00000000
 800aa38:	0800a789 	.word	0x0800a789
 800aa3c:	0800f4a0 	.word	0x0800f4a0

0800aa40 <__sfputc_r>:
 800aa40:	6893      	ldr	r3, [r2, #8]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	b410      	push	{r4}
 800aa48:	6093      	str	r3, [r2, #8]
 800aa4a:	da08      	bge.n	800aa5e <__sfputc_r+0x1e>
 800aa4c:	6994      	ldr	r4, [r2, #24]
 800aa4e:	42a3      	cmp	r3, r4
 800aa50:	db01      	blt.n	800aa56 <__sfputc_r+0x16>
 800aa52:	290a      	cmp	r1, #10
 800aa54:	d103      	bne.n	800aa5e <__sfputc_r+0x1e>
 800aa56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa5a:	f000 baef 	b.w	800b03c <__swbuf_r>
 800aa5e:	6813      	ldr	r3, [r2, #0]
 800aa60:	1c58      	adds	r0, r3, #1
 800aa62:	6010      	str	r0, [r2, #0]
 800aa64:	7019      	strb	r1, [r3, #0]
 800aa66:	4608      	mov	r0, r1
 800aa68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <__sfputs_r>:
 800aa6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa70:	4606      	mov	r6, r0
 800aa72:	460f      	mov	r7, r1
 800aa74:	4614      	mov	r4, r2
 800aa76:	18d5      	adds	r5, r2, r3
 800aa78:	42ac      	cmp	r4, r5
 800aa7a:	d101      	bne.n	800aa80 <__sfputs_r+0x12>
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	e007      	b.n	800aa90 <__sfputs_r+0x22>
 800aa80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa84:	463a      	mov	r2, r7
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7ff ffda 	bl	800aa40 <__sfputc_r>
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	d1f3      	bne.n	800aa78 <__sfputs_r+0xa>
 800aa90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa94 <_vfiprintf_r>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	460d      	mov	r5, r1
 800aa9a:	b09d      	sub	sp, #116	; 0x74
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	4698      	mov	r8, r3
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	b118      	cbz	r0, 800aaac <_vfiprintf_r+0x18>
 800aaa4:	6983      	ldr	r3, [r0, #24]
 800aaa6:	b90b      	cbnz	r3, 800aaac <_vfiprintf_r+0x18>
 800aaa8:	f000 fcaa 	bl	800b400 <__sinit>
 800aaac:	4b89      	ldr	r3, [pc, #548]	; (800acd4 <_vfiprintf_r+0x240>)
 800aaae:	429d      	cmp	r5, r3
 800aab0:	d11b      	bne.n	800aaea <_vfiprintf_r+0x56>
 800aab2:	6875      	ldr	r5, [r6, #4]
 800aab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab6:	07d9      	lsls	r1, r3, #31
 800aab8:	d405      	bmi.n	800aac6 <_vfiprintf_r+0x32>
 800aaba:	89ab      	ldrh	r3, [r5, #12]
 800aabc:	059a      	lsls	r2, r3, #22
 800aabe:	d402      	bmi.n	800aac6 <_vfiprintf_r+0x32>
 800aac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aac2:	f000 fd3b 	bl	800b53c <__retarget_lock_acquire_recursive>
 800aac6:	89ab      	ldrh	r3, [r5, #12]
 800aac8:	071b      	lsls	r3, r3, #28
 800aaca:	d501      	bpl.n	800aad0 <_vfiprintf_r+0x3c>
 800aacc:	692b      	ldr	r3, [r5, #16]
 800aace:	b9eb      	cbnz	r3, 800ab0c <_vfiprintf_r+0x78>
 800aad0:	4629      	mov	r1, r5
 800aad2:	4630      	mov	r0, r6
 800aad4:	f000 fb04 	bl	800b0e0 <__swsetup_r>
 800aad8:	b1c0      	cbz	r0, 800ab0c <_vfiprintf_r+0x78>
 800aada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aadc:	07dc      	lsls	r4, r3, #31
 800aade:	d50e      	bpl.n	800aafe <_vfiprintf_r+0x6a>
 800aae0:	f04f 30ff 	mov.w	r0, #4294967295
 800aae4:	b01d      	add	sp, #116	; 0x74
 800aae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaea:	4b7b      	ldr	r3, [pc, #492]	; (800acd8 <_vfiprintf_r+0x244>)
 800aaec:	429d      	cmp	r5, r3
 800aaee:	d101      	bne.n	800aaf4 <_vfiprintf_r+0x60>
 800aaf0:	68b5      	ldr	r5, [r6, #8]
 800aaf2:	e7df      	b.n	800aab4 <_vfiprintf_r+0x20>
 800aaf4:	4b79      	ldr	r3, [pc, #484]	; (800acdc <_vfiprintf_r+0x248>)
 800aaf6:	429d      	cmp	r5, r3
 800aaf8:	bf08      	it	eq
 800aafa:	68f5      	ldreq	r5, [r6, #12]
 800aafc:	e7da      	b.n	800aab4 <_vfiprintf_r+0x20>
 800aafe:	89ab      	ldrh	r3, [r5, #12]
 800ab00:	0598      	lsls	r0, r3, #22
 800ab02:	d4ed      	bmi.n	800aae0 <_vfiprintf_r+0x4c>
 800ab04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab06:	f000 fd1a 	bl	800b53e <__retarget_lock_release_recursive>
 800ab0a:	e7e9      	b.n	800aae0 <_vfiprintf_r+0x4c>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab10:	2320      	movs	r3, #32
 800ab12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab1a:	2330      	movs	r3, #48	; 0x30
 800ab1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ace0 <_vfiprintf_r+0x24c>
 800ab20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab24:	f04f 0901 	mov.w	r9, #1
 800ab28:	4623      	mov	r3, r4
 800ab2a:	469a      	mov	sl, r3
 800ab2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab30:	b10a      	cbz	r2, 800ab36 <_vfiprintf_r+0xa2>
 800ab32:	2a25      	cmp	r2, #37	; 0x25
 800ab34:	d1f9      	bne.n	800ab2a <_vfiprintf_r+0x96>
 800ab36:	ebba 0b04 	subs.w	fp, sl, r4
 800ab3a:	d00b      	beq.n	800ab54 <_vfiprintf_r+0xc0>
 800ab3c:	465b      	mov	r3, fp
 800ab3e:	4622      	mov	r2, r4
 800ab40:	4629      	mov	r1, r5
 800ab42:	4630      	mov	r0, r6
 800ab44:	f7ff ff93 	bl	800aa6e <__sfputs_r>
 800ab48:	3001      	adds	r0, #1
 800ab4a:	f000 80aa 	beq.w	800aca2 <_vfiprintf_r+0x20e>
 800ab4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab50:	445a      	add	r2, fp
 800ab52:	9209      	str	r2, [sp, #36]	; 0x24
 800ab54:	f89a 3000 	ldrb.w	r3, [sl]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 80a2 	beq.w	800aca2 <_vfiprintf_r+0x20e>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f04f 32ff 	mov.w	r2, #4294967295
 800ab64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab68:	f10a 0a01 	add.w	sl, sl, #1
 800ab6c:	9304      	str	r3, [sp, #16]
 800ab6e:	9307      	str	r3, [sp, #28]
 800ab70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab74:	931a      	str	r3, [sp, #104]	; 0x68
 800ab76:	4654      	mov	r4, sl
 800ab78:	2205      	movs	r2, #5
 800ab7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab7e:	4858      	ldr	r0, [pc, #352]	; (800ace0 <_vfiprintf_r+0x24c>)
 800ab80:	f7f5 fb36 	bl	80001f0 <memchr>
 800ab84:	9a04      	ldr	r2, [sp, #16]
 800ab86:	b9d8      	cbnz	r0, 800abc0 <_vfiprintf_r+0x12c>
 800ab88:	06d1      	lsls	r1, r2, #27
 800ab8a:	bf44      	itt	mi
 800ab8c:	2320      	movmi	r3, #32
 800ab8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab92:	0713      	lsls	r3, r2, #28
 800ab94:	bf44      	itt	mi
 800ab96:	232b      	movmi	r3, #43	; 0x2b
 800ab98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aba0:	2b2a      	cmp	r3, #42	; 0x2a
 800aba2:	d015      	beq.n	800abd0 <_vfiprintf_r+0x13c>
 800aba4:	9a07      	ldr	r2, [sp, #28]
 800aba6:	4654      	mov	r4, sl
 800aba8:	2000      	movs	r0, #0
 800abaa:	f04f 0c0a 	mov.w	ip, #10
 800abae:	4621      	mov	r1, r4
 800abb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abb4:	3b30      	subs	r3, #48	; 0x30
 800abb6:	2b09      	cmp	r3, #9
 800abb8:	d94e      	bls.n	800ac58 <_vfiprintf_r+0x1c4>
 800abba:	b1b0      	cbz	r0, 800abea <_vfiprintf_r+0x156>
 800abbc:	9207      	str	r2, [sp, #28]
 800abbe:	e014      	b.n	800abea <_vfiprintf_r+0x156>
 800abc0:	eba0 0308 	sub.w	r3, r0, r8
 800abc4:	fa09 f303 	lsl.w	r3, r9, r3
 800abc8:	4313      	orrs	r3, r2
 800abca:	9304      	str	r3, [sp, #16]
 800abcc:	46a2      	mov	sl, r4
 800abce:	e7d2      	b.n	800ab76 <_vfiprintf_r+0xe2>
 800abd0:	9b03      	ldr	r3, [sp, #12]
 800abd2:	1d19      	adds	r1, r3, #4
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	9103      	str	r1, [sp, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	bfbb      	ittet	lt
 800abdc:	425b      	neglt	r3, r3
 800abde:	f042 0202 	orrlt.w	r2, r2, #2
 800abe2:	9307      	strge	r3, [sp, #28]
 800abe4:	9307      	strlt	r3, [sp, #28]
 800abe6:	bfb8      	it	lt
 800abe8:	9204      	strlt	r2, [sp, #16]
 800abea:	7823      	ldrb	r3, [r4, #0]
 800abec:	2b2e      	cmp	r3, #46	; 0x2e
 800abee:	d10c      	bne.n	800ac0a <_vfiprintf_r+0x176>
 800abf0:	7863      	ldrb	r3, [r4, #1]
 800abf2:	2b2a      	cmp	r3, #42	; 0x2a
 800abf4:	d135      	bne.n	800ac62 <_vfiprintf_r+0x1ce>
 800abf6:	9b03      	ldr	r3, [sp, #12]
 800abf8:	1d1a      	adds	r2, r3, #4
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	9203      	str	r2, [sp, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	bfb8      	it	lt
 800ac02:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac06:	3402      	adds	r4, #2
 800ac08:	9305      	str	r3, [sp, #20]
 800ac0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800acf0 <_vfiprintf_r+0x25c>
 800ac0e:	7821      	ldrb	r1, [r4, #0]
 800ac10:	2203      	movs	r2, #3
 800ac12:	4650      	mov	r0, sl
 800ac14:	f7f5 faec 	bl	80001f0 <memchr>
 800ac18:	b140      	cbz	r0, 800ac2c <_vfiprintf_r+0x198>
 800ac1a:	2340      	movs	r3, #64	; 0x40
 800ac1c:	eba0 000a 	sub.w	r0, r0, sl
 800ac20:	fa03 f000 	lsl.w	r0, r3, r0
 800ac24:	9b04      	ldr	r3, [sp, #16]
 800ac26:	4303      	orrs	r3, r0
 800ac28:	3401      	adds	r4, #1
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac30:	482c      	ldr	r0, [pc, #176]	; (800ace4 <_vfiprintf_r+0x250>)
 800ac32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac36:	2206      	movs	r2, #6
 800ac38:	f7f5 fada 	bl	80001f0 <memchr>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d03f      	beq.n	800acc0 <_vfiprintf_r+0x22c>
 800ac40:	4b29      	ldr	r3, [pc, #164]	; (800ace8 <_vfiprintf_r+0x254>)
 800ac42:	bb1b      	cbnz	r3, 800ac8c <_vfiprintf_r+0x1f8>
 800ac44:	9b03      	ldr	r3, [sp, #12]
 800ac46:	3307      	adds	r3, #7
 800ac48:	f023 0307 	bic.w	r3, r3, #7
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	9303      	str	r3, [sp, #12]
 800ac50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac52:	443b      	add	r3, r7
 800ac54:	9309      	str	r3, [sp, #36]	; 0x24
 800ac56:	e767      	b.n	800ab28 <_vfiprintf_r+0x94>
 800ac58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	2001      	movs	r0, #1
 800ac60:	e7a5      	b.n	800abae <_vfiprintf_r+0x11a>
 800ac62:	2300      	movs	r3, #0
 800ac64:	3401      	adds	r4, #1
 800ac66:	9305      	str	r3, [sp, #20]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	f04f 0c0a 	mov.w	ip, #10
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac74:	3a30      	subs	r2, #48	; 0x30
 800ac76:	2a09      	cmp	r2, #9
 800ac78:	d903      	bls.n	800ac82 <_vfiprintf_r+0x1ee>
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0c5      	beq.n	800ac0a <_vfiprintf_r+0x176>
 800ac7e:	9105      	str	r1, [sp, #20]
 800ac80:	e7c3      	b.n	800ac0a <_vfiprintf_r+0x176>
 800ac82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac86:	4604      	mov	r4, r0
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e7f0      	b.n	800ac6e <_vfiprintf_r+0x1da>
 800ac8c:	ab03      	add	r3, sp, #12
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	462a      	mov	r2, r5
 800ac92:	4b16      	ldr	r3, [pc, #88]	; (800acec <_vfiprintf_r+0x258>)
 800ac94:	a904      	add	r1, sp, #16
 800ac96:	4630      	mov	r0, r6
 800ac98:	f3af 8000 	nop.w
 800ac9c:	4607      	mov	r7, r0
 800ac9e:	1c78      	adds	r0, r7, #1
 800aca0:	d1d6      	bne.n	800ac50 <_vfiprintf_r+0x1bc>
 800aca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aca4:	07d9      	lsls	r1, r3, #31
 800aca6:	d405      	bmi.n	800acb4 <_vfiprintf_r+0x220>
 800aca8:	89ab      	ldrh	r3, [r5, #12]
 800acaa:	059a      	lsls	r2, r3, #22
 800acac:	d402      	bmi.n	800acb4 <_vfiprintf_r+0x220>
 800acae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acb0:	f000 fc45 	bl	800b53e <__retarget_lock_release_recursive>
 800acb4:	89ab      	ldrh	r3, [r5, #12]
 800acb6:	065b      	lsls	r3, r3, #25
 800acb8:	f53f af12 	bmi.w	800aae0 <_vfiprintf_r+0x4c>
 800acbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acbe:	e711      	b.n	800aae4 <_vfiprintf_r+0x50>
 800acc0:	ab03      	add	r3, sp, #12
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	462a      	mov	r2, r5
 800acc6:	4b09      	ldr	r3, [pc, #36]	; (800acec <_vfiprintf_r+0x258>)
 800acc8:	a904      	add	r1, sp, #16
 800acca:	4630      	mov	r0, r6
 800accc:	f000 f880 	bl	800add0 <_printf_i>
 800acd0:	e7e4      	b.n	800ac9c <_vfiprintf_r+0x208>
 800acd2:	bf00      	nop
 800acd4:	0800f4f0 	.word	0x0800f4f0
 800acd8:	0800f510 	.word	0x0800f510
 800acdc:	0800f4d0 	.word	0x0800f4d0
 800ace0:	0800f49a 	.word	0x0800f49a
 800ace4:	0800f4a4 	.word	0x0800f4a4
 800ace8:	00000000 	.word	0x00000000
 800acec:	0800aa6f 	.word	0x0800aa6f
 800acf0:	0800f4a0 	.word	0x0800f4a0

0800acf4 <_printf_common>:
 800acf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acf8:	4616      	mov	r6, r2
 800acfa:	4699      	mov	r9, r3
 800acfc:	688a      	ldr	r2, [r1, #8]
 800acfe:	690b      	ldr	r3, [r1, #16]
 800ad00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad04:	4293      	cmp	r3, r2
 800ad06:	bfb8      	it	lt
 800ad08:	4613      	movlt	r3, r2
 800ad0a:	6033      	str	r3, [r6, #0]
 800ad0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad10:	4607      	mov	r7, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	b10a      	cbz	r2, 800ad1a <_printf_common+0x26>
 800ad16:	3301      	adds	r3, #1
 800ad18:	6033      	str	r3, [r6, #0]
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	0699      	lsls	r1, r3, #26
 800ad1e:	bf42      	ittt	mi
 800ad20:	6833      	ldrmi	r3, [r6, #0]
 800ad22:	3302      	addmi	r3, #2
 800ad24:	6033      	strmi	r3, [r6, #0]
 800ad26:	6825      	ldr	r5, [r4, #0]
 800ad28:	f015 0506 	ands.w	r5, r5, #6
 800ad2c:	d106      	bne.n	800ad3c <_printf_common+0x48>
 800ad2e:	f104 0a19 	add.w	sl, r4, #25
 800ad32:	68e3      	ldr	r3, [r4, #12]
 800ad34:	6832      	ldr	r2, [r6, #0]
 800ad36:	1a9b      	subs	r3, r3, r2
 800ad38:	42ab      	cmp	r3, r5
 800ad3a:	dc26      	bgt.n	800ad8a <_printf_common+0x96>
 800ad3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad40:	1e13      	subs	r3, r2, #0
 800ad42:	6822      	ldr	r2, [r4, #0]
 800ad44:	bf18      	it	ne
 800ad46:	2301      	movne	r3, #1
 800ad48:	0692      	lsls	r2, r2, #26
 800ad4a:	d42b      	bmi.n	800ada4 <_printf_common+0xb0>
 800ad4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad50:	4649      	mov	r1, r9
 800ad52:	4638      	mov	r0, r7
 800ad54:	47c0      	blx	r8
 800ad56:	3001      	adds	r0, #1
 800ad58:	d01e      	beq.n	800ad98 <_printf_common+0xa4>
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	68e5      	ldr	r5, [r4, #12]
 800ad5e:	6832      	ldr	r2, [r6, #0]
 800ad60:	f003 0306 	and.w	r3, r3, #6
 800ad64:	2b04      	cmp	r3, #4
 800ad66:	bf08      	it	eq
 800ad68:	1aad      	subeq	r5, r5, r2
 800ad6a:	68a3      	ldr	r3, [r4, #8]
 800ad6c:	6922      	ldr	r2, [r4, #16]
 800ad6e:	bf0c      	ite	eq
 800ad70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad74:	2500      	movne	r5, #0
 800ad76:	4293      	cmp	r3, r2
 800ad78:	bfc4      	itt	gt
 800ad7a:	1a9b      	subgt	r3, r3, r2
 800ad7c:	18ed      	addgt	r5, r5, r3
 800ad7e:	2600      	movs	r6, #0
 800ad80:	341a      	adds	r4, #26
 800ad82:	42b5      	cmp	r5, r6
 800ad84:	d11a      	bne.n	800adbc <_printf_common+0xc8>
 800ad86:	2000      	movs	r0, #0
 800ad88:	e008      	b.n	800ad9c <_printf_common+0xa8>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	4652      	mov	r2, sl
 800ad8e:	4649      	mov	r1, r9
 800ad90:	4638      	mov	r0, r7
 800ad92:	47c0      	blx	r8
 800ad94:	3001      	adds	r0, #1
 800ad96:	d103      	bne.n	800ada0 <_printf_common+0xac>
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada0:	3501      	adds	r5, #1
 800ada2:	e7c6      	b.n	800ad32 <_printf_common+0x3e>
 800ada4:	18e1      	adds	r1, r4, r3
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	2030      	movs	r0, #48	; 0x30
 800adaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800adae:	4422      	add	r2, r4
 800adb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800adb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adb8:	3302      	adds	r3, #2
 800adba:	e7c7      	b.n	800ad4c <_printf_common+0x58>
 800adbc:	2301      	movs	r3, #1
 800adbe:	4622      	mov	r2, r4
 800adc0:	4649      	mov	r1, r9
 800adc2:	4638      	mov	r0, r7
 800adc4:	47c0      	blx	r8
 800adc6:	3001      	adds	r0, #1
 800adc8:	d0e6      	beq.n	800ad98 <_printf_common+0xa4>
 800adca:	3601      	adds	r6, #1
 800adcc:	e7d9      	b.n	800ad82 <_printf_common+0x8e>
	...

0800add0 <_printf_i>:
 800add0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800add4:	460c      	mov	r4, r1
 800add6:	4691      	mov	r9, r2
 800add8:	7e27      	ldrb	r7, [r4, #24]
 800adda:	990c      	ldr	r1, [sp, #48]	; 0x30
 800addc:	2f78      	cmp	r7, #120	; 0x78
 800adde:	4680      	mov	r8, r0
 800ade0:	469a      	mov	sl, r3
 800ade2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ade6:	d807      	bhi.n	800adf8 <_printf_i+0x28>
 800ade8:	2f62      	cmp	r7, #98	; 0x62
 800adea:	d80a      	bhi.n	800ae02 <_printf_i+0x32>
 800adec:	2f00      	cmp	r7, #0
 800adee:	f000 80d8 	beq.w	800afa2 <_printf_i+0x1d2>
 800adf2:	2f58      	cmp	r7, #88	; 0x58
 800adf4:	f000 80a3 	beq.w	800af3e <_printf_i+0x16e>
 800adf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800adfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae00:	e03a      	b.n	800ae78 <_printf_i+0xa8>
 800ae02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae06:	2b15      	cmp	r3, #21
 800ae08:	d8f6      	bhi.n	800adf8 <_printf_i+0x28>
 800ae0a:	a001      	add	r0, pc, #4	; (adr r0, 800ae10 <_printf_i+0x40>)
 800ae0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ae10:	0800ae69 	.word	0x0800ae69
 800ae14:	0800ae7d 	.word	0x0800ae7d
 800ae18:	0800adf9 	.word	0x0800adf9
 800ae1c:	0800adf9 	.word	0x0800adf9
 800ae20:	0800adf9 	.word	0x0800adf9
 800ae24:	0800adf9 	.word	0x0800adf9
 800ae28:	0800ae7d 	.word	0x0800ae7d
 800ae2c:	0800adf9 	.word	0x0800adf9
 800ae30:	0800adf9 	.word	0x0800adf9
 800ae34:	0800adf9 	.word	0x0800adf9
 800ae38:	0800adf9 	.word	0x0800adf9
 800ae3c:	0800af89 	.word	0x0800af89
 800ae40:	0800aead 	.word	0x0800aead
 800ae44:	0800af6b 	.word	0x0800af6b
 800ae48:	0800adf9 	.word	0x0800adf9
 800ae4c:	0800adf9 	.word	0x0800adf9
 800ae50:	0800afab 	.word	0x0800afab
 800ae54:	0800adf9 	.word	0x0800adf9
 800ae58:	0800aead 	.word	0x0800aead
 800ae5c:	0800adf9 	.word	0x0800adf9
 800ae60:	0800adf9 	.word	0x0800adf9
 800ae64:	0800af73 	.word	0x0800af73
 800ae68:	680b      	ldr	r3, [r1, #0]
 800ae6a:	1d1a      	adds	r2, r3, #4
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	600a      	str	r2, [r1, #0]
 800ae70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ae74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e0a3      	b.n	800afc4 <_printf_i+0x1f4>
 800ae7c:	6825      	ldr	r5, [r4, #0]
 800ae7e:	6808      	ldr	r0, [r1, #0]
 800ae80:	062e      	lsls	r6, r5, #24
 800ae82:	f100 0304 	add.w	r3, r0, #4
 800ae86:	d50a      	bpl.n	800ae9e <_printf_i+0xce>
 800ae88:	6805      	ldr	r5, [r0, #0]
 800ae8a:	600b      	str	r3, [r1, #0]
 800ae8c:	2d00      	cmp	r5, #0
 800ae8e:	da03      	bge.n	800ae98 <_printf_i+0xc8>
 800ae90:	232d      	movs	r3, #45	; 0x2d
 800ae92:	426d      	negs	r5, r5
 800ae94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae98:	485e      	ldr	r0, [pc, #376]	; (800b014 <_printf_i+0x244>)
 800ae9a:	230a      	movs	r3, #10
 800ae9c:	e019      	b.n	800aed2 <_printf_i+0x102>
 800ae9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aea2:	6805      	ldr	r5, [r0, #0]
 800aea4:	600b      	str	r3, [r1, #0]
 800aea6:	bf18      	it	ne
 800aea8:	b22d      	sxthne	r5, r5
 800aeaa:	e7ef      	b.n	800ae8c <_printf_i+0xbc>
 800aeac:	680b      	ldr	r3, [r1, #0]
 800aeae:	6825      	ldr	r5, [r4, #0]
 800aeb0:	1d18      	adds	r0, r3, #4
 800aeb2:	6008      	str	r0, [r1, #0]
 800aeb4:	0628      	lsls	r0, r5, #24
 800aeb6:	d501      	bpl.n	800aebc <_printf_i+0xec>
 800aeb8:	681d      	ldr	r5, [r3, #0]
 800aeba:	e002      	b.n	800aec2 <_printf_i+0xf2>
 800aebc:	0669      	lsls	r1, r5, #25
 800aebe:	d5fb      	bpl.n	800aeb8 <_printf_i+0xe8>
 800aec0:	881d      	ldrh	r5, [r3, #0]
 800aec2:	4854      	ldr	r0, [pc, #336]	; (800b014 <_printf_i+0x244>)
 800aec4:	2f6f      	cmp	r7, #111	; 0x6f
 800aec6:	bf0c      	ite	eq
 800aec8:	2308      	moveq	r3, #8
 800aeca:	230a      	movne	r3, #10
 800aecc:	2100      	movs	r1, #0
 800aece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aed2:	6866      	ldr	r6, [r4, #4]
 800aed4:	60a6      	str	r6, [r4, #8]
 800aed6:	2e00      	cmp	r6, #0
 800aed8:	bfa2      	ittt	ge
 800aeda:	6821      	ldrge	r1, [r4, #0]
 800aedc:	f021 0104 	bicge.w	r1, r1, #4
 800aee0:	6021      	strge	r1, [r4, #0]
 800aee2:	b90d      	cbnz	r5, 800aee8 <_printf_i+0x118>
 800aee4:	2e00      	cmp	r6, #0
 800aee6:	d04d      	beq.n	800af84 <_printf_i+0x1b4>
 800aee8:	4616      	mov	r6, r2
 800aeea:	fbb5 f1f3 	udiv	r1, r5, r3
 800aeee:	fb03 5711 	mls	r7, r3, r1, r5
 800aef2:	5dc7      	ldrb	r7, [r0, r7]
 800aef4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aef8:	462f      	mov	r7, r5
 800aefa:	42bb      	cmp	r3, r7
 800aefc:	460d      	mov	r5, r1
 800aefe:	d9f4      	bls.n	800aeea <_printf_i+0x11a>
 800af00:	2b08      	cmp	r3, #8
 800af02:	d10b      	bne.n	800af1c <_printf_i+0x14c>
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	07df      	lsls	r7, r3, #31
 800af08:	d508      	bpl.n	800af1c <_printf_i+0x14c>
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	6861      	ldr	r1, [r4, #4]
 800af0e:	4299      	cmp	r1, r3
 800af10:	bfde      	ittt	le
 800af12:	2330      	movle	r3, #48	; 0x30
 800af14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af1c:	1b92      	subs	r2, r2, r6
 800af1e:	6122      	str	r2, [r4, #16]
 800af20:	f8cd a000 	str.w	sl, [sp]
 800af24:	464b      	mov	r3, r9
 800af26:	aa03      	add	r2, sp, #12
 800af28:	4621      	mov	r1, r4
 800af2a:	4640      	mov	r0, r8
 800af2c:	f7ff fee2 	bl	800acf4 <_printf_common>
 800af30:	3001      	adds	r0, #1
 800af32:	d14c      	bne.n	800afce <_printf_i+0x1fe>
 800af34:	f04f 30ff 	mov.w	r0, #4294967295
 800af38:	b004      	add	sp, #16
 800af3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af3e:	4835      	ldr	r0, [pc, #212]	; (800b014 <_printf_i+0x244>)
 800af40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	680e      	ldr	r6, [r1, #0]
 800af48:	061f      	lsls	r7, r3, #24
 800af4a:	f856 5b04 	ldr.w	r5, [r6], #4
 800af4e:	600e      	str	r6, [r1, #0]
 800af50:	d514      	bpl.n	800af7c <_printf_i+0x1ac>
 800af52:	07d9      	lsls	r1, r3, #31
 800af54:	bf44      	itt	mi
 800af56:	f043 0320 	orrmi.w	r3, r3, #32
 800af5a:	6023      	strmi	r3, [r4, #0]
 800af5c:	b91d      	cbnz	r5, 800af66 <_printf_i+0x196>
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	f023 0320 	bic.w	r3, r3, #32
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	2310      	movs	r3, #16
 800af68:	e7b0      	b.n	800aecc <_printf_i+0xfc>
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	f043 0320 	orr.w	r3, r3, #32
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	2378      	movs	r3, #120	; 0x78
 800af74:	4828      	ldr	r0, [pc, #160]	; (800b018 <_printf_i+0x248>)
 800af76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af7a:	e7e3      	b.n	800af44 <_printf_i+0x174>
 800af7c:	065e      	lsls	r6, r3, #25
 800af7e:	bf48      	it	mi
 800af80:	b2ad      	uxthmi	r5, r5
 800af82:	e7e6      	b.n	800af52 <_printf_i+0x182>
 800af84:	4616      	mov	r6, r2
 800af86:	e7bb      	b.n	800af00 <_printf_i+0x130>
 800af88:	680b      	ldr	r3, [r1, #0]
 800af8a:	6826      	ldr	r6, [r4, #0]
 800af8c:	6960      	ldr	r0, [r4, #20]
 800af8e:	1d1d      	adds	r5, r3, #4
 800af90:	600d      	str	r5, [r1, #0]
 800af92:	0635      	lsls	r5, r6, #24
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	d501      	bpl.n	800af9c <_printf_i+0x1cc>
 800af98:	6018      	str	r0, [r3, #0]
 800af9a:	e002      	b.n	800afa2 <_printf_i+0x1d2>
 800af9c:	0671      	lsls	r1, r6, #25
 800af9e:	d5fb      	bpl.n	800af98 <_printf_i+0x1c8>
 800afa0:	8018      	strh	r0, [r3, #0]
 800afa2:	2300      	movs	r3, #0
 800afa4:	6123      	str	r3, [r4, #16]
 800afa6:	4616      	mov	r6, r2
 800afa8:	e7ba      	b.n	800af20 <_printf_i+0x150>
 800afaa:	680b      	ldr	r3, [r1, #0]
 800afac:	1d1a      	adds	r2, r3, #4
 800afae:	600a      	str	r2, [r1, #0]
 800afb0:	681e      	ldr	r6, [r3, #0]
 800afb2:	6862      	ldr	r2, [r4, #4]
 800afb4:	2100      	movs	r1, #0
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7f5 f91a 	bl	80001f0 <memchr>
 800afbc:	b108      	cbz	r0, 800afc2 <_printf_i+0x1f2>
 800afbe:	1b80      	subs	r0, r0, r6
 800afc0:	6060      	str	r0, [r4, #4]
 800afc2:	6863      	ldr	r3, [r4, #4]
 800afc4:	6123      	str	r3, [r4, #16]
 800afc6:	2300      	movs	r3, #0
 800afc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afcc:	e7a8      	b.n	800af20 <_printf_i+0x150>
 800afce:	6923      	ldr	r3, [r4, #16]
 800afd0:	4632      	mov	r2, r6
 800afd2:	4649      	mov	r1, r9
 800afd4:	4640      	mov	r0, r8
 800afd6:	47d0      	blx	sl
 800afd8:	3001      	adds	r0, #1
 800afda:	d0ab      	beq.n	800af34 <_printf_i+0x164>
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	079b      	lsls	r3, r3, #30
 800afe0:	d413      	bmi.n	800b00a <_printf_i+0x23a>
 800afe2:	68e0      	ldr	r0, [r4, #12]
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	4298      	cmp	r0, r3
 800afe8:	bfb8      	it	lt
 800afea:	4618      	movlt	r0, r3
 800afec:	e7a4      	b.n	800af38 <_printf_i+0x168>
 800afee:	2301      	movs	r3, #1
 800aff0:	4632      	mov	r2, r6
 800aff2:	4649      	mov	r1, r9
 800aff4:	4640      	mov	r0, r8
 800aff6:	47d0      	blx	sl
 800aff8:	3001      	adds	r0, #1
 800affa:	d09b      	beq.n	800af34 <_printf_i+0x164>
 800affc:	3501      	adds	r5, #1
 800affe:	68e3      	ldr	r3, [r4, #12]
 800b000:	9903      	ldr	r1, [sp, #12]
 800b002:	1a5b      	subs	r3, r3, r1
 800b004:	42ab      	cmp	r3, r5
 800b006:	dcf2      	bgt.n	800afee <_printf_i+0x21e>
 800b008:	e7eb      	b.n	800afe2 <_printf_i+0x212>
 800b00a:	2500      	movs	r5, #0
 800b00c:	f104 0619 	add.w	r6, r4, #25
 800b010:	e7f5      	b.n	800affe <_printf_i+0x22e>
 800b012:	bf00      	nop
 800b014:	0800f4ab 	.word	0x0800f4ab
 800b018:	0800f4bc 	.word	0x0800f4bc

0800b01c <_sbrk_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d06      	ldr	r5, [pc, #24]	; (800b038 <_sbrk_r+0x1c>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	602b      	str	r3, [r5, #0]
 800b028:	f7f8 fca0 	bl	800396c <_sbrk>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_sbrk_r+0x1a>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_sbrk_r+0x1a>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	200008f0 	.word	0x200008f0

0800b03c <__swbuf_r>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	460e      	mov	r6, r1
 800b040:	4614      	mov	r4, r2
 800b042:	4605      	mov	r5, r0
 800b044:	b118      	cbz	r0, 800b04e <__swbuf_r+0x12>
 800b046:	6983      	ldr	r3, [r0, #24]
 800b048:	b90b      	cbnz	r3, 800b04e <__swbuf_r+0x12>
 800b04a:	f000 f9d9 	bl	800b400 <__sinit>
 800b04e:	4b21      	ldr	r3, [pc, #132]	; (800b0d4 <__swbuf_r+0x98>)
 800b050:	429c      	cmp	r4, r3
 800b052:	d12b      	bne.n	800b0ac <__swbuf_r+0x70>
 800b054:	686c      	ldr	r4, [r5, #4]
 800b056:	69a3      	ldr	r3, [r4, #24]
 800b058:	60a3      	str	r3, [r4, #8]
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	071a      	lsls	r2, r3, #28
 800b05e:	d52f      	bpl.n	800b0c0 <__swbuf_r+0x84>
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	b36b      	cbz	r3, 800b0c0 <__swbuf_r+0x84>
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	6820      	ldr	r0, [r4, #0]
 800b068:	1ac0      	subs	r0, r0, r3
 800b06a:	6963      	ldr	r3, [r4, #20]
 800b06c:	b2f6      	uxtb	r6, r6
 800b06e:	4283      	cmp	r3, r0
 800b070:	4637      	mov	r7, r6
 800b072:	dc04      	bgt.n	800b07e <__swbuf_r+0x42>
 800b074:	4621      	mov	r1, r4
 800b076:	4628      	mov	r0, r5
 800b078:	f000 f92e 	bl	800b2d8 <_fflush_r>
 800b07c:	bb30      	cbnz	r0, 800b0cc <__swbuf_r+0x90>
 800b07e:	68a3      	ldr	r3, [r4, #8]
 800b080:	3b01      	subs	r3, #1
 800b082:	60a3      	str	r3, [r4, #8]
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	6022      	str	r2, [r4, #0]
 800b08a:	701e      	strb	r6, [r3, #0]
 800b08c:	6963      	ldr	r3, [r4, #20]
 800b08e:	3001      	adds	r0, #1
 800b090:	4283      	cmp	r3, r0
 800b092:	d004      	beq.n	800b09e <__swbuf_r+0x62>
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	07db      	lsls	r3, r3, #31
 800b098:	d506      	bpl.n	800b0a8 <__swbuf_r+0x6c>
 800b09a:	2e0a      	cmp	r6, #10
 800b09c:	d104      	bne.n	800b0a8 <__swbuf_r+0x6c>
 800b09e:	4621      	mov	r1, r4
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	f000 f919 	bl	800b2d8 <_fflush_r>
 800b0a6:	b988      	cbnz	r0, 800b0cc <__swbuf_r+0x90>
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ac:	4b0a      	ldr	r3, [pc, #40]	; (800b0d8 <__swbuf_r+0x9c>)
 800b0ae:	429c      	cmp	r4, r3
 800b0b0:	d101      	bne.n	800b0b6 <__swbuf_r+0x7a>
 800b0b2:	68ac      	ldr	r4, [r5, #8]
 800b0b4:	e7cf      	b.n	800b056 <__swbuf_r+0x1a>
 800b0b6:	4b09      	ldr	r3, [pc, #36]	; (800b0dc <__swbuf_r+0xa0>)
 800b0b8:	429c      	cmp	r4, r3
 800b0ba:	bf08      	it	eq
 800b0bc:	68ec      	ldreq	r4, [r5, #12]
 800b0be:	e7ca      	b.n	800b056 <__swbuf_r+0x1a>
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f000 f80c 	bl	800b0e0 <__swsetup_r>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d0cb      	beq.n	800b064 <__swbuf_r+0x28>
 800b0cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b0d0:	e7ea      	b.n	800b0a8 <__swbuf_r+0x6c>
 800b0d2:	bf00      	nop
 800b0d4:	0800f4f0 	.word	0x0800f4f0
 800b0d8:	0800f510 	.word	0x0800f510
 800b0dc:	0800f4d0 	.word	0x0800f4d0

0800b0e0 <__swsetup_r>:
 800b0e0:	4b32      	ldr	r3, [pc, #200]	; (800b1ac <__swsetup_r+0xcc>)
 800b0e2:	b570      	push	{r4, r5, r6, lr}
 800b0e4:	681d      	ldr	r5, [r3, #0]
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	b125      	cbz	r5, 800b0f6 <__swsetup_r+0x16>
 800b0ec:	69ab      	ldr	r3, [r5, #24]
 800b0ee:	b913      	cbnz	r3, 800b0f6 <__swsetup_r+0x16>
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	f000 f985 	bl	800b400 <__sinit>
 800b0f6:	4b2e      	ldr	r3, [pc, #184]	; (800b1b0 <__swsetup_r+0xd0>)
 800b0f8:	429c      	cmp	r4, r3
 800b0fa:	d10f      	bne.n	800b11c <__swsetup_r+0x3c>
 800b0fc:	686c      	ldr	r4, [r5, #4]
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b104:	0719      	lsls	r1, r3, #28
 800b106:	d42c      	bmi.n	800b162 <__swsetup_r+0x82>
 800b108:	06dd      	lsls	r5, r3, #27
 800b10a:	d411      	bmi.n	800b130 <__swsetup_r+0x50>
 800b10c:	2309      	movs	r3, #9
 800b10e:	6033      	str	r3, [r6, #0]
 800b110:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b114:	81a3      	strh	r3, [r4, #12]
 800b116:	f04f 30ff 	mov.w	r0, #4294967295
 800b11a:	e03e      	b.n	800b19a <__swsetup_r+0xba>
 800b11c:	4b25      	ldr	r3, [pc, #148]	; (800b1b4 <__swsetup_r+0xd4>)
 800b11e:	429c      	cmp	r4, r3
 800b120:	d101      	bne.n	800b126 <__swsetup_r+0x46>
 800b122:	68ac      	ldr	r4, [r5, #8]
 800b124:	e7eb      	b.n	800b0fe <__swsetup_r+0x1e>
 800b126:	4b24      	ldr	r3, [pc, #144]	; (800b1b8 <__swsetup_r+0xd8>)
 800b128:	429c      	cmp	r4, r3
 800b12a:	bf08      	it	eq
 800b12c:	68ec      	ldreq	r4, [r5, #12]
 800b12e:	e7e6      	b.n	800b0fe <__swsetup_r+0x1e>
 800b130:	0758      	lsls	r0, r3, #29
 800b132:	d512      	bpl.n	800b15a <__swsetup_r+0x7a>
 800b134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b136:	b141      	cbz	r1, 800b14a <__swsetup_r+0x6a>
 800b138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b13c:	4299      	cmp	r1, r3
 800b13e:	d002      	beq.n	800b146 <__swsetup_r+0x66>
 800b140:	4630      	mov	r0, r6
 800b142:	f7ff fa77 	bl	800a634 <_free_r>
 800b146:	2300      	movs	r3, #0
 800b148:	6363      	str	r3, [r4, #52]	; 0x34
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	2300      	movs	r3, #0
 800b154:	6063      	str	r3, [r4, #4]
 800b156:	6923      	ldr	r3, [r4, #16]
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	f043 0308 	orr.w	r3, r3, #8
 800b160:	81a3      	strh	r3, [r4, #12]
 800b162:	6923      	ldr	r3, [r4, #16]
 800b164:	b94b      	cbnz	r3, 800b17a <__swsetup_r+0x9a>
 800b166:	89a3      	ldrh	r3, [r4, #12]
 800b168:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b16c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b170:	d003      	beq.n	800b17a <__swsetup_r+0x9a>
 800b172:	4621      	mov	r1, r4
 800b174:	4630      	mov	r0, r6
 800b176:	f000 fa07 	bl	800b588 <__smakebuf_r>
 800b17a:	89a0      	ldrh	r0, [r4, #12]
 800b17c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b180:	f010 0301 	ands.w	r3, r0, #1
 800b184:	d00a      	beq.n	800b19c <__swsetup_r+0xbc>
 800b186:	2300      	movs	r3, #0
 800b188:	60a3      	str	r3, [r4, #8]
 800b18a:	6963      	ldr	r3, [r4, #20]
 800b18c:	425b      	negs	r3, r3
 800b18e:	61a3      	str	r3, [r4, #24]
 800b190:	6923      	ldr	r3, [r4, #16]
 800b192:	b943      	cbnz	r3, 800b1a6 <__swsetup_r+0xc6>
 800b194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b198:	d1ba      	bne.n	800b110 <__swsetup_r+0x30>
 800b19a:	bd70      	pop	{r4, r5, r6, pc}
 800b19c:	0781      	lsls	r1, r0, #30
 800b19e:	bf58      	it	pl
 800b1a0:	6963      	ldrpl	r3, [r4, #20]
 800b1a2:	60a3      	str	r3, [r4, #8]
 800b1a4:	e7f4      	b.n	800b190 <__swsetup_r+0xb0>
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	e7f7      	b.n	800b19a <__swsetup_r+0xba>
 800b1aa:	bf00      	nop
 800b1ac:	2000006c 	.word	0x2000006c
 800b1b0:	0800f4f0 	.word	0x0800f4f0
 800b1b4:	0800f510 	.word	0x0800f510
 800b1b8:	0800f4d0 	.word	0x0800f4d0

0800b1bc <abort>:
 800b1bc:	b508      	push	{r3, lr}
 800b1be:	2006      	movs	r0, #6
 800b1c0:	f000 faa4 	bl	800b70c <raise>
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	f7f8 fb59 	bl	800387c <_exit>
	...

0800b1cc <__sflush_r>:
 800b1cc:	898a      	ldrh	r2, [r1, #12]
 800b1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	0710      	lsls	r0, r2, #28
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	d458      	bmi.n	800b28c <__sflush_r+0xc0>
 800b1da:	684b      	ldr	r3, [r1, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	dc05      	bgt.n	800b1ec <__sflush_r+0x20>
 800b1e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dc02      	bgt.n	800b1ec <__sflush_r+0x20>
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1ee:	2e00      	cmp	r6, #0
 800b1f0:	d0f9      	beq.n	800b1e6 <__sflush_r+0x1a>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1f8:	682f      	ldr	r7, [r5, #0]
 800b1fa:	602b      	str	r3, [r5, #0]
 800b1fc:	d032      	beq.n	800b264 <__sflush_r+0x98>
 800b1fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	075a      	lsls	r2, r3, #29
 800b204:	d505      	bpl.n	800b212 <__sflush_r+0x46>
 800b206:	6863      	ldr	r3, [r4, #4]
 800b208:	1ac0      	subs	r0, r0, r3
 800b20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b20c:	b10b      	cbz	r3, 800b212 <__sflush_r+0x46>
 800b20e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b210:	1ac0      	subs	r0, r0, r3
 800b212:	2300      	movs	r3, #0
 800b214:	4602      	mov	r2, r0
 800b216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b218:	6a21      	ldr	r1, [r4, #32]
 800b21a:	4628      	mov	r0, r5
 800b21c:	47b0      	blx	r6
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	d106      	bne.n	800b232 <__sflush_r+0x66>
 800b224:	6829      	ldr	r1, [r5, #0]
 800b226:	291d      	cmp	r1, #29
 800b228:	d82c      	bhi.n	800b284 <__sflush_r+0xb8>
 800b22a:	4a2a      	ldr	r2, [pc, #168]	; (800b2d4 <__sflush_r+0x108>)
 800b22c:	40ca      	lsrs	r2, r1
 800b22e:	07d6      	lsls	r6, r2, #31
 800b230:	d528      	bpl.n	800b284 <__sflush_r+0xb8>
 800b232:	2200      	movs	r2, #0
 800b234:	6062      	str	r2, [r4, #4]
 800b236:	04d9      	lsls	r1, r3, #19
 800b238:	6922      	ldr	r2, [r4, #16]
 800b23a:	6022      	str	r2, [r4, #0]
 800b23c:	d504      	bpl.n	800b248 <__sflush_r+0x7c>
 800b23e:	1c42      	adds	r2, r0, #1
 800b240:	d101      	bne.n	800b246 <__sflush_r+0x7a>
 800b242:	682b      	ldr	r3, [r5, #0]
 800b244:	b903      	cbnz	r3, 800b248 <__sflush_r+0x7c>
 800b246:	6560      	str	r0, [r4, #84]	; 0x54
 800b248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b24a:	602f      	str	r7, [r5, #0]
 800b24c:	2900      	cmp	r1, #0
 800b24e:	d0ca      	beq.n	800b1e6 <__sflush_r+0x1a>
 800b250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b254:	4299      	cmp	r1, r3
 800b256:	d002      	beq.n	800b25e <__sflush_r+0x92>
 800b258:	4628      	mov	r0, r5
 800b25a:	f7ff f9eb 	bl	800a634 <_free_r>
 800b25e:	2000      	movs	r0, #0
 800b260:	6360      	str	r0, [r4, #52]	; 0x34
 800b262:	e7c1      	b.n	800b1e8 <__sflush_r+0x1c>
 800b264:	6a21      	ldr	r1, [r4, #32]
 800b266:	2301      	movs	r3, #1
 800b268:	4628      	mov	r0, r5
 800b26a:	47b0      	blx	r6
 800b26c:	1c41      	adds	r1, r0, #1
 800b26e:	d1c7      	bne.n	800b200 <__sflush_r+0x34>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0c4      	beq.n	800b200 <__sflush_r+0x34>
 800b276:	2b1d      	cmp	r3, #29
 800b278:	d001      	beq.n	800b27e <__sflush_r+0xb2>
 800b27a:	2b16      	cmp	r3, #22
 800b27c:	d101      	bne.n	800b282 <__sflush_r+0xb6>
 800b27e:	602f      	str	r7, [r5, #0]
 800b280:	e7b1      	b.n	800b1e6 <__sflush_r+0x1a>
 800b282:	89a3      	ldrh	r3, [r4, #12]
 800b284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b288:	81a3      	strh	r3, [r4, #12]
 800b28a:	e7ad      	b.n	800b1e8 <__sflush_r+0x1c>
 800b28c:	690f      	ldr	r7, [r1, #16]
 800b28e:	2f00      	cmp	r7, #0
 800b290:	d0a9      	beq.n	800b1e6 <__sflush_r+0x1a>
 800b292:	0793      	lsls	r3, r2, #30
 800b294:	680e      	ldr	r6, [r1, #0]
 800b296:	bf08      	it	eq
 800b298:	694b      	ldreq	r3, [r1, #20]
 800b29a:	600f      	str	r7, [r1, #0]
 800b29c:	bf18      	it	ne
 800b29e:	2300      	movne	r3, #0
 800b2a0:	eba6 0807 	sub.w	r8, r6, r7
 800b2a4:	608b      	str	r3, [r1, #8]
 800b2a6:	f1b8 0f00 	cmp.w	r8, #0
 800b2aa:	dd9c      	ble.n	800b1e6 <__sflush_r+0x1a>
 800b2ac:	6a21      	ldr	r1, [r4, #32]
 800b2ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2b0:	4643      	mov	r3, r8
 800b2b2:	463a      	mov	r2, r7
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b0      	blx	r6
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	dc06      	bgt.n	800b2ca <__sflush_r+0xfe>
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c2:	81a3      	strh	r3, [r4, #12]
 800b2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c8:	e78e      	b.n	800b1e8 <__sflush_r+0x1c>
 800b2ca:	4407      	add	r7, r0
 800b2cc:	eba8 0800 	sub.w	r8, r8, r0
 800b2d0:	e7e9      	b.n	800b2a6 <__sflush_r+0xda>
 800b2d2:	bf00      	nop
 800b2d4:	20400001 	.word	0x20400001

0800b2d8 <_fflush_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	690b      	ldr	r3, [r1, #16]
 800b2dc:	4605      	mov	r5, r0
 800b2de:	460c      	mov	r4, r1
 800b2e0:	b913      	cbnz	r3, 800b2e8 <_fflush_r+0x10>
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	b118      	cbz	r0, 800b2f2 <_fflush_r+0x1a>
 800b2ea:	6983      	ldr	r3, [r0, #24]
 800b2ec:	b90b      	cbnz	r3, 800b2f2 <_fflush_r+0x1a>
 800b2ee:	f000 f887 	bl	800b400 <__sinit>
 800b2f2:	4b14      	ldr	r3, [pc, #80]	; (800b344 <_fflush_r+0x6c>)
 800b2f4:	429c      	cmp	r4, r3
 800b2f6:	d11b      	bne.n	800b330 <_fflush_r+0x58>
 800b2f8:	686c      	ldr	r4, [r5, #4]
 800b2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d0ef      	beq.n	800b2e2 <_fflush_r+0xa>
 800b302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b304:	07d0      	lsls	r0, r2, #31
 800b306:	d404      	bmi.n	800b312 <_fflush_r+0x3a>
 800b308:	0599      	lsls	r1, r3, #22
 800b30a:	d402      	bmi.n	800b312 <_fflush_r+0x3a>
 800b30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b30e:	f000 f915 	bl	800b53c <__retarget_lock_acquire_recursive>
 800b312:	4628      	mov	r0, r5
 800b314:	4621      	mov	r1, r4
 800b316:	f7ff ff59 	bl	800b1cc <__sflush_r>
 800b31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b31c:	07da      	lsls	r2, r3, #31
 800b31e:	4605      	mov	r5, r0
 800b320:	d4e0      	bmi.n	800b2e4 <_fflush_r+0xc>
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	059b      	lsls	r3, r3, #22
 800b326:	d4dd      	bmi.n	800b2e4 <_fflush_r+0xc>
 800b328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b32a:	f000 f908 	bl	800b53e <__retarget_lock_release_recursive>
 800b32e:	e7d9      	b.n	800b2e4 <_fflush_r+0xc>
 800b330:	4b05      	ldr	r3, [pc, #20]	; (800b348 <_fflush_r+0x70>)
 800b332:	429c      	cmp	r4, r3
 800b334:	d101      	bne.n	800b33a <_fflush_r+0x62>
 800b336:	68ac      	ldr	r4, [r5, #8]
 800b338:	e7df      	b.n	800b2fa <_fflush_r+0x22>
 800b33a:	4b04      	ldr	r3, [pc, #16]	; (800b34c <_fflush_r+0x74>)
 800b33c:	429c      	cmp	r4, r3
 800b33e:	bf08      	it	eq
 800b340:	68ec      	ldreq	r4, [r5, #12]
 800b342:	e7da      	b.n	800b2fa <_fflush_r+0x22>
 800b344:	0800f4f0 	.word	0x0800f4f0
 800b348:	0800f510 	.word	0x0800f510
 800b34c:	0800f4d0 	.word	0x0800f4d0

0800b350 <std>:
 800b350:	2300      	movs	r3, #0
 800b352:	b510      	push	{r4, lr}
 800b354:	4604      	mov	r4, r0
 800b356:	e9c0 3300 	strd	r3, r3, [r0]
 800b35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b35e:	6083      	str	r3, [r0, #8]
 800b360:	8181      	strh	r1, [r0, #12]
 800b362:	6643      	str	r3, [r0, #100]	; 0x64
 800b364:	81c2      	strh	r2, [r0, #14]
 800b366:	6183      	str	r3, [r0, #24]
 800b368:	4619      	mov	r1, r3
 800b36a:	2208      	movs	r2, #8
 800b36c:	305c      	adds	r0, #92	; 0x5c
 800b36e:	f7ff f8c1 	bl	800a4f4 <memset>
 800b372:	4b05      	ldr	r3, [pc, #20]	; (800b388 <std+0x38>)
 800b374:	6263      	str	r3, [r4, #36]	; 0x24
 800b376:	4b05      	ldr	r3, [pc, #20]	; (800b38c <std+0x3c>)
 800b378:	62a3      	str	r3, [r4, #40]	; 0x28
 800b37a:	4b05      	ldr	r3, [pc, #20]	; (800b390 <std+0x40>)
 800b37c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b37e:	4b05      	ldr	r3, [pc, #20]	; (800b394 <std+0x44>)
 800b380:	6224      	str	r4, [r4, #32]
 800b382:	6323      	str	r3, [r4, #48]	; 0x30
 800b384:	bd10      	pop	{r4, pc}
 800b386:	bf00      	nop
 800b388:	0800b745 	.word	0x0800b745
 800b38c:	0800b767 	.word	0x0800b767
 800b390:	0800b79f 	.word	0x0800b79f
 800b394:	0800b7c3 	.word	0x0800b7c3

0800b398 <_cleanup_r>:
 800b398:	4901      	ldr	r1, [pc, #4]	; (800b3a0 <_cleanup_r+0x8>)
 800b39a:	f000 b8af 	b.w	800b4fc <_fwalk_reent>
 800b39e:	bf00      	nop
 800b3a0:	0800b2d9 	.word	0x0800b2d9

0800b3a4 <__sfmoreglue>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	1e4a      	subs	r2, r1, #1
 800b3a8:	2568      	movs	r5, #104	; 0x68
 800b3aa:	4355      	muls	r5, r2
 800b3ac:	460e      	mov	r6, r1
 800b3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3b2:	f7ff f98f 	bl	800a6d4 <_malloc_r>
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	b140      	cbz	r0, 800b3cc <__sfmoreglue+0x28>
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	e9c0 1600 	strd	r1, r6, [r0]
 800b3c0:	300c      	adds	r0, #12
 800b3c2:	60a0      	str	r0, [r4, #8]
 800b3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3c8:	f7ff f894 	bl	800a4f4 <memset>
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	bd70      	pop	{r4, r5, r6, pc}

0800b3d0 <__sfp_lock_acquire>:
 800b3d0:	4801      	ldr	r0, [pc, #4]	; (800b3d8 <__sfp_lock_acquire+0x8>)
 800b3d2:	f000 b8b3 	b.w	800b53c <__retarget_lock_acquire_recursive>
 800b3d6:	bf00      	nop
 800b3d8:	200008ec 	.word	0x200008ec

0800b3dc <__sfp_lock_release>:
 800b3dc:	4801      	ldr	r0, [pc, #4]	; (800b3e4 <__sfp_lock_release+0x8>)
 800b3de:	f000 b8ae 	b.w	800b53e <__retarget_lock_release_recursive>
 800b3e2:	bf00      	nop
 800b3e4:	200008ec 	.word	0x200008ec

0800b3e8 <__sinit_lock_acquire>:
 800b3e8:	4801      	ldr	r0, [pc, #4]	; (800b3f0 <__sinit_lock_acquire+0x8>)
 800b3ea:	f000 b8a7 	b.w	800b53c <__retarget_lock_acquire_recursive>
 800b3ee:	bf00      	nop
 800b3f0:	200008e7 	.word	0x200008e7

0800b3f4 <__sinit_lock_release>:
 800b3f4:	4801      	ldr	r0, [pc, #4]	; (800b3fc <__sinit_lock_release+0x8>)
 800b3f6:	f000 b8a2 	b.w	800b53e <__retarget_lock_release_recursive>
 800b3fa:	bf00      	nop
 800b3fc:	200008e7 	.word	0x200008e7

0800b400 <__sinit>:
 800b400:	b510      	push	{r4, lr}
 800b402:	4604      	mov	r4, r0
 800b404:	f7ff fff0 	bl	800b3e8 <__sinit_lock_acquire>
 800b408:	69a3      	ldr	r3, [r4, #24]
 800b40a:	b11b      	cbz	r3, 800b414 <__sinit+0x14>
 800b40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b410:	f7ff bff0 	b.w	800b3f4 <__sinit_lock_release>
 800b414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b418:	6523      	str	r3, [r4, #80]	; 0x50
 800b41a:	4b13      	ldr	r3, [pc, #76]	; (800b468 <__sinit+0x68>)
 800b41c:	4a13      	ldr	r2, [pc, #76]	; (800b46c <__sinit+0x6c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	62a2      	str	r2, [r4, #40]	; 0x28
 800b422:	42a3      	cmp	r3, r4
 800b424:	bf04      	itt	eq
 800b426:	2301      	moveq	r3, #1
 800b428:	61a3      	streq	r3, [r4, #24]
 800b42a:	4620      	mov	r0, r4
 800b42c:	f000 f820 	bl	800b470 <__sfp>
 800b430:	6060      	str	r0, [r4, #4]
 800b432:	4620      	mov	r0, r4
 800b434:	f000 f81c 	bl	800b470 <__sfp>
 800b438:	60a0      	str	r0, [r4, #8]
 800b43a:	4620      	mov	r0, r4
 800b43c:	f000 f818 	bl	800b470 <__sfp>
 800b440:	2200      	movs	r2, #0
 800b442:	60e0      	str	r0, [r4, #12]
 800b444:	2104      	movs	r1, #4
 800b446:	6860      	ldr	r0, [r4, #4]
 800b448:	f7ff ff82 	bl	800b350 <std>
 800b44c:	68a0      	ldr	r0, [r4, #8]
 800b44e:	2201      	movs	r2, #1
 800b450:	2109      	movs	r1, #9
 800b452:	f7ff ff7d 	bl	800b350 <std>
 800b456:	68e0      	ldr	r0, [r4, #12]
 800b458:	2202      	movs	r2, #2
 800b45a:	2112      	movs	r1, #18
 800b45c:	f7ff ff78 	bl	800b350 <std>
 800b460:	2301      	movs	r3, #1
 800b462:	61a3      	str	r3, [r4, #24]
 800b464:	e7d2      	b.n	800b40c <__sinit+0xc>
 800b466:	bf00      	nop
 800b468:	0800f3e4 	.word	0x0800f3e4
 800b46c:	0800b399 	.word	0x0800b399

0800b470 <__sfp>:
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b472:	4607      	mov	r7, r0
 800b474:	f7ff ffac 	bl	800b3d0 <__sfp_lock_acquire>
 800b478:	4b1e      	ldr	r3, [pc, #120]	; (800b4f4 <__sfp+0x84>)
 800b47a:	681e      	ldr	r6, [r3, #0]
 800b47c:	69b3      	ldr	r3, [r6, #24]
 800b47e:	b913      	cbnz	r3, 800b486 <__sfp+0x16>
 800b480:	4630      	mov	r0, r6
 800b482:	f7ff ffbd 	bl	800b400 <__sinit>
 800b486:	3648      	adds	r6, #72	; 0x48
 800b488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	d503      	bpl.n	800b498 <__sfp+0x28>
 800b490:	6833      	ldr	r3, [r6, #0]
 800b492:	b30b      	cbz	r3, 800b4d8 <__sfp+0x68>
 800b494:	6836      	ldr	r6, [r6, #0]
 800b496:	e7f7      	b.n	800b488 <__sfp+0x18>
 800b498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b49c:	b9d5      	cbnz	r5, 800b4d4 <__sfp+0x64>
 800b49e:	4b16      	ldr	r3, [pc, #88]	; (800b4f8 <__sfp+0x88>)
 800b4a0:	60e3      	str	r3, [r4, #12]
 800b4a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4a6:	6665      	str	r5, [r4, #100]	; 0x64
 800b4a8:	f000 f847 	bl	800b53a <__retarget_lock_init_recursive>
 800b4ac:	f7ff ff96 	bl	800b3dc <__sfp_lock_release>
 800b4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4b8:	6025      	str	r5, [r4, #0]
 800b4ba:	61a5      	str	r5, [r4, #24]
 800b4bc:	2208      	movs	r2, #8
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4c4:	f7ff f816 	bl	800a4f4 <memset>
 800b4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d4:	3468      	adds	r4, #104	; 0x68
 800b4d6:	e7d9      	b.n	800b48c <__sfp+0x1c>
 800b4d8:	2104      	movs	r1, #4
 800b4da:	4638      	mov	r0, r7
 800b4dc:	f7ff ff62 	bl	800b3a4 <__sfmoreglue>
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	6030      	str	r0, [r6, #0]
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d1d5      	bne.n	800b494 <__sfp+0x24>
 800b4e8:	f7ff ff78 	bl	800b3dc <__sfp_lock_release>
 800b4ec:	230c      	movs	r3, #12
 800b4ee:	603b      	str	r3, [r7, #0]
 800b4f0:	e7ee      	b.n	800b4d0 <__sfp+0x60>
 800b4f2:	bf00      	nop
 800b4f4:	0800f3e4 	.word	0x0800f3e4
 800b4f8:	ffff0001 	.word	0xffff0001

0800b4fc <_fwalk_reent>:
 800b4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b500:	4606      	mov	r6, r0
 800b502:	4688      	mov	r8, r1
 800b504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b508:	2700      	movs	r7, #0
 800b50a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b50e:	f1b9 0901 	subs.w	r9, r9, #1
 800b512:	d505      	bpl.n	800b520 <_fwalk_reent+0x24>
 800b514:	6824      	ldr	r4, [r4, #0]
 800b516:	2c00      	cmp	r4, #0
 800b518:	d1f7      	bne.n	800b50a <_fwalk_reent+0xe>
 800b51a:	4638      	mov	r0, r7
 800b51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b520:	89ab      	ldrh	r3, [r5, #12]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d907      	bls.n	800b536 <_fwalk_reent+0x3a>
 800b526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b52a:	3301      	adds	r3, #1
 800b52c:	d003      	beq.n	800b536 <_fwalk_reent+0x3a>
 800b52e:	4629      	mov	r1, r5
 800b530:	4630      	mov	r0, r6
 800b532:	47c0      	blx	r8
 800b534:	4307      	orrs	r7, r0
 800b536:	3568      	adds	r5, #104	; 0x68
 800b538:	e7e9      	b.n	800b50e <_fwalk_reent+0x12>

0800b53a <__retarget_lock_init_recursive>:
 800b53a:	4770      	bx	lr

0800b53c <__retarget_lock_acquire_recursive>:
 800b53c:	4770      	bx	lr

0800b53e <__retarget_lock_release_recursive>:
 800b53e:	4770      	bx	lr

0800b540 <__swhatbuf_r>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	460e      	mov	r6, r1
 800b544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b548:	2900      	cmp	r1, #0
 800b54a:	b096      	sub	sp, #88	; 0x58
 800b54c:	4614      	mov	r4, r2
 800b54e:	461d      	mov	r5, r3
 800b550:	da07      	bge.n	800b562 <__swhatbuf_r+0x22>
 800b552:	2300      	movs	r3, #0
 800b554:	602b      	str	r3, [r5, #0]
 800b556:	89b3      	ldrh	r3, [r6, #12]
 800b558:	061a      	lsls	r2, r3, #24
 800b55a:	d410      	bmi.n	800b57e <__swhatbuf_r+0x3e>
 800b55c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b560:	e00e      	b.n	800b580 <__swhatbuf_r+0x40>
 800b562:	466a      	mov	r2, sp
 800b564:	f000 f954 	bl	800b810 <_fstat_r>
 800b568:	2800      	cmp	r0, #0
 800b56a:	dbf2      	blt.n	800b552 <__swhatbuf_r+0x12>
 800b56c:	9a01      	ldr	r2, [sp, #4]
 800b56e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b572:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b576:	425a      	negs	r2, r3
 800b578:	415a      	adcs	r2, r3
 800b57a:	602a      	str	r2, [r5, #0]
 800b57c:	e7ee      	b.n	800b55c <__swhatbuf_r+0x1c>
 800b57e:	2340      	movs	r3, #64	; 0x40
 800b580:	2000      	movs	r0, #0
 800b582:	6023      	str	r3, [r4, #0]
 800b584:	b016      	add	sp, #88	; 0x58
 800b586:	bd70      	pop	{r4, r5, r6, pc}

0800b588 <__smakebuf_r>:
 800b588:	898b      	ldrh	r3, [r1, #12]
 800b58a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b58c:	079d      	lsls	r5, r3, #30
 800b58e:	4606      	mov	r6, r0
 800b590:	460c      	mov	r4, r1
 800b592:	d507      	bpl.n	800b5a4 <__smakebuf_r+0x1c>
 800b594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	6123      	str	r3, [r4, #16]
 800b59c:	2301      	movs	r3, #1
 800b59e:	6163      	str	r3, [r4, #20]
 800b5a0:	b002      	add	sp, #8
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}
 800b5a4:	ab01      	add	r3, sp, #4
 800b5a6:	466a      	mov	r2, sp
 800b5a8:	f7ff ffca 	bl	800b540 <__swhatbuf_r>
 800b5ac:	9900      	ldr	r1, [sp, #0]
 800b5ae:	4605      	mov	r5, r0
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7ff f88f 	bl	800a6d4 <_malloc_r>
 800b5b6:	b948      	cbnz	r0, 800b5cc <__smakebuf_r+0x44>
 800b5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5bc:	059a      	lsls	r2, r3, #22
 800b5be:	d4ef      	bmi.n	800b5a0 <__smakebuf_r+0x18>
 800b5c0:	f023 0303 	bic.w	r3, r3, #3
 800b5c4:	f043 0302 	orr.w	r3, r3, #2
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	e7e3      	b.n	800b594 <__smakebuf_r+0xc>
 800b5cc:	4b0d      	ldr	r3, [pc, #52]	; (800b604 <__smakebuf_r+0x7c>)
 800b5ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	6020      	str	r0, [r4, #0]
 800b5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	9b00      	ldr	r3, [sp, #0]
 800b5dc:	6163      	str	r3, [r4, #20]
 800b5de:	9b01      	ldr	r3, [sp, #4]
 800b5e0:	6120      	str	r0, [r4, #16]
 800b5e2:	b15b      	cbz	r3, 800b5fc <__smakebuf_r+0x74>
 800b5e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f000 f923 	bl	800b834 <_isatty_r>
 800b5ee:	b128      	cbz	r0, 800b5fc <__smakebuf_r+0x74>
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	f023 0303 	bic.w	r3, r3, #3
 800b5f6:	f043 0301 	orr.w	r3, r3, #1
 800b5fa:	81a3      	strh	r3, [r4, #12]
 800b5fc:	89a0      	ldrh	r0, [r4, #12]
 800b5fe:	4305      	orrs	r5, r0
 800b600:	81a5      	strh	r5, [r4, #12]
 800b602:	e7cd      	b.n	800b5a0 <__smakebuf_r+0x18>
 800b604:	0800b399 	.word	0x0800b399

0800b608 <memcpy>:
 800b608:	440a      	add	r2, r1
 800b60a:	4291      	cmp	r1, r2
 800b60c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b610:	d100      	bne.n	800b614 <memcpy+0xc>
 800b612:	4770      	bx	lr
 800b614:	b510      	push	{r4, lr}
 800b616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b61a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b61e:	4291      	cmp	r1, r2
 800b620:	d1f9      	bne.n	800b616 <memcpy+0xe>
 800b622:	bd10      	pop	{r4, pc}

0800b624 <memmove>:
 800b624:	4288      	cmp	r0, r1
 800b626:	b510      	push	{r4, lr}
 800b628:	eb01 0402 	add.w	r4, r1, r2
 800b62c:	d902      	bls.n	800b634 <memmove+0x10>
 800b62e:	4284      	cmp	r4, r0
 800b630:	4623      	mov	r3, r4
 800b632:	d807      	bhi.n	800b644 <memmove+0x20>
 800b634:	1e43      	subs	r3, r0, #1
 800b636:	42a1      	cmp	r1, r4
 800b638:	d008      	beq.n	800b64c <memmove+0x28>
 800b63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b63e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b642:	e7f8      	b.n	800b636 <memmove+0x12>
 800b644:	4402      	add	r2, r0
 800b646:	4601      	mov	r1, r0
 800b648:	428a      	cmp	r2, r1
 800b64a:	d100      	bne.n	800b64e <memmove+0x2a>
 800b64c:	bd10      	pop	{r4, pc}
 800b64e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b656:	e7f7      	b.n	800b648 <memmove+0x24>

0800b658 <__malloc_lock>:
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <__malloc_lock+0x8>)
 800b65a:	f7ff bf6f 	b.w	800b53c <__retarget_lock_acquire_recursive>
 800b65e:	bf00      	nop
 800b660:	200008e8 	.word	0x200008e8

0800b664 <__malloc_unlock>:
 800b664:	4801      	ldr	r0, [pc, #4]	; (800b66c <__malloc_unlock+0x8>)
 800b666:	f7ff bf6a 	b.w	800b53e <__retarget_lock_release_recursive>
 800b66a:	bf00      	nop
 800b66c:	200008e8 	.word	0x200008e8

0800b670 <_realloc_r>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	4607      	mov	r7, r0
 800b674:	4614      	mov	r4, r2
 800b676:	460e      	mov	r6, r1
 800b678:	b921      	cbnz	r1, 800b684 <_realloc_r+0x14>
 800b67a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b67e:	4611      	mov	r1, r2
 800b680:	f7ff b828 	b.w	800a6d4 <_malloc_r>
 800b684:	b922      	cbnz	r2, 800b690 <_realloc_r+0x20>
 800b686:	f7fe ffd5 	bl	800a634 <_free_r>
 800b68a:	4625      	mov	r5, r4
 800b68c:	4628      	mov	r0, r5
 800b68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b690:	f000 f8f2 	bl	800b878 <_malloc_usable_size_r>
 800b694:	42a0      	cmp	r0, r4
 800b696:	d20f      	bcs.n	800b6b8 <_realloc_r+0x48>
 800b698:	4621      	mov	r1, r4
 800b69a:	4638      	mov	r0, r7
 800b69c:	f7ff f81a 	bl	800a6d4 <_malloc_r>
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d0f2      	beq.n	800b68c <_realloc_r+0x1c>
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	f7ff ffad 	bl	800b608 <memcpy>
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	f7fe ffbf 	bl	800a634 <_free_r>
 800b6b6:	e7e9      	b.n	800b68c <_realloc_r+0x1c>
 800b6b8:	4635      	mov	r5, r6
 800b6ba:	e7e7      	b.n	800b68c <_realloc_r+0x1c>

0800b6bc <_raise_r>:
 800b6bc:	291f      	cmp	r1, #31
 800b6be:	b538      	push	{r3, r4, r5, lr}
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	460d      	mov	r5, r1
 800b6c4:	d904      	bls.n	800b6d0 <_raise_r+0x14>
 800b6c6:	2316      	movs	r3, #22
 800b6c8:	6003      	str	r3, [r0, #0]
 800b6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6d2:	b112      	cbz	r2, 800b6da <_raise_r+0x1e>
 800b6d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6d8:	b94b      	cbnz	r3, 800b6ee <_raise_r+0x32>
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 f830 	bl	800b740 <_getpid_r>
 800b6e0:	462a      	mov	r2, r5
 800b6e2:	4601      	mov	r1, r0
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6ea:	f000 b817 	b.w	800b71c <_kill_r>
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d00a      	beq.n	800b708 <_raise_r+0x4c>
 800b6f2:	1c59      	adds	r1, r3, #1
 800b6f4:	d103      	bne.n	800b6fe <_raise_r+0x42>
 800b6f6:	2316      	movs	r3, #22
 800b6f8:	6003      	str	r3, [r0, #0]
 800b6fa:	2001      	movs	r0, #1
 800b6fc:	e7e7      	b.n	800b6ce <_raise_r+0x12>
 800b6fe:	2400      	movs	r4, #0
 800b700:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b704:	4628      	mov	r0, r5
 800b706:	4798      	blx	r3
 800b708:	2000      	movs	r0, #0
 800b70a:	e7e0      	b.n	800b6ce <_raise_r+0x12>

0800b70c <raise>:
 800b70c:	4b02      	ldr	r3, [pc, #8]	; (800b718 <raise+0xc>)
 800b70e:	4601      	mov	r1, r0
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	f7ff bfd3 	b.w	800b6bc <_raise_r>
 800b716:	bf00      	nop
 800b718:	2000006c 	.word	0x2000006c

0800b71c <_kill_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4d07      	ldr	r5, [pc, #28]	; (800b73c <_kill_r+0x20>)
 800b720:	2300      	movs	r3, #0
 800b722:	4604      	mov	r4, r0
 800b724:	4608      	mov	r0, r1
 800b726:	4611      	mov	r1, r2
 800b728:	602b      	str	r3, [r5, #0]
 800b72a:	f7f8 f897 	bl	800385c <_kill>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	d102      	bne.n	800b738 <_kill_r+0x1c>
 800b732:	682b      	ldr	r3, [r5, #0]
 800b734:	b103      	cbz	r3, 800b738 <_kill_r+0x1c>
 800b736:	6023      	str	r3, [r4, #0]
 800b738:	bd38      	pop	{r3, r4, r5, pc}
 800b73a:	bf00      	nop
 800b73c:	200008f0 	.word	0x200008f0

0800b740 <_getpid_r>:
 800b740:	f7f8 b884 	b.w	800384c <_getpid>

0800b744 <__sread>:
 800b744:	b510      	push	{r4, lr}
 800b746:	460c      	mov	r4, r1
 800b748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74c:	f000 f89c 	bl	800b888 <_read_r>
 800b750:	2800      	cmp	r0, #0
 800b752:	bfab      	itete	ge
 800b754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b756:	89a3      	ldrhlt	r3, [r4, #12]
 800b758:	181b      	addge	r3, r3, r0
 800b75a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b75e:	bfac      	ite	ge
 800b760:	6563      	strge	r3, [r4, #84]	; 0x54
 800b762:	81a3      	strhlt	r3, [r4, #12]
 800b764:	bd10      	pop	{r4, pc}

0800b766 <__swrite>:
 800b766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b76a:	461f      	mov	r7, r3
 800b76c:	898b      	ldrh	r3, [r1, #12]
 800b76e:	05db      	lsls	r3, r3, #23
 800b770:	4605      	mov	r5, r0
 800b772:	460c      	mov	r4, r1
 800b774:	4616      	mov	r6, r2
 800b776:	d505      	bpl.n	800b784 <__swrite+0x1e>
 800b778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77c:	2302      	movs	r3, #2
 800b77e:	2200      	movs	r2, #0
 800b780:	f000 f868 	bl	800b854 <_lseek_r>
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b78a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	4632      	mov	r2, r6
 800b792:	463b      	mov	r3, r7
 800b794:	4628      	mov	r0, r5
 800b796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b79a:	f000 b817 	b.w	800b7cc <_write_r>

0800b79e <__sseek>:
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a6:	f000 f855 	bl	800b854 <_lseek_r>
 800b7aa:	1c43      	adds	r3, r0, #1
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	bf15      	itete	ne
 800b7b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7ba:	81a3      	strheq	r3, [r4, #12]
 800b7bc:	bf18      	it	ne
 800b7be:	81a3      	strhne	r3, [r4, #12]
 800b7c0:	bd10      	pop	{r4, pc}

0800b7c2 <__sclose>:
 800b7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c6:	f000 b813 	b.w	800b7f0 <_close_r>
	...

0800b7cc <_write_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	; (800b7ec <_write_r+0x20>)
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f8 f875 	bl	80038ca <_write>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_write_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_write_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	200008f0 	.word	0x200008f0

0800b7f0 <_close_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d06      	ldr	r5, [pc, #24]	; (800b80c <_close_r+0x1c>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f7f8 f881 	bl	8003902 <_close>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_close_r+0x1a>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_close_r+0x1a>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	200008f0 	.word	0x200008f0

0800b810 <_fstat_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4d07      	ldr	r5, [pc, #28]	; (800b830 <_fstat_r+0x20>)
 800b814:	2300      	movs	r3, #0
 800b816:	4604      	mov	r4, r0
 800b818:	4608      	mov	r0, r1
 800b81a:	4611      	mov	r1, r2
 800b81c:	602b      	str	r3, [r5, #0]
 800b81e:	f7f8 f87c 	bl	800391a <_fstat>
 800b822:	1c43      	adds	r3, r0, #1
 800b824:	d102      	bne.n	800b82c <_fstat_r+0x1c>
 800b826:	682b      	ldr	r3, [r5, #0]
 800b828:	b103      	cbz	r3, 800b82c <_fstat_r+0x1c>
 800b82a:	6023      	str	r3, [r4, #0]
 800b82c:	bd38      	pop	{r3, r4, r5, pc}
 800b82e:	bf00      	nop
 800b830:	200008f0 	.word	0x200008f0

0800b834 <_isatty_r>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4d06      	ldr	r5, [pc, #24]	; (800b850 <_isatty_r+0x1c>)
 800b838:	2300      	movs	r3, #0
 800b83a:	4604      	mov	r4, r0
 800b83c:	4608      	mov	r0, r1
 800b83e:	602b      	str	r3, [r5, #0]
 800b840:	f7f8 f87b 	bl	800393a <_isatty>
 800b844:	1c43      	adds	r3, r0, #1
 800b846:	d102      	bne.n	800b84e <_isatty_r+0x1a>
 800b848:	682b      	ldr	r3, [r5, #0]
 800b84a:	b103      	cbz	r3, 800b84e <_isatty_r+0x1a>
 800b84c:	6023      	str	r3, [r4, #0]
 800b84e:	bd38      	pop	{r3, r4, r5, pc}
 800b850:	200008f0 	.word	0x200008f0

0800b854 <_lseek_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4d07      	ldr	r5, [pc, #28]	; (800b874 <_lseek_r+0x20>)
 800b858:	4604      	mov	r4, r0
 800b85a:	4608      	mov	r0, r1
 800b85c:	4611      	mov	r1, r2
 800b85e:	2200      	movs	r2, #0
 800b860:	602a      	str	r2, [r5, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	f7f8 f874 	bl	8003950 <_lseek>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	d102      	bne.n	800b872 <_lseek_r+0x1e>
 800b86c:	682b      	ldr	r3, [r5, #0]
 800b86e:	b103      	cbz	r3, 800b872 <_lseek_r+0x1e>
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	200008f0 	.word	0x200008f0

0800b878 <_malloc_usable_size_r>:
 800b878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b87c:	1f18      	subs	r0, r3, #4
 800b87e:	2b00      	cmp	r3, #0
 800b880:	bfbc      	itt	lt
 800b882:	580b      	ldrlt	r3, [r1, r0]
 800b884:	18c0      	addlt	r0, r0, r3
 800b886:	4770      	bx	lr

0800b888 <_read_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4d07      	ldr	r5, [pc, #28]	; (800b8a8 <_read_r+0x20>)
 800b88c:	4604      	mov	r4, r0
 800b88e:	4608      	mov	r0, r1
 800b890:	4611      	mov	r1, r2
 800b892:	2200      	movs	r2, #0
 800b894:	602a      	str	r2, [r5, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	f7f7 fffa 	bl	8003890 <_read>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d102      	bne.n	800b8a6 <_read_r+0x1e>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	b103      	cbz	r3, 800b8a6 <_read_r+0x1e>
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	200008f0 	.word	0x200008f0

0800b8ac <_init>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	bf00      	nop
 800b8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b2:	bc08      	pop	{r3}
 800b8b4:	469e      	mov	lr, r3
 800b8b6:	4770      	bx	lr

0800b8b8 <_fini>:
 800b8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ba:	bf00      	nop
 800b8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8be:	bc08      	pop	{r3}
 800b8c0:	469e      	mov	lr, r3
 800b8c2:	4770      	bx	lr
