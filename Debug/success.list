
success.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bdc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029d4  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800875c  0800875c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800875c  0800875c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008764  08008764  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008764  08008764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008768  08008768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800876c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000440  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ad2  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff5  00000000  00000000  00035b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  00038b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001118  00000000  00000000  00039dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002545b  00000000  00000000  0003aed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015762  00000000  00000000  00060333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da91a  00000000  00000000  00075a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001503af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c44  00000000  00000000  00150404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000005c 	.word	0x2000005c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005d70 	.word	0x08005d70

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000060 	.word	0x20000060
 80001e8:	08005d70 	.word	0x08005d70

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <change_LCD_state>:


//extern int num_of_players=0;


void change_LCD_state(int state){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	uint32_t x= BSP_LCD_GetXSize();
 80004ec:	f001 fad4 	bl	8001a98 <BSP_LCD_GetXSize>
 80004f0:	60f8      	str	r0, [r7, #12]
	uint32_t y= BSP_LCD_GetYSize();
 80004f2:	f001 fadd 	bl	8001ab0 <BSP_LCD_GetYSize>
 80004f6:	60b8      	str	r0, [r7, #8]
	switch (state){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d11f      	bne.n	800053e <change_LCD_state+0x5a>
		case 0:;
			l0:
			BSP_LCD_SetFont(&Font20);
 80004fe:	4812      	ldr	r0, [pc, #72]	; (8000548 <change_LCD_state+0x64>)
 8000500:	f001 fb6e 	bl	8001be0 <BSP_LCD_SetFont>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000504:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000508:	f001 fb52 	bl	8001bb0 <BSP_LCD_SetTextColor>
			BSP_LCD_DisplayStringAtLine(5,(uint8_t *)"Beerpong");
 800050c:	490f      	ldr	r1, [pc, #60]	; (800054c <change_LCD_state+0x68>)
 800050e:	2005      	movs	r0, #5
 8000510:	f001 fcc0 	bl	8001e94 <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DisplayStringAtLine(8,(uint8_t *)"pritisni start");
 8000514:	490e      	ldr	r1, [pc, #56]	; (8000550 <change_LCD_state+0x6c>)
 8000516:	2008      	movs	r0, #8
 8000518:	f001 fcbc 	bl	8001e94 <BSP_LCD_DisplayStringAtLine>
			HAL_Delay(500);
 800051c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000520:	f002 f90a 	bl	8002738 <HAL_Delay>
			BSP_LCD_DisplayStringAtLine(9,(uint8_t *)">");
 8000524:	490b      	ldr	r1, [pc, #44]	; (8000554 <change_LCD_state+0x70>)
 8000526:	2009      	movs	r0, #9
 8000528:	f001 fcb4 	bl	8001e94 <BSP_LCD_DisplayStringAtLine>
			HAL_Delay(500);
 800052c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000530:	f002 f902 	bl	8002738 <HAL_Delay>
			BSP_LCD_DisplayStringAtLine(9,(uint8_t *)"");
 8000534:	4908      	ldr	r1, [pc, #32]	; (8000558 <change_LCD_state+0x74>)
 8000536:	2009      	movs	r0, #9
 8000538:	f001 fcac 	bl	8001e94 <BSP_LCD_DisplayStringAtLine>
			//BSP_LCD_SetTextColor(LCD_COLOR_LIGHTCYAN);
			//BSP_LCD_ClearStringLine(9);
			goto l0;
 800053c:	e7df      	b.n	80004fe <change_LCD_state+0x1a>

		case 1:

		default:
			break;
 800053e:	bf00      	nop

	}
}
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000048 	.word	0x20000048
 800054c:	08005d88 	.word	0x08005d88
 8000550:	08005d94 	.word	0x08005d94
 8000554:	08005da4 	.word	0x08005da4
 8000558:	08005da8 	.word	0x08005da8

0800055c <LCD_Handler>:

void LCD_Handler(void){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	change_LCD_state(0);
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff ffbf 	bl	80004e4 <change_LCD_state>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}

0800056a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f002 f870 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f82e 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 fa42 	bl	8000a00 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800057c:	f000 f89a 	bl	80006b4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000580:	f000 f9f0 	bl	8000964 <MX_FMC_Init>
  MX_I2C3_Init();
 8000584:	f000 f8c8 	bl	8000718 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000588:	f000 f906 	bl	8000798 <MX_LTDC_Init>
  MX_SPI5_Init();
 800058c:	f000 f9b4 	bl	80008f8 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();
 8000590:	f001 fa18 	bl	80019c4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8000594:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000598:	2000      	movs	r0, #0
 800059a:	f001 fa95 	bl	8001ac8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 800059e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 fa90 	bl	8001ac8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f001 faf1 	bl	8001b90 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80005ae:	f001 fc89 	bl	8001ec4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 80005b2:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80005b6:	f001 fb43 	bl	8001c40 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80005ba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80005be:	f001 faf7 	bl	8001bb0 <BSP_LCD_SetTextColor>
  uint32_t x= BSP_LCD_GetXSize();
 80005c2:	f001 fa69 	bl	8001a98 <BSP_LCD_GetXSize>
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t y= BSP_LCD_GetYSize();
 80005c8:	f001 fa72 	bl	8001ab0 <BSP_LCD_GetYSize>
 80005cc:	6038      	str	r0, [r7, #0]
	  //BSP_LCD_DisplayStringAtLine(5,(uint8_t *)"radi");
	  //HAL_Delay(1000);
	  //BSP_LCD_Clear(LCD_COLOR_MAGENTA);
	  //HAL_Delay(1000);

	  LCD_Handler();
 80005ce:	f7ff ffc5 	bl	800055c <LCD_Handler>
 80005d2:	e7fc      	b.n	80005ce <main+0x64>

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fbbc 	bl	8005d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <SystemClock_Config+0xd8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <SystemClock_Config+0xd8>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <SystemClock_Config+0xd8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xdc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <SystemClock_Config+0xdc>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xdc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000648:	23b4      	movs	r3, #180	; 0xb4
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fd9f 	bl	800419c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 fb0a 	bl	8000c7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000668:	f003 fd48 	bl	80040fc <HAL_PWREx_EnableOverDrive>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000672:	f000 fb03 	bl	8000c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2105      	movs	r1, #5
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fff9 	bl	800468c <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006a0:	f000 faec 	bl	8000c7c <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <MX_DMA2D_Init+0x60>)
 80006bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006d8:	2202      	movs	r2, #2
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006ea:	f002 fb19 	bl	8002d20 <HAL_DMA2D_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006f4:	f000 fac2 	bl	8000c7c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006f8:	2101      	movs	r1, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_DMA2D_Init+0x5c>)
 80006fc:	f002 fc6e 	bl	8002fdc <HAL_DMA2D_ConfigLayer>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000706:	f000 fab9 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000378 	.word	0x20000378
 8000714:	4002b000 	.word	0x4002b000

08000718 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_I2C3_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_I2C3_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_I2C3_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_I2C3_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_I2C3_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_I2C3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_I2C3_Init+0x74>)
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_I2C3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_I2C3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_I2C3_Init+0x74>)
 8000756:	f003 f841 	bl	80037dc <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fa8c 	bl	8000c7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_I2C3_Init+0x74>)
 8000768:	f003 f97c 	bl	8003a64 <HAL_I2CEx_ConfigAnalogFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 fa83 	bl	8000c7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C3_Init+0x74>)
 800077a:	f003 f9af 	bl	8003adc <HAL_I2CEx_ConfigDigitalFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 fa7a 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000224 	.word	0x20000224
 8000790:	40005c00 	.word	0x40005c00
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09a      	sub	sp, #104	; 0x68
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800079e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007a2:	2234      	movs	r2, #52	; 0x34
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 fada 	bl	8005d60 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2234      	movs	r2, #52	; 0x34
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 fad4 	bl	8005d60 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007b8:	4b4d      	ldr	r3, [pc, #308]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007ba:	4a4e      	ldr	r2, [pc, #312]	; (80008f4 <MX_LTDC_Init+0x15c>)
 80007bc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007be:	4b4c      	ldr	r3, [pc, #304]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007c4:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007ca:	4b49      	ldr	r3, [pc, #292]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007d0:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80007d6:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007d8:	2207      	movs	r2, #7
 80007da:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80007dc:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007de:	2203      	movs	r2, #3
 80007e0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007e4:	220e      	movs	r2, #14
 80007e6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80007e8:	4b41      	ldr	r3, [pc, #260]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007ea:	2205      	movs	r2, #5
 80007ec:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007f0:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 80007f6:	4b3e      	ldr	r3, [pc, #248]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007f8:	22f5      	movs	r2, #245	; 0xf5
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 80007fc:	4b3c      	ldr	r3, [pc, #240]	; (80008f0 <MX_LTDC_Init+0x158>)
 80007fe:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000804:	4b3a      	ldr	r3, [pc, #232]	; (80008f0 <MX_LTDC_Init+0x158>)
 8000806:	22f7      	movs	r2, #247	; 0xf7
 8000808:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <MX_LTDC_Init+0x158>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000812:	4b37      	ldr	r3, [pc, #220]	; (80008f0 <MX_LTDC_Init+0x158>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800081a:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <MX_LTDC_Init+0x158>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000822:	4833      	ldr	r0, [pc, #204]	; (80008f0 <MX_LTDC_Init+0x158>)
 8000824:	f003 f99a 	bl	8003b5c <HAL_LTDC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 800082e:	f000 fa25 	bl	8000c7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000842:	2300      	movs	r3, #0
 8000844:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800084e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000852:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000854:	2305      	movs	r3, #5
 8000856:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000876:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <MX_LTDC_Init+0x158>)
 8000880:	f003 fa3c 	bl	8003cfc <HAL_LTDC_ConfigLayer>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 800088a:	f000 f9f7 	bl	8000c7c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ae:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008b0:	2305      	movs	r3, #5
 80008b2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	2201      	movs	r2, #1
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_LTDC_Init+0x158>)
 80008da:	f003 fa0f 	bl	8003cfc <HAL_LTDC_ConfigLayer>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 80008e4:	f000 f9ca 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3768      	adds	r7, #104	; 0x68
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200002d0 	.word	0x200002d0
 80008f4:	40016800 	.word	0x40016800

080008f8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_SPI5_Init+0x64>)
 80008fe:	4a18      	ldr	r2, [pc, #96]	; (8000960 <MX_SPI5_Init+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_SPI5_Init+0x64>)
 8000904:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000908:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_SPI5_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_SPI5_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_SPI5_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_SPI5_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_SPI5_Init+0x64>)
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI5_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_SPI5_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI5_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_SPI5_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI5_Init+0x64>)
 8000944:	220a      	movs	r2, #10
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_SPI5_Init+0x64>)
 800094a:	f004 fac4 	bl	8004ed6 <HAL_SPI_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000954:	f000 f992 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000278 	.word	0x20000278
 8000960:	40015000 	.word	0x40015000

08000964 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_FMC_Init+0x94>)
 800097e:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <MX_FMC_Init+0x98>)
 8000980:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_FMC_Init+0x94>)
 8000984:	2201      	movs	r2, #1
 8000986:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_FMC_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_FMC_Init+0x94>)
 8000990:	2204      	movs	r2, #4
 8000992:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_FMC_Init+0x94>)
 8000996:	2210      	movs	r2, #16
 8000998:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_FMC_Init+0x94>)
 800099c:	2240      	movs	r2, #64	; 0x40
 800099e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_FMC_Init+0x94>)
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_FMC_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_FMC_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_FMC_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_FMC_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80009be:	2310      	movs	r3, #16
 80009c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80009c2:	2310      	movs	r3, #16
 80009c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80009c6:	2310      	movs	r3, #16
 80009c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80009ca:	2310      	movs	r3, #16
 80009cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80009ce:	2310      	movs	r3, #16
 80009d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80009d2:	2310      	movs	r3, #16
 80009d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80009d6:	2310      	movs	r3, #16
 80009d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_FMC_Init+0x94>)
 80009e0:	f004 f9fa 	bl	8004dd8 <HAL_SDRAM_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80009ea:	f000 f947 	bl	8000c7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009ee:	bf00      	nop
 80009f0:	3720      	adds	r7, #32
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200003b8 	.word	0x200003b8
 80009fc:	a0000140 	.word	0xa0000140

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
 8000a1a:	4b92      	ldr	r3, [pc, #584]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a91      	ldr	r2, [pc, #580]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b8f      	ldr	r3, [pc, #572]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	623b      	str	r3, [r7, #32]
 8000a30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
 8000a36:	4b8b      	ldr	r3, [pc, #556]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a8a      	ldr	r2, [pc, #552]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b88      	ldr	r3, [pc, #544]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0320 	and.w	r3, r3, #32
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	4b84      	ldr	r3, [pc, #528]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a83      	ldr	r2, [pc, #524]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b81      	ldr	r3, [pc, #516]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	4b7d      	ldr	r3, [pc, #500]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a7c      	ldr	r2, [pc, #496]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b7a      	ldr	r3, [pc, #488]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b76      	ldr	r3, [pc, #472]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a75      	ldr	r2, [pc, #468]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b73      	ldr	r3, [pc, #460]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b6f      	ldr	r3, [pc, #444]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a6e      	ldr	r2, [pc, #440]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b6c      	ldr	r3, [pc, #432]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b68      	ldr	r3, [pc, #416]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a67      	ldr	r2, [pc, #412]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a60      	ldr	r2, [pc, #384]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b5e      	ldr	r3, [pc, #376]	; (8000c64 <MX_GPIO_Init+0x264>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2116      	movs	r1, #22
 8000afa:	485b      	ldr	r0, [pc, #364]	; (8000c68 <MX_GPIO_Init+0x268>)
 8000afc:	f002 fe54 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4859      	ldr	r0, [pc, #356]	; (8000c6c <MX_GPIO_Init+0x26c>)
 8000b06:	f002 fe4f 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b10:	4857      	ldr	r0, [pc, #348]	; (8000c70 <MX_GPIO_Init+0x270>)
 8000b12:	f002 fe49 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b1c:	4855      	ldr	r0, [pc, #340]	; (8000c74 <MX_GPIO_Init+0x274>)
 8000b1e:	f002 fe43 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b22:	2316      	movs	r3, #22
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	484b      	ldr	r0, [pc, #300]	; (8000c68 <MX_GPIO_Init+0x268>)
 8000b3a:	f002 fb7d 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b3e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b44:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4845      	ldr	r0, [pc, #276]	; (8000c6c <MX_GPIO_Init+0x26c>)
 8000b56:	f002 fb6f 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	483e      	ldr	r0, [pc, #248]	; (8000c6c <MX_GPIO_Init+0x26c>)
 8000b72:	f002 fb61 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b76:	2320      	movs	r3, #32
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b7a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4837      	ldr	r0, [pc, #220]	; (8000c68 <MX_GPIO_Init+0x268>)
 8000b8c:	f002 fb54 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b90:	2304      	movs	r3, #4
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4835      	ldr	r0, [pc, #212]	; (8000c78 <MX_GPIO_Init+0x278>)
 8000ba4:	f002 fb48 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000ba8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000bba:	230c      	movs	r3, #12
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	482c      	ldr	r0, [pc, #176]	; (8000c78 <MX_GPIO_Init+0x278>)
 8000bc6:	f002 fb37 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4826      	ldr	r0, [pc, #152]	; (8000c78 <MX_GPIO_Init+0x278>)
 8000be0:	f002 fb2a 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	481d      	ldr	r0, [pc, #116]	; (8000c70 <MX_GPIO_Init+0x270>)
 8000bfa:	f002 fb1d 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000bfe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	4816      	ldr	r0, [pc, #88]	; (8000c70 <MX_GPIO_Init+0x270>)
 8000c18:	f002 fb0e 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <MX_GPIO_Init+0x26c>)
 8000c3a:	f002 fafd 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c3e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4807      	ldr	r0, [pc, #28]	; (8000c74 <MX_GPIO_Init+0x274>)
 8000c58:	f002 faee 	bl	8003238 <HAL_GPIO_Init>

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	40021800 	.word	0x40021800
 8000c78:	40020400 	.word	0x40020400

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f001 fe2a 	bl	8002920 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <HAL_DMA2D_MspInit+0x3c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d10d      	bne.n	8000d06 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_DMA2D_MspInit+0x40>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_DMA2D_MspInit+0x40>)
 8000cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_DMA2D_MspInit+0x40>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	4002b000 	.word	0x4002b000
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a29      	ldr	r2, [pc, #164]	; (8000de0 <HAL_I2C_MspInit+0xc4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d14b      	bne.n	8000dd6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a27      	ldr	r2, [pc, #156]	; (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a20      	ldr	r2, [pc, #128]	; (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4815      	ldr	r0, [pc, #84]	; (8000de8 <HAL_I2C_MspInit+0xcc>)
 8000d94:	f002 fa50 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9e:	2312      	movs	r3, #18
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000daa:	2304      	movs	r3, #4
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <HAL_I2C_MspInit+0xd0>)
 8000db6:	f002 fa3f 	bl	8003238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000dc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40005c00 	.word	0x40005c00
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09a      	sub	sp, #104	; 0x68
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	2230      	movs	r2, #48	; 0x30
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 ffa5 	bl	8005d60 <memset>
  if(hltdc->Instance==LTDC)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a81      	ldr	r2, [pc, #516]	; (8001020 <HAL_LTDC_MspInit+0x230>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	f040 80fa 	bne.w	8001016 <HAL_LTDC_MspInit+0x226>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e22:	2308      	movs	r3, #8
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000e26:	2332      	movs	r3, #50	; 0x32
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4618      	mov	r0, r3
 8000e38:	f003 fe10 	bl	8004a5c <HAL_RCCEx_PeriphCLKConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000e42:	f7ff ff1b 	bl	8000c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
 8000e4a:	4b76      	ldr	r3, [pc, #472]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a75      	ldr	r2, [pc, #468]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b73      	ldr	r3, [pc, #460]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e5e:	623b      	str	r3, [r7, #32]
 8000e60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	4b6f      	ldr	r3, [pc, #444]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a6e      	ldr	r2, [pc, #440]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000e6c:	f043 0320 	orr.w	r3, r3, #32
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b6c      	ldr	r3, [pc, #432]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	4b68      	ldr	r3, [pc, #416]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a67      	ldr	r2, [pc, #412]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b65      	ldr	r3, [pc, #404]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	4b61      	ldr	r3, [pc, #388]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a60      	ldr	r2, [pc, #384]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b5e      	ldr	r3, [pc, #376]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a59      	ldr	r2, [pc, #356]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b57      	ldr	r3, [pc, #348]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b53      	ldr	r3, [pc, #332]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a52      	ldr	r2, [pc, #328]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b50      	ldr	r3, [pc, #320]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a4b      	ldr	r2, [pc, #300]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b49      	ldr	r3, [pc, #292]	; (8001024 <HAL_LTDC_MspInit+0x234>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f24:	4619      	mov	r1, r3
 8000f26:	4840      	ldr	r0, [pc, #256]	; (8001028 <HAL_LTDC_MspInit+0x238>)
 8000f28:	f002 f986 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000f2c:	f641 0358 	movw	r3, #6232	; 0x1858
 8000f30:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f3e:	230e      	movs	r3, #14
 8000f40:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f46:	4619      	mov	r1, r3
 8000f48:	4838      	ldr	r0, [pc, #224]	; (800102c <HAL_LTDC_MspInit+0x23c>)
 8000f4a:	f002 f975 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f5e:	2309      	movs	r3, #9
 8000f60:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f66:	4619      	mov	r1, r3
 8000f68:	4831      	ldr	r0, [pc, #196]	; (8001030 <HAL_LTDC_MspInit+0x240>)
 8000f6a:	f002 f965 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000f6e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f72:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f80:	230e      	movs	r3, #14
 8000f82:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4829      	ldr	r0, [pc, #164]	; (8001030 <HAL_LTDC_MspInit+0x240>)
 8000f8c:	f002 f954 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f90:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f94:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa2:	230e      	movs	r3, #14
 8000fa4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000faa:	4619      	mov	r1, r3
 8000fac:	4821      	ldr	r0, [pc, #132]	; (8001034 <HAL_LTDC_MspInit+0x244>)
 8000fae:	f002 f943 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000fb2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000fb6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fc4:	230e      	movs	r3, #14
 8000fc6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481a      	ldr	r0, [pc, #104]	; (8001038 <HAL_LTDC_MspInit+0x248>)
 8000fd0:	f002 f932 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000fd4:	2348      	movs	r3, #72	; 0x48
 8000fd6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fe4:	230e      	movs	r3, #14
 8000fe6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fec:	4619      	mov	r1, r3
 8000fee:	4813      	ldr	r0, [pc, #76]	; (800103c <HAL_LTDC_MspInit+0x24c>)
 8000ff0:	f002 f922 	bl	8003238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000ff4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001006:	2309      	movs	r3, #9
 8001008:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800100e:	4619      	mov	r1, r3
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <HAL_LTDC_MspInit+0x244>)
 8001012:	f002 f911 	bl	8003238 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3768      	adds	r7, #104	; 0x68
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40016800 	.word	0x40016800
 8001024:	40023800 	.word	0x40023800
 8001028:	40021400 	.word	0x40021400
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40021800 	.word	0x40021800
 8001038:	40020800 	.word	0x40020800
 800103c:	40020c00 	.word	0x40020c00

08001040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_SPI_MspInit+0x84>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12c      	bne.n	80010bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_SPI_MspInit+0x88>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <HAL_SPI_MspInit+0x88>)
 800106c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_SPI_MspInit+0x88>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_SPI_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <HAL_SPI_MspInit+0x88>)
 8001088:	f043 0320 	orr.w	r3, r3, #32
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_SPI_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0320 	and.w	r3, r3, #32
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800109a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80010ac:	2305      	movs	r3, #5
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_SPI_MspInit+0x8c>)
 80010b8:	f002 f8be 	bl	8003238 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40015000 	.word	0x40015000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40021400 	.word	0x40021400

080010d0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_SPI_MspDeInit+0x30>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10a      	bne.n	80010f8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_SPI_MspDeInit+0x34>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_SPI_MspDeInit+0x34>)
 80010e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80010ee:	f44f 7160 	mov.w	r1, #896	; 0x380
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <HAL_SPI_MspDeInit+0x38>)
 80010f4:	f002 fa4c 	bl	8003590 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40015000 	.word	0x40015000
 8001104:	40023800 	.word	0x40023800
 8001108:	40021400 	.word	0x40021400

0800110c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001120:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <HAL_FMC_MspInit+0x104>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d16f      	bne.n	8001208 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001128:	4b39      	ldr	r3, [pc, #228]	; (8001210 <HAL_FMC_MspInit+0x104>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <HAL_FMC_MspInit+0x108>)
 8001134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001136:	4a37      	ldr	r2, [pc, #220]	; (8001214 <HAL_FMC_MspInit+0x108>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6393      	str	r3, [r2, #56]	; 0x38
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <HAL_FMC_MspInit+0x108>)
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800114a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800114e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800115c:	230c      	movs	r3, #12
 800115e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4619      	mov	r1, r3
 8001164:	482c      	ldr	r0, [pc, #176]	; (8001218 <HAL_FMC_MspInit+0x10c>)
 8001166:	f002 f867 	bl	8003238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800117a:	230c      	movs	r3, #12
 800117c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4826      	ldr	r0, [pc, #152]	; (800121c <HAL_FMC_MspInit+0x110>)
 8001184:	f002 f858 	bl	8003238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001188:	f248 1333 	movw	r3, #33075	; 0x8133
 800118c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800119a:	230c      	movs	r3, #12
 800119c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	481f      	ldr	r0, [pc, #124]	; (8001220 <HAL_FMC_MspInit+0x114>)
 80011a4:	f002 f848 	bl	8003238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80011a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011ac:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ba:	230c      	movs	r3, #12
 80011bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <HAL_FMC_MspInit+0x118>)
 80011c4:	f002 f838 	bl	8003238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80011c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011cc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011da:	230c      	movs	r3, #12
 80011dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <HAL_FMC_MspInit+0x11c>)
 80011e4:	f002 f828 	bl	8003238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80011e8:	2360      	movs	r3, #96	; 0x60
 80011ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f8:	230c      	movs	r3, #12
 80011fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <HAL_FMC_MspInit+0x120>)
 8001202:	f002 f819 	bl	8003238 <HAL_GPIO_Init>
 8001206:	e000      	b.n	800120a <HAL_FMC_MspInit+0xfe>
    return;
 8001208:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000078 	.word	0x20000078
 8001214:	40023800 	.word	0x40023800
 8001218:	40021400 	.word	0x40021400
 800121c:	40020800 	.word	0x40020800
 8001220:	40021800 	.word	0x40021800
 8001224:	40021000 	.word	0x40021000
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40020400 	.word	0x40020400

08001230 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001238:	f7ff ff68 	bl	800110c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001290:	f001 fa32 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <SystemInit+0x20>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <SystemInit+0x20>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012c2:	490e      	ldr	r1, [pc, #56]	; (80012fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012d8:	4c0b      	ldr	r4, [pc, #44]	; (8001308 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012e6:	f7ff ffd7 	bl	8001298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f004 fd15 	bl	8005d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff f93c 	bl	800056a <main>
  bx  lr    
 80012f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001300:	0800876c 	.word	0x0800876c
  ldr r2, =_sbss
 8001304:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001308:	2000049c 	.word	0x2000049c

0800130c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC_IRQHandler>

0800130e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001312:	f000 fa5d 	bl	80017d0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001316:	20ca      	movs	r0, #202	; 0xca
 8001318:	f000 f95d 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800131c:	20c3      	movs	r0, #195	; 0xc3
 800131e:	f000 f967 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001322:	2008      	movs	r0, #8
 8001324:	f000 f964 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001328:	2050      	movs	r0, #80	; 0x50
 800132a:	f000 f961 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800132e:	20cf      	movs	r0, #207	; 0xcf
 8001330:	f000 f951 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001334:	2000      	movs	r0, #0
 8001336:	f000 f95b 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800133a:	20c1      	movs	r0, #193	; 0xc1
 800133c:	f000 f958 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001340:	2030      	movs	r0, #48	; 0x30
 8001342:	f000 f955 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001346:	20ed      	movs	r0, #237	; 0xed
 8001348:	f000 f945 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800134c:	2064      	movs	r0, #100	; 0x64
 800134e:	f000 f94f 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001352:	2003      	movs	r0, #3
 8001354:	f000 f94c 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001358:	2012      	movs	r0, #18
 800135a:	f000 f949 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800135e:	2081      	movs	r0, #129	; 0x81
 8001360:	f000 f946 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001364:	20e8      	movs	r0, #232	; 0xe8
 8001366:	f000 f936 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800136a:	2085      	movs	r0, #133	; 0x85
 800136c:	f000 f940 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001370:	2000      	movs	r0, #0
 8001372:	f000 f93d 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001376:	2078      	movs	r0, #120	; 0x78
 8001378:	f000 f93a 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800137c:	20cb      	movs	r0, #203	; 0xcb
 800137e:	f000 f92a 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001382:	2039      	movs	r0, #57	; 0x39
 8001384:	f000 f934 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001388:	202c      	movs	r0, #44	; 0x2c
 800138a:	f000 f931 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f92e 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001394:	2034      	movs	r0, #52	; 0x34
 8001396:	f000 f92b 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800139a:	2002      	movs	r0, #2
 800139c:	f000 f928 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80013a0:	20f7      	movs	r0, #247	; 0xf7
 80013a2:	f000 f918 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80013a6:	2020      	movs	r0, #32
 80013a8:	f000 f922 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80013ac:	20ea      	movs	r0, #234	; 0xea
 80013ae:	f000 f912 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f91c 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f919 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80013be:	20b1      	movs	r0, #177	; 0xb1
 80013c0:	f000 f909 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 f913 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80013ca:	201b      	movs	r0, #27
 80013cc:	f000 f910 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80013d0:	20b6      	movs	r0, #182	; 0xb6
 80013d2:	f000 f900 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80013d6:	200a      	movs	r0, #10
 80013d8:	f000 f90a 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80013dc:	20a2      	movs	r0, #162	; 0xa2
 80013de:	f000 f907 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80013e2:	20c0      	movs	r0, #192	; 0xc0
 80013e4:	f000 f8f7 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80013e8:	2010      	movs	r0, #16
 80013ea:	f000 f901 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80013ee:	20c1      	movs	r0, #193	; 0xc1
 80013f0:	f000 f8f1 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80013f4:	2010      	movs	r0, #16
 80013f6:	f000 f8fb 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80013fa:	20c5      	movs	r0, #197	; 0xc5
 80013fc:	f000 f8eb 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001400:	2045      	movs	r0, #69	; 0x45
 8001402:	f000 f8f5 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001406:	2015      	movs	r0, #21
 8001408:	f000 f8f2 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800140c:	20c7      	movs	r0, #199	; 0xc7
 800140e:	f000 f8e2 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001412:	2090      	movs	r0, #144	; 0x90
 8001414:	f000 f8ec 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001418:	2036      	movs	r0, #54	; 0x36
 800141a:	f000 f8dc 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800141e:	20c8      	movs	r0, #200	; 0xc8
 8001420:	f000 f8e6 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001424:	20f2      	movs	r0, #242	; 0xf2
 8001426:	f000 f8d6 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f8e0 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001430:	20b0      	movs	r0, #176	; 0xb0
 8001432:	f000 f8d0 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001436:	20c2      	movs	r0, #194	; 0xc2
 8001438:	f000 f8da 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800143c:	20b6      	movs	r0, #182	; 0xb6
 800143e:	f000 f8ca 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001442:	200a      	movs	r0, #10
 8001444:	f000 f8d4 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001448:	20a7      	movs	r0, #167	; 0xa7
 800144a:	f000 f8d1 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800144e:	2027      	movs	r0, #39	; 0x27
 8001450:	f000 f8ce 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001454:	2004      	movs	r0, #4
 8001456:	f000 f8cb 	bl	80015f0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800145a:	202a      	movs	r0, #42	; 0x2a
 800145c:	f000 f8bb 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001460:	2000      	movs	r0, #0
 8001462:	f000 f8c5 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001466:	2000      	movs	r0, #0
 8001468:	f000 f8c2 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800146c:	2000      	movs	r0, #0
 800146e:	f000 f8bf 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001472:	20ef      	movs	r0, #239	; 0xef
 8001474:	f000 f8bc 	bl	80015f0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001478:	202b      	movs	r0, #43	; 0x2b
 800147a:	f000 f8ac 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f8b6 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f8b3 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800148a:	2001      	movs	r0, #1
 800148c:	f000 f8b0 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001490:	203f      	movs	r0, #63	; 0x3f
 8001492:	f000 f8ad 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001496:	20f6      	movs	r0, #246	; 0xf6
 8001498:	f000 f89d 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 f8a7 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f8a4 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80014a8:	2006      	movs	r0, #6
 80014aa:	f000 f8a1 	bl	80015f0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80014ae:	202c      	movs	r0, #44	; 0x2c
 80014b0:	f000 f891 	bl	80015d6 <ili9341_WriteReg>
  LCD_Delay(200);
 80014b4:	20c8      	movs	r0, #200	; 0xc8
 80014b6:	f000 fa79 	bl	80019ac <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80014ba:	2026      	movs	r0, #38	; 0x26
 80014bc:	f000 f88b 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f000 f895 	bl	80015f0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80014c6:	20e0      	movs	r0, #224	; 0xe0
 80014c8:	f000 f885 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80014cc:	200f      	movs	r0, #15
 80014ce:	f000 f88f 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80014d2:	2029      	movs	r0, #41	; 0x29
 80014d4:	f000 f88c 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80014d8:	2024      	movs	r0, #36	; 0x24
 80014da:	f000 f889 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80014de:	200c      	movs	r0, #12
 80014e0:	f000 f886 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80014e4:	200e      	movs	r0, #14
 80014e6:	f000 f883 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80014ea:	2009      	movs	r0, #9
 80014ec:	f000 f880 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80014f0:	204e      	movs	r0, #78	; 0x4e
 80014f2:	f000 f87d 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f000 f87a 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80014fc:	203c      	movs	r0, #60	; 0x3c
 80014fe:	f000 f877 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001502:	2009      	movs	r0, #9
 8001504:	f000 f874 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001508:	2013      	movs	r0, #19
 800150a:	f000 f871 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800150e:	2005      	movs	r0, #5
 8001510:	f000 f86e 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001514:	2017      	movs	r0, #23
 8001516:	f000 f86b 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800151a:	2011      	movs	r0, #17
 800151c:	f000 f868 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001520:	2000      	movs	r0, #0
 8001522:	f000 f865 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001526:	20e1      	movs	r0, #225	; 0xe1
 8001528:	f000 f855 	bl	80015d6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800152c:	2000      	movs	r0, #0
 800152e:	f000 f85f 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001532:	2016      	movs	r0, #22
 8001534:	f000 f85c 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001538:	201b      	movs	r0, #27
 800153a:	f000 f859 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800153e:	2004      	movs	r0, #4
 8001540:	f000 f856 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001544:	2011      	movs	r0, #17
 8001546:	f000 f853 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800154a:	2007      	movs	r0, #7
 800154c:	f000 f850 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001550:	2031      	movs	r0, #49	; 0x31
 8001552:	f000 f84d 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001556:	2033      	movs	r0, #51	; 0x33
 8001558:	f000 f84a 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800155c:	2042      	movs	r0, #66	; 0x42
 800155e:	f000 f847 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001562:	2005      	movs	r0, #5
 8001564:	f000 f844 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001568:	200c      	movs	r0, #12
 800156a:	f000 f841 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800156e:	200a      	movs	r0, #10
 8001570:	f000 f83e 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001574:	2028      	movs	r0, #40	; 0x28
 8001576:	f000 f83b 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800157a:	202f      	movs	r0, #47	; 0x2f
 800157c:	f000 f838 	bl	80015f0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001580:	200f      	movs	r0, #15
 8001582:	f000 f835 	bl	80015f0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001586:	2011      	movs	r0, #17
 8001588:	f000 f825 	bl	80015d6 <ili9341_WriteReg>
  LCD_Delay(200);
 800158c:	20c8      	movs	r0, #200	; 0xc8
 800158e:	f000 fa0d 	bl	80019ac <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001592:	2029      	movs	r0, #41	; 0x29
 8001594:	f000 f81f 	bl	80015d6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001598:	202c      	movs	r0, #44	; 0x2c
 800159a:	f000 f81c 	bl	80015d6 <ili9341_WriteReg>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80015a6:	f000 f913 	bl	80017d0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80015aa:	2103      	movs	r1, #3
 80015ac:	20d3      	movs	r0, #211	; 0xd3
 80015ae:	f000 f82c 	bl	800160a <ili9341_ReadData>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29b      	uxth	r3, r3
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}

080015ba <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80015be:	2029      	movs	r0, #41	; 0x29
 80015c0:	f000 f809 	bl	80015d6 <ili9341_WriteReg>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80015cc:	2028      	movs	r0, #40	; 0x28
 80015ce:	f000 f802 	bl	80015d6 <ili9341_WriteReg>
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f98e 	bl	8001904 <LCD_IO_WriteReg>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f95f 	bl	80018c0 <LCD_IO_WriteData>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	460a      	mov	r2, r1
 8001614:	80fb      	strh	r3, [r7, #6]
 8001616:	4613      	mov	r3, r2
 8001618:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800161a:	797a      	ldrb	r2, [r7, #5]
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f000 f991 	bl	8001948 <LCD_IO_ReadData>
 8001626:	4603      	mov	r3, r0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001634:	23f0      	movs	r3, #240	; 0xf0
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001644:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001658:	4819      	ldr	r0, [pc, #100]	; (80016c0 <SPIx_Init+0x6c>)
 800165a:	f004 f8dc 	bl	8005816 <HAL_SPI_GetState>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d12b      	bne.n	80016bc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <SPIx_Init+0x6c>)
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <SPIx_Init+0x70>)
 8001668:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <SPIx_Init+0x6c>)
 800166c:	2218      	movs	r2, #24
 800166e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <SPIx_Init+0x6c>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <SPIx_Init+0x6c>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <SPIx_Init+0x6c>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <SPIx_Init+0x6c>)
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <SPIx_Init+0x6c>)
 800168a:	2207      	movs	r2, #7
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <SPIx_Init+0x6c>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <SPIx_Init+0x6c>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <SPIx_Init+0x6c>)
 800169c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <SPIx_Init+0x6c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SPIx_Init+0x6c>)
 80016aa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016ae:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <SPIx_Init+0x6c>)
 80016b2:	f000 f853 	bl	800175c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80016b6:	4802      	ldr	r0, [pc, #8]	; (80016c0 <SPIx_Init+0x6c>)
 80016b8:	f003 fc0d 	bl	8004ed6 <HAL_SPI_Init>
  } 
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000007c 	.word	0x2000007c
 80016c4:	40015000 	.word	0x40015000

080016c8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <SPIx_Read+0x38>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f107 0108 	add.w	r1, r7, #8
 80016e2:	4808      	ldr	r0, [pc, #32]	; (8001704 <SPIx_Read+0x3c>)
 80016e4:	f003 fde4 	bl	80052b0 <HAL_SPI_Receive>
 80016e8:	4603      	mov	r3, r0
 80016ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80016f2:	f000 f827 	bl	8001744 <SPIx_Error>
  }
  
  return readvalue;
 80016f6:	68bb      	ldr	r3, [r7, #8]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000003c 	.word	0x2000003c
 8001704:	2000007c 	.word	0x2000007c

08001708 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <SPIx_Write+0x34>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	1db9      	adds	r1, r7, #6
 800171c:	2201      	movs	r2, #1
 800171e:	4808      	ldr	r0, [pc, #32]	; (8001740 <SPIx_Write+0x38>)
 8001720:	f003 fc8a 	bl	8005038 <HAL_SPI_Transmit>
 8001724:	4603      	mov	r3, r0
 8001726:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800172e:	f000 f809 	bl	8001744 <SPIx_Error>
  }
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000003c 	.word	0x2000003c
 8001740:	2000007c 	.word	0x2000007c

08001744 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <SPIx_Error+0x14>)
 800174a:	f003 fc4d 	bl	8004fe8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800174e:	f7ff ff81 	bl	8001654 <SPIx_Init>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000007c 	.word	0x2000007c

0800175c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <SPIx_MspInit+0x6c>)
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <SPIx_MspInit+0x6c>)
 800176e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001772:	6453      	str	r3, [r2, #68]	; 0x44
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <SPIx_MspInit+0x6c>)
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <SPIx_MspInit+0x6c>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <SPIx_MspInit+0x6c>)
 800178a:	f043 0320 	orr.w	r3, r3, #32
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <SPIx_MspInit+0x6c>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800179c:	f44f 7360 	mov.w	r3, #896	; 0x380
 80017a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80017aa:	2301      	movs	r3, #1
 80017ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80017ae:	2305      	movs	r3, #5
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <SPIx_MspInit+0x70>)
 80017ba:	f001 fd3d 	bl	8003238 <HAL_GPIO_Init>
}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40021400 	.word	0x40021400

080017d0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <LCD_IO_Init+0xe0>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d164      	bne.n	80018a8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <LCD_IO_Init+0xe0>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <LCD_IO_Init+0xe4>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <LCD_IO_Init+0xe4>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <LCD_IO_Init+0xe4>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4619      	mov	r1, r3
 8001818:	4827      	ldr	r0, [pc, #156]	; (80018b8 <LCD_IO_Init+0xe8>)
 800181a:	f001 fd0d 	bl	8003238 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <LCD_IO_Init+0xe4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <LCD_IO_Init+0xe4>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <LCD_IO_Init+0xe4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800183a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4819      	ldr	r0, [pc, #100]	; (80018b8 <LCD_IO_Init+0xe8>)
 8001854:	f001 fcf0 	bl	8003238 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <LCD_IO_Init+0xe4>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <LCD_IO_Init+0xe4>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6313      	str	r3, [r2, #48]	; 0x30
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <LCD_IO_Init+0xe4>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001874:	2304      	movs	r3, #4
 8001876:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001880:	2302      	movs	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4619      	mov	r1, r3
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <LCD_IO_Init+0xec>)
 800188c:	f001 fcd4 	bl	8003238 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001890:	2200      	movs	r2, #0
 8001892:	2104      	movs	r1, #4
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <LCD_IO_Init+0xec>)
 8001896:	f001 ff87 	bl	80037a8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800189a:	2201      	movs	r2, #1
 800189c:	2104      	movs	r1, #4
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <LCD_IO_Init+0xec>)
 80018a0:	f001 ff82 	bl	80037a8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80018a4:	f7ff fed6 	bl	8001654 <SPIx_Init>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200000d4 	.word	0x200000d4
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40020800 	.word	0x40020800

080018c0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d0:	480a      	ldr	r0, [pc, #40]	; (80018fc <LCD_IO_WriteData+0x3c>)
 80018d2:	f001 ff69 	bl	80037a8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80018d6:	2200      	movs	r2, #0
 80018d8:	2104      	movs	r1, #4
 80018da:	4809      	ldr	r0, [pc, #36]	; (8001900 <LCD_IO_WriteData+0x40>)
 80018dc:	f001 ff64 	bl	80037a8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff10 	bl	8001708 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80018e8:	2201      	movs	r2, #1
 80018ea:	2104      	movs	r1, #4
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <LCD_IO_WriteData+0x40>)
 80018ee:	f001 ff5b 	bl	80037a8 <HAL_GPIO_WritePin>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40020800 	.word	0x40020800

08001904 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <LCD_IO_WriteReg+0x3c>)
 8001916:	f001 ff47 	bl	80037a8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800191a:	2200      	movs	r2, #0
 800191c:	2104      	movs	r1, #4
 800191e:	4809      	ldr	r0, [pc, #36]	; (8001944 <LCD_IO_WriteReg+0x40>)
 8001920:	f001 ff42 	bl	80037a8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff feed 	bl	8001708 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800192e:	2201      	movs	r2, #1
 8001930:	2104      	movs	r1, #4
 8001932:	4804      	ldr	r0, [pc, #16]	; (8001944 <LCD_IO_WriteReg+0x40>)
 8001934:	f001 ff38 	bl	80037a8 <HAL_GPIO_WritePin>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40020800 	.word	0x40020800

08001948 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	460a      	mov	r2, r1
 8001952:	80fb      	strh	r3, [r7, #6]
 8001954:	4613      	mov	r3, r2
 8001956:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800195c:	2200      	movs	r2, #0
 800195e:	2104      	movs	r1, #4
 8001960:	4810      	ldr	r0, [pc, #64]	; (80019a4 <LCD_IO_ReadData+0x5c>)
 8001962:	f001 ff21 	bl	80037a8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196c:	480e      	ldr	r0, [pc, #56]	; (80019a8 <LCD_IO_ReadData+0x60>)
 800196e:	f001 ff1b 	bl	80037a8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fec7 	bl	8001708 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800197a:	797b      	ldrb	r3, [r7, #5]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fea3 	bl	80016c8 <SPIx_Read>
 8001982:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <LCD_IO_ReadData+0x60>)
 800198c:	f001 ff0c 	bl	80037a8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001990:	2201      	movs	r2, #1
 8001992:	2104      	movs	r1, #4
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <LCD_IO_ReadData+0x5c>)
 8001996:	f001 ff07 	bl	80037a8 <HAL_GPIO_WritePin>
  
  return readvalue;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020c00 	.word	0x40020c00

080019ac <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 febf 	bl	8002738 <HAL_Delay>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <BSP_LCD_Init+0xbc>)
 80019ca:	4a2e      	ldr	r2, [pc, #184]	; (8001a84 <BSP_LCD_Init+0xc0>)
 80019cc:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <BSP_LCD_Init+0xbc>)
 80019d0:	2209      	movs	r2, #9
 80019d2:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80019d4:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <BSP_LCD_Init+0xbc>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <BSP_LCD_Init+0xbc>)
 80019dc:	221d      	movs	r2, #29
 80019de:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80019e0:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <BSP_LCD_Init+0xbc>)
 80019e2:	2203      	movs	r2, #3
 80019e4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80019e6:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <BSP_LCD_Init+0xbc>)
 80019e8:	f240 120d 	movw	r2, #269	; 0x10d
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <BSP_LCD_Init+0xbc>)
 80019f0:	f240 1243 	movw	r2, #323	; 0x143
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <BSP_LCD_Init+0xbc>)
 80019f8:	f240 1217 	movw	r2, #279	; 0x117
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <BSP_LCD_Init+0xbc>)
 8001a00:	f240 1247 	movw	r2, #327	; 0x147
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <BSP_LCD_Init+0xbc>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <BSP_LCD_Init+0xbc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <BSP_LCD_Init+0xbc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <BSP_LCD_Init+0xc4>)
 8001a20:	2208      	movs	r2, #8
 8001a22:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <BSP_LCD_Init+0xc4>)
 8001a26:	22c0      	movs	r2, #192	; 0xc0
 8001a28:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <BSP_LCD_Init+0xc4>)
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <BSP_LCD_Init+0xc4>)
 8001a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001a38:	4813      	ldr	r0, [pc, #76]	; (8001a88 <BSP_LCD_Init+0xc4>)
 8001a3a:	f003 f80f 	bl	8004a5c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <BSP_LCD_Init+0xbc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <BSP_LCD_Init+0xbc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <BSP_LCD_Init+0xbc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <BSP_LCD_Init+0xbc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001a56:	f000 fa45 	bl	8001ee4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <BSP_LCD_Init+0xbc>)
 8001a5c:	f002 f87e 	bl	8003b5c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <BSP_LCD_Init+0xc8>)
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <BSP_LCD_Init+0xcc>)
 8001a64:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <BSP_LCD_Init+0xc8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001a6e:	f000 fc27 	bl	80022c0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001a72:	4808      	ldr	r0, [pc, #32]	; (8001a94 <BSP_LCD_Init+0xd0>)
 8001a74:	f000 f8b4 	bl	8001be0 <BSP_LCD_SetFont>

  return LCD_OK;
 8001a78:	2300      	movs	r3, #0
}  
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200003ec 	.word	0x200003ec
 8001a84:	40016800 	.word	0x40016800
 8001a88:	20000118 	.word	0x20000118
 8001a8c:	20000494 	.word	0x20000494
 8001a90:	20000004 	.word	0x20000004
 8001a94:	20000040 	.word	0x20000040

08001a98 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <BSP_LCD_GetXSize+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	4798      	blx	r3
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000494 	.word	0x20000494

08001ab0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <BSP_LCD_GetYSize+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	4798      	blx	r3
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000494 	.word	0x20000494

08001ac8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b090      	sub	sp, #64	; 0x40
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001ad8:	f7ff ffde 	bl	8001a98 <BSP_LCD_GetXSize>
 8001adc:	4603      	mov	r3, r0
 8001ade:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001ae4:	f7ff ffe4 	bl	8001ab0 <BSP_LCD_GetYSize>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001af4:	23ff      	movs	r3, #255	; 0xff
 8001af6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b14:	2307      	movs	r3, #7
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001b18:	f7ff ffbe 	bl	8001a98 <BSP_LCD_GetXSize>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001b20:	f7ff ffc6 	bl	8001ab0 <BSP_LCD_GetYSize>
 8001b24:	4603      	mov	r3, r0
 8001b26:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4814      	ldr	r0, [pc, #80]	; (8001b84 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001b32:	f002 f8e3 	bl	8003cfc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001b36:	88fa      	ldrh	r2, [r7, #6]
 8001b38:	4913      	ldr	r1, [pc, #76]	; (8001b88 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	3304      	adds	r3, #4
 8001b46:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001b4c:	88fa      	ldrh	r2, [r7, #6]
 8001b4e:	490e      	ldr	r1, [pc, #56]	; (8001b88 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <BSP_LCD_LayerDefaultInit+0xc4>)
 8001b5e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001b60:	88fa      	ldrh	r2, [r7, #6]
 8001b62:	4909      	ldr	r1, [pc, #36]	; (8001b88 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001b72:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001b74:	4803      	ldr	r0, [pc, #12]	; (8001b84 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001b76:	f002 f8ff 	bl	8003d78 <HAL_LTDC_EnableDither>
}
 8001b7a:	bf00      	nop
 8001b7c:	3740      	adds	r7, #64	; 0x40
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200003ec 	.word	0x200003ec
 8001b88:	2000014c 	.word	0x2000014c
 8001b8c:	20000040 	.word	0x20000040

08001b90 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <BSP_LCD_SelectLayer+0x1c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000148 	.word	0x20000148

08001bb0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <BSP_LCD_SetTextColor+0x28>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <BSP_LCD_SetTextColor+0x2c>)
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	20000148 	.word	0x20000148
 8001bdc:	2000014c 	.word	0x2000014c

08001be0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <BSP_LCD_SetFont+0x2c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4908      	ldr	r1, [pc, #32]	; (8001c10 <BSP_LCD_SetFont+0x30>)
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3308      	adds	r3, #8
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000148 	.word	0x20000148
 8001c10:	2000014c 	.word	0x2000014c

08001c14 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <BSP_LCD_GetFont+0x24>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4907      	ldr	r1, [pc, #28]	; (8001c3c <BSP_LCD_GetFont+0x28>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3308      	adds	r3, #8
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000148 	.word	0x20000148
 8001c3c:	2000014c 	.word	0x2000014c

08001c40 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <BSP_LCD_Clear+0x48>)
 8001c4a:	681c      	ldr	r4, [r3, #0]
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <BSP_LCD_Clear+0x48>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <BSP_LCD_Clear+0x4c>)
 8001c52:	2134      	movs	r1, #52	; 0x34
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	335c      	adds	r3, #92	; 0x5c
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	461e      	mov	r6, r3
 8001c60:	f7ff ff1a 	bl	8001a98 <BSP_LCD_GetXSize>
 8001c64:	4605      	mov	r5, r0
 8001c66:	f7ff ff23 	bl	8001ab0 <BSP_LCD_GetYSize>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	462a      	mov	r2, r5
 8001c78:	4631      	mov	r1, r6
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f000 fae8 	bl	8002250 <FillBuffer>
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c88:	20000148 	.word	0x20000148
 8001c8c:	200003ec 	.word	0x200003ec

08001c90 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	80bb      	strh	r3, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <BSP_LCD_DisplayChar+0x80>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	491b      	ldr	r1, [pc, #108]	; (8001d14 <BSP_LCD_DisplayChar+0x84>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6819      	ldr	r1, [r3, #0]
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <BSP_LCD_DisplayChar+0x80>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4c14      	ldr	r4, [pc, #80]	; (8001d14 <BSP_LCD_DisplayChar+0x84>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4423      	add	r3, r4
 8001cce:	3308      	adds	r3, #8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001cd4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <BSP_LCD_DisplayChar+0x80>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4c0d      	ldr	r4, [pc, #52]	; (8001d14 <BSP_LCD_DisplayChar+0x84>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4423      	add	r3, r4
 8001ce8:	3308      	adds	r3, #8
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	889b      	ldrh	r3, [r3, #4]
 8001cee:	3307      	adds	r3, #7
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da00      	bge.n	8001cf6 <BSP_LCD_DisplayChar+0x66>
 8001cf4:	3307      	adds	r3, #7
 8001cf6:	10db      	asrs	r3, r3, #3
 8001cf8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001cfc:	18ca      	adds	r2, r1, r3
 8001cfe:	88b9      	ldrh	r1, [r7, #4]
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f9ea 	bl	80020dc <DrawChar>
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd90      	pop	{r4, r7, pc}
 8001d10:	20000148 	.word	0x20000148
 8001d14:	2000014c 	.word	0x2000014c

08001d18 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60ba      	str	r2, [r7, #8]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	81fb      	strh	r3, [r7, #14]
 8001d26:	460b      	mov	r3, r1
 8001d28:	81bb      	strh	r3, [r7, #12]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	83fb      	strh	r3, [r7, #30]
 8001d32:	2300      	movs	r3, #0
 8001d34:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001d42:	e002      	b.n	8001d4a <BSP_LCD_DisplayStringAt+0x32>
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	3301      	adds	r3, #1
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	617a      	str	r2, [r7, #20]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f6      	bne.n	8001d44 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001d56:	f7ff fe9f 	bl	8001a98 <BSP_LCD_GetXSize>
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <BSP_LCD_DisplayStringAt+0x174>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	484b      	ldr	r0, [pc, #300]	; (8001e90 <BSP_LCD_DisplayStringAt+0x178>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4403      	add	r3, r0
 8001d6c:	3308      	adds	r3, #8
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	889b      	ldrh	r3, [r3, #4]
 8001d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d76:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d01c      	beq.n	8001db8 <BSP_LCD_DisplayStringAt+0xa0>
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	dc33      	bgt.n	8001dea <BSP_LCD_DisplayStringAt+0xd2>
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d002      	beq.n	8001d8c <BSP_LCD_DisplayStringAt+0x74>
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d019      	beq.n	8001dbe <BSP_LCD_DisplayStringAt+0xa6>
 8001d8a:	e02e      	b.n	8001dea <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1ad1      	subs	r1, r2, r3
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <BSP_LCD_DisplayStringAt+0x174>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	483e      	ldr	r0, [pc, #248]	; (8001e90 <BSP_LCD_DisplayStringAt+0x178>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4403      	add	r3, r0
 8001da2:	3308      	adds	r3, #8
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	889b      	ldrh	r3, [r3, #4]
 8001da8:	fb03 f301 	mul.w	r3, r3, r1
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	4413      	add	r3, r2
 8001db4:	83fb      	strh	r3, [r7, #30]
      break;
 8001db6:	e01b      	b.n	8001df0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001db8:	89fb      	ldrh	r3, [r7, #14]
 8001dba:	83fb      	strh	r3, [r7, #30]
      break;
 8001dbc:	e018      	b.n	8001df0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <BSP_LCD_DisplayStringAt+0x174>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4831      	ldr	r0, [pc, #196]	; (8001e90 <BSP_LCD_DisplayStringAt+0x178>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4403      	add	r3, r0
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	889b      	ldrh	r3, [r3, #4]
 8001ddc:	fb11 f303 	smulbb	r3, r1, r3
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	4413      	add	r3, r2
 8001de6:	83fb      	strh	r3, [r7, #30]
      break;
 8001de8:	e002      	b.n	8001df0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	83fb      	strh	r3, [r7, #30]
      break;
 8001dee:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001df0:	e01a      	b.n	8001e28 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	89b9      	ldrh	r1, [r7, #12]
 8001df8:	8bfb      	ldrh	r3, [r7, #30]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff48 	bl	8001c90 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <BSP_LCD_DisplayStringAt+0x174>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4922      	ldr	r1, [pc, #136]	; (8001e90 <BSP_LCD_DisplayStringAt+0x178>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	3308      	adds	r3, #8
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	889a      	ldrh	r2, [r3, #4]
 8001e16:	8bfb      	ldrh	r3, [r7, #30]
 8001e18:	4413      	add	r3, r2
 8001e1a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]
    i++;
 8001e22:	8bbb      	ldrh	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf14      	ite	ne
 8001e30:	2301      	movne	r3, #1
 8001e32:	2300      	moveq	r3, #0
 8001e34:	b2dc      	uxtb	r4, r3
 8001e36:	f7ff fe2f 	bl	8001a98 <BSP_LCD_GetXSize>
 8001e3a:	8bb9      	ldrh	r1, [r7, #28]
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <BSP_LCD_DisplayStringAt+0x174>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4d13      	ldr	r5, [pc, #76]	; (8001e90 <BSP_LCD_DisplayStringAt+0x178>)
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	442b      	add	r3, r5
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	889b      	ldrh	r3, [r3, #4]
 8001e52:	fb03 f301 	mul.w	r3, r3, r1
 8001e56:	1ac3      	subs	r3, r0, r3
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <BSP_LCD_DisplayStringAt+0x174>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	480c      	ldr	r0, [pc, #48]	; (8001e90 <BSP_LCD_DisplayStringAt+0x178>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4403      	add	r3, r0
 8001e6a:	3308      	adds	r3, #8
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	889b      	ldrh	r3, [r3, #4]
 8001e70:	4299      	cmp	r1, r3
 8001e72:	bf2c      	ite	cs
 8001e74:	2301      	movcs	r3, #1
 8001e76:	2300      	movcc	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4023      	ands	r3, r4
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1b7      	bne.n	8001df2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8c:	20000148 	.word	0x20000148
 8001e90:	2000014c 	.word	0x2000014c

08001e94 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, CENTER_MODE);
 8001ea0:	f7ff feb8 	bl	8001c14 <BSP_LCD_GetFont>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	88db      	ldrh	r3, [r3, #6]
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	fb12 f303 	smulbb	r3, r2, r3
 8001eae:	b299      	uxth	r1, r3
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff ff2f 	bl	8001d18 <BSP_LCD_DisplayStringAt>
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <BSP_LCD_DisplayOn+0x1c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001ed2:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <BSP_LCD_DisplayOn+0x1c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4798      	blx	r3
  }
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000494 	.word	0x20000494

08001ee4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	; 0x38
 8001ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	4b61      	ldr	r3, [pc, #388]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a60      	ldr	r2, [pc, #384]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b5e      	ldr	r3, [pc, #376]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	4b5a      	ldr	r3, [pc, #360]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a59      	ldr	r2, [pc, #356]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b57      	ldr	r3, [pc, #348]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	4b53      	ldr	r3, [pc, #332]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a52      	ldr	r2, [pc, #328]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b50      	ldr	r3, [pc, #320]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a4b      	ldr	r2, [pc, #300]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b45      	ldr	r3, [pc, #276]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a44      	ldr	r2, [pc, #272]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b42      	ldr	r3, [pc, #264]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a3d      	ldr	r2, [pc, #244]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b37      	ldr	r3, [pc, #220]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a36      	ldr	r2, [pc, #216]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001f9c:	f043 0320 	orr.w	r3, r3, #32
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b34      	ldr	r3, [pc, #208]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b30      	ldr	r3, [pc, #192]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <BSP_LCD_MspInit+0x190>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001fca:	f641 0358 	movw	r3, #6232	; 0x1858
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001fdc:	230e      	movs	r3, #14
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4824      	ldr	r0, [pc, #144]	; (8002078 <BSP_LCD_MspInit+0x194>)
 8001fe8:	f001 f926 	bl	8003238 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001fec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4820      	ldr	r0, [pc, #128]	; (800207c <BSP_LCD_MspInit+0x198>)
 8001ffa:	f001 f91d 	bl	8003238 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001ffe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	4619      	mov	r1, r3
 800200a:	481d      	ldr	r0, [pc, #116]	; (8002080 <BSP_LCD_MspInit+0x19c>)
 800200c:	f001 f914 	bl	8003238 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002010:	2348      	movs	r3, #72	; 0x48
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	481a      	ldr	r0, [pc, #104]	; (8002084 <BSP_LCD_MspInit+0x1a0>)
 800201c:	f001 f90c 	bl	8003238 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202a:	4619      	mov	r1, r3
 800202c:	4816      	ldr	r0, [pc, #88]	; (8002088 <BSP_LCD_MspInit+0x1a4>)
 800202e:	f001 f903 	bl	8003238 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002032:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203c:	4619      	mov	r1, r3
 800203e:	4813      	ldr	r0, [pc, #76]	; (800208c <BSP_LCD_MspInit+0x1a8>)
 8002040:	f001 f8fa 	bl	8003238 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002044:	2303      	movs	r3, #3
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002048:	2309      	movs	r3, #9
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	4619      	mov	r1, r3
 8002052:	480a      	ldr	r0, [pc, #40]	; (800207c <BSP_LCD_MspInit+0x198>)
 8002054:	f001 f8f0 	bl	8003238 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002058:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	4619      	mov	r1, r3
 8002064:	4809      	ldr	r0, [pc, #36]	; (800208c <BSP_LCD_MspInit+0x1a8>)
 8002066:	f001 f8e7 	bl	8003238 <HAL_GPIO_Init>
}
 800206a:	bf00      	nop
 800206c:	3738      	adds	r7, #56	; 0x38
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40021400 	.word	0x40021400
 800208c:	40021800 	.word	0x40021800

08002090 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	603a      	str	r2, [r7, #0]
 800209a:	80fb      	strh	r3, [r7, #6]
 800209c:	460b      	mov	r3, r1
 800209e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <BSP_LCD_DrawPixel+0x44>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <BSP_LCD_DrawPixel+0x48>)
 80020a6:	2134      	movs	r1, #52	; 0x34
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	335c      	adds	r3, #92	; 0x5c
 80020b0:	681c      	ldr	r4, [r3, #0]
 80020b2:	88bd      	ldrh	r5, [r7, #4]
 80020b4:	f7ff fcf0 	bl	8001a98 <BSP_LCD_GetXSize>
 80020b8:	4603      	mov	r3, r0
 80020ba:	fb03 f205 	mul.w	r2, r3, r5
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4423      	add	r3, r4
 80020c6:	461a      	mov	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bdb0      	pop	{r4, r5, r7, pc}
 80020d4:	20000148 	.word	0x20000148
 80020d8:	200003ec 	.word	0x200003ec

080020dc <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	603a      	str	r2, [r7, #0]
 80020e6:	80fb      	strh	r3, [r7, #6]
 80020e8:	460b      	mov	r3, r1
 80020ea:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <DrawChar+0x16c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4953      	ldr	r1, [pc, #332]	; (800224c <DrawChar+0x170>)
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3308      	adds	r3, #8
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	88db      	ldrh	r3, [r3, #6]
 800210e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002110:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <DrawChar+0x16c>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	494d      	ldr	r1, [pc, #308]	; (800224c <DrawChar+0x170>)
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3308      	adds	r3, #8
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	889b      	ldrh	r3, [r3, #4]
 8002126:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002128:	8a3b      	ldrh	r3, [r7, #16]
 800212a:	3307      	adds	r3, #7
 800212c:	2b00      	cmp	r3, #0
 800212e:	da00      	bge.n	8002132 <DrawChar+0x56>
 8002130:	3307      	adds	r3, #7
 8002132:	10db      	asrs	r3, r3, #3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	b2da      	uxtb	r2, r3
 800213a:	8a3b      	ldrh	r3, [r7, #16]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e076      	b.n	8002236 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002148:	8a3b      	ldrh	r3, [r7, #16]
 800214a:	3307      	adds	r3, #7
 800214c:	2b00      	cmp	r3, #0
 800214e:	da00      	bge.n	8002152 <DrawChar+0x76>
 8002150:	3307      	adds	r3, #7
 8002152:	10db      	asrs	r3, r3, #3
 8002154:	461a      	mov	r2, r3
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fb03 f302 	mul.w	r3, r3, r2
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	4413      	add	r3, r2
 8002160:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002162:	8a3b      	ldrh	r3, [r7, #16]
 8002164:	3307      	adds	r3, #7
 8002166:	2b00      	cmp	r3, #0
 8002168:	da00      	bge.n	800216c <DrawChar+0x90>
 800216a:	3307      	adds	r3, #7
 800216c:	10db      	asrs	r3, r3, #3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d002      	beq.n	8002178 <DrawChar+0x9c>
 8002172:	2b02      	cmp	r3, #2
 8002174:	d004      	beq.n	8002180 <DrawChar+0xa4>
 8002176:	e00c      	b.n	8002192 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	617b      	str	r3, [r7, #20]
      break;
 800217e:	e016      	b.n	80021ae <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	3201      	adds	r2, #1
 800218a:	7812      	ldrb	r2, [r2, #0]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
      break;
 8002190:	e00d      	b.n	80021ae <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	041a      	lsls	r2, r3, #16
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3301      	adds	r3, #1
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	4313      	orrs	r3, r2
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	3202      	adds	r2, #2
 80021a6:	7812      	ldrb	r2, [r2, #0]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
      break;
 80021ac:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	e036      	b.n	8002222 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80021b4:	8a3a      	ldrh	r2, [r7, #16]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad2      	subs	r2, r2, r3
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	4413      	add	r3, r2
 80021be:	3b01      	subs	r3, #1
 80021c0:	2201      	movs	r2, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d012      	beq.n	80021f6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	4413      	add	r3, r2
 80021d8:	b298      	uxth	r0, r3
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <DrawChar+0x16c>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	491b      	ldr	r1, [pc, #108]	; (800224c <DrawChar+0x170>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7ff ff4e 	bl	8002090 <BSP_LCD_DrawPixel>
 80021f4:	e012      	b.n	800221c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	4413      	add	r3, r2
 80021fe:	b298      	uxth	r0, r3
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <DrawChar+0x16c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4911      	ldr	r1, [pc, #68]	; (800224c <DrawChar+0x170>)
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	3304      	adds	r3, #4
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	88bb      	ldrh	r3, [r7, #4]
 8002216:	4619      	mov	r1, r3
 8002218:	f7ff ff3a 	bl	8002090 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	3301      	adds	r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	8a3b      	ldrh	r3, [r7, #16]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	429a      	cmp	r2, r3
 8002228:	d3c4      	bcc.n	80021b4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800222a:	88bb      	ldrh	r3, [r7, #4]
 800222c:	3301      	adds	r3, #1
 800222e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	3301      	adds	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	8a7b      	ldrh	r3, [r7, #18]
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	429a      	cmp	r2, r3
 800223c:	d384      	bcc.n	8002148 <DrawChar+0x6c>
  }
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000148 	.word	0x20000148
 800224c:	2000014c 	.word	0x2000014c

08002250 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <FillBuffer+0x68>)
 8002260:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002264:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <FillBuffer+0x68>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800226c:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <FillBuffer+0x68>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <FillBuffer+0x68>)
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <FillBuffer+0x6c>)
 8002276:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002278:	480f      	ldr	r0, [pc, #60]	; (80022b8 <FillBuffer+0x68>)
 800227a:	f000 fd51 	bl	8002d20 <HAL_DMA2D_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d115      	bne.n	80022b0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	480c      	ldr	r0, [pc, #48]	; (80022b8 <FillBuffer+0x68>)
 8002288:	f000 fea8 	bl	8002fdc <HAL_DMA2D_ConfigLayer>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10e      	bne.n	80022b0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69f9      	ldr	r1, [r7, #28]
 800229c:	4806      	ldr	r0, [pc, #24]	; (80022b8 <FillBuffer+0x68>)
 800229e:	f000 fd88 	bl	8002db2 <HAL_DMA2D_Start>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80022a8:	210a      	movs	r1, #10
 80022aa:	4803      	ldr	r0, [pc, #12]	; (80022b8 <FillBuffer+0x68>)
 80022ac:	f000 fdac 	bl	8002e08 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200000d8 	.word	0x200000d8
 80022bc:	4002b000 	.word	0x4002b000

080022c0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80022c4:	4b29      	ldr	r3, [pc, #164]	; (800236c <BSP_SDRAM_Init+0xac>)
 80022c6:	4a2a      	ldr	r2, [pc, #168]	; (8002370 <BSP_SDRAM_Init+0xb0>)
 80022c8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <BSP_SDRAM_Init+0xb4>)
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <BSP_SDRAM_Init+0xb4>)
 80022d2:	2207      	movs	r2, #7
 80022d4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <BSP_SDRAM_Init+0xb4>)
 80022d8:	2204      	movs	r2, #4
 80022da:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80022dc:	4b25      	ldr	r3, [pc, #148]	; (8002374 <BSP_SDRAM_Init+0xb4>)
 80022de:	2207      	movs	r2, #7
 80022e0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <BSP_SDRAM_Init+0xb4>)
 80022e4:	2202      	movs	r2, #2
 80022e6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <BSP_SDRAM_Init+0xb4>)
 80022ea:	2202      	movs	r2, #2
 80022ec:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <BSP_SDRAM_Init+0xb4>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <BSP_SDRAM_Init+0xac>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <BSP_SDRAM_Init+0xac>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <BSP_SDRAM_Init+0xac>)
 8002302:	2204      	movs	r2, #4
 8002304:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <BSP_SDRAM_Init+0xac>)
 8002308:	2210      	movs	r2, #16
 800230a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <BSP_SDRAM_Init+0xac>)
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <BSP_SDRAM_Init+0xac>)
 8002314:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002318:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <BSP_SDRAM_Init+0xac>)
 800231c:	2200      	movs	r2, #0
 800231e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <BSP_SDRAM_Init+0xac>)
 8002322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002326:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <BSP_SDRAM_Init+0xac>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <BSP_SDRAM_Init+0xac>)
 8002330:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002336:	2100      	movs	r1, #0
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <BSP_SDRAM_Init+0xac>)
 800233a:	f000 f87f 	bl	800243c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800233e:	490d      	ldr	r1, [pc, #52]	; (8002374 <BSP_SDRAM_Init+0xb4>)
 8002340:	480a      	ldr	r0, [pc, #40]	; (800236c <BSP_SDRAM_Init+0xac>)
 8002342:	f002 fd49 	bl	8004dd8 <HAL_SDRAM_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <BSP_SDRAM_Init+0xb8>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e002      	b.n	800235a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <BSP_SDRAM_Init+0xb8>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800235a:	f240 506a 	movw	r0, #1386	; 0x56a
 800235e:	f000 f80d 	bl	800237c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <BSP_SDRAM_Init+0xb8>)
 8002364:	781b      	ldrb	r3, [r3, #0]
}
 8002366:	4618      	mov	r0, r3
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000164 	.word	0x20000164
 8002370:	a0000140 	.word	0xa0000140
 8002374:	20000198 	.word	0x20000198
 8002378:	20000050 	.word	0x20000050

0800237c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002390:	2208      	movs	r2, #8
 8002392:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002396:	2201      	movs	r2, #1
 8002398:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800239c:	2200      	movs	r2, #0
 800239e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80023a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a4:	4923      	ldr	r1, [pc, #140]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023a6:	4824      	ldr	r0, [pc, #144]	; (8002438 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023a8:	f002 fd4a 	bl	8004e40 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f000 f9c3 	bl	8002738 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023b4:	2202      	movs	r2, #2
 80023b6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023ba:	2208      	movs	r2, #8
 80023bc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80023ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ce:	4919      	ldr	r1, [pc, #100]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023d0:	4819      	ldr	r0, [pc, #100]	; (8002438 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023d2:	f002 fd35 	bl	8004e40 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023d8:	2203      	movs	r2, #3
 80023da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023de:	2208      	movs	r2, #8
 80023e0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023e4:	2204      	movs	r2, #4
 80023e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80023ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f2:	4910      	ldr	r1, [pc, #64]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023f4:	4810      	ldr	r0, [pc, #64]	; (8002438 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023f6:	f002 fd23 	bl	8004e40 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80023fa:	f44f 730c 	mov.w	r3, #560	; 0x230
 80023fe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002402:	2204      	movs	r2, #4
 8002404:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002408:	2208      	movs	r2, #8
 800240a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800240e:	2201      	movs	r2, #1
 8002410:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002416:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800241c:	4905      	ldr	r1, [pc, #20]	; (8002434 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800241e:	4806      	ldr	r0, [pc, #24]	; (8002438 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002420:	f002 fd0e 	bl	8004e40 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	4804      	ldr	r0, [pc, #16]	; (8002438 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002428:	f002 fd35 	bl	8004e96 <HAL_SDRAM_ProgramRefreshRate>
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200001b4 	.word	0x200001b4
 8002438:	20000164 	.word	0x20000164

0800243c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b090      	sub	sp, #64	; 0x40
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80ec 	beq.w	8002626 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
 8002452:	4b77      	ldr	r3, [pc, #476]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	4a76      	ldr	r2, [pc, #472]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6393      	str	r3, [r2, #56]	; 0x38
 800245e:	4b74      	ldr	r3, [pc, #464]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	4b70      	ldr	r3, [pc, #448]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a6f      	ldr	r2, [pc, #444]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b6d      	ldr	r3, [pc, #436]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	4b69      	ldr	r3, [pc, #420]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a68      	ldr	r2, [pc, #416]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b66      	ldr	r3, [pc, #408]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	4b62      	ldr	r3, [pc, #392]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a61      	ldr	r2, [pc, #388]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b5f      	ldr	r3, [pc, #380]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a5a      	ldr	r2, [pc, #360]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024c8:	f043 0308 	orr.w	r3, r3, #8
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b58      	ldr	r3, [pc, #352]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	4b54      	ldr	r3, [pc, #336]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a53      	ldr	r2, [pc, #332]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024e4:	f043 0310 	orr.w	r3, r3, #16
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b51      	ldr	r3, [pc, #324]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	4b4d      	ldr	r3, [pc, #308]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002500:	f043 0320 	orr.w	r3, r3, #32
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a45      	ldr	r2, [pc, #276]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 800251c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <BSP_SDRAM_MspInit+0x1f4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002532:	2302      	movs	r3, #2
 8002534:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800253a:	230c      	movs	r3, #12
 800253c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800253e:	2360      	movs	r3, #96	; 0x60
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002546:	4619      	mov	r1, r3
 8002548:	483a      	ldr	r0, [pc, #232]	; (8002634 <BSP_SDRAM_MspInit+0x1f8>)
 800254a:	f000 fe75 	bl	8003238 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800254e:	2301      	movs	r3, #1
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002556:	4619      	mov	r1, r3
 8002558:	4837      	ldr	r0, [pc, #220]	; (8002638 <BSP_SDRAM_MspInit+0x1fc>)
 800255a:	f000 fe6d 	bl	8003238 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800255e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002568:	4619      	mov	r1, r3
 800256a:	4834      	ldr	r0, [pc, #208]	; (800263c <BSP_SDRAM_MspInit+0x200>)
 800256c:	f000 fe64 	bl	8003238 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002570:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800257a:	4619      	mov	r1, r3
 800257c:	4830      	ldr	r0, [pc, #192]	; (8002640 <BSP_SDRAM_MspInit+0x204>)
 800257e:	f000 fe5b 	bl	8003238 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002582:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258c:	4619      	mov	r1, r3
 800258e:	482d      	ldr	r0, [pc, #180]	; (8002644 <BSP_SDRAM_MspInit+0x208>)
 8002590:	f000 fe52 	bl	8003238 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002594:	f248 1333 	movw	r3, #33075	; 0x8133
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800259a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259e:	4619      	mov	r1, r3
 80025a0:	4829      	ldr	r0, [pc, #164]	; (8002648 <BSP_SDRAM_MspInit+0x20c>)
 80025a2:	f000 fe49 	bl	8003238 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025c8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025d0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025de:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025e8:	2203      	movs	r2, #3
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80025ec:	4b17      	ldr	r3, [pc, #92]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 80025fa:	4a15      	ldr	r2, [pc, #84]	; (8002650 <BSP_SDRAM_MspInit+0x214>)
 80025fc:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a12      	ldr	r2, [pc, #72]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
 8002604:	4a11      	ldr	r2, [pc, #68]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800260a:	4810      	ldr	r0, [pc, #64]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 800260c:	f000 fa78 	bl	8002b00 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002610:	480e      	ldr	r0, [pc, #56]	; (800264c <BSP_SDRAM_MspInit+0x210>)
 8002612:	f000 f9c7 	bl	80029a4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	210f      	movs	r1, #15
 800261a:	2038      	movs	r0, #56	; 0x38
 800261c:	f000 f98b 	bl	8002936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002620:	2038      	movs	r0, #56	; 0x38
 8002622:	f000 f9a4 	bl	800296e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002626:	bf00      	nop
 8002628:	3740      	adds	r7, #64	; 0x40
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40020400 	.word	0x40020400
 8002638:	40020800 	.word	0x40020800
 800263c:	40020c00 	.word	0x40020c00
 8002640:	40021000 	.word	0x40021000
 8002644:	40021400 	.word	0x40021400
 8002648:	40021800 	.word	0x40021800
 800264c:	200001c4 	.word	0x200001c4
 8002650:	40026410 	.word	0x40026410

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_Init+0x40>)
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_Init+0x40>)
 800266a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_Init+0x40>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 f94f 	bl	8002920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002682:	2000      	movs	r0, #0
 8002684:	f000 f808 	bl	8002698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002688:	f7fe fafe 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x54>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x58>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f967 	bl	800298a <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00e      	b.n	80026e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d80a      	bhi.n	80026e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f000 f92f 	bl	8002936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_InitTick+0x5c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000058 	.word	0x20000058
 80026f4:	20000054 	.word	0x20000054

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000058 	.word	0x20000058
 800271c:	20000498 	.word	0x20000498

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000498 	.word	0x20000498

08002738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff ffee 	bl	8002720 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d005      	beq.n	800275e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_Delay+0x44>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800275e:	bf00      	nop
 8002760:	f7ff ffde 	bl	8002720 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d8f7      	bhi.n	8002760 <HAL_Delay+0x28>
  {
  }
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000058 	.word	0x20000058

08002780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800279c:	4013      	ands	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	60d3      	str	r3, [r2, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	f003 0307 	and.w	r3, r3, #7
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	db0b      	blt.n	800280e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	4907      	ldr	r1, [pc, #28]	; (800281c <__NVIC_EnableIRQ+0x38>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2001      	movs	r0, #1
 8002806:	fa00 f202 	lsl.w	r2, r0, r2
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000e100 	.word	0xe000e100

08002820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	db0a      	blt.n	800284a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	490c      	ldr	r1, [pc, #48]	; (800286c <__NVIC_SetPriority+0x4c>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	440b      	add	r3, r1
 8002844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002848:	e00a      	b.n	8002860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4908      	ldr	r1, [pc, #32]	; (8002870 <__NVIC_SetPriority+0x50>)
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3b04      	subs	r3, #4
 8002858:	0112      	lsls	r2, r2, #4
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	440b      	add	r3, r1
 800285e:	761a      	strb	r2, [r3, #24]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000e100 	.word	0xe000e100
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f1c3 0307 	rsb	r3, r3, #7
 800288e:	2b04      	cmp	r3, #4
 8002890:	bf28      	it	cs
 8002892:	2304      	movcs	r3, #4
 8002894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3304      	adds	r3, #4
 800289a:	2b06      	cmp	r3, #6
 800289c:	d902      	bls.n	80028a4 <NVIC_EncodePriority+0x30>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3b03      	subs	r3, #3
 80028a2:	e000      	b.n	80028a6 <NVIC_EncodePriority+0x32>
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	401a      	ands	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43d9      	mvns	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	4313      	orrs	r3, r2
         );
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ec:	d301      	bcc.n	80028f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00f      	b.n	8002912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <SysTick_Config+0x40>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fa:	210f      	movs	r1, #15
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002900:	f7ff ff8e 	bl	8002820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <SysTick_Config+0x40>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <SysTick_Config+0x40>)
 800290c:	2207      	movs	r2, #7
 800290e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	e000e010 	.word	0xe000e010

08002920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff29 	bl	8002780 <__NVIC_SetPriorityGrouping>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002948:	f7ff ff3e 	bl	80027c8 <__NVIC_GetPriorityGrouping>
 800294c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff ff8e 	bl	8002874 <NVIC_EncodePriority>
 8002958:	4602      	mov	r2, r0
 800295a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff5d 	bl	8002820 <__NVIC_SetPriority>
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff31 	bl	80027e4 <__NVIC_EnableIRQ>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ffa2 	bl	80028dc <SysTick_Config>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029b0:	f7ff feb6 	bl	8002720 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e099      	b.n	8002af4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e0:	e00f      	b.n	8002a02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029e2:	f7ff fe9d 	bl	8002720 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d908      	bls.n	8002a02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2203      	movs	r2, #3
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e078      	b.n	8002af4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e8      	bne.n	80029e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4b38      	ldr	r3, [pc, #224]	; (8002afc <HAL_DMA_Init+0x158>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d107      	bne.n	8002a6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4313      	orrs	r3, r2
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f023 0307 	bic.w	r3, r3, #7
 8002a82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d117      	bne.n	8002ac6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8bd 	bl	8002c28 <DMA_CheckFifoParam>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2240      	movs	r2, #64	; 0x40
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e016      	b.n	8002af4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f874 	bl	8002bbc <DMA_CalcBaseAndBitshift>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	223f      	movs	r2, #63	; 0x3f
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	f010803f 	.word	0xf010803f

08002b00 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e050      	b.n	8002bb4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d101      	bne.n	8002b22 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e048      	b.n	8002bb4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2221      	movs	r2, #33	; 0x21
 8002b60:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f82a 	bl	8002bbc <DMA_CalcBaseAndBitshift>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	223f      	movs	r2, #63	; 0x3f
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	3b10      	subs	r3, #16
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <DMA_CalcBaseAndBitshift+0x64>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bd6:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <DMA_CalcBaseAndBitshift+0x68>)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d909      	bls.n	8002bfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	1d1a      	adds	r2, r3, #4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	659a      	str	r2, [r3, #88]	; 0x58
 8002bfc:	e007      	b.n	8002c0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c06:	f023 0303 	bic.w	r3, r3, #3
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	aaaaaaab 	.word	0xaaaaaaab
 8002c24:	08008754 	.word	0x08008754

08002c28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11f      	bne.n	8002c82 <DMA_CheckFifoParam+0x5a>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d856      	bhi.n	8002cf6 <DMA_CheckFifoParam+0xce>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <DMA_CheckFifoParam+0x28>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c73 	.word	0x08002c73
 8002c58:	08002c61 	.word	0x08002c61
 8002c5c:	08002cf7 	.word	0x08002cf7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d046      	beq.n	8002cfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c70:	e043      	b.n	8002cfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c7a:	d140      	bne.n	8002cfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c80:	e03d      	b.n	8002cfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8a:	d121      	bne.n	8002cd0 <DMA_CheckFifoParam+0xa8>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d837      	bhi.n	8002d02 <DMA_CheckFifoParam+0xda>
 8002c92:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <DMA_CheckFifoParam+0x70>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002caf 	.word	0x08002caf
 8002ca0:	08002ca9 	.word	0x08002ca9
 8002ca4:	08002cc1 	.word	0x08002cc1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e030      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d025      	beq.n	8002d06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbe:	e022      	b.n	8002d06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cc8:	d11f      	bne.n	8002d0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cce:	e01c      	b.n	8002d0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d903      	bls.n	8002cde <DMA_CheckFifoParam+0xb6>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d003      	beq.n	8002ce4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cdc:	e018      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce2:	e015      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00e      	beq.n	8002d0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e00b      	b.n	8002d0e <DMA_CheckFifoParam+0xe6>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e00a      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e008      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfe:	bf00      	nop
 8002d00:	e006      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002d02:	bf00      	nop
 8002d04:	e004      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e03b      	b.n	8002daa <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fd ffc6 	bl	8000cd8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	f023 0107 	bic.w	r1, r3, #7
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68d1      	ldr	r1, [r2, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	430b      	orrs	r3, r1
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af02      	add	r7, sp, #8
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_DMA2D_Start+0x1c>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e018      	b.n	8002e00 <HAL_DMA2D_Start+0x4e>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f989 	bl	8003100 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d056      	beq.n	8002ed2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e24:	f7ff fc7c 	bl	8002720 <HAL_GetTick>
 8002e28:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e2a:	e04b      	b.n	8002ec4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d023      	beq.n	8002e86 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	f043 0202 	orr.w	r2, r3, #2
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2221      	movs	r2, #33	; 0x21
 8002e70:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0a5      	b.n	8002fd2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d01a      	beq.n	8002ec4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7ff fc47 	bl	8002720 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <HAL_DMA2D_PollForTransfer+0x9c>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e086      	b.n	8002fd2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ac      	beq.n	8002e2c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d061      	beq.n	8002fb8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7ff fc14 	bl	8002720 <HAL_GetTick>
 8002ef8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002efa:	e056      	b.n	8002faa <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d02e      	beq.n	8002f6c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	f043 0204 	orr.w	r2, r3, #4
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	f043 0202 	orr.w	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2229      	movs	r2, #41	; 0x29
 8002f56:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e032      	b.n	8002fd2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f72:	d01a      	beq.n	8002faa <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f74:	f7ff fbd4 	bl	8002720 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d302      	bcc.n	8002f8a <HAL_DMA2D_PollForTransfer+0x182>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	f043 0220 	orr.w	r2, r3, #32
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e013      	b.n	8002fd2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0a1      	beq.n	8002efc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2212      	movs	r2, #18
 8002fbe:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_DMA2D_ConfigLayer+0x20>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e079      	b.n	80030f0 <HAL_DMA2D_ConfigLayer+0x114>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	3318      	adds	r3, #24
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003026:	4b35      	ldr	r3, [pc, #212]	; (80030fc <HAL_DMA2D_ConfigLayer+0x120>)
 8003028:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b0a      	cmp	r3, #10
 8003030:	d003      	beq.n	800303a <HAL_DMA2D_ConfigLayer+0x5e>
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b09      	cmp	r3, #9
 8003038:	d107      	bne.n	800304a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e005      	b.n	8003056 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	061b      	lsls	r3, r3, #24
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d120      	bne.n	800309e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43db      	mvns	r3, r3
 8003066:	ea02 0103 	and.w	r1, r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	430a      	orrs	r2, r1
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b0a      	cmp	r3, #10
 8003084:	d003      	beq.n	800308e <HAL_DMA2D_ConfigLayer+0xb2>
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b09      	cmp	r3, #9
 800308c:	d127      	bne.n	80030de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
 800309c:	e01f      	b.n	80030de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	ea02 0103 	and.w	r1, r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b0a      	cmp	r3, #10
 80030c6:	d003      	beq.n	80030d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d106      	bne.n	80030de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80030dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	ff03000f 	.word	0xff03000f

08003100 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003100:	b480      	push	{r7}
 8003102:	b08b      	sub	sp, #44	; 0x2c
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	041a      	lsls	r2, r3, #16
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	431a      	orrs	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003138:	d174      	bne.n	8003224 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003140:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003148:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003150:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	431a      	orrs	r2, r3
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	4313      	orrs	r3, r2
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
 8003170:	e053      	b.n	800321a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d106      	bne.n	8003188 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	4313      	orrs	r3, r2
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4313      	orrs	r3, r2
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	e048      	b.n	800321a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d111      	bne.n	80031b4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	0cdb      	lsrs	r3, r3, #19
 8003194:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	0a9b      	lsrs	r3, r3, #10
 800319a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	08db      	lsrs	r3, r3, #3
 80031a0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	02db      	lsls	r3, r3, #11
 80031aa:	4313      	orrs	r3, r2
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	e032      	b.n	800321a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d117      	bne.n	80031ec <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	0fdb      	lsrs	r3, r3, #31
 80031c0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	0cdb      	lsrs	r3, r3, #19
 80031c6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	0adb      	lsrs	r3, r3, #11
 80031cc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	08db      	lsrs	r3, r3, #3
 80031d2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	029b      	lsls	r3, r3, #10
 80031dc:	431a      	orrs	r2, r3
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	03db      	lsls	r3, r3, #15
 80031e2:	4313      	orrs	r3, r2
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ea:	e016      	b.n	800321a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	0f1b      	lsrs	r3, r3, #28
 80031f0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	0d1b      	lsrs	r3, r3, #20
 80031f6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	0b1b      	lsrs	r3, r3, #12
 80031fc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	011a      	lsls	r2, r3, #4
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	431a      	orrs	r2, r3
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	031b      	lsls	r3, r3, #12
 8003212:	4313      	orrs	r3, r2
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003222:	e003      	b.n	800322c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	60da      	str	r2, [r3, #12]
}
 800322c:	bf00      	nop
 800322e:	372c      	adds	r7, #44	; 0x2c
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e177      	b.n	8003544 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003254:	2201      	movs	r2, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	f040 8166 	bne.w	800353e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d005      	beq.n	800328a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003286:	2b02      	cmp	r3, #2
 8003288:	d130      	bne.n	80032ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2203      	movs	r2, #3
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c0:	2201      	movs	r2, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 0201 	and.w	r2, r3, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d017      	beq.n	8003328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2203      	movs	r2, #3
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d123      	bne.n	800337c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	08da      	lsrs	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3208      	adds	r2, #8
 800333c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	220f      	movs	r2, #15
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	08da      	lsrs	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3208      	adds	r2, #8
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0203 	and.w	r2, r3, #3
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80c0 	beq.w	800353e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_GPIO_Init+0x324>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_GPIO_Init+0x324>)
 80033c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033cc:	6453      	str	r3, [r2, #68]	; 0x44
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_GPIO_Init+0x324>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033da:	4a61      	ldr	r2, [pc, #388]	; (8003560 <HAL_GPIO_Init+0x328>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	3302      	adds	r3, #2
 80033e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	220f      	movs	r2, #15
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_GPIO_Init+0x32c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d037      	beq.n	8003476 <HAL_GPIO_Init+0x23e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a57      	ldr	r2, [pc, #348]	; (8003568 <HAL_GPIO_Init+0x330>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d031      	beq.n	8003472 <HAL_GPIO_Init+0x23a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a56      	ldr	r2, [pc, #344]	; (800356c <HAL_GPIO_Init+0x334>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02b      	beq.n	800346e <HAL_GPIO_Init+0x236>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a55      	ldr	r2, [pc, #340]	; (8003570 <HAL_GPIO_Init+0x338>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d025      	beq.n	800346a <HAL_GPIO_Init+0x232>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a54      	ldr	r2, [pc, #336]	; (8003574 <HAL_GPIO_Init+0x33c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01f      	beq.n	8003466 <HAL_GPIO_Init+0x22e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a53      	ldr	r2, [pc, #332]	; (8003578 <HAL_GPIO_Init+0x340>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d019      	beq.n	8003462 <HAL_GPIO_Init+0x22a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_GPIO_Init+0x344>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_GPIO_Init+0x226>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a51      	ldr	r2, [pc, #324]	; (8003580 <HAL_GPIO_Init+0x348>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00d      	beq.n	800345a <HAL_GPIO_Init+0x222>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a50      	ldr	r2, [pc, #320]	; (8003584 <HAL_GPIO_Init+0x34c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <HAL_GPIO_Init+0x21e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4f      	ldr	r2, [pc, #316]	; (8003588 <HAL_GPIO_Init+0x350>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_GPIO_Init+0x21a>
 800344e:	2309      	movs	r3, #9
 8003450:	e012      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003452:	230a      	movs	r3, #10
 8003454:	e010      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003456:	2308      	movs	r3, #8
 8003458:	e00e      	b.n	8003478 <HAL_GPIO_Init+0x240>
 800345a:	2307      	movs	r3, #7
 800345c:	e00c      	b.n	8003478 <HAL_GPIO_Init+0x240>
 800345e:	2306      	movs	r3, #6
 8003460:	e00a      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003462:	2305      	movs	r3, #5
 8003464:	e008      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003466:	2304      	movs	r3, #4
 8003468:	e006      	b.n	8003478 <HAL_GPIO_Init+0x240>
 800346a:	2303      	movs	r3, #3
 800346c:	e004      	b.n	8003478 <HAL_GPIO_Init+0x240>
 800346e:	2302      	movs	r3, #2
 8003470:	e002      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_GPIO_Init+0x240>
 8003476:	2300      	movs	r3, #0
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f002 0203 	and.w	r2, r2, #3
 800347e:	0092      	lsls	r2, r2, #2
 8003480:	4093      	lsls	r3, r2
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003488:	4935      	ldr	r1, [pc, #212]	; (8003560 <HAL_GPIO_Init+0x328>)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003496:	4b3d      	ldr	r3, [pc, #244]	; (800358c <HAL_GPIO_Init+0x354>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ba:	4a34      	ldr	r2, [pc, #208]	; (800358c <HAL_GPIO_Init+0x354>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034c0:	4b32      	ldr	r3, [pc, #200]	; (800358c <HAL_GPIO_Init+0x354>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e4:	4a29      	ldr	r2, [pc, #164]	; (800358c <HAL_GPIO_Init+0x354>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ea:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_GPIO_Init+0x354>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350e:	4a1f      	ldr	r2, [pc, #124]	; (800358c <HAL_GPIO_Init+0x354>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_GPIO_Init+0x354>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <HAL_GPIO_Init+0x354>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	f67f ae84 	bls.w	8003254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3724      	adds	r7, #36	; 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40013800 	.word	0x40013800
 8003564:	40020000 	.word	0x40020000
 8003568:	40020400 	.word	0x40020400
 800356c:	40020800 	.word	0x40020800
 8003570:	40020c00 	.word	0x40020c00
 8003574:	40021000 	.word	0x40021000
 8003578:	40021400 	.word	0x40021400
 800357c:	40021800 	.word	0x40021800
 8003580:	40021c00 	.word	0x40021c00
 8003584:	40022000 	.word	0x40022000
 8003588:	40022400 	.word	0x40022400
 800358c:	40013c00 	.word	0x40013c00

08003590 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e0d9      	b.n	8003760 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035ac:	2201      	movs	r2, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	f040 80c9 	bne.w	800375a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80035c8:	4a6b      	ldr	r2, [pc, #428]	; (8003778 <HAL_GPIO_DeInit+0x1e8>)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	3302      	adds	r3, #2
 80035d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	220f      	movs	r2, #15
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a63      	ldr	r2, [pc, #396]	; (800377c <HAL_GPIO_DeInit+0x1ec>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d037      	beq.n	8003662 <HAL_GPIO_DeInit+0xd2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a62      	ldr	r2, [pc, #392]	; (8003780 <HAL_GPIO_DeInit+0x1f0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d031      	beq.n	800365e <HAL_GPIO_DeInit+0xce>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a61      	ldr	r2, [pc, #388]	; (8003784 <HAL_GPIO_DeInit+0x1f4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d02b      	beq.n	800365a <HAL_GPIO_DeInit+0xca>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a60      	ldr	r2, [pc, #384]	; (8003788 <HAL_GPIO_DeInit+0x1f8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d025      	beq.n	8003656 <HAL_GPIO_DeInit+0xc6>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a5f      	ldr	r2, [pc, #380]	; (800378c <HAL_GPIO_DeInit+0x1fc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01f      	beq.n	8003652 <HAL_GPIO_DeInit+0xc2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a5e      	ldr	r2, [pc, #376]	; (8003790 <HAL_GPIO_DeInit+0x200>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d019      	beq.n	800364e <HAL_GPIO_DeInit+0xbe>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a5d      	ldr	r2, [pc, #372]	; (8003794 <HAL_GPIO_DeInit+0x204>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_GPIO_DeInit+0xba>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a5c      	ldr	r2, [pc, #368]	; (8003798 <HAL_GPIO_DeInit+0x208>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00d      	beq.n	8003646 <HAL_GPIO_DeInit+0xb6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a5b      	ldr	r2, [pc, #364]	; (800379c <HAL_GPIO_DeInit+0x20c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_DeInit+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a5a      	ldr	r2, [pc, #360]	; (80037a0 <HAL_GPIO_DeInit+0x210>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_GPIO_DeInit+0xae>
 800363a:	2309      	movs	r3, #9
 800363c:	e012      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 800363e:	230a      	movs	r3, #10
 8003640:	e010      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 8003642:	2308      	movs	r3, #8
 8003644:	e00e      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 8003646:	2307      	movs	r3, #7
 8003648:	e00c      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 800364a:	2306      	movs	r3, #6
 800364c:	e00a      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 800364e:	2305      	movs	r3, #5
 8003650:	e008      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 8003652:	2304      	movs	r3, #4
 8003654:	e006      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 8003656:	2303      	movs	r3, #3
 8003658:	e004      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 800365a:	2302      	movs	r3, #2
 800365c:	e002      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_GPIO_DeInit+0xd4>
 8003662:	2300      	movs	r3, #0
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	f002 0203 	and.w	r2, r2, #3
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	4093      	lsls	r3, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	d132      	bne.n	80036da <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_GPIO_DeInit+0x214>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43db      	mvns	r3, r3
 800367c:	4949      	ldr	r1, [pc, #292]	; (80037a4 <HAL_GPIO_DeInit+0x214>)
 800367e:	4013      	ands	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003682:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <HAL_GPIO_DeInit+0x214>)
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43db      	mvns	r3, r3
 800368a:	4946      	ldr	r1, [pc, #280]	; (80037a4 <HAL_GPIO_DeInit+0x214>)
 800368c:	4013      	ands	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003690:	4b44      	ldr	r3, [pc, #272]	; (80037a4 <HAL_GPIO_DeInit+0x214>)
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	43db      	mvns	r3, r3
 8003698:	4942      	ldr	r1, [pc, #264]	; (80037a4 <HAL_GPIO_DeInit+0x214>)
 800369a:	4013      	ands	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_GPIO_DeInit+0x214>)
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	493f      	ldr	r1, [pc, #252]	; (80037a4 <HAL_GPIO_DeInit+0x214>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80036bc:	4a2e      	ldr	r2, [pc, #184]	; (8003778 <HAL_GPIO_DeInit+0x1e8>)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	3302      	adds	r3, #2
 80036c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	43da      	mvns	r2, r3
 80036cc:	482a      	ldr	r0, [pc, #168]	; (8003778 <HAL_GPIO_DeInit+0x1e8>)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	089b      	lsrs	r3, r3, #2
 80036d2:	400a      	ands	r2, r1
 80036d4:	3302      	adds	r3, #2
 80036d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2103      	movs	r1, #3
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	08da      	lsrs	r2, r3, #3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3208      	adds	r2, #8
 80036f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	220f      	movs	r2, #15
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	08d2      	lsrs	r2, r2, #3
 8003710:	4019      	ands	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3208      	adds	r2, #8
 8003716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2103      	movs	r1, #3
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	401a      	ands	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	2101      	movs	r1, #1
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2103      	movs	r1, #3
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	401a      	ands	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3301      	adds	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	f67f af22 	bls.w	80035ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40013800 	.word	0x40013800
 800377c:	40020000 	.word	0x40020000
 8003780:	40020400 	.word	0x40020400
 8003784:	40020800 	.word	0x40020800
 8003788:	40020c00 	.word	0x40020c00
 800378c:	40021000 	.word	0x40021000
 8003790:	40021400 	.word	0x40021400
 8003794:	40021800 	.word	0x40021800
 8003798:	40021c00 	.word	0x40021c00
 800379c:	40022000 	.word	0x40022000
 80037a0:	40022400 	.word	0x40022400
 80037a4:	40013c00 	.word	0x40013c00

080037a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
 80037b4:	4613      	mov	r3, r2
 80037b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b8:	787b      	ldrb	r3, [r7, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c4:	e003      	b.n	80037ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c6:	887b      	ldrh	r3, [r7, #2]
 80037c8:	041a      	lsls	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	619a      	str	r2, [r3, #24]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e12b      	b.n	8003a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fa8a 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800383e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003840:	f001 f8f8 	bl	8004a34 <HAL_RCC_GetPCLK1Freq>
 8003844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a81      	ldr	r2, [pc, #516]	; (8003a50 <HAL_I2C_Init+0x274>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d807      	bhi.n	8003860 <HAL_I2C_Init+0x84>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a80      	ldr	r2, [pc, #512]	; (8003a54 <HAL_I2C_Init+0x278>)
 8003854:	4293      	cmp	r3, r2
 8003856:	bf94      	ite	ls
 8003858:	2301      	movls	r3, #1
 800385a:	2300      	movhi	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e006      	b.n	800386e <HAL_I2C_Init+0x92>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a7d      	ldr	r2, [pc, #500]	; (8003a58 <HAL_I2C_Init+0x27c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	bf94      	ite	ls
 8003868:	2301      	movls	r3, #1
 800386a:	2300      	movhi	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e0e7      	b.n	8003a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a78      	ldr	r2, [pc, #480]	; (8003a5c <HAL_I2C_Init+0x280>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0c9b      	lsrs	r3, r3, #18
 8003880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a6a      	ldr	r2, [pc, #424]	; (8003a50 <HAL_I2C_Init+0x274>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d802      	bhi.n	80038b0 <HAL_I2C_Init+0xd4>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3301      	adds	r3, #1
 80038ae:	e009      	b.n	80038c4 <HAL_I2C_Init+0xe8>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	4a69      	ldr	r2, [pc, #420]	; (8003a60 <HAL_I2C_Init+0x284>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	3301      	adds	r3, #1
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	495c      	ldr	r1, [pc, #368]	; (8003a50 <HAL_I2C_Init+0x274>)
 80038e0:	428b      	cmp	r3, r1
 80038e2:	d819      	bhi.n	8003918 <HAL_I2C_Init+0x13c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1e59      	subs	r1, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f2:	1c59      	adds	r1, r3, #1
 80038f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038f8:	400b      	ands	r3, r1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_I2C_Init+0x138>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1e59      	subs	r1, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fbb1 f3f3 	udiv	r3, r1, r3
 800390c:	3301      	adds	r3, #1
 800390e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003912:	e051      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003914:	2304      	movs	r3, #4
 8003916:	e04f      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d111      	bne.n	8003944 <HAL_I2C_Init+0x168>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e58      	subs	r0, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	440b      	add	r3, r1
 800392e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003932:	3301      	adds	r3, #1
 8003934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e012      	b.n	800396a <HAL_I2C_Init+0x18e>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e58      	subs	r0, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	0099      	lsls	r1, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	fbb0 f3f3 	udiv	r3, r0, r3
 800395a:	3301      	adds	r3, #1
 800395c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Init+0x196>
 800396e:	2301      	movs	r3, #1
 8003970:	e022      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10e      	bne.n	8003998 <HAL_I2C_Init+0x1bc>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1e58      	subs	r0, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6859      	ldr	r1, [r3, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	440b      	add	r3, r1
 8003988:	fbb0 f3f3 	udiv	r3, r0, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003996:	e00f      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e58      	subs	r0, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	0099      	lsls	r1, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	6809      	ldr	r1, [r1, #0]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6911      	ldr	r1, [r2, #16]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	4311      	orrs	r1, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	000186a0 	.word	0x000186a0
 8003a54:	001e847f 	.word	0x001e847f
 8003a58:	003d08ff 	.word	0x003d08ff
 8003a5c:	431bde83 	.word	0x431bde83
 8003a60:	10624dd3 	.word	0x10624dd3

08003a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d129      	bne.n	8003ace <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2224      	movs	r2, #36	; 0x24
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0210 	bic.w	r2, r2, #16
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e000      	b.n	8003ad0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
  }
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d12a      	bne.n	8003b4c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2224      	movs	r2, #36	; 0x24
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003b16:	89fb      	ldrh	r3, [r7, #14]
 8003b18:	f023 030f 	bic.w	r3, r3, #15
 8003b1c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	89fb      	ldrh	r3, [r7, #14]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	89fa      	ldrh	r2, [r7, #14]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0bf      	b.n	8003cee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd f934 	bl	8000df0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003b9e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6999      	ldr	r1, [r3, #24]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bb4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6899      	ldr	r1, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <HAL_LTDC_Init+0x19c>)
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68d9      	ldr	r1, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <HAL_LTDC_Init+0x19c>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	041b      	lsls	r3, r3, #16
 8003c08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68d9      	ldr	r1, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6919      	ldr	r1, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b33      	ldr	r3, [pc, #204]	; (8003cf8 <HAL_LTDC_Init+0x19c>)
 8003c2c:	400b      	ands	r3, r1
 8003c2e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6919      	ldr	r1, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6959      	ldr	r1, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <HAL_LTDC_Init+0x19c>)
 8003c5a:	400b      	ands	r3, r1
 8003c5c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	041b      	lsls	r3, r3, #16
 8003c64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6959      	ldr	r1, [r3, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0206 	orr.w	r2, r2, #6
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	f000f800 	.word	0xf000f800

08003cfc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003cfc:	b5b0      	push	{r4, r5, r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_LTDC_ConfigLayer+0x1a>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e02c      	b.n	8003d70 <HAL_LTDC_ConfigLayer+0x74>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2134      	movs	r1, #52	; 0x34
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f83b 	bl	8003dcc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdb0      	pop	{r4, r5, r7, pc}

08003d78 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_LTDC_EnableDither+0x16>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e016      	b.n	8003dbc <HAL_LTDC_EnableDither+0x44>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_LTDC_EnableDither+0x50>)
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <HAL_LTDC_EnableDither+0x50>)
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40016800 	.word	0x40016800

08003dcc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	0c1b      	lsrs	r3, r3, #16
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	4413      	add	r3, r2
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	01db      	lsls	r3, r3, #7
 8003df8:	4413      	add	r3, r2
 8003dfa:	3384      	adds	r3, #132	; 0x84
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	4611      	mov	r1, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	01d2      	lsls	r2, r2, #7
 8003e08:	440a      	add	r2, r1
 8003e0a:	3284      	adds	r2, #132	; 0x84
 8003e0c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e10:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e22:	4413      	add	r3, r2
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	01db      	lsls	r3, r3, #7
 8003e30:	440b      	add	r3, r1
 8003e32:	3384      	adds	r3, #132	; 0x84
 8003e34:	4619      	mov	r1, r3
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e4a:	4413      	add	r3, r2
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	01db      	lsls	r3, r3, #7
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3384      	adds	r3, #132	; 0x84
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	4611      	mov	r1, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	01d2      	lsls	r2, r2, #7
 8003e6a:	440a      	add	r2, r1
 8003e6c:	3284      	adds	r2, #132	; 0x84
 8003e6e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e72:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e82:	4413      	add	r3, r2
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	01db      	lsls	r3, r3, #7
 8003e90:	440b      	add	r3, r1
 8003e92:	3384      	adds	r3, #132	; 0x84
 8003e94:	4619      	mov	r1, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	01db      	lsls	r3, r3, #7
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3384      	adds	r3, #132	; 0x84
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	01d2      	lsls	r2, r2, #7
 8003eb6:	440a      	add	r2, r1
 8003eb8:	3284      	adds	r2, #132	; 0x84
 8003eba:	f023 0307 	bic.w	r3, r3, #7
 8003ebe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	01db      	lsls	r3, r3, #7
 8003eca:	4413      	add	r3, r2
 8003ecc:	3384      	adds	r3, #132	; 0x84
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	01db      	lsls	r3, r3, #7
 8003efc:	4413      	add	r3, r2
 8003efe:	3384      	adds	r3, #132	; 0x84
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	01db      	lsls	r3, r3, #7
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3384      	adds	r3, #132	; 0x84
 8003f10:	461a      	mov	r2, r3
 8003f12:	2300      	movs	r3, #0
 8003f14:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	01db      	lsls	r3, r3, #7
 8003f30:	440b      	add	r3, r1
 8003f32:	3384      	adds	r3, #132	; 0x84
 8003f34:	4619      	mov	r1, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	01db      	lsls	r3, r3, #7
 8003f46:	4413      	add	r3, r2
 8003f48:	3384      	adds	r3, #132	; 0x84
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	4611      	mov	r1, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	01d2      	lsls	r2, r2, #7
 8003f56:	440a      	add	r2, r1
 8003f58:	3284      	adds	r2, #132	; 0x84
 8003f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f5e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	01db      	lsls	r3, r3, #7
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3384      	adds	r3, #132	; 0x84
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	01db      	lsls	r3, r3, #7
 8003f80:	4413      	add	r3, r2
 8003f82:	3384      	adds	r3, #132	; 0x84
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	01d2      	lsls	r2, r2, #7
 8003f90:	440a      	add	r2, r1
 8003f92:	3284      	adds	r2, #132	; 0x84
 8003f94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f98:	f023 0307 	bic.w	r3, r3, #7
 8003f9c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	69da      	ldr	r2, [r3, #28]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	68f9      	ldr	r1, [r7, #12]
 8003fa8:	6809      	ldr	r1, [r1, #0]
 8003faa:	4608      	mov	r0, r1
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	01c9      	lsls	r1, r1, #7
 8003fb0:	4401      	add	r1, r0
 8003fb2:	3184      	adds	r1, #132	; 0x84
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	01db      	lsls	r3, r3, #7
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3384      	adds	r3, #132	; 0x84
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	01db      	lsls	r3, r3, #7
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3384      	adds	r3, #132	; 0x84
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	01db      	lsls	r3, r3, #7
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3384      	adds	r3, #132	; 0x84
 8003fea:	461a      	mov	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e01b      	b.n	8004038 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d102      	bne.n	800400e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004008:	2303      	movs	r3, #3
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	e014      	b.n	8004038 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d00b      	beq.n	800402e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800401a:	2b02      	cmp	r3, #2
 800401c:	d007      	beq.n	800402e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004022:	2b03      	cmp	r3, #3
 8004024:	d003      	beq.n	800402e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800402a:	2b07      	cmp	r3, #7
 800402c:	d102      	bne.n	8004034 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800402e:	2302      	movs	r3, #2
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	e001      	b.n	8004038 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004034:	2301      	movs	r3, #1
 8004036:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	01db      	lsls	r3, r3, #7
 8004042:	4413      	add	r3, r2
 8004044:	3384      	adds	r3, #132	; 0x84
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	4611      	mov	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	01d2      	lsls	r2, r2, #7
 8004052:	440a      	add	r2, r1
 8004054:	3284      	adds	r2, #132	; 0x84
 8004056:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800405a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	041a      	lsls	r2, r3, #16
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	1acb      	subs	r3, r1, r3
 8004072:	69f9      	ldr	r1, [r7, #28]
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	3303      	adds	r3, #3
 800407a:	68f9      	ldr	r1, [r7, #12]
 800407c:	6809      	ldr	r1, [r1, #0]
 800407e:	4608      	mov	r0, r1
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	01c9      	lsls	r1, r1, #7
 8004084:	4401      	add	r1, r0
 8004086:	3184      	adds	r1, #132	; 0x84
 8004088:	4313      	orrs	r3, r2
 800408a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	01db      	lsls	r3, r3, #7
 8004096:	4413      	add	r3, r2
 8004098:	3384      	adds	r3, #132	; 0x84
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	4611      	mov	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	01d2      	lsls	r2, r2, #7
 80040a6:	440a      	add	r2, r1
 80040a8:	3284      	adds	r2, #132	; 0x84
 80040aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040ae:	f023 0307 	bic.w	r3, r3, #7
 80040b2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	01db      	lsls	r3, r3, #7
 80040be:	4413      	add	r3, r2
 80040c0:	3384      	adds	r3, #132	; 0x84
 80040c2:	461a      	mov	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	01db      	lsls	r3, r3, #7
 80040d4:	4413      	add	r3, r2
 80040d6:	3384      	adds	r3, #132	; 0x84
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	4611      	mov	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	01d2      	lsls	r2, r2, #7
 80040e4:	440a      	add	r2, r1
 80040e6:	3284      	adds	r2, #132	; 0x84
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6013      	str	r3, [r2, #0]
}
 80040ee:	bf00      	nop
 80040f0:	3724      	adds	r7, #36	; 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_PWREx_EnableOverDrive+0x90>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	4a1f      	ldr	r2, [pc, #124]	; (800418c <HAL_PWREx_EnableOverDrive+0x90>)
 8004110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004114:	6413      	str	r3, [r2, #64]	; 0x40
 8004116:	4b1d      	ldr	r3, [pc, #116]	; (800418c <HAL_PWREx_EnableOverDrive+0x90>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_PWREx_EnableOverDrive+0x94>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004128:	f7fe fafa 	bl	8002720 <HAL_GetTick>
 800412c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800412e:	e009      	b.n	8004144 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004130:	f7fe faf6 	bl	8002720 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800413e:	d901      	bls.n	8004144 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e01f      	b.n	8004184 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_PWREx_EnableOverDrive+0x98>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d1ee      	bne.n	8004130 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004152:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004158:	f7fe fae2 	bl	8002720 <HAL_GetTick>
 800415c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800415e:	e009      	b.n	8004174 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004160:	f7fe fade 	bl	8002720 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800416e:	d901      	bls.n	8004174 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e007      	b.n	8004184 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <HAL_PWREx_EnableOverDrive+0x98>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004180:	d1ee      	bne.n	8004160 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	420e0040 	.word	0x420e0040
 8004194:	40007000 	.word	0x40007000
 8004198:	420e0044 	.word	0x420e0044

0800419c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e264      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d075      	beq.n	80042a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ba:	4ba3      	ldr	r3, [pc, #652]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d00c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c6:	4ba0      	ldr	r3, [pc, #640]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d112      	bne.n	80041f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d2:	4b9d      	ldr	r3, [pc, #628]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041de:	d10b      	bne.n	80041f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	4b99      	ldr	r3, [pc, #612]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05b      	beq.n	80042a4 <HAL_RCC_OscConfig+0x108>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d157      	bne.n	80042a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e23f      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004200:	d106      	bne.n	8004210 <HAL_RCC_OscConfig+0x74>
 8004202:	4b91      	ldr	r3, [pc, #580]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a90      	ldr	r2, [pc, #576]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e01d      	b.n	800424c <HAL_RCC_OscConfig+0xb0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x98>
 800421a:	4b8b      	ldr	r3, [pc, #556]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a8a      	ldr	r2, [pc, #552]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b88      	ldr	r3, [pc, #544]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a87      	ldr	r2, [pc, #540]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0xb0>
 8004234:	4b84      	ldr	r3, [pc, #528]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a83      	ldr	r2, [pc, #524]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b81      	ldr	r3, [pc, #516]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a80      	ldr	r2, [pc, #512]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fe fa64 	bl	8002720 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425c:	f7fe fa60 	bl	8002720 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e204      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	4b76      	ldr	r3, [pc, #472]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0xc0>
 800427a:	e014      	b.n	80042a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fe fa50 	bl	8002720 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004284:	f7fe fa4c 	bl	8002720 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e1f0      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	4b6c      	ldr	r3, [pc, #432]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0xe8>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d063      	beq.n	800437a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042b2:	4b65      	ldr	r3, [pc, #404]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042be:	4b62      	ldr	r3, [pc, #392]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d11c      	bne.n	8004304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ca:	4b5f      	ldr	r3, [pc, #380]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d116      	bne.n	8004304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	4b5c      	ldr	r3, [pc, #368]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_RCC_OscConfig+0x152>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e1c4      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b56      	ldr	r3, [pc, #344]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4952      	ldr	r1, [pc, #328]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	e03a      	b.n	800437a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	4b4f      	ldr	r3, [pc, #316]	; (800444c <HAL_RCC_OscConfig+0x2b0>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fe fa05 	bl	8002720 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431a:	f7fe fa01 	bl	8002720 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1a5      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	4b46      	ldr	r3, [pc, #280]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b43      	ldr	r3, [pc, #268]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4940      	ldr	r1, [pc, #256]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
 800434c:	e015      	b.n	800437a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	4b3f      	ldr	r3, [pc, #252]	; (800444c <HAL_RCC_OscConfig+0x2b0>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fe f9e4 	bl	8002720 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800435c:	f7fe f9e0 	bl	8002720 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e184      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	4b36      	ldr	r3, [pc, #216]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d030      	beq.n	80043e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d016      	beq.n	80043bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b30      	ldr	r3, [pc, #192]	; (8004450 <HAL_RCC_OscConfig+0x2b4>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004394:	f7fe f9c4 	bl	8002720 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439c:	f7fe f9c0 	bl	8002720 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e164      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ae:	4b26      	ldr	r3, [pc, #152]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x200>
 80043ba:	e015      	b.n	80043e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x2b4>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c2:	f7fe f9ad 	bl	8002720 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ca:	f7fe f9a9 	bl	8002720 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e14d      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80a0 	beq.w	8004536 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fa:	4b13      	ldr	r3, [pc, #76]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_OscConfig+0x2b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d121      	bne.n	8004476 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <HAL_RCC_OscConfig+0x2b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a07      	ldr	r2, [pc, #28]	; (8004454 <HAL_RCC_OscConfig+0x2b8>)
 8004438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443e:	f7fe f96f 	bl	8002720 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004444:	e011      	b.n	800446a <HAL_RCC_OscConfig+0x2ce>
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
 800444c:	42470000 	.word	0x42470000
 8004450:	42470e80 	.word	0x42470e80
 8004454:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fe f962 	bl	8002720 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e106      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	4b85      	ldr	r3, [pc, #532]	; (8004680 <HAL_RCC_OscConfig+0x4e4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d106      	bne.n	800448c <HAL_RCC_OscConfig+0x2f0>
 800447e:	4b81      	ldr	r3, [pc, #516]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a80      	ldr	r2, [pc, #512]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6713      	str	r3, [r2, #112]	; 0x70
 800448a:	e01c      	b.n	80044c6 <HAL_RCC_OscConfig+0x32a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b05      	cmp	r3, #5
 8004492:	d10c      	bne.n	80044ae <HAL_RCC_OscConfig+0x312>
 8004494:	4b7b      	ldr	r3, [pc, #492]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	4a7a      	ldr	r2, [pc, #488]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	6713      	str	r3, [r2, #112]	; 0x70
 80044a0:	4b78      	ldr	r3, [pc, #480]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a77      	ldr	r2, [pc, #476]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	e00b      	b.n	80044c6 <HAL_RCC_OscConfig+0x32a>
 80044ae:	4b75      	ldr	r3, [pc, #468]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	4a74      	ldr	r2, [pc, #464]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ba:	4b72      	ldr	r3, [pc, #456]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a71      	ldr	r2, [pc, #452]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80044c0:	f023 0304 	bic.w	r3, r3, #4
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d015      	beq.n	80044fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ce:	f7fe f927 	bl	8002720 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fe f923 	bl	8002720 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e0c5      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ec:	4b65      	ldr	r3, [pc, #404]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ee      	beq.n	80044d6 <HAL_RCC_OscConfig+0x33a>
 80044f8:	e014      	b.n	8004524 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fa:	f7fe f911 	bl	8002720 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fe f90d 	bl	8002720 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0af      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004518:	4b5a      	ldr	r3, [pc, #360]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1ee      	bne.n	8004502 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004524:	7dfb      	ldrb	r3, [r7, #23]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d105      	bne.n	8004536 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452a:	4b56      	ldr	r3, [pc, #344]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	4a55      	ldr	r2, [pc, #340]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 8004530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004534:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 809b 	beq.w	8004676 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004540:	4b50      	ldr	r3, [pc, #320]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	2b08      	cmp	r3, #8
 800454a:	d05c      	beq.n	8004606 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b02      	cmp	r3, #2
 8004552:	d141      	bne.n	80045d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004554:	4b4c      	ldr	r3, [pc, #304]	; (8004688 <HAL_RCC_OscConfig+0x4ec>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455a:	f7fe f8e1 	bl	8002720 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004562:	f7fe f8dd 	bl	8002720 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e081      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004574:	4b43      	ldr	r3, [pc, #268]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	019b      	lsls	r3, r3, #6
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	3b01      	subs	r3, #1
 800459a:	041b      	lsls	r3, r3, #16
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	061b      	lsls	r3, r3, #24
 80045a4:	4937      	ldr	r1, [pc, #220]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045aa:	4b37      	ldr	r3, [pc, #220]	; (8004688 <HAL_RCC_OscConfig+0x4ec>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fe f8b6 	bl	8002720 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fe f8b2 	bl	8002720 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e056      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ca:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x41c>
 80045d6:	e04e      	b.n	8004676 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d8:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <HAL_RCC_OscConfig+0x4ec>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045de:	f7fe f89f 	bl	8002720 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e6:	f7fe f89b 	bl	8002720 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e03f      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f8:	4b22      	ldr	r3, [pc, #136]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f0      	bne.n	80045e6 <HAL_RCC_OscConfig+0x44a>
 8004604:	e037      	b.n	8004676 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e032      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004612:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <HAL_RCC_OscConfig+0x4e8>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d028      	beq.n	8004672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d121      	bne.n	8004672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d11a      	bne.n	8004672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004642:	4013      	ands	r3, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004648:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800464a:	4293      	cmp	r3, r2
 800464c:	d111      	bne.n	8004672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	3b01      	subs	r3, #1
 800465c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d107      	bne.n	8004672 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40007000 	.word	0x40007000
 8004684:	40023800 	.word	0x40023800
 8004688:	42470060 	.word	0x42470060

0800468c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0cc      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046a0:	4b68      	ldr	r3, [pc, #416]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d90c      	bls.n	80046c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b63      	ldr	r3, [pc, #396]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0b8      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e0:	4b59      	ldr	r3, [pc, #356]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a58      	ldr	r2, [pc, #352]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f8:	4b53      	ldr	r3, [pc, #332]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a52      	ldr	r2, [pc, #328]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004704:	4b50      	ldr	r3, [pc, #320]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	494d      	ldr	r1, [pc, #308]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d044      	beq.n	80047ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b47      	ldr	r3, [pc, #284]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d119      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e07f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d003      	beq.n	800474a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004746:	2b03      	cmp	r3, #3
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e067      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476a:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4934      	ldr	r1, [pc, #208]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	4313      	orrs	r3, r2
 800477a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800477c:	f7fd ffd0 	bl	8002720 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fd ffcc 	bl	8002720 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e04f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 020c 	and.w	r2, r3, #12
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1eb      	bne.n	8004784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b25      	ldr	r3, [pc, #148]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d20c      	bcs.n	80047d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b20      	ldr	r3, [pc, #128]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e032      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4916      	ldr	r1, [pc, #88]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	490e      	ldr	r1, [pc, #56]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004812:	f000 f821 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8004816:	4602      	mov	r2, r0
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	490a      	ldr	r1, [pc, #40]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	5ccb      	ldrb	r3, [r1, r3]
 8004826:	fa22 f303 	lsr.w	r3, r2, r3
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd ff30 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023c00 	.word	0x40023c00
 8004848:	40023800 	.word	0x40023800
 800484c:	08005dac 	.word	0x08005dac
 8004850:	20000000 	.word	0x20000000
 8004854:	20000054 	.word	0x20000054

08004858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004858:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	2300      	movs	r3, #0
 800486a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004870:	4b67      	ldr	r3, [pc, #412]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b08      	cmp	r3, #8
 800487a:	d00d      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x40>
 800487c:	2b08      	cmp	r3, #8
 800487e:	f200 80bd 	bhi.w	80049fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0x34>
 8004886:	2b04      	cmp	r3, #4
 8004888:	d003      	beq.n	8004892 <HAL_RCC_GetSysClockFreq+0x3a>
 800488a:	e0b7      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800488c:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800488e:	60bb      	str	r3, [r7, #8]
       break;
 8004890:	e0b7      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004892:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004894:	60bb      	str	r3, [r7, #8]
      break;
 8004896:	e0b4      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004898:	4b5d      	ldr	r3, [pc, #372]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048a2:	4b5b      	ldr	r3, [pc, #364]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d04d      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ae:	4b58      	ldr	r3, [pc, #352]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	461a      	mov	r2, r3
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	ea02 0800 	and.w	r8, r2, r0
 80048c6:	ea03 0901 	and.w	r9, r3, r1
 80048ca:	4640      	mov	r0, r8
 80048cc:	4649      	mov	r1, r9
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	014b      	lsls	r3, r1, #5
 80048d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048dc:	0142      	lsls	r2, r0, #5
 80048de:	4610      	mov	r0, r2
 80048e0:	4619      	mov	r1, r3
 80048e2:	ebb0 0008 	subs.w	r0, r0, r8
 80048e6:	eb61 0109 	sbc.w	r1, r1, r9
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	018b      	lsls	r3, r1, #6
 80048f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048f8:	0182      	lsls	r2, r0, #6
 80048fa:	1a12      	subs	r2, r2, r0
 80048fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004900:	f04f 0000 	mov.w	r0, #0
 8004904:	f04f 0100 	mov.w	r1, #0
 8004908:	00d9      	lsls	r1, r3, #3
 800490a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800490e:	00d0      	lsls	r0, r2, #3
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	eb12 0208 	adds.w	r2, r2, r8
 8004918:	eb43 0309 	adc.w	r3, r3, r9
 800491c:	f04f 0000 	mov.w	r0, #0
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	0259      	lsls	r1, r3, #9
 8004926:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800492a:	0250      	lsls	r0, r2, #9
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	461a      	mov	r2, r3
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	f7fb fc56 	bl	80001ec <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e04a      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494a:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	461a      	mov	r2, r3
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	f240 10ff 	movw	r0, #511	; 0x1ff
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	ea02 0400 	and.w	r4, r2, r0
 8004962:	ea03 0501 	and.w	r5, r3, r1
 8004966:	4620      	mov	r0, r4
 8004968:	4629      	mov	r1, r5
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	014b      	lsls	r3, r1, #5
 8004974:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004978:	0142      	lsls	r2, r0, #5
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	1b00      	subs	r0, r0, r4
 8004980:	eb61 0105 	sbc.w	r1, r1, r5
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	018b      	lsls	r3, r1, #6
 800498e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004992:	0182      	lsls	r2, r0, #6
 8004994:	1a12      	subs	r2, r2, r0
 8004996:	eb63 0301 	sbc.w	r3, r3, r1
 800499a:	f04f 0000 	mov.w	r0, #0
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	00d9      	lsls	r1, r3, #3
 80049a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049a8:	00d0      	lsls	r0, r2, #3
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	1912      	adds	r2, r2, r4
 80049b0:	eb45 0303 	adc.w	r3, r5, r3
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	0299      	lsls	r1, r3, #10
 80049be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049c2:	0290      	lsls	r0, r2, #10
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	f7fb fc0a 	bl	80001ec <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	3301      	adds	r3, #1
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	60bb      	str	r3, [r7, #8]
      break;
 80049fa:	e002      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049fe:	60bb      	str	r3, [r7, #8]
      break;
 8004a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a02:	68bb      	ldr	r3, [r7, #8]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800
 8004a14:	00f42400 	.word	0x00f42400
 8004a18:	007a1200 	.word	0x007a1200

08004a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000000 	.word	0x20000000

08004a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a38:	f7ff fff0 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	0a9b      	lsrs	r3, r3, #10
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	4903      	ldr	r1, [pc, #12]	; (8004a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40023800 	.word	0x40023800
 8004a58:	08005dbc 	.word	0x08005dbc

08004a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d075      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a90:	4bad      	ldr	r3, [pc, #692]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a96:	f7fd fe43 	bl	8002720 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a9e:	f7fd fe3f 	bl	8002720 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e18b      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab0:	4ba6      	ldr	r3, [pc, #664]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f0      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	019a      	lsls	r2, r3, #6
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	071b      	lsls	r3, r3, #28
 8004ad4:	499d      	ldr	r1, [pc, #628]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01f      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ae8:	4b98      	ldr	r3, [pc, #608]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aee:	0f1b      	lsrs	r3, r3, #28
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	019a      	lsls	r2, r3, #6
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	431a      	orrs	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	071b      	lsls	r3, r3, #28
 8004b08:	4990      	ldr	r1, [pc, #576]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b10:	4b8e      	ldr	r3, [pc, #568]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b16:	f023 021f 	bic.w	r2, r3, #31
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	498a      	ldr	r1, [pc, #552]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	019a      	lsls	r2, r3, #6
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	061b      	lsls	r3, r3, #24
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	071b      	lsls	r3, r3, #28
 8004b48:	4980      	ldr	r1, [pc, #512]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b50:	4b7d      	ldr	r3, [pc, #500]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b56:	f7fd fde3 	bl	8002720 <HAL_GetTick>
 8004b5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b5e:	f7fd fddf 	bl	8002720 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e12b      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b70:	4b76      	ldr	r3, [pc, #472]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d079      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b94:	4b6e      	ldr	r3, [pc, #440]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9a:	f7fd fdc1 	bl	8002720 <HAL_GetTick>
 8004b9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ba2:	f7fd fdbd 	bl	8002720 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e109      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bb4:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc0:	d0ef      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d020      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bce:	4b5f      	ldr	r3, [pc, #380]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	0f1b      	lsrs	r3, r3, #28
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	019a      	lsls	r2, r3, #6
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	061b      	lsls	r3, r3, #24
 8004be8:	431a      	orrs	r2, r3
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	071b      	lsls	r3, r3, #28
 8004bee:	4957      	ldr	r1, [pc, #348]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bf6:	4b55      	ldr	r3, [pc, #340]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bfc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	4950      	ldr	r1, [pc, #320]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01e      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c1c:	4b4b      	ldr	r3, [pc, #300]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c22:	0e1b      	lsrs	r3, r3, #24
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	019a      	lsls	r2, r3, #6
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	061b      	lsls	r3, r3, #24
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	071b      	lsls	r3, r3, #28
 8004c3c:	4943      	ldr	r1, [pc, #268]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c44:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	493e      	ldr	r1, [pc, #248]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c5a:	4b3d      	ldr	r3, [pc, #244]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c60:	f7fd fd5e 	bl	8002720 <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c68:	f7fd fd5a 	bl	8002720 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0a6      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c7a:	4b34      	ldr	r3, [pc, #208]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c86:	d1ef      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 808d 	beq.w	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	4a2b      	ldr	r2, [pc, #172]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca6:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cb2:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cbe:	f7fd fd2f 	bl	8002720 <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cc6:	f7fd fd2b 	bl	8002720 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e077      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d039      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d032      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d0c:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d11e      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7fd fcf9 	bl	8002720 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d30:	e014      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d32:	f7fd fcf5 	bl	8002720 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d90b      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e03f      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004d48:	42470068 	.word	0x42470068
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	42470070 	.word	0x42470070
 8004d54:	40007000 	.word	0x40007000
 8004d58:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5c:	4b1c      	ldr	r3, [pc, #112]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0e4      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d74:	d10d      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d76:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8a:	4911      	ldr	r1, [pc, #68]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	608b      	str	r3, [r1, #8]
 8004d90:	e005      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d9c:	6093      	str	r3, [r2, #8]
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004daa:	4909      	ldr	r1, [pc, #36]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004dc2:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004dc4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	424711e0 	.word	0x424711e0

08004dd8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e025      	b.n	8004e38 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fc fa15 	bl	8001230 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f000 fe3b 	bl	8005a94 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	461a      	mov	r2, r3
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	f000 fea6 	bl	8005b7a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d101      	bne.n	8004e5c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e018      	b.n	8004e8e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 ff03 	bl	8005c78 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d104      	bne.n	8004e84 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2205      	movs	r2, #5
 8004e7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004e82:	e003      	b.n	8004e8c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d101      	bne.n	8004eb0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
 8004eae:	e00e      	b.n	8004ece <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6839      	ldr	r1, [r7, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 ff16 	bl	8005cf0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e07b      	b.n	8004fe0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d108      	bne.n	8004f02 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef8:	d009      	beq.n	8004f0e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	61da      	str	r2, [r3, #28]
 8004f00:	e005      	b.n	8004f0e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d106      	bne.n	8004f2e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7fc f889 	bl	8001040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	ea42 0103 	orr.w	r1, r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	0c1b      	lsrs	r3, r3, #16
 8004fac:	f003 0104 	and.w	r1, r3, #4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	f003 0210 	and.w	r2, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e01a      	b.n	8005030 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005010:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fc f85c 	bl	80010d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_SPI_Transmit+0x22>
 8005056:	2302      	movs	r3, #2
 8005058:	e126      	b.n	80052a8 <HAL_SPI_Transmit+0x270>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005062:	f7fd fb5d 	bl	8002720 <HAL_GetTick>
 8005066:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d002      	beq.n	800507e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005078:	2302      	movs	r3, #2
 800507a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800507c:	e10b      	b.n	8005296 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_SPI_Transmit+0x52>
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d102      	bne.n	8005090 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800508e:	e102      	b.n	8005296 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2203      	movs	r2, #3
 8005094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d6:	d10f      	bne.n	80050f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d007      	beq.n	8005116 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005114:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511e:	d14b      	bne.n	80051b8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_SPI_Transmit+0xf6>
 8005128:	8afb      	ldrh	r3, [r7, #22]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d13e      	bne.n	80051ac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	1c9a      	adds	r2, r3, #2
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005152:	e02b      	b.n	80051ac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b02      	cmp	r3, #2
 8005160:	d112      	bne.n	8005188 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	881a      	ldrh	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	1c9a      	adds	r2, r3, #2
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	86da      	strh	r2, [r3, #54]	; 0x36
 8005186:	e011      	b.n	80051ac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005188:	f7fd faca 	bl	8002720 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d803      	bhi.n	80051a0 <HAL_SPI_Transmit+0x168>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d102      	bne.n	80051a6 <HAL_SPI_Transmit+0x16e>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051aa:	e074      	b.n	8005296 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1ce      	bne.n	8005154 <HAL_SPI_Transmit+0x11c>
 80051b6:	e04c      	b.n	8005252 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_SPI_Transmit+0x18e>
 80051c0:	8afb      	ldrh	r3, [r7, #22]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d140      	bne.n	8005248 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051ec:	e02c      	b.n	8005248 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d113      	bne.n	8005224 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	7812      	ldrb	r2, [r2, #0]
 8005208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	86da      	strh	r2, [r3, #54]	; 0x36
 8005222:	e011      	b.n	8005248 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005224:	f7fd fa7c 	bl	8002720 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d803      	bhi.n	800523c <HAL_SPI_Transmit+0x204>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d102      	bne.n	8005242 <HAL_SPI_Transmit+0x20a>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005246:	e026      	b.n	8005296 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1cd      	bne.n	80051ee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fbda 	bl	8005a10 <SPI_EndRxTxTransaction>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005270:	2300      	movs	r3, #0
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	77fb      	strb	r3, [r7, #31]
 8005292:	e000      	b.n	8005296 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005294:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052cc:	d112      	bne.n	80052f4 <HAL_SPI_Receive+0x44>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10e      	bne.n	80052f4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2204      	movs	r2, #4
 80052da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f8f1 	bl	80054d2 <HAL_SPI_TransmitReceive>
 80052f0:	4603      	mov	r3, r0
 80052f2:	e0ea      	b.n	80054ca <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_SPI_Receive+0x52>
 80052fe:	2302      	movs	r3, #2
 8005300:	e0e3      	b.n	80054ca <HAL_SPI_Receive+0x21a>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800530a:	f7fd fa09 	bl	8002720 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d002      	beq.n	8005322 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800531c:	2302      	movs	r3, #2
 800531e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005320:	e0ca      	b.n	80054b8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_SPI_Receive+0x7e>
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005332:	e0c1      	b.n	80054b8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2204      	movs	r2, #4
 8005338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	88fa      	ldrh	r2, [r7, #6]
 800534c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537a:	d10f      	bne.n	800539c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800539a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d007      	beq.n	80053ba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d162      	bne.n	8005488 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053c2:	e02e      	b.n	8005422 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d115      	bne.n	80053fe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f103 020c 	add.w	r2, r3, #12
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	7812      	ldrb	r2, [r2, #0]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fc:	e011      	b.n	8005422 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fe:	f7fd f98f 	bl	8002720 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d803      	bhi.n	8005416 <HAL_SPI_Receive+0x166>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d102      	bne.n	800541c <HAL_SPI_Receive+0x16c>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005420:	e04a      	b.n	80054b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1cb      	bne.n	80053c4 <HAL_SPI_Receive+0x114>
 800542c:	e031      	b.n	8005492 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d113      	bne.n	8005464 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	b292      	uxth	r2, r2
 8005448:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005462:	e011      	b.n	8005488 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005464:	f7fd f95c 	bl	8002720 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d803      	bhi.n	800547c <HAL_SPI_Receive+0x1cc>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d102      	bne.n	8005482 <HAL_SPI_Receive+0x1d2>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005486:	e017      	b.n	80054b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1cd      	bne.n	800542e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fa54 	bl	8005944 <SPI_EndRxTransaction>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
 80054b4:	e000      	b.n	80054b8 <HAL_SPI_Receive+0x208>
  }

error :
 80054b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b08c      	sub	sp, #48	; 0x30
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054e0:	2301      	movs	r3, #1
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_SPI_TransmitReceive+0x26>
 80054f4:	2302      	movs	r3, #2
 80054f6:	e18a      	b.n	800580e <HAL_SPI_TransmitReceive+0x33c>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005500:	f7fd f90e 	bl	8002720 <HAL_GetTick>
 8005504:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800550c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005516:	887b      	ldrh	r3, [r7, #2]
 8005518:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800551a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800551e:	2b01      	cmp	r3, #1
 8005520:	d00f      	beq.n	8005542 <HAL_SPI_TransmitReceive+0x70>
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005528:	d107      	bne.n	800553a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <HAL_SPI_TransmitReceive+0x68>
 8005532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005536:	2b04      	cmp	r3, #4
 8005538:	d003      	beq.n	8005542 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005540:	e15b      	b.n	80057fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x82>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x82>
 800554e:	887b      	ldrh	r3, [r7, #2]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800555a:	e14e      	b.n	80057fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b04      	cmp	r3, #4
 8005566:	d003      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2205      	movs	r2, #5
 800556c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	887a      	ldrh	r2, [r7, #2]
 8005580:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	887a      	ldrh	r2, [r7, #2]
 8005586:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	887a      	ldrh	r2, [r7, #2]
 8005592:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	887a      	ldrh	r2, [r7, #2]
 8005598:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055cc:	d178      	bne.n	80056c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x10a>
 80055d6:	8b7b      	ldrh	r3, [r7, #26]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d166      	bne.n	80056aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	1c9a      	adds	r2, r3, #2
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005600:	e053      	b.n	80056aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d11b      	bne.n	8005648 <HAL_SPI_TransmitReceive+0x176>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <HAL_SPI_TransmitReceive+0x176>
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d113      	bne.n	8005648 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	881a      	ldrh	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	1c9a      	adds	r2, r3, #2
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b01      	cmp	r3, #1
 8005654:	d119      	bne.n	800568a <HAL_SPI_TransmitReceive+0x1b8>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d014      	beq.n	800568a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	b292      	uxth	r2, r2
 800566c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	1c9a      	adds	r2, r3, #2
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005686:	2301      	movs	r3, #1
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800568a:	f7fd f849 	bl	8002720 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005696:	429a      	cmp	r2, r3
 8005698:	d807      	bhi.n	80056aa <HAL_SPI_TransmitReceive+0x1d8>
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d003      	beq.n	80056aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056a8:	e0a7      	b.n	80057fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1a6      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x130>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1a1      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x130>
 80056be:	e07c      	b.n	80057ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_SPI_TransmitReceive+0x1fc>
 80056c8:	8b7b      	ldrh	r3, [r7, #26]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d16b      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056f4:	e057      	b.n	80057a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b02      	cmp	r3, #2
 8005702:	d11c      	bne.n	800573e <HAL_SPI_TransmitReceive+0x26c>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d017      	beq.n	800573e <HAL_SPI_TransmitReceive+0x26c>
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d114      	bne.n	800573e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b01      	cmp	r3, #1
 800574a:	d119      	bne.n	8005780 <HAL_SPI_TransmitReceive+0x2ae>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d014      	beq.n	8005780 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800577c:	2301      	movs	r3, #1
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005780:	f7fc ffce 	bl	8002720 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578c:	429a      	cmp	r2, r3
 800578e:	d803      	bhi.n	8005798 <HAL_SPI_TransmitReceive+0x2c6>
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005796:	d102      	bne.n	800579e <HAL_SPI_TransmitReceive+0x2cc>
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057a4:	e029      	b.n	80057fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1a2      	bne.n	80056f6 <HAL_SPI_TransmitReceive+0x224>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d19d      	bne.n	80056f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f926 	bl	8005a10 <SPI_EndRxTxTransaction>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d006      	beq.n	80057d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057d6:	e010      	b.n	80057fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	e000      	b.n	80057fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800580a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800580e:	4618      	mov	r0, r3
 8005810:	3730      	adds	r7, #48	; 0x30
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005824:	b2db      	uxtb	r3, r3
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005844:	f7fc ff6c 	bl	8002720 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	4413      	add	r3, r2
 8005852:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005854:	f7fc ff64 	bl	8002720 <HAL_GetTick>
 8005858:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800585a:	4b39      	ldr	r3, [pc, #228]	; (8005940 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	015b      	lsls	r3, r3, #5
 8005860:	0d1b      	lsrs	r3, r3, #20
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	fb02 f303 	mul.w	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800586a:	e054      	b.n	8005916 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d050      	beq.n	8005916 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005874:	f7fc ff54 	bl	8002720 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	429a      	cmp	r2, r3
 8005882:	d902      	bls.n	800588a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d13d      	bne.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a2:	d111      	bne.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ac:	d004      	beq.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b6:	d107      	bne.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d0:	d10f      	bne.n	80058f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e017      	b.n	8005936 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	3b01      	subs	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	429a      	cmp	r2, r3
 8005932:	d19b      	bne.n	800586c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000000 	.word	0x20000000

08005944 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005958:	d111      	bne.n	800597e <SPI_EndRxTransaction+0x3a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005962:	d004      	beq.n	800596e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596c:	d107      	bne.n	800597e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005986:	d12a      	bne.n	80059de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005990:	d012      	beq.n	80059b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	2180      	movs	r1, #128	; 0x80
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ff49 	bl	8005834 <SPI_WaitFlagStateUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d02d      	beq.n	8005a04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e026      	b.n	8005a06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	2101      	movs	r1, #1
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7ff ff36 	bl	8005834 <SPI_WaitFlagStateUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01a      	beq.n	8005a04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e013      	b.n	8005a06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2200      	movs	r2, #0
 80059e6:	2101      	movs	r1, #1
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff ff23 	bl	8005834 <SPI_WaitFlagStateUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e000      	b.n	8005a06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a1c:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <SPI_EndRxTxTransaction+0x7c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1b      	ldr	r2, [pc, #108]	; (8005a90 <SPI_EndRxTxTransaction+0x80>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	0d5b      	lsrs	r3, r3, #21
 8005a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a3a:	d112      	bne.n	8005a62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2200      	movs	r2, #0
 8005a44:	2180      	movs	r1, #128	; 0x80
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff fef4 	bl	8005834 <SPI_WaitFlagStateUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d016      	beq.n	8005a80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	f043 0220 	orr.w	r2, r3, #32
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e00f      	b.n	8005a82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a78:	2b80      	cmp	r3, #128	; 0x80
 8005a7a:	d0f2      	beq.n	8005a62 <SPI_EndRxTxTransaction+0x52>
 8005a7c:	e000      	b.n	8005a80 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a7e:	bf00      	nop
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000000 	.word	0x20000000
 8005a90:	165e9f81 	.word	0x165e9f81

08005a94 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d029      	beq.n	8005b02 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005aba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005abe:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ac8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8005ace:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005ad4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005ada:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005ae0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005ae6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005aec:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005af2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e034      	b.n	8005b6c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b0e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005b18:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005b1e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b36:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005b40:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005b46:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005b4c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005b52:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005b58:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d02e      	beq.n	8005bf2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ba0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005bb0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005bba:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005bc4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005bce:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005bd8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005be2:	4313      	orrs	r3, r2
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	e03b      	b.n	8005c6a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c02:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005c14:	4313      	orrs	r3, r2
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c28:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005c38:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005c42:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005c4c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005c56:	4313      	orrs	r3, r2
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005c94:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8005c9e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005cb0:	f7fc fd36 	bl	8002720 <HAL_GetTick>
 8005cb4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005cb6:	e010      	b.n	8005cda <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	d00c      	beq.n	8005cda <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <FMC_SDRAM_SendCommand+0x5e>
 8005cc6:	f7fc fd2b 	bl	8002720 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d201      	bcs.n	8005cda <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e006      	b.n	8005ce8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d0e8      	beq.n	8005cb8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <__libc_init_array>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	4d0d      	ldr	r5, [pc, #52]	; (8005d50 <__libc_init_array+0x38>)
 8005d1c:	4c0d      	ldr	r4, [pc, #52]	; (8005d54 <__libc_init_array+0x3c>)
 8005d1e:	1b64      	subs	r4, r4, r5
 8005d20:	10a4      	asrs	r4, r4, #2
 8005d22:	2600      	movs	r6, #0
 8005d24:	42a6      	cmp	r6, r4
 8005d26:	d109      	bne.n	8005d3c <__libc_init_array+0x24>
 8005d28:	4d0b      	ldr	r5, [pc, #44]	; (8005d58 <__libc_init_array+0x40>)
 8005d2a:	4c0c      	ldr	r4, [pc, #48]	; (8005d5c <__libc_init_array+0x44>)
 8005d2c:	f000 f820 	bl	8005d70 <_init>
 8005d30:	1b64      	subs	r4, r4, r5
 8005d32:	10a4      	asrs	r4, r4, #2
 8005d34:	2600      	movs	r6, #0
 8005d36:	42a6      	cmp	r6, r4
 8005d38:	d105      	bne.n	8005d46 <__libc_init_array+0x2e>
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d40:	4798      	blx	r3
 8005d42:	3601      	adds	r6, #1
 8005d44:	e7ee      	b.n	8005d24 <__libc_init_array+0xc>
 8005d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4a:	4798      	blx	r3
 8005d4c:	3601      	adds	r6, #1
 8005d4e:	e7f2      	b.n	8005d36 <__libc_init_array+0x1e>
 8005d50:	08008764 	.word	0x08008764
 8005d54:	08008764 	.word	0x08008764
 8005d58:	08008764 	.word	0x08008764
 8005d5c:	08008768 	.word	0x08008768

08005d60 <memset>:
 8005d60:	4402      	add	r2, r0
 8005d62:	4603      	mov	r3, r0
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d100      	bne.n	8005d6a <memset+0xa>
 8005d68:	4770      	bx	lr
 8005d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6e:	e7f9      	b.n	8005d64 <memset+0x4>

08005d70 <_init>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	bf00      	nop
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr

08005d7c <_fini>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	bf00      	nop
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr
