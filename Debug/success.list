
success.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b48  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abe0  0800abe0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800abe0  0800abe0  0001abe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abe8  0800abe8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abec  0800abec  0001abec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800abf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          000004b0  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000580  20000580  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000178d1  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ce  00000000  00000000  000379d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  0003ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001160  00000000  00000000  0003c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262dc  00000000  00000000  0003d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000163c8  00000000  00000000  0006349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de8ed  00000000  00000000  00079864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00158151  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005150  00000000  00000000  001581a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007080 	.word	0x08007080

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	08007080 	.word	0x08007080

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MDL_LCD_Bttn_Pressed>:
uint32_t winner;



//updates game state based on button press
void MDL_LCD_Bttn_Pressed(bttns bttn){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	switch(game_state){
 8000592:	4b4f      	ldr	r3, [pc, #316]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b05      	cmp	r3, #5
 8000598:	f200 8088 	bhi.w	80006ac <MDL_LCD_Bttn_Pressed+0x124>
 800059c:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <MDL_LCD_Bttn_Pressed+0x1c>)
 800059e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a2:	bf00      	nop
 80005a4:	080005bd 	.word	0x080005bd
 80005a8:	080005cf 	.word	0x080005cf
 80005ac:	0800063d 	.word	0x0800063d
 80005b0:	0800064f 	.word	0x0800064f
 80005b4:	08000675 	.word	0x08000675
 80005b8:	0800069b 	.word	0x0800069b
		case WELCOME:
			if (bttn == START){
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d176      	bne.n	80006b0 <MDL_LCD_Bttn_Pressed+0x128>
				game_state=NUM_OF_PLAYERS;
 80005c2:	4b43      	ldr	r3, [pc, #268]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
				change_LCD_screenstate();
 80005c8:	f000 f97c 	bl	80008c4 <change_LCD_screenstate>
			}
			break;
 80005cc:	e070      	b.n	80006b0 <MDL_LCD_Bttn_Pressed+0x128>

		case NUM_OF_PLAYERS:

			if (bttn == PLUS){
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d112      	bne.n	80005fa <MDL_LCD_Bttn_Pressed+0x72>
				if(num_of_players==4) num_of_players = 1;
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d102      	bne.n	80005e2 <MDL_LCD_Bttn_Pressed+0x5a>
 80005dc:	4b3d      	ldr	r3, [pc, #244]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
				num_of_players++;
 80005e2:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 80005ec:	701a      	strb	r2, [r3, #0]
				game_state = NUM_OF_PLAYERS;
 80005ee:	4b38      	ldr	r3, [pc, #224]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
				change_LCD_screenstate();
 80005f4:	f000 f966 	bl	80008c4 <change_LCD_screenstate>
			else if(bttn == START){
				LCD_Add_Player();
				game_state = PLAYER1;
				change_LCD_screenstate();
			}
			break;
 80005f8:	e05c      	b.n	80006b4 <MDL_LCD_Bttn_Pressed+0x12c>
			else if(bttn == MINUS){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d112      	bne.n	8000626 <MDL_LCD_Bttn_Pressed+0x9e>
				if(num_of_players==2) num_of_players = 5;
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d102      	bne.n	800060e <MDL_LCD_Bttn_Pressed+0x86>
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 800060a:	2205      	movs	r2, #5
 800060c:	701a      	strb	r2, [r3, #0]
				num_of_players--;
 800060e:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 8000618:	701a      	strb	r2, [r3, #0]
				game_state = NUM_OF_PLAYERS;
 800061a:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
				change_LCD_screenstate();
 8000620:	f000 f950 	bl	80008c4 <change_LCD_screenstate>
			break;
 8000624:	e046      	b.n	80006b4 <MDL_LCD_Bttn_Pressed+0x12c>
			else if(bttn == START){
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d143      	bne.n	80006b4 <MDL_LCD_Bttn_Pressed+0x12c>
				LCD_Add_Player();
 800062c:	f000 f90e 	bl	800084c <LCD_Add_Player>
				game_state = PLAYER1;
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 8000632:	2202      	movs	r2, #2
 8000634:	701a      	strb	r2, [r3, #0]
				change_LCD_screenstate();
 8000636:	f000 f945 	bl	80008c4 <change_LCD_screenstate>
			break;
 800063a:	e03b      	b.n	80006b4 <MDL_LCD_Bttn_Pressed+0x12c>

		case PLAYER1:
			if(bttn == TOCI){
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b03      	cmp	r3, #3
 8000640:	d13a      	bne.n	80006b8 <MDL_LCD_Bttn_Pressed+0x130>
				game_state= PLAYER2;
 8000642:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 8000644:	2203      	movs	r2, #3
 8000646:	701a      	strb	r2, [r3, #0]
				change_LCD_screenstate();
 8000648:	f000 f93c 	bl	80008c4 <change_LCD_screenstate>
			}
			break;
 800064c:	e034      	b.n	80006b8 <MDL_LCD_Bttn_Pressed+0x130>

		case PLAYER2:
			if(bttn == TOCI){
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b03      	cmp	r3, #3
 8000652:	d133      	bne.n	80006bc <MDL_LCD_Bttn_Pressed+0x134>
				if(num_of_players == 2){
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d105      	bne.n	8000668 <MDL_LCD_Bttn_Pressed+0xe0>
					game_state= PLAYER1;
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 800065e:	2202      	movs	r2, #2
 8000660:	701a      	strb	r2, [r3, #0]
					change_LCD_screenstate();
 8000662:	f000 f92f 	bl	80008c4 <change_LCD_screenstate>
				} else {
					game_state= PLAYER3;
					change_LCD_screenstate();
				}
			}
			break;
 8000666:	e029      	b.n	80006bc <MDL_LCD_Bttn_Pressed+0x134>
					game_state= PLAYER3;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 800066a:	2204      	movs	r2, #4
 800066c:	701a      	strb	r2, [r3, #0]
					change_LCD_screenstate();
 800066e:	f000 f929 	bl	80008c4 <change_LCD_screenstate>
			break;
 8000672:	e023      	b.n	80006bc <MDL_LCD_Bttn_Pressed+0x134>
		case PLAYER3:
			if(bttn == TOCI){
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d122      	bne.n	80006c0 <MDL_LCD_Bttn_Pressed+0x138>
				if(num_of_players ==3){
 800067a:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MDL_LCD_Bttn_Pressed+0x14c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b03      	cmp	r3, #3
 8000680:	d105      	bne.n	800068e <MDL_LCD_Bttn_Pressed+0x106>
					game_state= PLAYER1;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 8000684:	2202      	movs	r2, #2
 8000686:	701a      	strb	r2, [r3, #0]
					change_LCD_screenstate();
 8000688:	f000 f91c 	bl	80008c4 <change_LCD_screenstate>
				} else {
					game_state= PLAYER4;
					change_LCD_screenstate();
				}
			}
			break;
 800068c:	e018      	b.n	80006c0 <MDL_LCD_Bttn_Pressed+0x138>
					game_state= PLAYER4;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 8000690:	2205      	movs	r2, #5
 8000692:	701a      	strb	r2, [r3, #0]
					change_LCD_screenstate();
 8000694:	f000 f916 	bl	80008c4 <change_LCD_screenstate>
			break;
 8000698:	e012      	b.n	80006c0 <MDL_LCD_Bttn_Pressed+0x138>

		case PLAYER4:
			if(bttn == TOCI){
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d111      	bne.n	80006c4 <MDL_LCD_Bttn_Pressed+0x13c>
				game_state= PLAYER1;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MDL_LCD_Bttn_Pressed+0x148>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	701a      	strb	r2, [r3, #0]
				change_LCD_screenstate();
 80006a6:	f000 f90d 	bl	80008c4 <change_LCD_screenstate>
			}
			break;
 80006aa:	e00b      	b.n	80006c4 <MDL_LCD_Bttn_Pressed+0x13c>

		default:
			break;
 80006ac:	bf00      	nop
 80006ae:	e00a      	b.n	80006c6 <MDL_LCD_Bttn_Pressed+0x13e>
			break;
 80006b0:	bf00      	nop
 80006b2:	e008      	b.n	80006c6 <MDL_LCD_Bttn_Pressed+0x13e>
			break;
 80006b4:	bf00      	nop
 80006b6:	e006      	b.n	80006c6 <MDL_LCD_Bttn_Pressed+0x13e>
			break;
 80006b8:	bf00      	nop
 80006ba:	e004      	b.n	80006c6 <MDL_LCD_Bttn_Pressed+0x13e>
			break;
 80006bc:	bf00      	nop
 80006be:	e002      	b.n	80006c6 <MDL_LCD_Bttn_Pressed+0x13e>
			break;
 80006c0:	bf00      	nop
 80006c2:	e000      	b.n	80006c6 <MDL_LCD_Bttn_Pressed+0x13e>
			break;
 80006c4:	bf00      	nop
	}

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200002af 	.word	0x200002af
 80006d4:	200002b0 	.word	0x200002b0

080006d8 <MDL_LCD_Hit_Update>:


//updates game state based on sensor hits
void MDL_LCD_Hit_Update(uint32_t mLs){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	switch(game_state){
 80006e0:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <MDL_LCD_Hit_Update+0xf4>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3b02      	subs	r3, #2
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d862      	bhi.n	80007b0 <MDL_LCD_Hit_Update+0xd8>
 80006ea:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MDL_LCD_Hit_Update+0x18>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800072d 	.word	0x0800072d
 80006f8:	08000759 	.word	0x08000759
 80006fc:	08000785 	.word	0x08000785
			case PLAYER1:
				Players[0].mL += mLs;
 8000700:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	4a31      	ldr	r2, [pc, #196]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 800070a:	6053      	str	r3, [r2, #4]
				change_LCD_screenstate();
 800070c:	f000 f8da 	bl	80008c4 <change_LCD_screenstate>

				if(Players[0].mL >= 1000){
 8000710:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000718:	d34c      	bcc.n	80007b4 <MDL_LCD_Hit_Update+0xdc>
					game_state = WIN;
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <MDL_LCD_Hit_Update+0xf4>)
 800071c:	2206      	movs	r2, #6
 800071e:	701a      	strb	r2, [r3, #0]
					winner = 1;
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <MDL_LCD_Hit_Update+0xfc>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
					change_LCD_screenstate();
 8000726:	f000 f8cd 	bl	80008c4 <change_LCD_screenstate>
				}

				break;
 800072a:	e043      	b.n	80007b4 <MDL_LCD_Hit_Update+0xdc>

			case PLAYER2:
				Players[1].mL += mLs;
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	4a26      	ldr	r2, [pc, #152]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 8000736:	60d3      	str	r3, [r2, #12]
				change_LCD_screenstate();
 8000738:	f000 f8c4 	bl	80008c4 <change_LCD_screenstate>

				if(Players[1].mL >= 1000){
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000744:	d338      	bcc.n	80007b8 <MDL_LCD_Hit_Update+0xe0>
					game_state = WIN;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MDL_LCD_Hit_Update+0xf4>)
 8000748:	2206      	movs	r2, #6
 800074a:	701a      	strb	r2, [r3, #0]
					winner = 2;
 800074c:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <MDL_LCD_Hit_Update+0xfc>)
 800074e:	2202      	movs	r2, #2
 8000750:	601a      	str	r2, [r3, #0]
					change_LCD_screenstate();
 8000752:	f000 f8b7 	bl	80008c4 <change_LCD_screenstate>
				}

				break;
 8000756:	e02f      	b.n	80007b8 <MDL_LCD_Hit_Update+0xe0>

			case PLAYER3:
				Players[2].mL += mLs;
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 800075a:	695a      	ldr	r2, [r3, #20]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 8000762:	6153      	str	r3, [r2, #20]
				change_LCD_screenstate();
 8000764:	f000 f8ae 	bl	80008c4 <change_LCD_screenstate>

				if(Players[2].mL >= 1000){
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000770:	d324      	bcc.n	80007bc <MDL_LCD_Hit_Update+0xe4>
					game_state = WIN;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MDL_LCD_Hit_Update+0xf4>)
 8000774:	2206      	movs	r2, #6
 8000776:	701a      	strb	r2, [r3, #0]
					winner = 3;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MDL_LCD_Hit_Update+0xfc>)
 800077a:	2203      	movs	r2, #3
 800077c:	601a      	str	r2, [r3, #0]
					change_LCD_screenstate();
 800077e:	f000 f8a1 	bl	80008c4 <change_LCD_screenstate>
				}

				break;
 8000782:	e01b      	b.n	80007bc <MDL_LCD_Hit_Update+0xe4>

			case PLAYER4:
				Players[3].mL += mLs;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 8000786:	69da      	ldr	r2, [r3, #28]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 800078e:	61d3      	str	r3, [r2, #28]
				change_LCD_screenstate();
 8000790:	f000 f898 	bl	80008c4 <change_LCD_screenstate>

				if(Players[0].mL >= 1000){
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MDL_LCD_Hit_Update+0xf8>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800079c:	d310      	bcc.n	80007c0 <MDL_LCD_Hit_Update+0xe8>
					game_state = WIN;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MDL_LCD_Hit_Update+0xf4>)
 80007a0:	2206      	movs	r2, #6
 80007a2:	701a      	strb	r2, [r3, #0]
					winner = 4;
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MDL_LCD_Hit_Update+0xfc>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	601a      	str	r2, [r3, #0]
					change_LCD_screenstate();
 80007aa:	f000 f88b 	bl	80008c4 <change_LCD_screenstate>
				}

				break;
 80007ae:	e007      	b.n	80007c0 <MDL_LCD_Hit_Update+0xe8>

			default:
				break;
 80007b0:	bf00      	nop
 80007b2:	e006      	b.n	80007c2 <MDL_LCD_Hit_Update+0xea>
				break;
 80007b4:	bf00      	nop
 80007b6:	e004      	b.n	80007c2 <MDL_LCD_Hit_Update+0xea>
				break;
 80007b8:	bf00      	nop
 80007ba:	e002      	b.n	80007c2 <MDL_LCD_Hit_Update+0xea>
				break;
 80007bc:	bf00      	nop
 80007be:	e000      	b.n	80007c2 <MDL_LCD_Hit_Update+0xea>
				break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200002af 	.word	0x200002af
 80007d0:	200002d8 	.word	0x200002d8
 80007d4:	200002b4 	.word	0x200002b4

080007d8 <LCD_Init>:



//initializes new game
void LCD_Init(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 80007dc:	f001 fdec 	bl	80023b8 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80007e0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80007e4:	2000      	movs	r0, #0
 80007e6:	f001 fe69 	bl	80024bc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80007ea:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80007ee:	2001      	movs	r0, #1
 80007f0:	f001 fe64 	bl	80024bc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f001 fec5 	bl	8002584 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80007fa:	f002 f8b7 	bl	800296c <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(BGCOLOR);
 80007fe:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000802:	f001 ff17 	bl	8002634 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000806:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800080a:	f001 fecb 	bl	80025a4 <BSP_LCD_SetTextColor>

	num_of_players=2;
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <LCD_Init+0x60>)
 8000810:	2202      	movs	r2, #2
 8000812:	701a      	strb	r2, [r3, #0]
	sprintf(num_of_players_print, "%d", num_of_players);
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <LCD_Init+0x60>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4908      	ldr	r1, [pc, #32]	; (800083c <LCD_Init+0x64>)
 800081c:	4808      	ldr	r0, [pc, #32]	; (8000840 <LCD_Init+0x68>)
 800081e:	f006 f801 	bl	8006824 <siprintf>

	game_state=WELCOME;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <LCD_Init+0x6c>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
	winner = 0;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <LCD_Init+0x70>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
	change_LCD_screenstate();
 800082e:	f000 f849 	bl	80008c4 <change_LCD_screenstate>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200002b0 	.word	0x200002b0
 800083c:	08007098 	.word	0x08007098
 8000840:	200002a4 	.word	0x200002a4
 8000844:	200002af 	.word	0x200002af
 8000848:	200002b4 	.word	0x200002b4

0800084c <LCD_Add_Player>:


//updates number of players based on player choice
void LCD_Add_Player(void){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0

	sprintf(num_of_players_print, "%d", num_of_players);
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <LCD_Add_Player+0x64>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4916      	ldr	r1, [pc, #88]	; (80008b4 <LCD_Add_Player+0x68>)
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <LCD_Add_Player+0x6c>)
 800085c:	f005 ffe2 	bl	8006824 <siprintf>

	for(uint32_t i=0; i<num_of_players; i++){
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	e018      	b.n	8000898 <LCD_Add_Player+0x4c>
		LCD_Player player = {i, 0};
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
		Players[i]=player;
 800086e:	4a13      	ldr	r2, [pc, #76]	; (80008bc <LCD_Add_Player+0x70>)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	4413      	add	r3, r2
 8000876:	1d3a      	adds	r2, r7, #4
 8000878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800087c:	e883 0003 	stmia.w	r3, {r0, r1}
		Players_prev[i]=player;
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <LCD_Add_Player+0x74>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4413      	add	r3, r2
 8000888:	1d3a      	adds	r2, r7, #4
 800088a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088e:	e883 0003 	stmia.w	r3, {r0, r1}
	for(uint32_t i=0; i<num_of_players; i++){
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <LCD_Add_Player+0x64>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d3e0      	bcc.n	8000866 <LCD_Add_Player+0x1a>
	}
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200002b0 	.word	0x200002b0
 80008b4:	08007098 	.word	0x08007098
 80008b8:	200002a4 	.word	0x200002a4
 80008bc:	200002d8 	.word	0x200002d8
 80008c0:	200002b8 	.word	0x200002b8

080008c4 <change_LCD_screenstate>:


//calls functions to change LCD screen based on game state
void change_LCD_screenstate(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

	switch (game_state){
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <change_LCD_screenstate+0x50>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	d81d      	bhi.n	800090c <change_LCD_screenstate+0x48>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <change_LCD_screenstate+0x14>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	080008f5 	.word	0x080008f5
 80008dc:	080008fb 	.word	0x080008fb
 80008e0:	08000901 	.word	0x08000901
 80008e4:	08000901 	.word	0x08000901
 80008e8:	08000901 	.word	0x08000901
 80008ec:	08000901 	.word	0x08000901
 80008f0:	08000907 	.word	0x08000907
		case WELCOME:
			LCD_State_WELCOME();
 80008f4:	f000 f810 	bl	8000918 <LCD_State_WELCOME>
			break;
 80008f8:	e009      	b.n	800090e <change_LCD_screenstate+0x4a>

		case NUM_OF_PLAYERS:
			LCD_State_NUM_OF_PLAYERS();
 80008fa:	f000 f82d 	bl	8000958 <LCD_State_NUM_OF_PLAYERS>
			break;
 80008fe:	e006      	b.n	800090e <change_LCD_screenstate+0x4a>

		case PLAYER1:
		case PLAYER2:
		case PLAYER3:
		case PLAYER4:
			LCD_State_PLAYERS();
 8000900:	f000 f8ce 	bl	8000aa0 <LCD_State_PLAYERS>
			break;
 8000904:	e003      	b.n	800090e <change_LCD_screenstate+0x4a>

		case WIN:
			LCD_State_WIN();
 8000906:	f000 f879 	bl	80009fc <LCD_State_WIN>
			break;
 800090a:	e000      	b.n	800090e <change_LCD_screenstate+0x4a>

		default:
			break;
 800090c:	bf00      	nop

	}
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200002af 	.word	0x200002af

08000918 <LCD_State_WELCOME>:



//displays the WELCOME screen on the LCD
void LCD_State_WELCOME(void){
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font20);
 800091c:	480a      	ldr	r0, [pc, #40]	; (8000948 <LCD_State_WELCOME+0x30>)
 800091e:	f001 fe59 	bl	80025d4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000922:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000926:	f001 fe3d 	bl	80025a4 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5,(uint8_t *)"Beerpong");
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <LCD_State_WELCOME+0x34>)
 800092c:	2005      	movs	r0, #5
 800092e:	f001 ffab 	bl	8002888 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(8,(uint8_t *)"pritisni start");
 8000932:	4907      	ldr	r1, [pc, #28]	; (8000950 <LCD_State_WELCOME+0x38>)
 8000934:	2008      	movs	r0, #8
 8000936:	f001 ffa7 	bl	8002888 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(9,(uint8_t *)">");
 800093a:	4906      	ldr	r1, [pc, #24]	; (8000954 <LCD_State_WELCOME+0x3c>)
 800093c:	2009      	movs	r0, #9
 800093e:	f001 ffa3 	bl	8002888 <BSP_LCD_DisplayStringAtLine>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000048 	.word	0x20000048
 800094c:	0800709c 	.word	0x0800709c
 8000950:	080070a8 	.word	0x080070a8
 8000954:	080070b8 	.word	0x080070b8

08000958 <LCD_State_NUM_OF_PLAYERS>:


//displays the NUM_OF_PLAYERS screen on the LCD
void LCD_State_NUM_OF_PLAYERS(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	sprintf(num_of_players_print, "%d", num_of_players);
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <LCD_State_NUM_OF_PLAYERS+0x70>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	491a      	ldr	r1, [pc, #104]	; (80009cc <LCD_State_NUM_OF_PLAYERS+0x74>)
 8000964:	481a      	ldr	r0, [pc, #104]	; (80009d0 <LCD_State_NUM_OF_PLAYERS+0x78>)
 8000966:	f005 ff5d 	bl	8006824 <siprintf>

	BSP_LCD_Clear(BGCOLOR);
 800096a:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 800096e:	f001 fe61 	bl	8002634 <BSP_LCD_Clear>

	BSP_LCD_SetFont(&Font20);
 8000972:	4818      	ldr	r0, [pc, #96]	; (80009d4 <LCD_State_NUM_OF_PLAYERS+0x7c>)
 8000974:	f001 fe2e 	bl	80025d4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(2,(uint8_t *)"odabir igraca");
 8000978:	4917      	ldr	r1, [pc, #92]	; (80009d8 <LCD_State_NUM_OF_PLAYERS+0x80>)
 800097a:	2002      	movs	r0, #2
 800097c:	f001 ff84 	bl	8002888 <BSP_LCD_DisplayStringAtLine>


	BSP_LCD_SetFont(&Font24);
 8000980:	4816      	ldr	r0, [pc, #88]	; (80009dc <LCD_State_NUM_OF_PLAYERS+0x84>)
 8000982:	f001 fe27 	bl	80025d4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(5,(uint8_t *)num_of_players_print);
 8000986:	4912      	ldr	r1, [pc, #72]	; (80009d0 <LCD_State_NUM_OF_PLAYERS+0x78>)
 8000988:	2005      	movs	r0, #5
 800098a:	f001 ff7d 	bl	8002888 <BSP_LCD_DisplayStringAtLine>

	BSP_LCD_SetFont(&Font12);
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <LCD_State_NUM_OF_PLAYERS+0x88>)
 8000990:	f001 fe20 	bl	80025d4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(17,(uint8_t *)"pritisni + za dodavanje igraca");
 8000994:	4913      	ldr	r1, [pc, #76]	; (80009e4 <LCD_State_NUM_OF_PLAYERS+0x8c>)
 8000996:	2011      	movs	r0, #17
 8000998:	f001 ff76 	bl	8002888 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(18,(uint8_t *)"pritisni - za uklanjanje igraca");
 800099c:	4912      	ldr	r1, [pc, #72]	; (80009e8 <LCD_State_NUM_OF_PLAYERS+0x90>)
 800099e:	2012      	movs	r0, #18
 80009a0:	f001 ff72 	bl	8002888 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(20,(uint8_t *)"max broj igraca je 4");
 80009a4:	4911      	ldr	r1, [pc, #68]	; (80009ec <LCD_State_NUM_OF_PLAYERS+0x94>)
 80009a6:	2014      	movs	r0, #20
 80009a8:	f001 ff6e 	bl	8002888 <BSP_LCD_DisplayStringAtLine>

	BSP_LCD_SetFont(&Font16);
 80009ac:	4810      	ldr	r0, [pc, #64]	; (80009f0 <LCD_State_NUM_OF_PLAYERS+0x98>)
 80009ae:	f001 fe11 	bl	80025d4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAtLine(17,(uint8_t *)"pritisni start ");
 80009b2:	4910      	ldr	r1, [pc, #64]	; (80009f4 <LCD_State_NUM_OF_PLAYERS+0x9c>)
 80009b4:	2011      	movs	r0, #17
 80009b6:	f001 ff67 	bl	8002888 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(18,(uint8_t *)"za pocetak igre");
 80009ba:	490f      	ldr	r1, [pc, #60]	; (80009f8 <LCD_State_NUM_OF_PLAYERS+0xa0>)
 80009bc:	2012      	movs	r0, #18
 80009be:	f001 ff63 	bl	8002888 <BSP_LCD_DisplayStringAtLine>
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002b0 	.word	0x200002b0
 80009cc:	08007098 	.word	0x08007098
 80009d0:	200002a4 	.word	0x200002a4
 80009d4:	20000048 	.word	0x20000048
 80009d8:	080070bc 	.word	0x080070bc
 80009dc:	20000040 	.word	0x20000040
 80009e0:	20000058 	.word	0x20000058
 80009e4:	080070cc 	.word	0x080070cc
 80009e8:	080070ec 	.word	0x080070ec
 80009ec:	0800710c 	.word	0x0800710c
 80009f0:	20000050 	.word	0x20000050
 80009f4:	08007124 	.word	0x08007124
 80009f8:	08007134 	.word	0x08007134

080009fc <LCD_State_WIN>:



//displays the WIN screen on the LCD
void LCD_State_WIN(void){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_GREEN);
 8000a02:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000a06:	f001 fe15 	bl	8002634 <BSP_LCD_Clear>
	char wintext[25];
	sprintf(wintext,"igrac %ld!", winner);
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <LCD_State_WIN+0x90>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	463b      	mov	r3, r7
 8000a10:	491f      	ldr	r1, [pc, #124]	; (8000a90 <LCD_State_WIN+0x94>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 ff06 	bl	8006824 <siprintf>

	BSP_LCD_SetFont(&Font24);
 8000a18:	481e      	ldr	r0, [pc, #120]	; (8000a94 <LCD_State_WIN+0x98>)
 8000a1a:	f001 fddb 	bl	80025d4 <BSP_LCD_SetFont>
	for(uint32_t i=0; i<10; i++){
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	e029      	b.n	8000a78 <LCD_State_WIN+0x7c>
		BSP_LCD_Clear(LCD_COLOR_GREEN);
 8000a24:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000a28:	f001 fe04 	bl	8002634 <BSP_LCD_Clear>
		BSP_LCD_DisplayStringAt(0, 150,(uint8_t *)"pobjednik je", CENTER_MODE);
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <LCD_State_WIN+0x9c>)
 8000a30:	2196      	movs	r1, #150	; 0x96
 8000a32:	2000      	movs	r0, #0
 8000a34:	f001 fe6a 	bl	800270c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 180,(uint8_t *)wintext, CENTER_MODE);
 8000a38:	463a      	mov	r2, r7
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	21b4      	movs	r1, #180	; 0xb4
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f001 fe64 	bl	800270c <BSP_LCD_DisplayStringAt>
		HAL_Delay(500);
 8000a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a48:	f002 fbca 	bl	80031e0 <HAL_Delay>
		BSP_LCD_Clear(LCD_COLOR_LIGHTBLUE);
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <LCD_State_WIN+0xa0>)
 8000a4e:	f001 fdf1 	bl	8002634 <BSP_LCD_Clear>
		BSP_LCD_DisplayStringAt(0, 150,(uint8_t *)"pobjednik je", CENTER_MODE);
 8000a52:	2301      	movs	r3, #1
 8000a54:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <LCD_State_WIN+0x9c>)
 8000a56:	2196      	movs	r1, #150	; 0x96
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 fe57 	bl	800270c <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, 180,(uint8_t *)wintext, CENTER_MODE);
 8000a5e:	463a      	mov	r2, r7
 8000a60:	2301      	movs	r3, #1
 8000a62:	21b4      	movs	r1, #180	; 0xb4
 8000a64:	2000      	movs	r0, #0
 8000a66:	f001 fe51 	bl	800270c <BSP_LCD_DisplayStringAt>
		HAL_Delay(500);
 8000a6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a6e:	f002 fbb7 	bl	80031e0 <HAL_Delay>
	for(uint32_t i=0; i<10; i++){
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2b09      	cmp	r3, #9
 8000a7c:	d9d2      	bls.n	8000a24 <LCD_State_WIN+0x28>
	}
	LCD_Init();
 8000a7e:	f7ff feab 	bl	80007d8 <LCD_Init>
}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200002b4 	.word	0x200002b4
 8000a90:	08007144 	.word	0x08007144
 8000a94:	20000040 	.word	0x20000040
 8000a98:	08007150 	.word	0x08007150
 8000a9c:	ff8080ff 	.word	0xff8080ff

08000aa0 <LCD_State_PLAYERS>:



//displays the PLAYERx screen on the LCD
void LCD_State_PLAYERS(void){
 8000aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(BGCOLOR);
 8000aa4:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000aa8:	f001 fdc4 	bl	8002634 <BSP_LCD_Clear>
	switch(num_of_players){
 8000aac:	4bc5      	ldr	r3, [pc, #788]	; (8000dc4 <LCD_State_PLAYERS+0x324>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	f000 8157 	beq.w	8000d64 <LCD_State_PLAYERS+0x2c4>
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	f300 827a 	bgt.w	8000fb0 <LCD_State_PLAYERS+0x510>
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d003      	beq.n	8000ac8 <LCD_State_PLAYERS+0x28>
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	f000 8084 	beq.w	8000bce <LCD_State_PLAYERS+0x12e>
			BSP_LCD_SetFont(&Font16);
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);

}
}
 8000ac6:	e273      	b.n	8000fb0 <LCD_State_PLAYERS+0x510>
			switch(game_state){
 8000ac8:	4bbf      	ldr	r3, [pc, #764]	; (8000dc8 <LCD_State_PLAYERS+0x328>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d002      	beq.n	8000ad6 <LCD_State_PLAYERS+0x36>
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d01b      	beq.n	8000b0c <LCD_State_PLAYERS+0x6c>
					break;
 8000ad4:	e03b      	b.n	8000b4e <LCD_State_PLAYERS+0xae>
					BSP_LCD_Clear(BGCOLOR);
 8000ad6:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000ada:	f001 fdab 	bl	8002634 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ade:	48bb      	ldr	r0, [pc, #748]	; (8000dcc <LCD_State_PLAYERS+0x32c>)
 8000ae0:	f001 fd60 	bl	80025a4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2);
 8000ae4:	f001 fcd2 	bl	800248c <BSP_LCD_GetXSize>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	085b      	lsrs	r3, r3, #1
 8000aec:	b29c      	uxth	r4, r3
 8000aee:	f001 fcd9 	bl	80024a4 <BSP_LCD_GetYSize>
 8000af2:	4603      	mov	r3, r0
 8000af4:	085b      	lsrs	r3, r3, #1
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4622      	mov	r2, r4
 8000afa:	2100      	movs	r1, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	f001 fedb 	bl	80028b8 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b02:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000b06:	f001 fd4d 	bl	80025a4 <BSP_LCD_SetTextColor>
					break;
 8000b0a:	e020      	b.n	8000b4e <LCD_State_PLAYERS+0xae>
					BSP_LCD_Clear(BGCOLOR);
 8000b0c:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000b10:	f001 fd90 	bl	8002634 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000b14:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000b18:	f001 fd44 	bl	80025a4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2);
 8000b1c:	f001 fcb6 	bl	800248c <BSP_LCD_GetXSize>
 8000b20:	4603      	mov	r3, r0
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	b29c      	uxth	r4, r3
 8000b26:	f001 fcb1 	bl	800248c <BSP_LCD_GetXSize>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	b29d      	uxth	r5, r3
 8000b30:	f001 fcb8 	bl	80024a4 <BSP_LCD_GetYSize>
 8000b34:	4603      	mov	r3, r0
 8000b36:	085b      	lsrs	r3, r3, #1
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	462a      	mov	r2, r5
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4620      	mov	r0, r4
 8000b40:	f001 feba 	bl	80028b8 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b44:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000b48:	f001 fd2c 	bl	80025a4 <BSP_LCD_SetTextColor>
					break;
 8000b4c:	bf00      	nop
			BSP_LCD_SetFont(&Font20);
 8000b4e:	48a0      	ldr	r0, [pc, #640]	; (8000dd0 <LCD_State_PLAYERS+0x330>)
 8000b50:	f001 fd40 	bl	80025d4 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8000b54:	2303      	movs	r3, #3
 8000b56:	4a9f      	ldr	r2, [pc, #636]	; (8000dd4 <LCD_State_PLAYERS+0x334>)
 8000b58:	210a      	movs	r1, #10
 8000b5a:	200a      	movs	r0, #10
 8000b5c:	f001 fdd6 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8000b60:	2302      	movs	r3, #2
 8000b62:	4a9d      	ldr	r2, [pc, #628]	; (8000dd8 <LCD_State_PLAYERS+0x338>)
 8000b64:	210a      	movs	r1, #10
 8000b66:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000b6a:	f001 fdcf 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetFont(&Font24);
 8000b6e:	489b      	ldr	r0, [pc, #620]	; (8000ddc <LCD_State_PLAYERS+0x33c>)
 8000b70:	f001 fd30 	bl	80025d4 <BSP_LCD_SetFont>
			sprintf(mLs_of_players_print, "%ld mL", Players[0].mL);
 8000b74:	4b9a      	ldr	r3, [pc, #616]	; (8000de0 <LCD_State_PLAYERS+0x340>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	499a      	ldr	r1, [pc, #616]	; (8000de4 <LCD_State_PLAYERS+0x344>)
 8000b7c:	489a      	ldr	r0, [pc, #616]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000b7e:	f005 fe51 	bl	8006824 <siprintf>
			BSP_LCD_DisplayStringAt(10, 60,(uint8_t *)mLs_of_players_print,LEFT_MODE);
 8000b82:	2303      	movs	r3, #3
 8000b84:	4a98      	ldr	r2, [pc, #608]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000b86:	213c      	movs	r1, #60	; 0x3c
 8000b88:	200a      	movs	r0, #10
 8000b8a:	f001 fdbf 	bl	800270c <BSP_LCD_DisplayStringAt>
			sprintf(mLs_of_players_print, "%ld mL", Players[1].mL);
 8000b8e:	4b94      	ldr	r3, [pc, #592]	; (8000de0 <LCD_State_PLAYERS+0x340>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4993      	ldr	r1, [pc, #588]	; (8000de4 <LCD_State_PLAYERS+0x344>)
 8000b96:	4894      	ldr	r0, [pc, #592]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000b98:	f005 fe44 	bl	8006824 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 60,(uint8_t *)mLs_of_players_print, RIGHT_MODE);
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	4a92      	ldr	r2, [pc, #584]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000ba0:	213c      	movs	r1, #60	; 0x3c
 8000ba2:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000ba6:	f001 fdb1 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetFont(&Font16);
 8000baa:	4890      	ldr	r0, [pc, #576]	; (8000dec <LCD_State_PLAYERS+0x34c>)
 8000bac:	f001 fd12 	bl	80025d4 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4a8f      	ldr	r2, [pc, #572]	; (8000df0 <LCD_State_PLAYERS+0x350>)
 8000bb4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f001 fda7 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	4a8c      	ldr	r2, [pc, #560]	; (8000df4 <LCD_State_PLAYERS+0x354>)
 8000bc2:	f240 1127 	movw	r1, #295	; 0x127
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f001 fda0 	bl	800270c <BSP_LCD_DisplayStringAt>
			break;
 8000bcc:	e1f0      	b.n	8000fb0 <LCD_State_PLAYERS+0x510>
			switch(game_state){
 8000bce:	4b7e      	ldr	r3, [pc, #504]	; (8000dc8 <LCD_State_PLAYERS+0x328>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d046      	beq.n	8000c64 <LCD_State_PLAYERS+0x1c4>
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	dc70      	bgt.n	8000cbc <LCD_State_PLAYERS+0x21c>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d002      	beq.n	8000be4 <LCD_State_PLAYERS+0x144>
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d01d      	beq.n	8000c1e <LCD_State_PLAYERS+0x17e>
					break;
 8000be2:	e06b      	b.n	8000cbc <LCD_State_PLAYERS+0x21c>
					BSP_LCD_Clear(BGCOLOR);
 8000be4:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000be8:	f001 fd24 	bl	8002634 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000bec:	4877      	ldr	r0, [pc, #476]	; (8000dcc <LCD_State_PLAYERS+0x32c>)
 8000bee:	f001 fcd9 	bl	80025a4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000bf2:	f001 fc4b 	bl	800248c <BSP_LCD_GetXSize>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	085b      	lsrs	r3, r3, #1
 8000bfa:	b29c      	uxth	r4, r3
 8000bfc:	f001 fc52 	bl	80024a4 <BSP_LCD_GetYSize>
 8000c00:	4603      	mov	r3, r0
 8000c02:	085b      	lsrs	r3, r3, #1
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	3b14      	subs	r3, #20
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f001 fe52 	bl	80028b8 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c14:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c18:	f001 fcc4 	bl	80025a4 <BSP_LCD_SetTextColor>
					break;
 8000c1c:	e04f      	b.n	8000cbe <LCD_State_PLAYERS+0x21e>
					BSP_LCD_Clear(BGCOLOR);
 8000c1e:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000c22:	f001 fd07 	bl	8002634 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000c26:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000c2a:	f001 fcbb 	bl	80025a4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000c2e:	f001 fc2d 	bl	800248c <BSP_LCD_GetXSize>
 8000c32:	4603      	mov	r3, r0
 8000c34:	085b      	lsrs	r3, r3, #1
 8000c36:	b29c      	uxth	r4, r3
 8000c38:	f001 fc28 	bl	800248c <BSP_LCD_GetXSize>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	085b      	lsrs	r3, r3, #1
 8000c40:	b29d      	uxth	r5, r3
 8000c42:	f001 fc2f 	bl	80024a4 <BSP_LCD_GetYSize>
 8000c46:	4603      	mov	r3, r0
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	3b14      	subs	r3, #20
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	462a      	mov	r2, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	4620      	mov	r0, r4
 8000c56:	f001 fe2f 	bl	80028b8 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c5a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c5e:	f001 fca1 	bl	80025a4 <BSP_LCD_SetTextColor>
					break;
 8000c62:	e02c      	b.n	8000cbe <LCD_State_PLAYERS+0x21e>
					BSP_LCD_Clear(BGCOLOR);
 8000c64:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000c68:	f001 fce4 	bl	8002634 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000c6c:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8000c70:	f001 fc98 	bl	80025a4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2-60,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-25);
 8000c74:	f001 fc0a 	bl	800248c <BSP_LCD_GetXSize>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	085b      	lsrs	r3, r3, #1
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3b3c      	subs	r3, #60	; 0x3c
 8000c80:	b29c      	uxth	r4, r3
 8000c82:	f001 fc0f 	bl	80024a4 <BSP_LCD_GetYSize>
 8000c86:	4603      	mov	r3, r0
 8000c88:	085b      	lsrs	r3, r3, #1
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	3b14      	subs	r3, #20
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	f001 fbfc 	bl	800248c <BSP_LCD_GetXSize>
 8000c94:	4603      	mov	r3, r0
 8000c96:	085b      	lsrs	r3, r3, #1
 8000c98:	b29e      	uxth	r6, r3
 8000c9a:	f001 fc03 	bl	80024a4 <BSP_LCD_GetYSize>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	085b      	lsrs	r3, r3, #1
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	3b19      	subs	r3, #25
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4632      	mov	r2, r6
 8000caa:	4629      	mov	r1, r5
 8000cac:	4620      	mov	r0, r4
 8000cae:	f001 fe03 	bl	80028b8 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000cb2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000cb6:	f001 fc75 	bl	80025a4 <BSP_LCD_SetTextColor>
					break;
 8000cba:	e000      	b.n	8000cbe <LCD_State_PLAYERS+0x21e>
					break;
 8000cbc:	bf00      	nop
			BSP_LCD_SetFont(&Font20);
 8000cbe:	4844      	ldr	r0, [pc, #272]	; (8000dd0 <LCD_State_PLAYERS+0x330>)
 8000cc0:	f001 fc88 	bl	80025d4 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	4a43      	ldr	r2, [pc, #268]	; (8000dd4 <LCD_State_PLAYERS+0x334>)
 8000cc8:	210a      	movs	r1, #10
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f001 fd1e 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	4a41      	ldr	r2, [pc, #260]	; (8000dd8 <LCD_State_PLAYERS+0x338>)
 8000cd4:	210a      	movs	r1, #10
 8000cd6:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000cda:	f001 fd17 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)"igrac 3", CENTER_MODE);
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4a45      	ldr	r2, [pc, #276]	; (8000df8 <LCD_State_PLAYERS+0x358>)
 8000ce2:	2196      	movs	r1, #150	; 0x96
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f001 fd11 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetFont(&Font24);
 8000cea:	483c      	ldr	r0, [pc, #240]	; (8000ddc <LCD_State_PLAYERS+0x33c>)
 8000cec:	f001 fc72 	bl	80025d4 <BSP_LCD_SetFont>
			sprintf(mLs_of_players_print, "%ld mL", Players[0].mL);
 8000cf0:	4b3b      	ldr	r3, [pc, #236]	; (8000de0 <LCD_State_PLAYERS+0x340>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	493b      	ldr	r1, [pc, #236]	; (8000de4 <LCD_State_PLAYERS+0x344>)
 8000cf8:	483b      	ldr	r0, [pc, #236]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000cfa:	f005 fd93 	bl	8006824 <siprintf>
			BSP_LCD_DisplayStringAt(10, 60,(uint8_t *)mLs_of_players_print,LEFT_MODE);
 8000cfe:	2303      	movs	r3, #3
 8000d00:	4a39      	ldr	r2, [pc, #228]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000d02:	213c      	movs	r1, #60	; 0x3c
 8000d04:	200a      	movs	r0, #10
 8000d06:	f001 fd01 	bl	800270c <BSP_LCD_DisplayStringAt>
			sprintf(mLs_of_players_print, "%ld mL", Players[1].mL);
 8000d0a:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <LCD_State_PLAYERS+0x340>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4934      	ldr	r1, [pc, #208]	; (8000de4 <LCD_State_PLAYERS+0x344>)
 8000d12:	4835      	ldr	r0, [pc, #212]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000d14:	f005 fd86 	bl	8006824 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 60,(uint8_t *)mLs_of_players_print, RIGHT_MODE);
 8000d18:	2302      	movs	r3, #2
 8000d1a:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000d1c:	213c      	movs	r1, #60	; 0x3c
 8000d1e:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000d22:	f001 fcf3 	bl	800270c <BSP_LCD_DisplayStringAt>
			sprintf(mLs_of_players_print, "%ld mL", Players[2].mL);
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <LCD_State_PLAYERS+0x340>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	492d      	ldr	r1, [pc, #180]	; (8000de4 <LCD_State_PLAYERS+0x344>)
 8000d2e:	482e      	ldr	r0, [pc, #184]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000d30:	f005 fd78 	bl	8006824 <siprintf>
			BSP_LCD_DisplayStringAt(0, 200,(uint8_t *)mLs_of_players_print, CENTER_MODE);
 8000d34:	2301      	movs	r3, #1
 8000d36:	4a2c      	ldr	r2, [pc, #176]	; (8000de8 <LCD_State_PLAYERS+0x348>)
 8000d38:	21c8      	movs	r1, #200	; 0xc8
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f001 fce6 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetFont(&Font16);
 8000d40:	482a      	ldr	r0, [pc, #168]	; (8000dec <LCD_State_PLAYERS+0x34c>)
 8000d42:	f001 fc47 	bl	80025d4 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 8000d46:	2301      	movs	r3, #1
 8000d48:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <LCD_State_PLAYERS+0x350>)
 8000d4a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f001 fcdc 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8000d54:	2301      	movs	r3, #1
 8000d56:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <LCD_State_PLAYERS+0x354>)
 8000d58:	f240 1127 	movw	r1, #295	; 0x127
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f001 fcd5 	bl	800270c <BSP_LCD_DisplayStringAt>
			break;
 8000d62:	e125      	b.n	8000fb0 <LCD_State_PLAYERS+0x510>
			switch(game_state){
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <LCD_State_PLAYERS+0x328>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3b02      	subs	r3, #2
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	f200 80b7 	bhi.w	8000ede <LCD_State_PLAYERS+0x43e>
 8000d70:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <LCD_State_PLAYERS+0x2d8>)
 8000d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d76:	bf00      	nop
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000dfd 	.word	0x08000dfd
 8000d80:	08000e43 	.word	0x08000e43
 8000d84:	08000e8d 	.word	0x08000e8d
					BSP_LCD_Clear(BGCOLOR);
 8000d88:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000d8c:	f001 fc52 	bl	8002634 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000d90:	480e      	ldr	r0, [pc, #56]	; (8000dcc <LCD_State_PLAYERS+0x32c>)
 8000d92:	f001 fc07 	bl	80025a4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000d96:	f001 fb79 	bl	800248c <BSP_LCD_GetXSize>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	085b      	lsrs	r3, r3, #1
 8000d9e:	b29c      	uxth	r4, r3
 8000da0:	f001 fb80 	bl	80024a4 <BSP_LCD_GetYSize>
 8000da4:	4603      	mov	r3, r0
 8000da6:	085b      	lsrs	r3, r3, #1
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	3b14      	subs	r3, #20
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4622      	mov	r2, r4
 8000db0:	2100      	movs	r1, #0
 8000db2:	2000      	movs	r0, #0
 8000db4:	f001 fd80 	bl	80028b8 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000db8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000dbc:	f001 fbf2 	bl	80025a4 <BSP_LCD_SetTextColor>
					break;
 8000dc0:	e08e      	b.n	8000ee0 <LCD_State_PLAYERS+0x440>
 8000dc2:	bf00      	nop
 8000dc4:	200002b0 	.word	0x200002b0
 8000dc8:	200002af 	.word	0x200002af
 8000dcc:	ffff0000 	.word	0xffff0000
 8000dd0:	20000048 	.word	0x20000048
 8000dd4:	08007160 	.word	0x08007160
 8000dd8:	08007168 	.word	0x08007168
 8000ddc:	20000040 	.word	0x20000040
 8000de0:	200002d8 	.word	0x200002d8
 8000de4:	08007170 	.word	0x08007170
 8000de8:	200002a8 	.word	0x200002a8
 8000dec:	20000050 	.word	0x20000050
 8000df0:	08007178 	.word	0x08007178
 8000df4:	08007188 	.word	0x08007188
 8000df8:	08007198 	.word	0x08007198
					BSP_LCD_Clear(BGCOLOR);
 8000dfc:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000e00:	f001 fc18 	bl	8002634 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000e04:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000e08:	f001 fbcc 	bl	80025a4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,0,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000e0c:	f001 fb3e 	bl	800248c <BSP_LCD_GetXSize>
 8000e10:	4603      	mov	r3, r0
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	b29c      	uxth	r4, r3
 8000e16:	f001 fb39 	bl	800248c <BSP_LCD_GetXSize>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	085b      	lsrs	r3, r3, #1
 8000e1e:	b29d      	uxth	r5, r3
 8000e20:	f001 fb40 	bl	80024a4 <BSP_LCD_GetYSize>
 8000e24:	4603      	mov	r3, r0
 8000e26:	085b      	lsrs	r3, r3, #1
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	3b14      	subs	r3, #20
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	462a      	mov	r2, r5
 8000e30:	2100      	movs	r1, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f001 fd40 	bl	80028b8 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e38:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e3c:	f001 fbb2 	bl	80025a4 <BSP_LCD_SetTextColor>
					break;
 8000e40:	e04e      	b.n	8000ee0 <LCD_State_PLAYERS+0x440>
					BSP_LCD_Clear(BGCOLOR);
 8000e42:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000e46:	f001 fbf5 	bl	8002634 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000e4a:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8000e4e:	f001 fba9 	bl	80025a4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(0,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000e52:	f001 fb27 	bl	80024a4 <BSP_LCD_GetYSize>
 8000e56:	4603      	mov	r3, r0
 8000e58:	085b      	lsrs	r3, r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	3b14      	subs	r3, #20
 8000e5e:	b29c      	uxth	r4, r3
 8000e60:	f001 fb14 	bl	800248c <BSP_LCD_GetXSize>
 8000e64:	4603      	mov	r3, r0
 8000e66:	085b      	lsrs	r3, r3, #1
 8000e68:	b29d      	uxth	r5, r3
 8000e6a:	f001 fb1b 	bl	80024a4 <BSP_LCD_GetYSize>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	085b      	lsrs	r3, r3, #1
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	3b14      	subs	r3, #20
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	462a      	mov	r2, r5
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f001 fd1b 	bl	80028b8 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e82:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e86:	f001 fb8d 	bl	80025a4 <BSP_LCD_SetTextColor>
					break;
 8000e8a:	e029      	b.n	8000ee0 <LCD_State_PLAYERS+0x440>
					BSP_LCD_Clear(BGCOLOR);
 8000e8c:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8000e90:	f001 fbd0 	bl	8002634 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8000e94:	4847      	ldr	r0, [pc, #284]	; (8000fb4 <LCD_State_PLAYERS+0x514>)
 8000e96:	f001 fb85 	bl	80025a4 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(BSP_LCD_GetXSize()/2,BSP_LCD_GetYSize()/2-20,BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize()/2-20);
 8000e9a:	f001 faf7 	bl	800248c <BSP_LCD_GetXSize>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	085b      	lsrs	r3, r3, #1
 8000ea2:	b29c      	uxth	r4, r3
 8000ea4:	f001 fafe 	bl	80024a4 <BSP_LCD_GetYSize>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	085b      	lsrs	r3, r3, #1
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	3b14      	subs	r3, #20
 8000eb0:	b29d      	uxth	r5, r3
 8000eb2:	f001 faeb 	bl	800248c <BSP_LCD_GetXSize>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	085b      	lsrs	r3, r3, #1
 8000eba:	b29e      	uxth	r6, r3
 8000ebc:	f001 faf2 	bl	80024a4 <BSP_LCD_GetYSize>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	085b      	lsrs	r3, r3, #1
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	3b14      	subs	r3, #20
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4632      	mov	r2, r6
 8000ecc:	4629      	mov	r1, r5
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f001 fcf2 	bl	80028b8 <BSP_LCD_FillRect>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000ed4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ed8:	f001 fb64 	bl	80025a4 <BSP_LCD_SetTextColor>
					break;
 8000edc:	e000      	b.n	8000ee0 <LCD_State_PLAYERS+0x440>
					break;
 8000ede:	bf00      	nop
			BSP_LCD_SetFont(&Font20);
 8000ee0:	4835      	ldr	r0, [pc, #212]	; (8000fb8 <LCD_State_PLAYERS+0x518>)
 8000ee2:	f001 fb77 	bl	80025d4 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"igrac 1", LEFT_MODE);
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	4a34      	ldr	r2, [pc, #208]	; (8000fbc <LCD_State_PLAYERS+0x51c>)
 8000eea:	210a      	movs	r1, #10
 8000eec:	200a      	movs	r0, #10
 8000eee:	f001 fc0d 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 10, (uint8_t *)"igrac 2", RIGHT_MODE);
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <LCD_State_PLAYERS+0x520>)
 8000ef6:	210a      	movs	r1, #10
 8000ef8:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000efc:	f001 fc06 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(10, 150, (uint8_t *)"igrac 3", LEFT_MODE);
 8000f00:	2303      	movs	r3, #3
 8000f02:	4a30      	ldr	r2, [pc, #192]	; (8000fc4 <LCD_State_PLAYERS+0x524>)
 8000f04:	2196      	movs	r1, #150	; 0x96
 8000f06:	200a      	movs	r0, #10
 8000f08:	f001 fc00 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(-10, 150, (uint8_t *)"igrac 4", RIGHT_MODE);
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	4a2e      	ldr	r2, [pc, #184]	; (8000fc8 <LCD_State_PLAYERS+0x528>)
 8000f10:	2196      	movs	r1, #150	; 0x96
 8000f12:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000f16:	f001 fbf9 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetFont(&Font24);
 8000f1a:	482c      	ldr	r0, [pc, #176]	; (8000fcc <LCD_State_PLAYERS+0x52c>)
 8000f1c:	f001 fb5a 	bl	80025d4 <BSP_LCD_SetFont>
			sprintf(mLs_of_players_print, "%ld mL", Players[0].mL);
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <LCD_State_PLAYERS+0x530>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	461a      	mov	r2, r3
 8000f26:	492b      	ldr	r1, [pc, #172]	; (8000fd4 <LCD_State_PLAYERS+0x534>)
 8000f28:	482b      	ldr	r0, [pc, #172]	; (8000fd8 <LCD_State_PLAYERS+0x538>)
 8000f2a:	f005 fc7b 	bl	8006824 <siprintf>
			BSP_LCD_DisplayStringAt(10, 60,(uint8_t *)mLs_of_players_print,LEFT_MODE);
 8000f2e:	2303      	movs	r3, #3
 8000f30:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <LCD_State_PLAYERS+0x538>)
 8000f32:	213c      	movs	r1, #60	; 0x3c
 8000f34:	200a      	movs	r0, #10
 8000f36:	f001 fbe9 	bl	800270c <BSP_LCD_DisplayStringAt>
			sprintf(mLs_of_players_print, "%ld mL", Players[1].mL);
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <LCD_State_PLAYERS+0x530>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4924      	ldr	r1, [pc, #144]	; (8000fd4 <LCD_State_PLAYERS+0x534>)
 8000f42:	4825      	ldr	r0, [pc, #148]	; (8000fd8 <LCD_State_PLAYERS+0x538>)
 8000f44:	f005 fc6e 	bl	8006824 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 60,(uint8_t *)mLs_of_players_print, RIGHT_MODE);
 8000f48:	2302      	movs	r3, #2
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <LCD_State_PLAYERS+0x538>)
 8000f4c:	213c      	movs	r1, #60	; 0x3c
 8000f4e:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000f52:	f001 fbdb 	bl	800270c <BSP_LCD_DisplayStringAt>
			sprintf(mLs_of_players_print, "%ld mL", Players[2].mL);
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <LCD_State_PLAYERS+0x530>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	491d      	ldr	r1, [pc, #116]	; (8000fd4 <LCD_State_PLAYERS+0x534>)
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <LCD_State_PLAYERS+0x538>)
 8000f60:	f005 fc60 	bl	8006824 <siprintf>
			BSP_LCD_DisplayStringAt(10, 200,(uint8_t *)mLs_of_players_print, RIGHT_MODE);
 8000f64:	2302      	movs	r3, #2
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <LCD_State_PLAYERS+0x538>)
 8000f68:	21c8      	movs	r1, #200	; 0xc8
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f001 fbce 	bl	800270c <BSP_LCD_DisplayStringAt>
			sprintf(mLs_of_players_print, "%ld mL", Players[3].mL);
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <LCD_State_PLAYERS+0x530>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4917      	ldr	r1, [pc, #92]	; (8000fd4 <LCD_State_PLAYERS+0x534>)
 8000f78:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <LCD_State_PLAYERS+0x538>)
 8000f7a:	f005 fc53 	bl	8006824 <siprintf>
			BSP_LCD_DisplayStringAt(-10, 200,(uint8_t *)mLs_of_players_print, LEFT_MODE);
 8000f7e:	2303      	movs	r3, #3
 8000f80:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <LCD_State_PLAYERS+0x538>)
 8000f82:	21c8      	movs	r1, #200	; 0xc8
 8000f84:	f64f 70f6 	movw	r0, #65526	; 0xfff6
 8000f88:	f001 fbc0 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetFont(&Font16);
 8000f8c:	4813      	ldr	r0, [pc, #76]	; (8000fdc <LCD_State_PLAYERS+0x53c>)
 8000f8e:	f001 fb21 	bl	80025d4 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 280,(uint8_t *)"pritisni toci", CENTER_MODE);
 8000f92:	2301      	movs	r3, #1
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <LCD_State_PLAYERS+0x540>)
 8000f96:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f001 fbb6 	bl	800270c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 295,(uint8_t *)"za kraj bacanja", CENTER_MODE);
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <LCD_State_PLAYERS+0x544>)
 8000fa4:	f240 1127 	movw	r1, #295	; 0x127
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f001 fbaf 	bl	800270c <BSP_LCD_DisplayStringAt>
}
 8000fae:	e7ff      	b.n	8000fb0 <LCD_State_PLAYERS+0x510>
 8000fb0:	bf00      	nop
 8000fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb4:	ffffa500 	.word	0xffffa500
 8000fb8:	20000048 	.word	0x20000048
 8000fbc:	08007160 	.word	0x08007160
 8000fc0:	08007168 	.word	0x08007168
 8000fc4:	08007198 	.word	0x08007198
 8000fc8:	080071a0 	.word	0x080071a0
 8000fcc:	20000040 	.word	0x20000040
 8000fd0:	200002d8 	.word	0x200002d8
 8000fd4:	08007170 	.word	0x08007170
 8000fd8:	200002a8 	.word	0x200002a8
 8000fdc:	20000050 	.word	0x20000050
 8000fe0:	08007178 	.word	0x08007178
 8000fe4:	08007188 	.word	0x08007188

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f002 f885 	bl	80030fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f86d 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 fa81 	bl	80014fc <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000ffa:	f000 f8d9 	bl	80011b0 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8000ffe:	f000 f909 	bl	8001214 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001002:	f000 f947 	bl	8001294 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001006:	f000 f9f5 	bl	80013f4 <MX_SPI5_Init>
  MX_FMC_Init();
 800100a:	f000 fa29 	bl	8001460 <MX_FMC_Init>

  //uint32_t x= BSP_LCD_GetXSize();
  //uint32_t y= BSP_LCD_GetYSize();
  //BSP_LCD_DrawRect(x/2, y/2, x/4,y/4 );

  LCD_Init();
 800100e:	f7ff fbe3 	bl	80007d8 <LCD_Init>

  MDL_LCD_Bttn_Pressed(START);
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fab8 	bl	8000588 <MDL_LCD_Bttn_Pressed>

  MDL_LCD_Hit_Update(200);
 8001018:	20c8      	movs	r0, #200	; 0xc8
 800101a:	f7ff fb5d 	bl	80006d8 <MDL_LCD_Hit_Update>

  MDL_LCD_Bttn_Pressed(PLUS);
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fab2 	bl	8000588 <MDL_LCD_Bttn_Pressed>
  //MDL_LCD_Bttn_Pressed(PLUS);
  for(int i=0; i<2; i++){
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	e04d      	b.n	80010c6 <main+0xde>
	  if(i==1) MDL_LCD_Bttn_Pressed(PLUS);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d102      	bne.n	8001036 <main+0x4e>
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff faa9 	bl	8000588 <MDL_LCD_Bttn_Pressed>
	  if(i==2) MDL_LCD_Bttn_Pressed(PLUS);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d102      	bne.n	8001042 <main+0x5a>
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff faa3 	bl	8000588 <MDL_LCD_Bttn_Pressed>
	  MDL_LCD_Hit_Update(200);
 8001042:	20c8      	movs	r0, #200	; 0xc8
 8001044:	f7ff fb48 	bl	80006d8 <MDL_LCD_Hit_Update>
	  MDL_LCD_Bttn_Pressed(START);
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fa9d 	bl	8000588 <MDL_LCD_Bttn_Pressed>
	  MDL_LCD_Hit_Update(200);
 800104e:	20c8      	movs	r0, #200	; 0xc8
 8001050:	f7ff fb42 	bl	80006d8 <MDL_LCD_Hit_Update>
	  HAL_Delay(1000);
 8001054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001058:	f002 f8c2 	bl	80031e0 <HAL_Delay>
	  MDL_LCD_Hit_Update(300);
 800105c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001060:	f7ff fb3a 	bl	80006d8 <MDL_LCD_Hit_Update>
	  HAL_Delay(1000);
 8001064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001068:	f002 f8ba 	bl	80031e0 <HAL_Delay>
	  MDL_LCD_Bttn_Pressed(TOCI);
 800106c:	2003      	movs	r0, #3
 800106e:	f7ff fa8b 	bl	8000588 <MDL_LCD_Bttn_Pressed>
	  HAL_Delay(1000);
 8001072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001076:	f002 f8b3 	bl	80031e0 <HAL_Delay>
	  MDL_LCD_Hit_Update(150);
 800107a:	2096      	movs	r0, #150	; 0x96
 800107c:	f7ff fb2c 	bl	80006d8 <MDL_LCD_Hit_Update>
	  HAL_Delay(1000);
 8001080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001084:	f002 f8ac 	bl	80031e0 <HAL_Delay>
	  MDL_LCD_Bttn_Pressed(TOCI);
 8001088:	2003      	movs	r0, #3
 800108a:	f7ff fa7d 	bl	8000588 <MDL_LCD_Bttn_Pressed>
	  HAL_Delay(1000);
 800108e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001092:	f002 f8a5 	bl	80031e0 <HAL_Delay>
	  MDL_LCD_Hit_Update(50);
 8001096:	2032      	movs	r0, #50	; 0x32
 8001098:	f7ff fb1e 	bl	80006d8 <MDL_LCD_Hit_Update>
	  HAL_Delay(1000);
 800109c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a0:	f002 f89e 	bl	80031e0 <HAL_Delay>
	  MDL_LCD_Bttn_Pressed(TOCI);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f7ff fa6f 	bl	8000588 <MDL_LCD_Bttn_Pressed>
	  MDL_LCD_Hit_Update(300);
 80010aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010ae:	f7ff fb13 	bl	80006d8 <MDL_LCD_Hit_Update>
	  HAL_Delay(1000);
 80010b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b6:	f002 f893 	bl	80031e0 <HAL_Delay>
	  MDL_LCD_Hit_Update(200);
 80010ba:	20c8      	movs	r0, #200	; 0xc8
 80010bc:	f7ff fb0c 	bl	80006d8 <MDL_LCD_Hit_Update>
  for(int i=0; i<2; i++){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	ddae      	ble.n	800102a <main+0x42>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <main+0xe4>
	...

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b094      	sub	sp, #80	; 0x50
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	2230      	movs	r2, #48	; 0x30
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fb98 	bl	8006814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <SystemClock_Config+0xd8>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <SystemClock_Config+0xd8>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	; 0x40
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <SystemClock_Config+0xd8>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <SystemClock_Config+0xdc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a24      	ldr	r2, [pc, #144]	; (80011ac <SystemClock_Config+0xdc>)
 800111a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <SystemClock_Config+0xdc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2310      	movs	r3, #16
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113c:	2300      	movs	r3, #0
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001140:	2308      	movs	r3, #8
 8001142:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001144:	23b4      	movs	r3, #180	; 0xb4
 8001146:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800114c:	2307      	movs	r3, #7
 800114e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fd75 	bl	8004c44 <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001160:	f000 fa52 	bl	8001608 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001164:	f003 fd1e 	bl	8004ba4 <HAL_PWREx_EnableOverDrive>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800116e:	f000 fa4b 	bl	8001608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800117e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001182:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2105      	movs	r1, #5
 8001190:	4618      	mov	r0, r3
 8001192:	f003 ffcf 	bl	8005134 <HAL_RCC_ClockConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800119c:	f000 fa34 	bl	8001608 <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3750      	adds	r7, #80	; 0x50
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <MX_DMA2D_Init+0x60>)
 80011b8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011e6:	f002 faef 	bl	80037c8 <HAL_DMA2D_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80011f0:	f000 fa0a 	bl	8001608 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011f4:	2101      	movs	r1, #1
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_DMA2D_Init+0x5c>)
 80011f8:	f002 fc44 	bl	8003a84 <HAL_DMA2D_ConfigLayer>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001202:	f000 fa01 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000044c 	.word	0x2000044c
 8001210:	4002b000 	.word	0x4002b000

08001214 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_I2C3_Init+0x74>)
 800121a:	4a1c      	ldr	r2, [pc, #112]	; (800128c <MX_I2C3_Init+0x78>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_I2C3_Init+0x74>)
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <MX_I2C3_Init+0x7c>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_I2C3_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_I2C3_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_I2C3_Init+0x74>)
 8001232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_I2C3_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_I2C3_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_I2C3_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_I2C3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_I2C3_Init+0x74>)
 8001252:	f003 f817 	bl	8004284 <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800125c:	f000 f9d4 	bl	8001608 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <MX_I2C3_Init+0x74>)
 8001264:	f003 f952 	bl	800450c <HAL_I2CEx_ConfigAnalogFilter>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800126e:	f000 f9cb 	bl	8001608 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001272:	2100      	movs	r1, #0
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_I2C3_Init+0x74>)
 8001276:	f003 f985 	bl	8004584 <HAL_I2CEx_ConfigDigitalFilter>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001280:	f000 f9c2 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002f8 	.word	0x200002f8
 800128c:	40005c00 	.word	0x40005c00
 8001290:	000186a0 	.word	0x000186a0

08001294 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b09a      	sub	sp, #104	; 0x68
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800129a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800129e:	2234      	movs	r2, #52	; 0x34
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f005 fab6 	bl	8006814 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2234      	movs	r2, #52	; 0x34
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 fab0 	bl	8006814 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012b4:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <MX_LTDC_Init+0x158>)
 80012b6:	4a4e      	ldr	r2, [pc, #312]	; (80013f0 <MX_LTDC_Init+0x15c>)
 80012b8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012ba:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <MX_LTDC_Init+0x158>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <MX_LTDC_Init+0x158>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <MX_LTDC_Init+0x158>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012cc:	4b47      	ldr	r3, [pc, #284]	; (80013ec <MX_LTDC_Init+0x158>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <MX_LTDC_Init+0x158>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80012d8:	4b44      	ldr	r3, [pc, #272]	; (80013ec <MX_LTDC_Init+0x158>)
 80012da:	2203      	movs	r2, #3
 80012dc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <MX_LTDC_Init+0x158>)
 80012e0:	220e      	movs	r2, #14
 80012e2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80012e4:	4b41      	ldr	r3, [pc, #260]	; (80013ec <MX_LTDC_Init+0x158>)
 80012e6:	2205      	movs	r2, #5
 80012e8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <MX_LTDC_Init+0x158>)
 80012ec:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <MX_LTDC_Init+0x158>)
 80012f4:	22f5      	movs	r2, #245	; 0xf5
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 80012f8:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_LTDC_Init+0x158>)
 80012fa:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8001300:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <MX_LTDC_Init+0x158>)
 8001302:	22f7      	movs	r2, #247	; 0xf7
 8001304:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001306:	4b39      	ldr	r3, [pc, #228]	; (80013ec <MX_LTDC_Init+0x158>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <MX_LTDC_Init+0x158>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001316:	4b35      	ldr	r3, [pc, #212]	; (80013ec <MX_LTDC_Init+0x158>)
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800131e:	4833      	ldr	r0, [pc, #204]	; (80013ec <MX_LTDC_Init+0x158>)
 8001320:	f003 f970 	bl	8004604 <HAL_LTDC_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 800132a:	f000 f96d 	bl	8001608 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800133e:	2300      	movs	r3, #0
 8001340:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800134a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001350:	2305      	movs	r3, #5
 8001352:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001372:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001376:	2200      	movs	r2, #0
 8001378:	4619      	mov	r1, r3
 800137a:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_LTDC_Init+0x158>)
 800137c:	f003 fa12 	bl	80047a4 <HAL_LTDC_ConfigLayer>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 8001386:	f000 f93f 	bl	8001608 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013aa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013ac:	2305      	movs	r3, #5
 80013ae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_LTDC_Init+0x158>)
 80013d6:	f003 f9e5 	bl	80047a4 <HAL_LTDC_ConfigLayer>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 80013e0:	f000 f912 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3768      	adds	r7, #104	; 0x68
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200003a4 	.word	0x200003a4
 80013f0:	40016800 	.word	0x40016800

080013f4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_SPI5_Init+0x64>)
 80013fa:	4a18      	ldr	r2, [pc, #96]	; (800145c <MX_SPI5_Init+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_SPI5_Init+0x64>)
 8001400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001404:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_SPI5_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_SPI5_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_SPI5_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_SPI5_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_SPI5_Init+0x64>)
 8001420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001424:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_SPI5_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_SPI5_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_SPI5_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_SPI5_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_SPI5_Init+0x64>)
 8001440:	220a      	movs	r2, #10
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_SPI5_Init+0x64>)
 8001446:	f004 fa9a 	bl	800597e <HAL_SPI_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001450:	f000 f8da 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000034c 	.word	0x2000034c
 800145c:	40015000 	.word	0x40015000

08001460 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
 8001474:	615a      	str	r2, [r3, #20]
 8001476:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_FMC_Init+0x94>)
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <MX_FMC_Init+0x98>)
 800147c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_FMC_Init+0x94>)
 8001480:	2201      	movs	r2, #1
 8001482:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_FMC_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_FMC_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_FMC_Init+0x94>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_FMC_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_FMC_Init+0x94>)
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_FMC_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_FMC_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_FMC_Init+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_FMC_Init+0x94>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80014be:	2310      	movs	r3, #16
 80014c0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80014c2:	2310      	movs	r3, #16
 80014c4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80014c6:	2310      	movs	r3, #16
 80014c8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80014ca:	2310      	movs	r3, #16
 80014cc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80014ce:	2310      	movs	r3, #16
 80014d0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80014d2:	2310      	movs	r3, #16
 80014d4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_FMC_Init+0x94>)
 80014dc:	f004 f9d0 	bl	8005880 <HAL_SDRAM_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80014e6:	f000 f88f 	bl	8001608 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000048c 	.word	0x2000048c
 80014f8:	a0000140 	.word	0xa0000140

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <MX_GPIO_Init+0x104>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a39      	ldr	r2, [pc, #228]	; (8001600 <MX_GPIO_Init+0x104>)
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <MX_GPIO_Init+0x104>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <MX_GPIO_Init+0x104>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <MX_GPIO_Init+0x104>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <MX_GPIO_Init+0x104>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_GPIO_Init+0x104>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <MX_GPIO_Init+0x104>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_GPIO_Init+0x104>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <MX_GPIO_Init+0x104>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <MX_GPIO_Init+0x104>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <MX_GPIO_Init+0x104>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_GPIO_Init+0x104>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <MX_GPIO_Init+0x104>)
 800158c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_GPIO_Init+0x104>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_GPIO_Init+0x104>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <MX_GPIO_Init+0x104>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_GPIO_Init+0x104>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <MX_GPIO_Init+0x104>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <MX_GPIO_Init+0x104>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <MX_GPIO_Init+0x104>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e8:	2307      	movs	r3, #7
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_GPIO_Init+0x108>)
 80015f4:	f002 fb74 	bl	8003ce0 <HAL_GPIO_Init>

}
 80015f8:	bf00      	nop
 80015fa:	3730      	adds	r7, #48	; 0x30
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	e7fe      	b.n	8001610 <Error_Handler+0x8>
	...

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <HAL_MspInit+0x4c>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_MspInit+0x4c>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_MspInit+0x4c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001652:	2007      	movs	r0, #7
 8001654:	f001 feb8 	bl	80033c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <HAL_DMA2D_MspInit+0x3c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10d      	bne.n	8001692 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_DMA2D_MspInit+0x40>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <HAL_DMA2D_MspInit+0x40>)
 8001680:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_DMA2D_MspInit+0x40>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	4002b000 	.word	0x4002b000
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a29      	ldr	r2, [pc, #164]	; (800176c <HAL_I2C_MspInit+0xc4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d14b      	bne.n	8001762 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <HAL_I2C_MspInit+0xc8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a27      	ldr	r2, [pc, #156]	; (8001770 <HAL_I2C_MspInit+0xc8>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_I2C_MspInit+0xc8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_I2C_MspInit+0xc8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a20      	ldr	r2, [pc, #128]	; (8001770 <HAL_I2C_MspInit+0xc8>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_I2C_MspInit+0xc8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001708:	2312      	movs	r3, #18
 800170a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001714:	2304      	movs	r3, #4
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4815      	ldr	r0, [pc, #84]	; (8001774 <HAL_I2C_MspInit+0xcc>)
 8001720:	f002 fade 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172a:	2312      	movs	r3, #18
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001736:	2304      	movs	r3, #4
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <HAL_I2C_MspInit+0xd0>)
 8001742:	f002 facd 	bl	8003ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_I2C_MspInit+0xc8>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_I2C_MspInit+0xc8>)
 8001750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_I2C_MspInit+0xc8>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40005c00 	.word	0x40005c00
 8001770:	40023800 	.word	0x40023800
 8001774:	40020800 	.word	0x40020800
 8001778:	40020000 	.word	0x40020000

0800177c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b09a      	sub	sp, #104	; 0x68
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	2230      	movs	r2, #48	; 0x30
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f005 f839 	bl	8006814 <memset>
  if(hltdc->Instance==LTDC)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a80      	ldr	r2, [pc, #512]	; (80019a8 <HAL_LTDC_MspInit+0x22c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	f040 80f9 	bne.w	80019a0 <HAL_LTDC_MspInit+0x224>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017ae:	2308      	movs	r3, #8
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80017b2:	2332      	movs	r3, #50	; 0x32
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80017b6:	2304      	movs	r3, #4
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80017ba:	2300      	movs	r3, #0
 80017bc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fe9e 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80017ce:	f7ff ff1b 	bl	8001608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
 80017d6:	4b75      	ldr	r3, [pc, #468]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a74      	ldr	r2, [pc, #464]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 80017dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b72      	ldr	r3, [pc, #456]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	4b6e      	ldr	r3, [pc, #440]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a6d      	ldr	r2, [pc, #436]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 80017f8:	f043 0320 	orr.w	r3, r3, #32
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	4b67      	ldr	r3, [pc, #412]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a66      	ldr	r2, [pc, #408]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b64      	ldr	r3, [pc, #400]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	4b60      	ldr	r3, [pc, #384]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a5f      	ldr	r2, [pc, #380]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a58      	ldr	r2, [pc, #352]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 800184c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b56      	ldr	r3, [pc, #344]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b52      	ldr	r3, [pc, #328]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a51      	ldr	r2, [pc, #324]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b4f      	ldr	r3, [pc, #316]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a4a      	ldr	r2, [pc, #296]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b48      	ldr	r3, [pc, #288]	; (80019ac <HAL_LTDC_MspInit+0x230>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800189a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018a8:	230e      	movs	r3, #14
 80018aa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018b0:	4619      	mov	r1, r3
 80018b2:	483f      	ldr	r0, [pc, #252]	; (80019b0 <HAL_LTDC_MspInit+0x234>)
 80018b4:	f002 fa14 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80018b8:	f641 0358 	movw	r3, #6232	; 0x1858
 80018bc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018ca:	230e      	movs	r3, #14
 80018cc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018d2:	4619      	mov	r1, r3
 80018d4:	4837      	ldr	r0, [pc, #220]	; (80019b4 <HAL_LTDC_MspInit+0x238>)
 80018d6:	f002 fa03 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80018da:	2303      	movs	r3, #3
 80018dc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018ea:	2309      	movs	r3, #9
 80018ec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018f2:	4619      	mov	r1, r3
 80018f4:	4830      	ldr	r0, [pc, #192]	; (80019b8 <HAL_LTDC_MspInit+0x23c>)
 80018f6:	f002 f9f3 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80018fa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80018fe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800190c:	230e      	movs	r3, #14
 800190e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001914:	4619      	mov	r1, r3
 8001916:	4828      	ldr	r0, [pc, #160]	; (80019b8 <HAL_LTDC_MspInit+0x23c>)
 8001918:	f002 f9e2 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800191c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001920:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800192e:	230e      	movs	r3, #14
 8001930:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001932:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001936:	4619      	mov	r1, r3
 8001938:	4820      	ldr	r0, [pc, #128]	; (80019bc <HAL_LTDC_MspInit+0x240>)
 800193a:	f002 f9d1 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 800193e:	23c0      	movs	r3, #192	; 0xc0
 8001940:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800194e:	230e      	movs	r3, #14
 8001950:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001952:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001956:	4619      	mov	r1, r3
 8001958:	4819      	ldr	r0, [pc, #100]	; (80019c0 <HAL_LTDC_MspInit+0x244>)
 800195a:	f002 f9c1 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin;
 800195e:	2308      	movs	r3, #8
 8001960:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800196e:	230e      	movs	r3, #14
 8001970:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001976:	4619      	mov	r1, r3
 8001978:	4812      	ldr	r0, [pc, #72]	; (80019c4 <HAL_LTDC_MspInit+0x248>)
 800197a:	f002 f9b1 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800197e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001982:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001990:	2309      	movs	r3, #9
 8001992:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001998:	4619      	mov	r1, r3
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <HAL_LTDC_MspInit+0x240>)
 800199c:	f002 f9a0 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3768      	adds	r7, #104	; 0x68
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40016800 	.word	0x40016800
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40021400 	.word	0x40021400
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020c00 	.word	0x40020c00

080019c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_SPI_MspInit+0x84>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d12c      	bne.n	8001a44 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_SPI_MspInit+0x88>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_SPI_MspInit+0x88>)
 80019f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_SPI_MspInit+0x88>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_SPI_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_SPI_MspInit+0x88>)
 8001a10:	f043 0320 	orr.w	r3, r3, #32
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_SPI_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001a22:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a34:	2305      	movs	r3, #5
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_SPI_MspInit+0x8c>)
 8001a40:	f002 f94e 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40015000 	.word	0x40015000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40021400 	.word	0x40021400

08001a58 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <HAL_SPI_MspDeInit+0x30>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10a      	bne.n	8001a80 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_SPI_MspDeInit+0x34>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_SPI_MspDeInit+0x34>)
 8001a70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001a76:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_SPI_MspDeInit+0x38>)
 8001a7c:	f002 fadc 	bl	8004038 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40015000 	.word	0x40015000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40021400 	.word	0x40021400

08001a94 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_FMC_MspInit+0x104>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d16f      	bne.n	8001b90 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <HAL_FMC_MspInit+0x104>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_FMC_MspInit+0x108>)
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	4a37      	ldr	r2, [pc, #220]	; (8001b9c <HAL_FMC_MspInit+0x108>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6393      	str	r3, [r2, #56]	; 0x38
 8001ac6:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_FMC_MspInit+0x108>)
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001ad2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001ad6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	482c      	ldr	r0, [pc, #176]	; (8001ba0 <HAL_FMC_MspInit+0x10c>)
 8001aee:	f002 f8f7 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001af2:	2301      	movs	r3, #1
 8001af4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b02:	230c      	movs	r3, #12
 8001b04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4826      	ldr	r0, [pc, #152]	; (8001ba4 <HAL_FMC_MspInit+0x110>)
 8001b0c:	f002 f8e8 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|BA0_Pin|SDCLK_Pin|SDNCAS_Pin;
 8001b10:	f248 1311 	movw	r3, #33041	; 0x8111
 8001b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b22:	230c      	movs	r3, #12
 8001b24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	481f      	ldr	r0, [pc, #124]	; (8001ba8 <HAL_FMC_MspInit+0x114>)
 8001b2c:	f002 f8d8 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8001b30:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001b34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b42:	230c      	movs	r3, #12
 8001b44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4818      	ldr	r0, [pc, #96]	; (8001bac <HAL_FMC_MspInit+0x118>)
 8001b4c:	f002 f8c8 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin;
 8001b50:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b62:	230c      	movs	r3, #12
 8001b64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <HAL_FMC_MspInit+0x11c>)
 8001b6c:	f002 f8b8 	bl	8003ce0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001b70:	2360      	movs	r3, #96	; 0x60
 8001b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b80:	230c      	movs	r3, #12
 8001b82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <HAL_FMC_MspInit+0x120>)
 8001b8a:	f002 f8a9 	bl	8003ce0 <HAL_GPIO_Init>
 8001b8e:	e000      	b.n	8001b92 <HAL_FMC_MspInit+0xfe>
    return;
 8001b90:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200000ec 	.word	0x200000ec
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40021400 	.word	0x40021400
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40021800 	.word	0x40021800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40020400 	.word	0x40020400

08001bb8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001bc0:	f7ff ff68 	bl	8001a94 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c18:	f001 fac2 	bl	80031a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f004 fdb6 	bl	80067c0 <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20030000 	.word	0x20030000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	200000f0 	.word	0x200000f0
 8001c88:	20000580 	.word	0x20000580

08001c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <SystemInit+0x20>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <SystemInit+0x20>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cb6:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cb8:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ccc:	4c0b      	ldr	r4, [pc, #44]	; (8001cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cda:	f7ff ffd7 	bl	8001c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cde:	f004 fd75 	bl	80067cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce2:	f7ff f981 	bl	8000fe8 <main>
  bx  lr    
 8001ce6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ce8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001cf4:	0800abf0 	.word	0x0800abf0
  ldr r2, =_sbss
 8001cf8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001cfc:	20000580 	.word	0x20000580

08001d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC_IRQHandler>

08001d02 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001d06:	f000 fa5d 	bl	80021c4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001d0a:	20ca      	movs	r0, #202	; 0xca
 8001d0c:	f000 f95d 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001d10:	20c3      	movs	r0, #195	; 0xc3
 8001d12:	f000 f967 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001d16:	2008      	movs	r0, #8
 8001d18:	f000 f964 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001d1c:	2050      	movs	r0, #80	; 0x50
 8001d1e:	f000 f961 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001d22:	20cf      	movs	r0, #207	; 0xcf
 8001d24:	f000 f951 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 f95b 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001d2e:	20c1      	movs	r0, #193	; 0xc1
 8001d30:	f000 f958 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001d34:	2030      	movs	r0, #48	; 0x30
 8001d36:	f000 f955 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001d3a:	20ed      	movs	r0, #237	; 0xed
 8001d3c:	f000 f945 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001d40:	2064      	movs	r0, #100	; 0x64
 8001d42:	f000 f94f 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001d46:	2003      	movs	r0, #3
 8001d48:	f000 f94c 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001d4c:	2012      	movs	r0, #18
 8001d4e:	f000 f949 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001d52:	2081      	movs	r0, #129	; 0x81
 8001d54:	f000 f946 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001d58:	20e8      	movs	r0, #232	; 0xe8
 8001d5a:	f000 f936 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001d5e:	2085      	movs	r0, #133	; 0x85
 8001d60:	f000 f940 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f93d 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d6a:	2078      	movs	r0, #120	; 0x78
 8001d6c:	f000 f93a 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001d70:	20cb      	movs	r0, #203	; 0xcb
 8001d72:	f000 f92a 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001d76:	2039      	movs	r0, #57	; 0x39
 8001d78:	f000 f934 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001d7c:	202c      	movs	r0, #44	; 0x2c
 8001d7e:	f000 f931 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f92e 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001d88:	2034      	movs	r0, #52	; 0x34
 8001d8a:	f000 f92b 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001d8e:	2002      	movs	r0, #2
 8001d90:	f000 f928 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001d94:	20f7      	movs	r0, #247	; 0xf7
 8001d96:	f000 f918 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001d9a:	2020      	movs	r0, #32
 8001d9c:	f000 f922 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001da0:	20ea      	movs	r0, #234	; 0xea
 8001da2:	f000 f912 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 f91c 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f000 f919 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001db2:	20b1      	movs	r0, #177	; 0xb1
 8001db4:	f000 f909 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f000 f913 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001dbe:	201b      	movs	r0, #27
 8001dc0:	f000 f910 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001dc4:	20b6      	movs	r0, #182	; 0xb6
 8001dc6:	f000 f900 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f000 f90a 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001dd0:	20a2      	movs	r0, #162	; 0xa2
 8001dd2:	f000 f907 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001dd6:	20c0      	movs	r0, #192	; 0xc0
 8001dd8:	f000 f8f7 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ddc:	2010      	movs	r0, #16
 8001dde:	f000 f901 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001de2:	20c1      	movs	r0, #193	; 0xc1
 8001de4:	f000 f8f1 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001de8:	2010      	movs	r0, #16
 8001dea:	f000 f8fb 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001dee:	20c5      	movs	r0, #197	; 0xc5
 8001df0:	f000 f8eb 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001df4:	2045      	movs	r0, #69	; 0x45
 8001df6:	f000 f8f5 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001dfa:	2015      	movs	r0, #21
 8001dfc:	f000 f8f2 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001e00:	20c7      	movs	r0, #199	; 0xc7
 8001e02:	f000 f8e2 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001e06:	2090      	movs	r0, #144	; 0x90
 8001e08:	f000 f8ec 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001e0c:	2036      	movs	r0, #54	; 0x36
 8001e0e:	f000 f8dc 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001e12:	20c8      	movs	r0, #200	; 0xc8
 8001e14:	f000 f8e6 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001e18:	20f2      	movs	r0, #242	; 0xf2
 8001e1a:	f000 f8d6 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 f8e0 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001e24:	20b0      	movs	r0, #176	; 0xb0
 8001e26:	f000 f8d0 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001e2a:	20c2      	movs	r0, #194	; 0xc2
 8001e2c:	f000 f8da 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001e30:	20b6      	movs	r0, #182	; 0xb6
 8001e32:	f000 f8ca 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001e36:	200a      	movs	r0, #10
 8001e38:	f000 f8d4 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001e3c:	20a7      	movs	r0, #167	; 0xa7
 8001e3e:	f000 f8d1 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001e42:	2027      	movs	r0, #39	; 0x27
 8001e44:	f000 f8ce 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e48:	2004      	movs	r0, #4
 8001e4a:	f000 f8cb 	bl	8001fe4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001e4e:	202a      	movs	r0, #42	; 0x2a
 8001e50:	f000 f8bb 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f000 f8c5 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 f8c2 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f000 f8bf 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001e66:	20ef      	movs	r0, #239	; 0xef
 8001e68:	f000 f8bc 	bl	8001fe4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001e6c:	202b      	movs	r0, #43	; 0x2b
 8001e6e:	f000 f8ac 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e72:	2000      	movs	r0, #0
 8001e74:	f000 f8b6 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f000 f8b3 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f000 f8b0 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001e84:	203f      	movs	r0, #63	; 0x3f
 8001e86:	f000 f8ad 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001e8a:	20f6      	movs	r0, #246	; 0xf6
 8001e8c:	f000 f89d 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f000 f8a7 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f8a4 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001e9c:	2006      	movs	r0, #6
 8001e9e:	f000 f8a1 	bl	8001fe4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001ea2:	202c      	movs	r0, #44	; 0x2c
 8001ea4:	f000 f891 	bl	8001fca <ili9341_WriteReg>
  LCD_Delay(200);
 8001ea8:	20c8      	movs	r0, #200	; 0xc8
 8001eaa:	f000 fa79 	bl	80023a0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001eae:	2026      	movs	r0, #38	; 0x26
 8001eb0:	f000 f88b 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f000 f895 	bl	8001fe4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001eba:	20e0      	movs	r0, #224	; 0xe0
 8001ebc:	f000 f885 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001ec0:	200f      	movs	r0, #15
 8001ec2:	f000 f88f 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001ec6:	2029      	movs	r0, #41	; 0x29
 8001ec8:	f000 f88c 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001ecc:	2024      	movs	r0, #36	; 0x24
 8001ece:	f000 f889 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001ed2:	200c      	movs	r0, #12
 8001ed4:	f000 f886 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001ed8:	200e      	movs	r0, #14
 8001eda:	f000 f883 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ede:	2009      	movs	r0, #9
 8001ee0:	f000 f880 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001ee4:	204e      	movs	r0, #78	; 0x4e
 8001ee6:	f000 f87d 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001eea:	2078      	movs	r0, #120	; 0x78
 8001eec:	f000 f87a 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ef0:	203c      	movs	r0, #60	; 0x3c
 8001ef2:	f000 f877 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ef6:	2009      	movs	r0, #9
 8001ef8:	f000 f874 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001efc:	2013      	movs	r0, #19
 8001efe:	f000 f871 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f02:	2005      	movs	r0, #5
 8001f04:	f000 f86e 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001f08:	2017      	movs	r0, #23
 8001f0a:	f000 f86b 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f0e:	2011      	movs	r0, #17
 8001f10:	f000 f868 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 f865 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001f1a:	20e1      	movs	r0, #225	; 0xe1
 8001f1c:	f000 f855 	bl	8001fca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f000 f85f 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001f26:	2016      	movs	r0, #22
 8001f28:	f000 f85c 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001f2c:	201b      	movs	r0, #27
 8001f2e:	f000 f859 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001f32:	2004      	movs	r0, #4
 8001f34:	f000 f856 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f38:	2011      	movs	r0, #17
 8001f3a:	f000 f853 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001f3e:	2007      	movs	r0, #7
 8001f40:	f000 f850 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001f44:	2031      	movs	r0, #49	; 0x31
 8001f46:	f000 f84d 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001f4a:	2033      	movs	r0, #51	; 0x33
 8001f4c:	f000 f84a 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001f50:	2042      	movs	r0, #66	; 0x42
 8001f52:	f000 f847 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f56:	2005      	movs	r0, #5
 8001f58:	f000 f844 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f5c:	200c      	movs	r0, #12
 8001f5e:	f000 f841 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001f62:	200a      	movs	r0, #10
 8001f64:	f000 f83e 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001f68:	2028      	movs	r0, #40	; 0x28
 8001f6a:	f000 f83b 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001f6e:	202f      	movs	r0, #47	; 0x2f
 8001f70:	f000 f838 	bl	8001fe4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001f74:	200f      	movs	r0, #15
 8001f76:	f000 f835 	bl	8001fe4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001f7a:	2011      	movs	r0, #17
 8001f7c:	f000 f825 	bl	8001fca <ili9341_WriteReg>
  LCD_Delay(200);
 8001f80:	20c8      	movs	r0, #200	; 0xc8
 8001f82:	f000 fa0d 	bl	80023a0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f86:	2029      	movs	r0, #41	; 0x29
 8001f88:	f000 f81f 	bl	8001fca <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001f8c:	202c      	movs	r0, #44	; 0x2c
 8001f8e:	f000 f81c 	bl	8001fca <ili9341_WriteReg>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001f9a:	f000 f913 	bl	80021c4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001f9e:	2103      	movs	r1, #3
 8001fa0:	20d3      	movs	r0, #211	; 0xd3
 8001fa2:	f000 f82c 	bl	8001ffe <ili9341_ReadData>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	b29b      	uxth	r3, r3
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}

08001fae <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001fb2:	2029      	movs	r0, #41	; 0x29
 8001fb4:	f000 f809 	bl	8001fca <ili9341_WriteReg>
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001fc0:	2028      	movs	r0, #40	; 0x28
 8001fc2:	f000 f802 	bl	8001fca <ili9341_WriteReg>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f98e 	bl	80022f8 <LCD_IO_WriteReg>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f95f 	bl	80022b4 <LCD_IO_WriteData>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	460a      	mov	r2, r1
 8002008:	80fb      	strh	r3, [r7, #6]
 800200a:	4613      	mov	r3, r2
 800200c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800200e:	797a      	ldrb	r2, [r7, #5]
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f991 	bl	800233c <LCD_IO_ReadData>
 800201a:	4603      	mov	r3, r0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002028:	23f0      	movs	r3, #240	; 0xf0
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002038:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800204c:	4819      	ldr	r0, [pc, #100]	; (80020b4 <SPIx_Init+0x6c>)
 800204e:	f004 f936 	bl	80062be <HAL_SPI_GetState>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d12b      	bne.n	80020b0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <SPIx_Init+0x6c>)
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <SPIx_Init+0x70>)
 800205c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <SPIx_Init+0x6c>)
 8002060:	2218      	movs	r2, #24
 8002062:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <SPIx_Init+0x6c>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <SPIx_Init+0x6c>)
 800206c:	2200      	movs	r2, #0
 800206e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <SPIx_Init+0x6c>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <SPIx_Init+0x6c>)
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <SPIx_Init+0x6c>)
 800207e:	2207      	movs	r2, #7
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <SPIx_Init+0x6c>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <SPIx_Init+0x6c>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <SPIx_Init+0x6c>)
 8002090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002094:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <SPIx_Init+0x6c>)
 8002098:	2200      	movs	r2, #0
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SPIx_Init+0x6c>)
 800209e:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020a2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <SPIx_Init+0x6c>)
 80020a6:	f000 f853 	bl	8002150 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80020aa:	4802      	ldr	r0, [pc, #8]	; (80020b4 <SPIx_Init+0x6c>)
 80020ac:	f003 fc67 	bl	800597e <HAL_SPI_Init>
  } 
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200000f4 	.word	0x200000f4
 80020b8:	40015000 	.word	0x40015000

080020bc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <SPIx_Read+0x38>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f107 0108 	add.w	r1, r7, #8
 80020d6:	4808      	ldr	r0, [pc, #32]	; (80020f8 <SPIx_Read+0x3c>)
 80020d8:	f003 fe3e 	bl	8005d58 <HAL_SPI_Receive>
 80020dc:	4603      	mov	r3, r0
 80020de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80020e6:	f000 f827 	bl	8002138 <SPIx_Error>
  }
  
  return readvalue;
 80020ea:	68bb      	ldr	r3, [r7, #8]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	2000003c 	.word	0x2000003c
 80020f8:	200000f4 	.word	0x200000f4

080020fc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <SPIx_Write+0x34>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	1db9      	adds	r1, r7, #6
 8002110:	2201      	movs	r2, #1
 8002112:	4808      	ldr	r0, [pc, #32]	; (8002134 <SPIx_Write+0x38>)
 8002114:	f003 fce4 	bl	8005ae0 <HAL_SPI_Transmit>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002122:	f000 f809 	bl	8002138 <SPIx_Error>
  }
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000003c 	.word	0x2000003c
 8002134:	200000f4 	.word	0x200000f4

08002138 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <SPIx_Error+0x14>)
 800213e:	f003 fca7 	bl	8005a90 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002142:	f7ff ff81 	bl	8002048 <SPIx_Init>
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200000f4 	.word	0x200000f4

08002150 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <SPIx_MspInit+0x6c>)
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <SPIx_MspInit+0x6c>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	6453      	str	r3, [r2, #68]	; 0x44
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <SPIx_MspInit+0x6c>)
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <SPIx_MspInit+0x6c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <SPIx_MspInit+0x6c>)
 800217e:	f043 0320 	orr.w	r3, r3, #32
 8002182:	6313      	str	r3, [r2, #48]	; 0x30
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <SPIx_MspInit+0x6c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002190:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800219a:	2302      	movs	r3, #2
 800219c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800219e:	2301      	movs	r3, #1
 80021a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80021a2:	2305      	movs	r3, #5
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <SPIx_MspInit+0x70>)
 80021ae:	f001 fd97 	bl	8003ce0 <HAL_GPIO_Init>
}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40021400 	.word	0x40021400

080021c4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <LCD_IO_Init+0xe0>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d164      	bne.n	800229c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <LCD_IO_Init+0xe0>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <LCD_IO_Init+0xe4>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <LCD_IO_Init+0xe4>)
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <LCD_IO_Init+0xe4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80021f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4619      	mov	r1, r3
 800220c:	4827      	ldr	r0, [pc, #156]	; (80022ac <LCD_IO_Init+0xe8>)
 800220e:	f001 fd67 	bl	8003ce0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <LCD_IO_Init+0xe4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <LCD_IO_Init+0xe4>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <LCD_IO_Init+0xe4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800222e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002232:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002234:	2301      	movs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800223c:	2302      	movs	r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	4619      	mov	r1, r3
 8002246:	4819      	ldr	r0, [pc, #100]	; (80022ac <LCD_IO_Init+0xe8>)
 8002248:	f001 fd4a 	bl	8003ce0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <LCD_IO_Init+0xe4>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <LCD_IO_Init+0xe4>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	6313      	str	r3, [r2, #48]	; 0x30
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <LCD_IO_Init+0xe4>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002268:	2304      	movs	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002274:	2302      	movs	r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4619      	mov	r1, r3
 800227e:	480c      	ldr	r0, [pc, #48]	; (80022b0 <LCD_IO_Init+0xec>)
 8002280:	f001 fd2e 	bl	8003ce0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002284:	2200      	movs	r2, #0
 8002286:	2104      	movs	r1, #4
 8002288:	4809      	ldr	r0, [pc, #36]	; (80022b0 <LCD_IO_Init+0xec>)
 800228a:	f001 ffe1 	bl	8004250 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800228e:	2201      	movs	r2, #1
 8002290:	2104      	movs	r1, #4
 8002292:	4807      	ldr	r0, [pc, #28]	; (80022b0 <LCD_IO_Init+0xec>)
 8002294:	f001 ffdc 	bl	8004250 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002298:	f7ff fed6 	bl	8002048 <SPIx_Init>
  }
}
 800229c:	bf00      	nop
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000014c 	.word	0x2000014c
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40020800 	.word	0x40020800

080022b4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c4:	480a      	ldr	r0, [pc, #40]	; (80022f0 <LCD_IO_WriteData+0x3c>)
 80022c6:	f001 ffc3 	bl	8004250 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80022ca:	2200      	movs	r2, #0
 80022cc:	2104      	movs	r1, #4
 80022ce:	4809      	ldr	r0, [pc, #36]	; (80022f4 <LCD_IO_WriteData+0x40>)
 80022d0:	f001 ffbe 	bl	8004250 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff10 	bl	80020fc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022dc:	2201      	movs	r2, #1
 80022de:	2104      	movs	r1, #4
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <LCD_IO_WriteData+0x40>)
 80022e2:	f001 ffb5 	bl	8004250 <HAL_GPIO_WritePin>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40020c00 	.word	0x40020c00
 80022f4:	40020800 	.word	0x40020800

080022f8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002308:	480a      	ldr	r0, [pc, #40]	; (8002334 <LCD_IO_WriteReg+0x3c>)
 800230a:	f001 ffa1 	bl	8004250 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800230e:	2200      	movs	r2, #0
 8002310:	2104      	movs	r1, #4
 8002312:	4809      	ldr	r0, [pc, #36]	; (8002338 <LCD_IO_WriteReg+0x40>)
 8002314:	f001 ff9c 	bl	8004250 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff feed 	bl	80020fc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002322:	2201      	movs	r2, #1
 8002324:	2104      	movs	r1, #4
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <LCD_IO_WriteReg+0x40>)
 8002328:	f001 ff92 	bl	8004250 <HAL_GPIO_WritePin>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40020c00 	.word	0x40020c00
 8002338:	40020800 	.word	0x40020800

0800233c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	460a      	mov	r2, r1
 8002346:	80fb      	strh	r3, [r7, #6]
 8002348:	4613      	mov	r3, r2
 800234a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002350:	2200      	movs	r2, #0
 8002352:	2104      	movs	r1, #4
 8002354:	4810      	ldr	r0, [pc, #64]	; (8002398 <LCD_IO_ReadData+0x5c>)
 8002356:	f001 ff7b 	bl	8004250 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002360:	480e      	ldr	r0, [pc, #56]	; (800239c <LCD_IO_ReadData+0x60>)
 8002362:	f001 ff75 	bl	8004250 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fec7 	bl	80020fc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800236e:	797b      	ldrb	r3, [r7, #5]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fea3 	bl	80020bc <SPIx_Read>
 8002376:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002378:	2201      	movs	r2, #1
 800237a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800237e:	4807      	ldr	r0, [pc, #28]	; (800239c <LCD_IO_ReadData+0x60>)
 8002380:	f001 ff66 	bl	8004250 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002384:	2201      	movs	r2, #1
 8002386:	2104      	movs	r1, #4
 8002388:	4803      	ldr	r0, [pc, #12]	; (8002398 <LCD_IO_ReadData+0x5c>)
 800238a:	f001 ff61 	bl	8004250 <HAL_GPIO_WritePin>
  
  return readvalue;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00

080023a0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 ff19 	bl	80031e0 <HAL_Delay>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023be:	4a2e      	ldr	r2, [pc, #184]	; (8002478 <BSP_LCD_Init+0xc0>)
 80023c0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023c4:	2209      	movs	r2, #9
 80023c6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80023c8:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80023ce:	4b29      	ldr	r3, [pc, #164]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023d0:	221d      	movs	r2, #29
 80023d2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023d6:	2203      	movs	r2, #3
 80023d8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023dc:	f240 120d 	movw	r2, #269	; 0x10d
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023e4:	f240 1243 	movw	r2, #323	; 0x143
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023ec:	f240 1217 	movw	r2, #279	; 0x117
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023f4:	f240 1247 	movw	r2, #327	; 0x147
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <BSP_LCD_Init+0xbc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <BSP_LCD_Init+0xbc>)
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <BSP_LCD_Init+0xbc>)
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <BSP_LCD_Init+0xc4>)
 8002414:	2208      	movs	r2, #8
 8002416:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <BSP_LCD_Init+0xc4>)
 800241a:	22c0      	movs	r2, #192	; 0xc0
 800241c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <BSP_LCD_Init+0xc4>)
 8002420:	2204      	movs	r2, #4
 8002422:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <BSP_LCD_Init+0xc4>)
 8002426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800242c:	4813      	ldr	r0, [pc, #76]	; (800247c <BSP_LCD_Init+0xc4>)
 800242e:	f003 f869 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <BSP_LCD_Init+0xbc>)
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <BSP_LCD_Init+0xbc>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <BSP_LCD_Init+0xbc>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <BSP_LCD_Init+0xbc>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800244a:	f000 fa9f 	bl	800298c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800244e:	4809      	ldr	r0, [pc, #36]	; (8002474 <BSP_LCD_Init+0xbc>)
 8002450:	f002 f8d8 	bl	8004604 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <BSP_LCD_Init+0xc8>)
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <BSP_LCD_Init+0xcc>)
 8002458:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <BSP_LCD_Init+0xc8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002462:	f000 fc81 	bl	8002d68 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002466:	4808      	ldr	r0, [pc, #32]	; (8002488 <BSP_LCD_Init+0xd0>)
 8002468:	f000 f8b4 	bl	80025d4 <BSP_LCD_SetFont>

  return LCD_OK;
 800246c:	2300      	movs	r3, #0
}  
 800246e:	4618      	mov	r0, r3
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200004c0 	.word	0x200004c0
 8002478:	40016800 	.word	0x40016800
 800247c:	20000190 	.word	0x20000190
 8002480:	20000568 	.word	0x20000568
 8002484:	20000004 	.word	0x20000004
 8002488:	20000040 	.word	0x20000040

0800248c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <BSP_LCD_GetXSize+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	4798      	blx	r3
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000568 	.word	0x20000568

080024a4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <BSP_LCD_GetYSize+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	4798      	blx	r3
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000568 	.word	0x20000568

080024bc <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80024bc:	b580      	push	{r7, lr}
 80024be:	b090      	sub	sp, #64	; 0x40
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80024cc:	f7ff ffde 	bl	800248c <BSP_LCD_GetXSize>
 80024d0:	4603      	mov	r3, r0
 80024d2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80024d8:	f7ff ffe4 	bl	80024a4 <BSP_LCD_GetYSize>
 80024dc:	4603      	mov	r3, r0
 80024de:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80024e8:	23ff      	movs	r3, #255	; 0xff
 80024ea:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002502:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002508:	2307      	movs	r3, #7
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800250c:	f7ff ffbe 	bl	800248c <BSP_LCD_GetXSize>
 8002510:	4603      	mov	r3, r0
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002514:	f7ff ffc6 	bl	80024a4 <BSP_LCD_GetYSize>
 8002518:	4603      	mov	r3, r0
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800251c:	88fa      	ldrh	r2, [r7, #6]
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	4619      	mov	r1, r3
 8002524:	4814      	ldr	r0, [pc, #80]	; (8002578 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002526:	f002 f93d 	bl	80047a4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	4913      	ldr	r1, [pc, #76]	; (800257c <BSP_LCD_LayerDefaultInit+0xc0>)
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3304      	adds	r3, #4
 800253a:	f04f 32ff 	mov.w	r2, #4294967295
 800253e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002540:	88fa      	ldrh	r2, [r7, #6]
 8002542:	490e      	ldr	r1, [pc, #56]	; (800257c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3308      	adds	r3, #8
 8002550:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002552:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	4909      	ldr	r1, [pc, #36]	; (800257c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002566:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <BSP_LCD_LayerDefaultInit+0xbc>)
 800256a:	f002 f959 	bl	8004820 <HAL_LTDC_EnableDither>
}
 800256e:	bf00      	nop
 8002570:	3740      	adds	r7, #64	; 0x40
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200004c0 	.word	0x200004c0
 800257c:	200001c4 	.word	0x200001c4
 8002580:	20000040 	.word	0x20000040

08002584 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <BSP_LCD_SelectLayer+0x1c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6013      	str	r3, [r2, #0]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200001c0 	.word	0x200001c0

080025a4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <BSP_LCD_SetTextColor+0x28>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4907      	ldr	r1, [pc, #28]	; (80025d0 <BSP_LCD_SetTextColor+0x2c>)
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	200001c0 	.word	0x200001c0
 80025d0:	200001c4 	.word	0x200001c4

080025d4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <BSP_LCD_SetFont+0x2c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4908      	ldr	r1, [pc, #32]	; (8002604 <BSP_LCD_SetFont+0x30>)
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3308      	adds	r3, #8
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	601a      	str	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	200001c0 	.word	0x200001c0
 8002604:	200001c4 	.word	0x200001c4

08002608 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800260c:	4b07      	ldr	r3, [pc, #28]	; (800262c <BSP_LCD_GetFont+0x24>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4907      	ldr	r1, [pc, #28]	; (8002630 <BSP_LCD_GetFont+0x28>)
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3308      	adds	r3, #8
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	200001c0 	.word	0x200001c0
 8002630:	200001c4 	.word	0x200001c4

08002634 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002636:	b085      	sub	sp, #20
 8002638:	af02      	add	r7, sp, #8
 800263a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <BSP_LCD_Clear+0x48>)
 800263e:	681c      	ldr	r4, [r3, #0]
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <BSP_LCD_Clear+0x48>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <BSP_LCD_Clear+0x4c>)
 8002646:	2134      	movs	r1, #52	; 0x34
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	335c      	adds	r3, #92	; 0x5c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461e      	mov	r6, r3
 8002654:	f7ff ff1a 	bl	800248c <BSP_LCD_GetXSize>
 8002658:	4605      	mov	r5, r0
 800265a:	f7ff ff23 	bl	80024a4 <BSP_LCD_GetYSize>
 800265e:	4602      	mov	r2, r0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	462a      	mov	r2, r5
 800266c:	4631      	mov	r1, r6
 800266e:	4620      	mov	r0, r4
 8002670:	f000 fb42 	bl	8002cf8 <FillBuffer>
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267c:	200001c0 	.word	0x200001c0
 8002680:	200004c0 	.word	0x200004c0

08002684 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
 800268e:	460b      	mov	r3, r1
 8002690:	80bb      	strh	r3, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <BSP_LCD_DisplayChar+0x80>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	491b      	ldr	r1, [pc, #108]	; (8002708 <BSP_LCD_DisplayChar+0x84>)
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3308      	adds	r3, #8
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <BSP_LCD_DisplayChar+0x80>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4c14      	ldr	r4, [pc, #80]	; (8002708 <BSP_LCD_DisplayChar+0x84>)
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4423      	add	r3, r4
 80026c2:	3308      	adds	r3, #8
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80026c8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80026cc:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <BSP_LCD_DisplayChar+0x80>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4c0d      	ldr	r4, [pc, #52]	; (8002708 <BSP_LCD_DisplayChar+0x84>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4423      	add	r3, r4
 80026dc:	3308      	adds	r3, #8
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	889b      	ldrh	r3, [r3, #4]
 80026e2:	3307      	adds	r3, #7
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	da00      	bge.n	80026ea <BSP_LCD_DisplayChar+0x66>
 80026e8:	3307      	adds	r3, #7
 80026ea:	10db      	asrs	r3, r3, #3
 80026ec:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80026f0:	18ca      	adds	r2, r1, r3
 80026f2:	88b9      	ldrh	r1, [r7, #4]
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fa44 	bl	8002b84 <DrawChar>
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}
 8002704:	200001c0 	.word	0x200001c0
 8002708:	200001c4 	.word	0x200001c4

0800270c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	461a      	mov	r2, r3
 8002716:	4603      	mov	r3, r0
 8002718:	81fb      	strh	r3, [r7, #14]
 800271a:	460b      	mov	r3, r1
 800271c:	81bb      	strh	r3, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002722:	2301      	movs	r3, #1
 8002724:	83fb      	strh	r3, [r7, #30]
 8002726:	2300      	movs	r3, #0
 8002728:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002736:	e002      	b.n	800273e <BSP_LCD_DisplayStringAt+0x32>
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	3301      	adds	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	617a      	str	r2, [r7, #20]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f6      	bne.n	8002738 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800274a:	f7ff fe9f 	bl	800248c <BSP_LCD_GetXSize>
 800274e:	4601      	mov	r1, r0
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <BSP_LCD_DisplayStringAt+0x174>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	484b      	ldr	r0, [pc, #300]	; (8002884 <BSP_LCD_DisplayStringAt+0x178>)
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4403      	add	r3, r0
 8002760:	3308      	adds	r3, #8
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	889b      	ldrh	r3, [r3, #4]
 8002766:	fbb1 f3f3 	udiv	r3, r1, r3
 800276a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d01c      	beq.n	80027ac <BSP_LCD_DisplayStringAt+0xa0>
 8002772:	2b03      	cmp	r3, #3
 8002774:	dc33      	bgt.n	80027de <BSP_LCD_DisplayStringAt+0xd2>
 8002776:	2b01      	cmp	r3, #1
 8002778:	d002      	beq.n	8002780 <BSP_LCD_DisplayStringAt+0x74>
 800277a:	2b02      	cmp	r3, #2
 800277c:	d019      	beq.n	80027b2 <BSP_LCD_DisplayStringAt+0xa6>
 800277e:	e02e      	b.n	80027de <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	1ad1      	subs	r1, r2, r3
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <BSP_LCD_DisplayStringAt+0x174>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	483e      	ldr	r0, [pc, #248]	; (8002884 <BSP_LCD_DisplayStringAt+0x178>)
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4403      	add	r3, r0
 8002796:	3308      	adds	r3, #8
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	889b      	ldrh	r3, [r3, #4]
 800279c:	fb03 f301 	mul.w	r3, r3, r1
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	89fb      	ldrh	r3, [r7, #14]
 80027a6:	4413      	add	r3, r2
 80027a8:	83fb      	strh	r3, [r7, #30]
      break;
 80027aa:	e01b      	b.n	80027e4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80027ac:	89fb      	ldrh	r3, [r7, #14]
 80027ae:	83fb      	strh	r3, [r7, #30]
      break;
 80027b0:	e018      	b.n	80027e4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	b299      	uxth	r1, r3
 80027ba:	4b31      	ldr	r3, [pc, #196]	; (8002880 <BSP_LCD_DisplayStringAt+0x174>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4831      	ldr	r0, [pc, #196]	; (8002884 <BSP_LCD_DisplayStringAt+0x178>)
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4403      	add	r3, r0
 80027ca:	3308      	adds	r3, #8
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	889b      	ldrh	r3, [r3, #4]
 80027d0:	fb11 f303 	smulbb	r3, r1, r3
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	89fb      	ldrh	r3, [r7, #14]
 80027d8:	4413      	add	r3, r2
 80027da:	83fb      	strh	r3, [r7, #30]
      break;
 80027dc:	e002      	b.n	80027e4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80027de:	89fb      	ldrh	r3, [r7, #14]
 80027e0:	83fb      	strh	r3, [r7, #30]
      break;
 80027e2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80027e4:	e01a      	b.n	800281c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	89b9      	ldrh	r1, [r7, #12]
 80027ec:	8bfb      	ldrh	r3, [r7, #30]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff48 	bl	8002684 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <BSP_LCD_DisplayStringAt+0x174>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4922      	ldr	r1, [pc, #136]	; (8002884 <BSP_LCD_DisplayStringAt+0x178>)
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	3308      	adds	r3, #8
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	889a      	ldrh	r2, [r3, #4]
 800280a:	8bfb      	ldrh	r3, [r7, #30]
 800280c:	4413      	add	r3, r2
 800280e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	3301      	adds	r3, #1
 8002814:	60bb      	str	r3, [r7, #8]
    i++;
 8002816:	8bbb      	ldrh	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2dc      	uxtb	r4, r3
 800282a:	f7ff fe2f 	bl	800248c <BSP_LCD_GetXSize>
 800282e:	8bb9      	ldrh	r1, [r7, #28]
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <BSP_LCD_DisplayStringAt+0x174>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4d13      	ldr	r5, [pc, #76]	; (8002884 <BSP_LCD_DisplayStringAt+0x178>)
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	442b      	add	r3, r5
 8002840:	3308      	adds	r3, #8
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	889b      	ldrh	r3, [r3, #4]
 8002846:	fb03 f301 	mul.w	r3, r3, r1
 800284a:	1ac3      	subs	r3, r0, r3
 800284c:	b299      	uxth	r1, r3
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <BSP_LCD_DisplayStringAt+0x174>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	480c      	ldr	r0, [pc, #48]	; (8002884 <BSP_LCD_DisplayStringAt+0x178>)
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4403      	add	r3, r0
 800285e:	3308      	adds	r3, #8
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	889b      	ldrh	r3, [r3, #4]
 8002864:	4299      	cmp	r1, r3
 8002866:	bf2c      	ite	cs
 8002868:	2301      	movcs	r3, #1
 800286a:	2300      	movcc	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	4023      	ands	r3, r4
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1b7      	bne.n	80027e6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bdb0      	pop	{r4, r5, r7, pc}
 8002880:	200001c0 	.word	0x200001c0
 8002884:	200001c4 	.word	0x200001c4

08002888 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, CENTER_MODE);
 8002894:	f7ff feb8 	bl	8002608 <BSP_LCD_GetFont>
 8002898:	4603      	mov	r3, r0
 800289a:	88db      	ldrh	r3, [r3, #6]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	fb12 f303 	smulbb	r3, r2, r3
 80028a2:	b299      	uxth	r1, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7ff ff2f 	bl	800270c <BSP_LCD_DisplayStringAt>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80028b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af02      	add	r7, sp, #8
 80028c0:	4604      	mov	r4, r0
 80028c2:	4608      	mov	r0, r1
 80028c4:	4611      	mov	r1, r2
 80028c6:	461a      	mov	r2, r3
 80028c8:	4623      	mov	r3, r4
 80028ca:	80fb      	strh	r3, [r7, #6]
 80028cc:	4603      	mov	r3, r0
 80028ce:	80bb      	strh	r3, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <BSP_LCD_FillRect+0xa8>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4920      	ldr	r1, [pc, #128]	; (8002964 <BSP_LCD_FillRect+0xac>)
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fe58 	bl	80025a4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80028f4:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <BSP_LCD_FillRect+0xa8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <BSP_LCD_FillRect+0xb0>)
 80028fa:	2134      	movs	r1, #52	; 0x34
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	335c      	adds	r3, #92	; 0x5c
 8002904:	681c      	ldr	r4, [r3, #0]
 8002906:	f7ff fdc1 	bl	800248c <BSP_LCD_GetXSize>
 800290a:	4602      	mov	r2, r0
 800290c:	88bb      	ldrh	r3, [r7, #4]
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4423      	add	r3, r4
 800291a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <BSP_LCD_FillRect+0xa8>)
 800291e:	681c      	ldr	r4, [r3, #0]
 8002920:	68fd      	ldr	r5, [r7, #12]
 8002922:	887e      	ldrh	r6, [r7, #2]
 8002924:	f8b7 8000 	ldrh.w	r8, [r7]
 8002928:	f7ff fdb0 	bl	800248c <BSP_LCD_GetXSize>
 800292c:	4602      	mov	r2, r0
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	1ad1      	subs	r1, r2, r3
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <BSP_LCD_FillRect+0xa8>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	480b      	ldr	r0, [pc, #44]	; (8002964 <BSP_LCD_FillRect+0xac>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4403      	add	r3, r0
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	9100      	str	r1, [sp, #0]
 8002948:	4643      	mov	r3, r8
 800294a:	4632      	mov	r2, r6
 800294c:	4629      	mov	r1, r5
 800294e:	4620      	mov	r0, r4
 8002950:	f000 f9d2 	bl	8002cf8 <FillBuffer>
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800295e:	bf00      	nop
 8002960:	200001c0 	.word	0x200001c0
 8002964:	200001c4 	.word	0x200001c4
 8002968:	200004c0 	.word	0x200004c0

0800296c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <BSP_LCD_DisplayOn+0x1c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800297a:	4b03      	ldr	r3, [pc, #12]	; (8002988 <BSP_LCD_DisplayOn+0x1c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4798      	blx	r3
  }
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000568 	.word	0x20000568

0800298c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08e      	sub	sp, #56	; 0x38
 8002990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
 8002996:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a60      	ldr	r2, [pc, #384]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 800299c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	4b5a      	ldr	r3, [pc, #360]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a59      	ldr	r2, [pc, #356]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a4b      	ldr	r2, [pc, #300]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a44      	ldr	r2, [pc, #272]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a3d      	ldr	r2, [pc, #244]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a36      	ldr	r2, [pc, #216]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a44:	f043 0320 	orr.w	r3, r3, #32
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <BSP_LCD_MspInit+0x190>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002a72:	f641 0358 	movw	r3, #6232	; 0x1858
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002a80:	2302      	movs	r3, #2
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002a84:	230e      	movs	r3, #14
 8002a86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4824      	ldr	r0, [pc, #144]	; (8002b20 <BSP_LCD_MspInit+0x194>)
 8002a90:	f001 f926 	bl	8003ce0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002a94:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4820      	ldr	r0, [pc, #128]	; (8002b24 <BSP_LCD_MspInit+0x198>)
 8002aa2:	f001 f91d 	bl	8003ce0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002aa6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	481d      	ldr	r0, [pc, #116]	; (8002b28 <BSP_LCD_MspInit+0x19c>)
 8002ab4:	f001 f914 	bl	8003ce0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002ab8:	2348      	movs	r3, #72	; 0x48
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	481a      	ldr	r0, [pc, #104]	; (8002b2c <BSP_LCD_MspInit+0x1a0>)
 8002ac4:	f001 f90c 	bl	8003ce0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4816      	ldr	r0, [pc, #88]	; (8002b30 <BSP_LCD_MspInit+0x1a4>)
 8002ad6:	f001 f903 	bl	8003ce0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002ada:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4813      	ldr	r0, [pc, #76]	; (8002b34 <BSP_LCD_MspInit+0x1a8>)
 8002ae8:	f001 f8fa 	bl	8003ce0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002aec:	2303      	movs	r3, #3
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002af0:	2309      	movs	r3, #9
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af8:	4619      	mov	r1, r3
 8002afa:	480a      	ldr	r0, [pc, #40]	; (8002b24 <BSP_LCD_MspInit+0x198>)
 8002afc:	f001 f8f0 	bl	8003ce0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002b00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4809      	ldr	r0, [pc, #36]	; (8002b34 <BSP_LCD_MspInit+0x1a8>)
 8002b0e:	f001 f8e7 	bl	8003ce0 <HAL_GPIO_Init>
}
 8002b12:	bf00      	nop
 8002b14:	3738      	adds	r7, #56	; 0x38
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020c00 	.word	0x40020c00
 8002b30:	40021400 	.word	0x40021400
 8002b34:	40021800 	.word	0x40021800

08002b38 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002b38:	b5b0      	push	{r4, r5, r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	603a      	str	r2, [r7, #0]
 8002b42:	80fb      	strh	r3, [r7, #6]
 8002b44:	460b      	mov	r3, r1
 8002b46:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <BSP_LCD_DrawPixel+0x44>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <BSP_LCD_DrawPixel+0x48>)
 8002b4e:	2134      	movs	r1, #52	; 0x34
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	335c      	adds	r3, #92	; 0x5c
 8002b58:	681c      	ldr	r4, [r3, #0]
 8002b5a:	88bd      	ldrh	r5, [r7, #4]
 8002b5c:	f7ff fc96 	bl	800248c <BSP_LCD_GetXSize>
 8002b60:	4603      	mov	r3, r0
 8002b62:	fb03 f205 	mul.w	r2, r3, r5
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4423      	add	r3, r4
 8002b6e:	461a      	mov	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b7c:	200001c0 	.word	0x200001c0
 8002b80:	200004c0 	.word	0x200004c0

08002b84 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	603a      	str	r2, [r7, #0]
 8002b8e:	80fb      	strh	r3, [r7, #6]
 8002b90:	460b      	mov	r3, r1
 8002b92:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002ba0:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <DrawChar+0x16c>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4953      	ldr	r1, [pc, #332]	; (8002cf4 <DrawChar+0x170>)
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	88db      	ldrh	r3, [r3, #6]
 8002bb6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <DrawChar+0x16c>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <DrawChar+0x170>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3308      	adds	r3, #8
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002bd0:	8a3b      	ldrh	r3, [r7, #16]
 8002bd2:	3307      	adds	r3, #7
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da00      	bge.n	8002bda <DrawChar+0x56>
 8002bd8:	3307      	adds	r3, #7
 8002bda:	10db      	asrs	r3, r3, #3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	8a3b      	ldrh	r3, [r7, #16]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	e076      	b.n	8002cde <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002bf0:	8a3b      	ldrh	r3, [r7, #16]
 8002bf2:	3307      	adds	r3, #7
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da00      	bge.n	8002bfa <DrawChar+0x76>
 8002bf8:	3307      	adds	r3, #7
 8002bfa:	10db      	asrs	r3, r3, #3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fb03 f302 	mul.w	r3, r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002c0a:	8a3b      	ldrh	r3, [r7, #16]
 8002c0c:	3307      	adds	r3, #7
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da00      	bge.n	8002c14 <DrawChar+0x90>
 8002c12:	3307      	adds	r3, #7
 8002c14:	10db      	asrs	r3, r3, #3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d002      	beq.n	8002c20 <DrawChar+0x9c>
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d004      	beq.n	8002c28 <DrawChar+0xa4>
 8002c1e:	e00c      	b.n	8002c3a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	617b      	str	r3, [r7, #20]
      break;
 8002c26:	e016      	b.n	8002c56 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	3201      	adds	r2, #1
 8002c32:	7812      	ldrb	r2, [r2, #0]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
      break;
 8002c38:	e00d      	b.n	8002c56 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	041a      	lsls	r2, r3, #16
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	3301      	adds	r3, #1
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	3202      	adds	r2, #2
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
      break;
 8002c54:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e036      	b.n	8002cca <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002c5c:	8a3a      	ldrh	r2, [r7, #16]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	1ad2      	subs	r2, r2, r3
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	4413      	add	r3, r2
 8002c66:	3b01      	subs	r3, #1
 8002c68:	2201      	movs	r2, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d012      	beq.n	8002c9e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b298      	uxth	r0, r3
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <DrawChar+0x16c>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	491b      	ldr	r1, [pc, #108]	; (8002cf4 <DrawChar+0x170>)
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	88bb      	ldrh	r3, [r7, #4]
 8002c96:	4619      	mov	r1, r3
 8002c98:	f7ff ff4e 	bl	8002b38 <BSP_LCD_DrawPixel>
 8002c9c:	e012      	b.n	8002cc4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b298      	uxth	r0, r3
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <DrawChar+0x16c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4911      	ldr	r1, [pc, #68]	; (8002cf4 <DrawChar+0x170>)
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3304      	adds	r3, #4
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	88bb      	ldrh	r3, [r7, #4]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7ff ff3a 	bl	8002b38 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	8a3b      	ldrh	r3, [r7, #16]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3c4      	bcc.n	8002c5c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002cd2:	88bb      	ldrh	r3, [r7, #4]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	8a7b      	ldrh	r3, [r7, #18]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d384      	bcc.n	8002bf0 <DrawChar+0x6c>
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	200001c0 	.word	0x200001c0
 8002cf4:	200001c4 	.word	0x200001c4

08002cf8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <FillBuffer+0x68>)
 8002d08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d0c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <FillBuffer+0x68>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002d14:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <FillBuffer+0x68>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <FillBuffer+0x68>)
 8002d1c:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <FillBuffer+0x6c>)
 8002d1e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002d20:	480f      	ldr	r0, [pc, #60]	; (8002d60 <FillBuffer+0x68>)
 8002d22:	f000 fd51 	bl	80037c8 <HAL_DMA2D_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d115      	bne.n	8002d58 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002d2c:	68f9      	ldr	r1, [r7, #12]
 8002d2e:	480c      	ldr	r0, [pc, #48]	; (8002d60 <FillBuffer+0x68>)
 8002d30:	f000 fea8 	bl	8003a84 <HAL_DMA2D_ConfigLayer>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10e      	bne.n	8002d58 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	4806      	ldr	r0, [pc, #24]	; (8002d60 <FillBuffer+0x68>)
 8002d46:	f000 fd88 	bl	800385a <HAL_DMA2D_Start>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002d50:	210a      	movs	r1, #10
 8002d52:	4803      	ldr	r0, [pc, #12]	; (8002d60 <FillBuffer+0x68>)
 8002d54:	f000 fdac 	bl	80038b0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000150 	.word	0x20000150
 8002d64:	4002b000 	.word	0x4002b000

08002d68 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002d6c:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <BSP_SDRAM_Init+0xb0>)
 8002d70:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002d72:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <BSP_SDRAM_Init+0xb4>)
 8002d74:	2202      	movs	r2, #2
 8002d76:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002d78:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <BSP_SDRAM_Init+0xb4>)
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002d7e:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <BSP_SDRAM_Init+0xb4>)
 8002d80:	2204      	movs	r2, #4
 8002d82:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002d84:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <BSP_SDRAM_Init+0xb4>)
 8002d86:	2207      	movs	r2, #7
 8002d88:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <BSP_SDRAM_Init+0xb4>)
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002d90:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <BSP_SDRAM_Init+0xb4>)
 8002d92:	2202      	movs	r2, #2
 8002d94:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <BSP_SDRAM_Init+0xb4>)
 8002d98:	2202      	movs	r2, #2
 8002d9a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002daa:	2204      	movs	r2, #4
 8002dac:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002dae:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002db0:	2210      	movs	r2, #16
 8002db2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002db4:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002db6:	2240      	movs	r2, #64	; 0x40
 8002db8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002dbc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002dc0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dce:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002dd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002dde:	2100      	movs	r1, #0
 8002de0:	480c      	ldr	r0, [pc, #48]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002de2:	f000 f87f 	bl	8002ee4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002de6:	490d      	ldr	r1, [pc, #52]	; (8002e1c <BSP_SDRAM_Init+0xb4>)
 8002de8:	480a      	ldr	r0, [pc, #40]	; (8002e14 <BSP_SDRAM_Init+0xac>)
 8002dea:	f002 fd49 	bl	8005880 <HAL_SDRAM_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <BSP_SDRAM_Init+0xb8>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e002      	b.n	8002e02 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <BSP_SDRAM_Init+0xb8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002e02:	f240 506a 	movw	r0, #1386	; 0x56a
 8002e06:	f000 f80d 	bl	8002e24 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <BSP_SDRAM_Init+0xb8>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200001dc 	.word	0x200001dc
 8002e18:	a0000140 	.word	0xa0000140
 8002e1c:	20000210 	.word	0x20000210
 8002e20:	20000060 	.word	0x20000060

08002e24 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002e30:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e36:	4b29      	ldr	r3, [pc, #164]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e38:	2208      	movs	r2, #8
 8002e3a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002e3c:	4b27      	ldr	r3, [pc, #156]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4c:	4923      	ldr	r1, [pc, #140]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e4e:	4824      	ldr	r0, [pc, #144]	; (8002ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e50:	f002 fd4a 	bl	80058e8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002e54:	2001      	movs	r0, #1
 8002e56:	f000 f9c3 	bl	80031e0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e60:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e62:	2208      	movs	r2, #8
 8002e64:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e76:	4919      	ldr	r1, [pc, #100]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e78:	4819      	ldr	r0, [pc, #100]	; (8002ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e7a:	f002 fd35 	bl	80058e8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e80:	2203      	movs	r2, #3
 8002e82:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e86:	2208      	movs	r2, #8
 8002e88:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e9a:	4910      	ldr	r1, [pc, #64]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e9c:	4810      	ldr	r0, [pc, #64]	; (8002ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e9e:	f002 fd23 	bl	80058e8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002ea2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002ea6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eaa:	2204      	movs	r2, #4
 8002eac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ebe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec4:	4905      	ldr	r1, [pc, #20]	; (8002edc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ec6:	4806      	ldr	r0, [pc, #24]	; (8002ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ec8:	f002 fd0e 	bl	80058e8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ed0:	f002 fd35 	bl	800593e <HAL_SDRAM_ProgramRefreshRate>
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	2000022c 	.word	0x2000022c
 8002ee0:	200001dc 	.word	0x200001dc

08002ee4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b090      	sub	sp, #64	; 0x40
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80ec 	beq.w	80030ce <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efa:	4b77      	ldr	r3, [pc, #476]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	4a76      	ldr	r2, [pc, #472]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6393      	str	r3, [r2, #56]	; 0x38
 8002f06:	4b74      	ldr	r3, [pc, #464]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	4b70      	ldr	r3, [pc, #448]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a6f      	ldr	r2, [pc, #444]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b6d      	ldr	r3, [pc, #436]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	4b69      	ldr	r3, [pc, #420]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a68      	ldr	r2, [pc, #416]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	623b      	str	r3, [r7, #32]
 8002f48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a61      	ldr	r2, [pc, #388]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b5f      	ldr	r3, [pc, #380]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	4b54      	ldr	r3, [pc, #336]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a53      	ldr	r2, [pc, #332]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f8c:	f043 0310 	orr.w	r3, r3, #16
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	4b4d      	ldr	r3, [pc, #308]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a4c      	ldr	r2, [pc, #304]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002fa8:	f043 0320 	orr.w	r3, r3, #32
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a45      	ldr	r2, [pc, #276]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <BSP_SDRAM_MspInit+0x1f4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002fe6:	2360      	movs	r3, #96	; 0x60
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fee:	4619      	mov	r1, r3
 8002ff0:	483a      	ldr	r0, [pc, #232]	; (80030dc <BSP_SDRAM_MspInit+0x1f8>)
 8002ff2:	f000 fe75 	bl	8003ce0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ffe:	4619      	mov	r1, r3
 8003000:	4837      	ldr	r0, [pc, #220]	; (80030e0 <BSP_SDRAM_MspInit+0x1fc>)
 8003002:	f000 fe6d 	bl	8003ce0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003006:	f24c 7303 	movw	r3, #50947	; 0xc703
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800300c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003010:	4619      	mov	r1, r3
 8003012:	4834      	ldr	r0, [pc, #208]	; (80030e4 <BSP_SDRAM_MspInit+0x200>)
 8003014:	f000 fe64 	bl	8003ce0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003018:	f64f 7383 	movw	r3, #65411	; 0xff83
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800301e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003022:	4619      	mov	r1, r3
 8003024:	4830      	ldr	r0, [pc, #192]	; (80030e8 <BSP_SDRAM_MspInit+0x204>)
 8003026:	f000 fe5b 	bl	8003ce0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800302a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003034:	4619      	mov	r1, r3
 8003036:	482d      	ldr	r0, [pc, #180]	; (80030ec <BSP_SDRAM_MspInit+0x208>)
 8003038:	f000 fe52 	bl	8003ce0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800303c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003046:	4619      	mov	r1, r3
 8003048:	4829      	ldr	r0, [pc, #164]	; (80030f0 <BSP_SDRAM_MspInit+0x20c>)
 800304a:	f000 fe49 	bl	8003ce0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003054:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 8003056:	2280      	movs	r2, #128	; 0x80
 8003058:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 800305c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003060:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 8003064:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003068:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800306a:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 800306c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003070:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 8003074:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003078:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800307a:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 800307c:	2200      	movs	r2, #0
 800307e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003080:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 8003082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003086:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 800308a:	2200      	movs	r2, #0
 800308c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 8003090:	2203      	movs	r2, #3
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003094:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 8003096:	2200      	movs	r2, #0
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <BSP_SDRAM_MspInit+0x214>)
 80030a4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
 80030ac:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80030b2:	4810      	ldr	r0, [pc, #64]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 80030b4:	f000 fa78 	bl	80035a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80030b8:	480e      	ldr	r0, [pc, #56]	; (80030f4 <BSP_SDRAM_MspInit+0x210>)
 80030ba:	f000 f9c7 	bl	800344c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	210f      	movs	r1, #15
 80030c2:	2038      	movs	r0, #56	; 0x38
 80030c4:	f000 f98b 	bl	80033de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80030c8:	2038      	movs	r0, #56	; 0x38
 80030ca:	f000 f9a4 	bl	8003416 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80030ce:	bf00      	nop
 80030d0:	3740      	adds	r7, #64	; 0x40
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40020400 	.word	0x40020400
 80030e0:	40020800 	.word	0x40020800
 80030e4:	40020c00 	.word	0x40020c00
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40021400 	.word	0x40021400
 80030f0:	40021800 	.word	0x40021800
 80030f4:	2000023c 	.word	0x2000023c
 80030f8:	40026410 	.word	0x40026410

080030fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_Init+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0d      	ldr	r2, [pc, #52]	; (800313c <HAL_Init+0x40>)
 8003106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800310a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <HAL_Init+0x40>)
 8003112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a07      	ldr	r2, [pc, #28]	; (800313c <HAL_Init+0x40>)
 800311e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003124:	2003      	movs	r0, #3
 8003126:	f000 f94f 	bl	80033c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312a:	2000      	movs	r0, #0
 800312c:	f000 f808 	bl	8003140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003130:	f7fe fa70 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00

08003140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_InitTick+0x54>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_InitTick+0x58>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003156:	fbb3 f3f1 	udiv	r3, r3, r1
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f967 	bl	8003432 <HAL_SYSTICK_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00e      	b.n	800318c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b0f      	cmp	r3, #15
 8003172:	d80a      	bhi.n	800318a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003174:	2200      	movs	r2, #0
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f000 f92f 	bl	80033de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003180:	4a06      	ldr	r2, [pc, #24]	; (800319c <HAL_InitTick+0x5c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000000 	.word	0x20000000
 8003198:	20000068 	.word	0x20000068
 800319c:	20000064 	.word	0x20000064

080031a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_IncTick+0x20>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_IncTick+0x24>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <HAL_IncTick+0x24>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000068 	.word	0x20000068
 80031c4:	2000056c 	.word	0x2000056c

080031c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return uwTick;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_GetTick+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	2000056c 	.word	0x2000056c

080031e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e8:	f7ff ffee 	bl	80031c8 <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d005      	beq.n	8003206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_Delay+0x44>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003206:	bf00      	nop
 8003208:	f7ff ffde 	bl	80031c8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	429a      	cmp	r2, r3
 8003216:	d8f7      	bhi.n	8003208 <HAL_Delay+0x28>
  {
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000068 	.word	0x20000068

08003228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325a:	4a04      	ldr	r2, [pc, #16]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60d3      	str	r3, [r2, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <__NVIC_GetPriorityGrouping+0x18>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 0307 	and.w	r3, r3, #7
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0b      	blt.n	80032b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <__NVIC_EnableIRQ+0x38>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <__NVIC_SetPriority+0x4c>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f0:	e00a      	b.n	8003308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	; (8003318 <__NVIC_SetPriority+0x50>)
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3b04      	subs	r3, #4
 8003300:	0112      	lsls	r2, r2, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	440b      	add	r3, r1
 8003306:	761a      	strb	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
         );
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003394:	d301      	bcc.n	800339a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003396:	2301      	movs	r3, #1
 8003398:	e00f      	b.n	80033ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <SysTick_Config+0x40>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a2:	210f      	movs	r1, #15
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f7ff ff8e 	bl	80032c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <SysTick_Config+0x40>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b2:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <SysTick_Config+0x40>)
 80033b4:	2207      	movs	r2, #7
 80033b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	e000e010 	.word	0xe000e010

080033c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff29 	bl	8003228 <__NVIC_SetPriorityGrouping>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f0:	f7ff ff3e 	bl	8003270 <__NVIC_GetPriorityGrouping>
 80033f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff ff8e 	bl	800331c <NVIC_EncodePriority>
 8003400:	4602      	mov	r2, r0
 8003402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff5d 	bl	80032c8 <__NVIC_SetPriority>
}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff31 	bl	800328c <__NVIC_EnableIRQ>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffa2 	bl	8003384 <SysTick_Config>
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7ff feb6 	bl	80031c8 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e099      	b.n	800359c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003488:	e00f      	b.n	80034aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348a:	f7ff fe9d 	bl	80031c8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b05      	cmp	r3, #5
 8003496:	d908      	bls.n	80034aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2203      	movs	r2, #3
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e078      	b.n	800359c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e8      	bne.n	800348a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <HAL_DMA_Init+0x158>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b04      	cmp	r3, #4
 8003502:	d107      	bne.n	8003514 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	4313      	orrs	r3, r2
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0307 	bic.w	r3, r3, #7
 800352a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b04      	cmp	r3, #4
 800353c:	d117      	bne.n	800356e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8bd 	bl	80036d0 <DMA_CheckFifoParam>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800356a:	2301      	movs	r3, #1
 800356c:	e016      	b.n	800359c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f874 	bl	8003664 <DMA_CalcBaseAndBitshift>
 800357c:	4603      	mov	r3, r0
 800357e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	223f      	movs	r2, #63	; 0x3f
 8003586:	409a      	lsls	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	f010803f 	.word	0xf010803f

080035a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e050      	b.n	800365c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d101      	bne.n	80035ca <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
 80035c8:	e048      	b.n	800365c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2221      	movs	r2, #33	; 0x21
 8003608:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f82a 	bl	8003664 <DMA_CalcBaseAndBitshift>
 8003610:	4603      	mov	r3, r0
 8003612:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	223f      	movs	r2, #63	; 0x3f
 800363e:	409a      	lsls	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	3b10      	subs	r3, #16
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800367e:	4a13      	ldr	r2, [pc, #76]	; (80036cc <DMA_CalcBaseAndBitshift+0x68>)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b03      	cmp	r3, #3
 8003690:	d909      	bls.n	80036a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800369a:	f023 0303 	bic.w	r3, r3, #3
 800369e:	1d1a      	adds	r2, r3, #4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	659a      	str	r2, [r3, #88]	; 0x58
 80036a4:	e007      	b.n	80036b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	aaaaaaab 	.word	0xaaaaaaab
 80036cc:	0800aba4 	.word	0x0800aba4

080036d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11f      	bne.n	800372a <DMA_CheckFifoParam+0x5a>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d856      	bhi.n	800379e <DMA_CheckFifoParam+0xce>
 80036f0:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <DMA_CheckFifoParam+0x28>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	08003709 	.word	0x08003709
 80036fc:	0800371b 	.word	0x0800371b
 8003700:	08003709 	.word	0x08003709
 8003704:	0800379f 	.word	0x0800379f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d046      	beq.n	80037a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003718:	e043      	b.n	80037a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003722:	d140      	bne.n	80037a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003728:	e03d      	b.n	80037a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003732:	d121      	bne.n	8003778 <DMA_CheckFifoParam+0xa8>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d837      	bhi.n	80037aa <DMA_CheckFifoParam+0xda>
 800373a:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <DMA_CheckFifoParam+0x70>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	08003751 	.word	0x08003751
 8003744:	08003757 	.word	0x08003757
 8003748:	08003751 	.word	0x08003751
 800374c:	08003769 	.word	0x08003769
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      break;
 8003754:	e030      	b.n	80037b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d025      	beq.n	80037ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003766:	e022      	b.n	80037ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003770:	d11f      	bne.n	80037b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003776:	e01c      	b.n	80037b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d903      	bls.n	8003786 <DMA_CheckFifoParam+0xb6>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d003      	beq.n	800378c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003784:	e018      	b.n	80037b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
      break;
 800378a:	e015      	b.n	80037b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00e      	beq.n	80037b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      break;
 800379c:	e00b      	b.n	80037b6 <DMA_CheckFifoParam+0xe6>
      break;
 800379e:	bf00      	nop
 80037a0:	e00a      	b.n	80037b8 <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e008      	b.n	80037b8 <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e006      	b.n	80037b8 <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
 80037ac:	e004      	b.n	80037b8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
    }
  } 
  
  return status; 
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop

080037c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e03b      	b.n	8003852 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd ff38 	bl	8001664 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	f023 0107 	bic.w	r1, r3, #7
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003832:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68d1      	ldr	r1, [r2, #12]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	430b      	orrs	r3, r1
 8003840:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af02      	add	r7, sp, #8
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_DMA2D_Start+0x1c>
 8003872:	2302      	movs	r3, #2
 8003874:	e018      	b.n	80038a8 <HAL_DMA2D_Start+0x4e>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f989 	bl	8003ba8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d056      	beq.n	800397a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038cc:	f7ff fc7c 	bl	80031c8 <HAL_GetTick>
 80038d0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80038d2:	e04b      	b.n	800396c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d023      	beq.n	800392e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f4:	f043 0202 	orr.w	r2, r3, #2
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2221      	movs	r2, #33	; 0x21
 8003918:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0a5      	b.n	8003a7a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d01a      	beq.n	800396c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7ff fc47 	bl	80031c8 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <HAL_DMA2D_PollForTransfer+0x9c>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10f      	bne.n	800396c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2203      	movs	r2, #3
 800395c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e086      	b.n	8003a7a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0ac      	beq.n	80038d4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d061      	beq.n	8003a60 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800399c:	f7ff fc14 	bl	80031c8 <HAL_GetTick>
 80039a0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80039a2:	e056      	b.n	8003a52 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02e      	beq.n	8003a14 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	f043 0204 	orr.w	r2, r3, #4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	f043 0202 	orr.w	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2229      	movs	r2, #41	; 0x29
 80039fe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2204      	movs	r2, #4
 8003a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e032      	b.n	8003a7a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1a:	d01a      	beq.n	8003a52 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a1c:	f7ff fbd4 	bl	80031c8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <HAL_DMA2D_PollForTransfer+0x182>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e013      	b.n	8003a7a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0a1      	beq.n	80039a4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2212      	movs	r2, #18
 8003a66:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_DMA2D_ConfigLayer+0x20>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e079      	b.n	8003b98 <HAL_DMA2D_ConfigLayer+0x114>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	3318      	adds	r3, #24
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003ace:	4b35      	ldr	r3, [pc, #212]	; (8003ba4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003ad0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b0a      	cmp	r3, #10
 8003ad8:	d003      	beq.n	8003ae2 <HAL_DMA2D_ConfigLayer+0x5e>
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b09      	cmp	r3, #9
 8003ae0:	d107      	bne.n	8003af2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e005      	b.n	8003afe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d120      	bne.n	8003b46 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	ea02 0103 	and.w	r1, r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b0a      	cmp	r3, #10
 8003b2c:	d003      	beq.n	8003b36 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b09      	cmp	r3, #9
 8003b34:	d127      	bne.n	8003b86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
 8003b44:	e01f      	b.n	8003b86 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	ea02 0103 	and.w	r1, r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b0a      	cmp	r3, #10
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA2D_ConfigLayer+0xf4>
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b09      	cmp	r3, #9
 8003b76:	d106      	bne.n	8003b86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b84:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	ff03000f 	.word	0xff03000f

08003ba8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b08b      	sub	sp, #44	; 0x2c
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	041a      	lsls	r2, r3, #16
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003be0:	d174      	bne.n	8003ccc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003be8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bf0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bf8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d108      	bne.n	8003c1a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
 8003c18:	e053      	b.n	8003cc2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d106      	bne.n	8003c30 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	e048      	b.n	8003cc2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d111      	bne.n	8003c5c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	0cdb      	lsrs	r3, r3, #19
 8003c3c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	0a9b      	lsrs	r3, r3, #10
 8003c42:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	08db      	lsrs	r3, r3, #3
 8003c48:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	02db      	lsls	r3, r3, #11
 8003c52:	4313      	orrs	r3, r2
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	e032      	b.n	8003cc2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d117      	bne.n	8003c94 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	0fdb      	lsrs	r3, r3, #31
 8003c68:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	0cdb      	lsrs	r3, r3, #19
 8003c6e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	0adb      	lsrs	r3, r3, #11
 8003c74:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	08db      	lsrs	r3, r3, #3
 8003c7a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	029b      	lsls	r3, r3, #10
 8003c84:	431a      	orrs	r2, r3
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	03db      	lsls	r3, r3, #15
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
 8003c92:	e016      	b.n	8003cc2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	0f1b      	lsrs	r3, r3, #28
 8003c98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	0d1b      	lsrs	r3, r3, #20
 8003c9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	0b1b      	lsrs	r3, r3, #12
 8003ca4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	011a      	lsls	r2, r3, #4
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	031b      	lsls	r3, r3, #12
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003cca:	e003      	b.n	8003cd4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	60da      	str	r2, [r3, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	372c      	adds	r7, #44	; 0x2c
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	e177      	b.n	8003fec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	f040 8166 	bne.w	8003fe6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d005      	beq.n	8003d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d130      	bne.n	8003d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d68:	2201      	movs	r2, #1
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 0201 	and.w	r2, r3, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d017      	beq.n	8003dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2203      	movs	r2, #3
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d123      	bne.n	8003e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	08da      	lsrs	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3208      	adds	r2, #8
 8003de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	220f      	movs	r2, #15
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	08da      	lsrs	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3208      	adds	r2, #8
 8003e1e:	69b9      	ldr	r1, [r7, #24]
 8003e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2203      	movs	r2, #3
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0203 	and.w	r2, r3, #3
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 80c0 	beq.w	8003fe6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_GPIO_Init+0x324>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	4a65      	ldr	r2, [pc, #404]	; (8004004 <HAL_GPIO_Init+0x324>)
 8003e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e74:	6453      	str	r3, [r2, #68]	; 0x44
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_GPIO_Init+0x324>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e82:	4a61      	ldr	r2, [pc, #388]	; (8004008 <HAL_GPIO_Init+0x328>)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	220f      	movs	r2, #15
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_GPIO_Init+0x32c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d037      	beq.n	8003f1e <HAL_GPIO_Init+0x23e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a57      	ldr	r2, [pc, #348]	; (8004010 <HAL_GPIO_Init+0x330>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d031      	beq.n	8003f1a <HAL_GPIO_Init+0x23a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a56      	ldr	r2, [pc, #344]	; (8004014 <HAL_GPIO_Init+0x334>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02b      	beq.n	8003f16 <HAL_GPIO_Init+0x236>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a55      	ldr	r2, [pc, #340]	; (8004018 <HAL_GPIO_Init+0x338>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d025      	beq.n	8003f12 <HAL_GPIO_Init+0x232>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	; (800401c <HAL_GPIO_Init+0x33c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01f      	beq.n	8003f0e <HAL_GPIO_Init+0x22e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_GPIO_Init+0x340>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d019      	beq.n	8003f0a <HAL_GPIO_Init+0x22a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_GPIO_Init+0x344>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_GPIO_Init+0x226>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a51      	ldr	r2, [pc, #324]	; (8004028 <HAL_GPIO_Init+0x348>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00d      	beq.n	8003f02 <HAL_GPIO_Init+0x222>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a50      	ldr	r2, [pc, #320]	; (800402c <HAL_GPIO_Init+0x34c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <HAL_GPIO_Init+0x21e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4f      	ldr	r2, [pc, #316]	; (8004030 <HAL_GPIO_Init+0x350>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_GPIO_Init+0x21a>
 8003ef6:	2309      	movs	r3, #9
 8003ef8:	e012      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003efa:	230a      	movs	r3, #10
 8003efc:	e010      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003efe:	2308      	movs	r3, #8
 8003f00:	e00e      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f02:	2307      	movs	r3, #7
 8003f04:	e00c      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f06:	2306      	movs	r3, #6
 8003f08:	e00a      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	e008      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f0e:	2304      	movs	r3, #4
 8003f10:	e006      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f12:	2303      	movs	r3, #3
 8003f14:	e004      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e002      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f002 0203 	and.w	r2, r2, #3
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	4093      	lsls	r3, r2
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f30:	4935      	ldr	r1, [pc, #212]	; (8004008 <HAL_GPIO_Init+0x328>)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	3302      	adds	r3, #2
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f3e:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f62:	4a34      	ldr	r2, [pc, #208]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f68:	4b32      	ldr	r3, [pc, #200]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f8c:	4a29      	ldr	r2, [pc, #164]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f92:	4b28      	ldr	r3, [pc, #160]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fb6:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	f67f ae84 	bls.w	8003cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	40013800 	.word	0x40013800
 800400c:	40020000 	.word	0x40020000
 8004010:	40020400 	.word	0x40020400
 8004014:	40020800 	.word	0x40020800
 8004018:	40020c00 	.word	0x40020c00
 800401c:	40021000 	.word	0x40021000
 8004020:	40021400 	.word	0x40021400
 8004024:	40021800 	.word	0x40021800
 8004028:	40021c00 	.word	0x40021c00
 800402c:	40022000 	.word	0x40022000
 8004030:	40022400 	.word	0x40022400
 8004034:	40013c00 	.word	0x40013c00

08004038 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e0d9      	b.n	8004208 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004054:	2201      	movs	r2, #1
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4013      	ands	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	429a      	cmp	r2, r3
 800406c:	f040 80c9 	bne.w	8004202 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004070:	4a6b      	ldr	r2, [pc, #428]	; (8004220 <HAL_GPIO_DeInit+0x1e8>)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	3302      	adds	r3, #2
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	220f      	movs	r2, #15
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	4013      	ands	r3, r2
 8004090:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a63      	ldr	r2, [pc, #396]	; (8004224 <HAL_GPIO_DeInit+0x1ec>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d037      	beq.n	800410a <HAL_GPIO_DeInit+0xd2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a62      	ldr	r2, [pc, #392]	; (8004228 <HAL_GPIO_DeInit+0x1f0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d031      	beq.n	8004106 <HAL_GPIO_DeInit+0xce>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a61      	ldr	r2, [pc, #388]	; (800422c <HAL_GPIO_DeInit+0x1f4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02b      	beq.n	8004102 <HAL_GPIO_DeInit+0xca>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a60      	ldr	r2, [pc, #384]	; (8004230 <HAL_GPIO_DeInit+0x1f8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d025      	beq.n	80040fe <HAL_GPIO_DeInit+0xc6>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a5f      	ldr	r2, [pc, #380]	; (8004234 <HAL_GPIO_DeInit+0x1fc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01f      	beq.n	80040fa <HAL_GPIO_DeInit+0xc2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a5e      	ldr	r2, [pc, #376]	; (8004238 <HAL_GPIO_DeInit+0x200>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d019      	beq.n	80040f6 <HAL_GPIO_DeInit+0xbe>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a5d      	ldr	r2, [pc, #372]	; (800423c <HAL_GPIO_DeInit+0x204>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_GPIO_DeInit+0xba>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a5c      	ldr	r2, [pc, #368]	; (8004240 <HAL_GPIO_DeInit+0x208>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00d      	beq.n	80040ee <HAL_GPIO_DeInit+0xb6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a5b      	ldr	r2, [pc, #364]	; (8004244 <HAL_GPIO_DeInit+0x20c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <HAL_GPIO_DeInit+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a5a      	ldr	r2, [pc, #360]	; (8004248 <HAL_GPIO_DeInit+0x210>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_GPIO_DeInit+0xae>
 80040e2:	2309      	movs	r3, #9
 80040e4:	e012      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 80040e6:	230a      	movs	r3, #10
 80040e8:	e010      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 80040ea:	2308      	movs	r3, #8
 80040ec:	e00e      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 80040ee:	2307      	movs	r3, #7
 80040f0:	e00c      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 80040f2:	2306      	movs	r3, #6
 80040f4:	e00a      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 80040f6:	2305      	movs	r3, #5
 80040f8:	e008      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 80040fa:	2304      	movs	r3, #4
 80040fc:	e006      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 80040fe:	2303      	movs	r3, #3
 8004100:	e004      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 8004102:	2302      	movs	r3, #2
 8004104:	e002      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_GPIO_DeInit+0xd4>
 800410a:	2300      	movs	r3, #0
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	f002 0203 	and.w	r2, r2, #3
 8004112:	0092      	lsls	r2, r2, #2
 8004114:	4093      	lsls	r3, r2
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	d132      	bne.n	8004182 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800411c:	4b4b      	ldr	r3, [pc, #300]	; (800424c <HAL_GPIO_DeInit+0x214>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	43db      	mvns	r3, r3
 8004124:	4949      	ldr	r1, [pc, #292]	; (800424c <HAL_GPIO_DeInit+0x214>)
 8004126:	4013      	ands	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800412a:	4b48      	ldr	r3, [pc, #288]	; (800424c <HAL_GPIO_DeInit+0x214>)
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	43db      	mvns	r3, r3
 8004132:	4946      	ldr	r1, [pc, #280]	; (800424c <HAL_GPIO_DeInit+0x214>)
 8004134:	4013      	ands	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004138:	4b44      	ldr	r3, [pc, #272]	; (800424c <HAL_GPIO_DeInit+0x214>)
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43db      	mvns	r3, r3
 8004140:	4942      	ldr	r1, [pc, #264]	; (800424c <HAL_GPIO_DeInit+0x214>)
 8004142:	4013      	ands	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004146:	4b41      	ldr	r3, [pc, #260]	; (800424c <HAL_GPIO_DeInit+0x214>)
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	43db      	mvns	r3, r3
 800414e:	493f      	ldr	r1, [pc, #252]	; (800424c <HAL_GPIO_DeInit+0x214>)
 8004150:	4013      	ands	r3, r2
 8004152:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	220f      	movs	r2, #15
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004164:	4a2e      	ldr	r2, [pc, #184]	; (8004220 <HAL_GPIO_DeInit+0x1e8>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	43da      	mvns	r2, r3
 8004174:	482a      	ldr	r0, [pc, #168]	; (8004220 <HAL_GPIO_DeInit+0x1e8>)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	089b      	lsrs	r3, r3, #2
 800417a:	400a      	ands	r2, r1
 800417c:	3302      	adds	r3, #2
 800417e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2103      	movs	r1, #3
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	08da      	lsrs	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3208      	adds	r2, #8
 80041a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	220f      	movs	r2, #15
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	08d2      	lsrs	r2, r2, #3
 80041b8:	4019      	ands	r1, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3208      	adds	r2, #8
 80041be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	2103      	movs	r1, #3
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	401a      	ands	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	2101      	movs	r1, #1
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	401a      	ands	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2103      	movs	r1, #3
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	401a      	ands	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3301      	adds	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b0f      	cmp	r3, #15
 800420c:	f67f af22 	bls.w	8004054 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40013800 	.word	0x40013800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020400 	.word	0x40020400
 800422c:	40020800 	.word	0x40020800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40021400 	.word	0x40021400
 800423c:	40021800 	.word	0x40021800
 8004240:	40021c00 	.word	0x40021c00
 8004244:	40022000 	.word	0x40022000
 8004248:	40022400 	.word	0x40022400
 800424c:	40013c00 	.word	0x40013c00

08004250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
 800425c:	4613      	mov	r3, r2
 800425e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004260:	787b      	ldrb	r3, [r7, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800426c:	e003      	b.n	8004276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	041a      	lsls	r2, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	619a      	str	r2, [r3, #24]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e12b      	b.n	80044ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd f9fc 	bl	80016a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042e8:	f001 f8f8 	bl	80054dc <HAL_RCC_GetPCLK1Freq>
 80042ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4a81      	ldr	r2, [pc, #516]	; (80044f8 <HAL_I2C_Init+0x274>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d807      	bhi.n	8004308 <HAL_I2C_Init+0x84>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a80      	ldr	r2, [pc, #512]	; (80044fc <HAL_I2C_Init+0x278>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	bf94      	ite	ls
 8004300:	2301      	movls	r3, #1
 8004302:	2300      	movhi	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e006      	b.n	8004316 <HAL_I2C_Init+0x92>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a7d      	ldr	r2, [pc, #500]	; (8004500 <HAL_I2C_Init+0x27c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	bf94      	ite	ls
 8004310:	2301      	movls	r3, #1
 8004312:	2300      	movhi	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0e7      	b.n	80044ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a78      	ldr	r2, [pc, #480]	; (8004504 <HAL_I2C_Init+0x280>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0c9b      	lsrs	r3, r3, #18
 8004328:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a6a      	ldr	r2, [pc, #424]	; (80044f8 <HAL_I2C_Init+0x274>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d802      	bhi.n	8004358 <HAL_I2C_Init+0xd4>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	3301      	adds	r3, #1
 8004356:	e009      	b.n	800436c <HAL_I2C_Init+0xe8>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	4a69      	ldr	r2, [pc, #420]	; (8004508 <HAL_I2C_Init+0x284>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	099b      	lsrs	r3, r3, #6
 800436a:	3301      	adds	r3, #1
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	430b      	orrs	r3, r1
 8004372:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800437e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	495c      	ldr	r1, [pc, #368]	; (80044f8 <HAL_I2C_Init+0x274>)
 8004388:	428b      	cmp	r3, r1
 800438a:	d819      	bhi.n	80043c0 <HAL_I2C_Init+0x13c>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1e59      	subs	r1, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fbb1 f3f3 	udiv	r3, r1, r3
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043a0:	400b      	ands	r3, r1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_I2C_Init+0x138>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1e59      	subs	r1, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b4:	3301      	adds	r3, #1
 80043b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ba:	e051      	b.n	8004460 <HAL_I2C_Init+0x1dc>
 80043bc:	2304      	movs	r3, #4
 80043be:	e04f      	b.n	8004460 <HAL_I2C_Init+0x1dc>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d111      	bne.n	80043ec <HAL_I2C_Init+0x168>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e58      	subs	r0, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	440b      	add	r3, r1
 80043d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043da:	3301      	adds	r3, #1
 80043dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e012      	b.n	8004412 <HAL_I2C_Init+0x18e>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1e58      	subs	r0, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	0099      	lsls	r1, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004402:	3301      	adds	r3, #1
 8004404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Init+0x196>
 8004416:	2301      	movs	r3, #1
 8004418:	e022      	b.n	8004460 <HAL_I2C_Init+0x1dc>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10e      	bne.n	8004440 <HAL_I2C_Init+0x1bc>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1e58      	subs	r0, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6859      	ldr	r1, [r3, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	440b      	add	r3, r1
 8004430:	fbb0 f3f3 	udiv	r3, r0, r3
 8004434:	3301      	adds	r3, #1
 8004436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443e:	e00f      	b.n	8004460 <HAL_I2C_Init+0x1dc>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1e58      	subs	r0, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	0099      	lsls	r1, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	fbb0 f3f3 	udiv	r3, r0, r3
 8004456:	3301      	adds	r3, #1
 8004458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	6809      	ldr	r1, [r1, #0]
 8004464:	4313      	orrs	r3, r2
 8004466:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800448e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6911      	ldr	r1, [r2, #16]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68d2      	ldr	r2, [r2, #12]
 800449a:	4311      	orrs	r1, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	000186a0 	.word	0x000186a0
 80044fc:	001e847f 	.word	0x001e847f
 8004500:	003d08ff 	.word	0x003d08ff
 8004504:	431bde83 	.word	0x431bde83
 8004508:	10624dd3 	.word	0x10624dd3

0800450c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b20      	cmp	r3, #32
 8004520:	d129      	bne.n	8004576 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2224      	movs	r2, #36	; 0x24
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0210 	bic.w	r2, r2, #16
 8004548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	e000      	b.n	8004578 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004576:	2302      	movs	r3, #2
  }
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b20      	cmp	r3, #32
 800459c:	d12a      	bne.n	80045f4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2224      	movs	r2, #36	; 0x24
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045be:	89fb      	ldrh	r3, [r7, #14]
 80045c0:	f023 030f 	bic.w	r3, r3, #15
 80045c4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	89fb      	ldrh	r3, [r7, #14]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	89fa      	ldrh	r2, [r7, #14]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0bf      	b.n	8004796 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd f8a6 	bl	800177c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004646:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6999      	ldr	r1, [r3, #24]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800465c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6899      	ldr	r1, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b4a      	ldr	r3, [pc, #296]	; (80047a0 <HAL_LTDC_Init+0x19c>)
 8004678:	400b      	ands	r3, r1
 800467a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68d9      	ldr	r1, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <HAL_LTDC_Init+0x19c>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68d9      	ldr	r1, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1a      	ldr	r2, [r3, #32]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6919      	ldr	r1, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_LTDC_Init+0x19c>)
 80046d4:	400b      	ands	r3, r1
 80046d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6959      	ldr	r1, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b27      	ldr	r3, [pc, #156]	; (80047a0 <HAL_LTDC_Init+0x19c>)
 8004702:	400b      	ands	r3, r1
 8004704:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	041b      	lsls	r3, r3, #16
 800470c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6959      	ldr	r1, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0206 	orr.w	r2, r2, #6
 8004772:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	f000f800 	.word	0xf000f800

080047a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80047a4:	b5b0      	push	{r4, r5, r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_LTDC_ConfigLayer+0x1a>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e02c      	b.n	8004818 <HAL_LTDC_ConfigLayer+0x74>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2134      	movs	r1, #52	; 0x34
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4614      	mov	r4, r2
 80047e2:	461d      	mov	r5, r3
 80047e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f83b 	bl	8004874 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bdb0      	pop	{r4, r5, r7, pc}

08004820 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_LTDC_EnableDither+0x16>
 8004832:	2302      	movs	r3, #2
 8004834:	e016      	b.n	8004864 <HAL_LTDC_EnableDither+0x44>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2202      	movs	r2, #2
 8004842:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <HAL_LTDC_EnableDither+0x50>)
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_LTDC_EnableDither+0x50>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004850:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	40016800 	.word	0x40016800

08004874 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	0c1b      	lsrs	r3, r3, #16
 800488c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004890:	4413      	add	r3, r2
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	01db      	lsls	r3, r3, #7
 80048a0:	4413      	add	r3, r2
 80048a2:	3384      	adds	r3, #132	; 0x84
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4611      	mov	r1, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	01d2      	lsls	r2, r2, #7
 80048b0:	440a      	add	r2, r1
 80048b2:	3284      	adds	r2, #132	; 0x84
 80048b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ca:	4413      	add	r3, r2
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4619      	mov	r1, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	01db      	lsls	r3, r3, #7
 80048d8:	440b      	add	r3, r1
 80048da:	3384      	adds	r3, #132	; 0x84
 80048dc:	4619      	mov	r1, r3
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f2:	4413      	add	r3, r2
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	01db      	lsls	r3, r3, #7
 8004902:	4413      	add	r3, r2
 8004904:	3384      	adds	r3, #132	; 0x84
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	4611      	mov	r1, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	01d2      	lsls	r2, r2, #7
 8004912:	440a      	add	r2, r1
 8004914:	3284      	adds	r2, #132	; 0x84
 8004916:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800491a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800492a:	4413      	add	r3, r2
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4619      	mov	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	01db      	lsls	r3, r3, #7
 8004938:	440b      	add	r3, r1
 800493a:	3384      	adds	r3, #132	; 0x84
 800493c:	4619      	mov	r1, r3
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	01db      	lsls	r3, r3, #7
 800494e:	4413      	add	r3, r2
 8004950:	3384      	adds	r3, #132	; 0x84
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	4611      	mov	r1, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	01d2      	lsls	r2, r2, #7
 800495e:	440a      	add	r2, r1
 8004960:	3284      	adds	r2, #132	; 0x84
 8004962:	f023 0307 	bic.w	r3, r3, #7
 8004966:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	01db      	lsls	r3, r3, #7
 8004972:	4413      	add	r3, r2
 8004974:	3384      	adds	r3, #132	; 0x84
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	061b      	lsls	r3, r3, #24
 8004998:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	01db      	lsls	r3, r3, #7
 80049a4:	4413      	add	r3, r2
 80049a6:	3384      	adds	r3, #132	; 0x84
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	4413      	add	r3, r2
 80049b6:	3384      	adds	r3, #132	; 0x84
 80049b8:	461a      	mov	r2, r3
 80049ba:	2300      	movs	r3, #0
 80049bc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049c4:	461a      	mov	r2, r3
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4619      	mov	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	01db      	lsls	r3, r3, #7
 80049d8:	440b      	add	r3, r1
 80049da:	3384      	adds	r3, #132	; 0x84
 80049dc:	4619      	mov	r1, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	01db      	lsls	r3, r3, #7
 80049ee:	4413      	add	r3, r2
 80049f0:	3384      	adds	r3, #132	; 0x84
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	4611      	mov	r1, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	01d2      	lsls	r2, r2, #7
 80049fe:	440a      	add	r2, r1
 8004a00:	3284      	adds	r2, #132	; 0x84
 8004a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	01db      	lsls	r3, r3, #7
 8004a12:	4413      	add	r3, r2
 8004a14:	3384      	adds	r3, #132	; 0x84
 8004a16:	461a      	mov	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	01db      	lsls	r3, r3, #7
 8004a28:	4413      	add	r3, r2
 8004a2a:	3384      	adds	r3, #132	; 0x84
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	4611      	mov	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	01d2      	lsls	r2, r2, #7
 8004a38:	440a      	add	r2, r1
 8004a3a:	3284      	adds	r2, #132	; 0x84
 8004a3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a40:	f023 0307 	bic.w	r3, r3, #7
 8004a44:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	6809      	ldr	r1, [r1, #0]
 8004a52:	4608      	mov	r0, r1
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	01c9      	lsls	r1, r1, #7
 8004a58:	4401      	add	r1, r0
 8004a5a:	3184      	adds	r1, #132	; 0x84
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	01db      	lsls	r3, r3, #7
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3384      	adds	r3, #132	; 0x84
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	01db      	lsls	r3, r3, #7
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3384      	adds	r3, #132	; 0x84
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	01db      	lsls	r3, r3, #7
 8004a8e:	4413      	add	r3, r2
 8004a90:	3384      	adds	r3, #132	; 0x84
 8004a92:	461a      	mov	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004aa2:	2304      	movs	r3, #4
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e01b      	b.n	8004ae0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d102      	bne.n	8004ab6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	e014      	b.n	8004ae0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d00b      	beq.n	8004ad6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d007      	beq.n	8004ad6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d003      	beq.n	8004ad6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ad2:	2b07      	cmp	r3, #7
 8004ad4:	d102      	bne.n	8004adc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	e001      	b.n	8004ae0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004adc:	2301      	movs	r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	01db      	lsls	r3, r3, #7
 8004aea:	4413      	add	r3, r2
 8004aec:	3384      	adds	r3, #132	; 0x84
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	4611      	mov	r1, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	01d2      	lsls	r2, r2, #7
 8004afa:	440a      	add	r2, r1
 8004afc:	3284      	adds	r2, #132	; 0x84
 8004afe:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004b02:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	041a      	lsls	r2, r3, #16
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6859      	ldr	r1, [r3, #4]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	1acb      	subs	r3, r1, r3
 8004b1a:	69f9      	ldr	r1, [r7, #28]
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	3303      	adds	r3, #3
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	6809      	ldr	r1, [r1, #0]
 8004b26:	4608      	mov	r0, r1
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	01c9      	lsls	r1, r1, #7
 8004b2c:	4401      	add	r1, r0
 8004b2e:	3184      	adds	r1, #132	; 0x84
 8004b30:	4313      	orrs	r3, r2
 8004b32:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	01db      	lsls	r3, r3, #7
 8004b3e:	4413      	add	r3, r2
 8004b40:	3384      	adds	r3, #132	; 0x84
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	01d2      	lsls	r2, r2, #7
 8004b4e:	440a      	add	r2, r1
 8004b50:	3284      	adds	r2, #132	; 0x84
 8004b52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	01db      	lsls	r3, r3, #7
 8004b66:	4413      	add	r3, r2
 8004b68:	3384      	adds	r3, #132	; 0x84
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	01db      	lsls	r3, r3, #7
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3384      	adds	r3, #132	; 0x84
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	4611      	mov	r1, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	01d2      	lsls	r2, r2, #7
 8004b8c:	440a      	add	r2, r1
 8004b8e:	3284      	adds	r2, #132	; 0x84
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	6013      	str	r3, [r2, #0]
}
 8004b96:	bf00      	nop
 8004b98:	3724      	adds	r7, #36	; 0x24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bca:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_PWREx_EnableOverDrive+0x94>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd0:	f7fe fafa 	bl	80031c8 <HAL_GetTick>
 8004bd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bd6:	e009      	b.n	8004bec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bd8:	f7fe faf6 	bl	80031c8 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be6:	d901      	bls.n	8004bec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e01f      	b.n	8004c2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bec:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	d1ee      	bne.n	8004bd8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c00:	f7fe fae2 	bl	80031c8 <HAL_GetTick>
 8004c04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c06:	e009      	b.n	8004c1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c08:	f7fe fade 	bl	80031c8 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c16:	d901      	bls.n	8004c1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e007      	b.n	8004c2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c28:	d1ee      	bne.n	8004c08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40023800 	.word	0x40023800
 8004c38:	420e0040 	.word	0x420e0040
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	420e0044 	.word	0x420e0044

08004c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e264      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d075      	beq.n	8004d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c62:	4ba3      	ldr	r3, [pc, #652]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d00c      	beq.n	8004c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6e:	4ba0      	ldr	r3, [pc, #640]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d112      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7a:	4b9d      	ldr	r3, [pc, #628]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c86:	d10b      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c88:	4b99      	ldr	r3, [pc, #612]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05b      	beq.n	8004d4c <HAL_RCC_OscConfig+0x108>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d157      	bne.n	8004d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e23f      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x74>
 8004caa:	4b91      	ldr	r3, [pc, #580]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a90      	ldr	r2, [pc, #576]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e01d      	b.n	8004cf4 <HAL_RCC_OscConfig+0xb0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x98>
 8004cc2:	4b8b      	ldr	r3, [pc, #556]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a8a      	ldr	r2, [pc, #552]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b88      	ldr	r3, [pc, #544]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a87      	ldr	r2, [pc, #540]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0xb0>
 8004cdc:	4b84      	ldr	r3, [pc, #528]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a83      	ldr	r2, [pc, #524]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4b81      	ldr	r3, [pc, #516]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a80      	ldr	r2, [pc, #512]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fe fa64 	bl	80031c8 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fe fa60 	bl	80031c8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e204      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b76      	ldr	r3, [pc, #472]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0xc0>
 8004d22:	e014      	b.n	8004d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fe fa50 	bl	80031c8 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fe fa4c 	bl	80031c8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e1f0      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3e:	4b6c      	ldr	r3, [pc, #432]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0xe8>
 8004d4a:	e000      	b.n	8004d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d063      	beq.n	8004e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d5a:	4b65      	ldr	r3, [pc, #404]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d66:	4b62      	ldr	r3, [pc, #392]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d11c      	bne.n	8004dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d72:	4b5f      	ldr	r3, [pc, #380]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d116      	bne.n	8004dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7e:	4b5c      	ldr	r3, [pc, #368]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_RCC_OscConfig+0x152>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d001      	beq.n	8004d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e1c4      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d96:	4b56      	ldr	r3, [pc, #344]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4952      	ldr	r1, [pc, #328]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004daa:	e03a      	b.n	8004e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db4:	4b4f      	ldr	r3, [pc, #316]	; (8004ef4 <HAL_RCC_OscConfig+0x2b0>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dba:	f7fe fa05 	bl	80031c8 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc2:	f7fe fa01 	bl	80031c8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e1a5      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd4:	4b46      	ldr	r3, [pc, #280]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de0:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4940      	ldr	r1, [pc, #256]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]
 8004df4:	e015      	b.n	8004e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df6:	4b3f      	ldr	r3, [pc, #252]	; (8004ef4 <HAL_RCC_OscConfig+0x2b0>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fe f9e4 	bl	80031c8 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e04:	f7fe f9e0 	bl	80031c8 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e184      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e16:	4b36      	ldr	r3, [pc, #216]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d030      	beq.n	8004e90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d016      	beq.n	8004e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e36:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <HAL_RCC_OscConfig+0x2b4>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fe f9c4 	bl	80031c8 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e44:	f7fe f9c0 	bl	80031c8 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e164      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e56:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x200>
 8004e62:	e015      	b.n	8004e90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <HAL_RCC_OscConfig+0x2b4>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6a:	f7fe f9ad 	bl	80031c8 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e72:	f7fe f9a9 	bl	80031c8 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e14d      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e84:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1f0      	bne.n	8004e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a0 	beq.w	8004fde <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea2:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_RCC_OscConfig+0x2b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d121      	bne.n	8004f1e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eda:	4b08      	ldr	r3, [pc, #32]	; (8004efc <HAL_RCC_OscConfig+0x2b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a07      	ldr	r2, [pc, #28]	; (8004efc <HAL_RCC_OscConfig+0x2b8>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ee6:	f7fe f96f 	bl	80031c8 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eec:	e011      	b.n	8004f12 <HAL_RCC_OscConfig+0x2ce>
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	42470000 	.word	0x42470000
 8004ef8:	42470e80 	.word	0x42470e80
 8004efc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f00:	f7fe f962 	bl	80031c8 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e106      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f12:	4b85      	ldr	r3, [pc, #532]	; (8005128 <HAL_RCC_OscConfig+0x4e4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d106      	bne.n	8004f34 <HAL_RCC_OscConfig+0x2f0>
 8004f26:	4b81      	ldr	r3, [pc, #516]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2a:	4a80      	ldr	r2, [pc, #512]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	6713      	str	r3, [r2, #112]	; 0x70
 8004f32:	e01c      	b.n	8004f6e <HAL_RCC_OscConfig+0x32a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b05      	cmp	r3, #5
 8004f3a:	d10c      	bne.n	8004f56 <HAL_RCC_OscConfig+0x312>
 8004f3c:	4b7b      	ldr	r3, [pc, #492]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4a7a      	ldr	r2, [pc, #488]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f42:	f043 0304 	orr.w	r3, r3, #4
 8004f46:	6713      	str	r3, [r2, #112]	; 0x70
 8004f48:	4b78      	ldr	r3, [pc, #480]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	4a77      	ldr	r2, [pc, #476]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	; 0x70
 8004f54:	e00b      	b.n	8004f6e <HAL_RCC_OscConfig+0x32a>
 8004f56:	4b75      	ldr	r3, [pc, #468]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a74      	ldr	r2, [pc, #464]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
 8004f62:	4b72      	ldr	r3, [pc, #456]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f66:	4a71      	ldr	r2, [pc, #452]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d015      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fe f927 	bl	80031c8 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7c:	e00a      	b.n	8004f94 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fe f923 	bl	80031c8 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e0c5      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	4b65      	ldr	r3, [pc, #404]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ee      	beq.n	8004f7e <HAL_RCC_OscConfig+0x33a>
 8004fa0:	e014      	b.n	8004fcc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa2:	f7fe f911 	bl	80031c8 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004faa:	f7fe f90d 	bl	80031c8 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0af      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc0:	4b5a      	ldr	r3, [pc, #360]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ee      	bne.n	8004faa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d105      	bne.n	8004fde <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd2:	4b56      	ldr	r3, [pc, #344]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	4a55      	ldr	r2, [pc, #340]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 809b 	beq.w	800511e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe8:	4b50      	ldr	r3, [pc, #320]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 030c 	and.w	r3, r3, #12
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d05c      	beq.n	80050ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d141      	bne.n	8005080 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffc:	4b4c      	ldr	r3, [pc, #304]	; (8005130 <HAL_RCC_OscConfig+0x4ec>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005002:	f7fe f8e1 	bl	80031c8 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500a:	f7fe f8dd 	bl	80031c8 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e081      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501c:	4b43      	ldr	r3, [pc, #268]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f0      	bne.n	800500a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	019b      	lsls	r3, r3, #6
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	3b01      	subs	r3, #1
 8005042:	041b      	lsls	r3, r3, #16
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	4937      	ldr	r1, [pc, #220]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 800504e:	4313      	orrs	r3, r2
 8005050:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005052:	4b37      	ldr	r3, [pc, #220]	; (8005130 <HAL_RCC_OscConfig+0x4ec>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005058:	f7fe f8b6 	bl	80031c8 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005060:	f7fe f8b2 	bl	80031c8 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e056      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005072:	4b2e      	ldr	r3, [pc, #184]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x41c>
 800507e:	e04e      	b.n	800511e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005080:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <HAL_RCC_OscConfig+0x4ec>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7fe f89f 	bl	80031c8 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800508e:	f7fe f89b 	bl	80031c8 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e03f      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a0:	4b22      	ldr	r3, [pc, #136]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f0      	bne.n	800508e <HAL_RCC_OscConfig+0x44a>
 80050ac:	e037      	b.n	800511e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e032      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050ba:	4b1c      	ldr	r3, [pc, #112]	; (800512c <HAL_RCC_OscConfig+0x4e8>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d028      	beq.n	800511a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d121      	bne.n	800511a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d11a      	bne.n	800511a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050ea:	4013      	ands	r3, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d111      	bne.n	800511a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	3b01      	subs	r3, #1
 8005104:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d107      	bne.n	800511a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d001      	beq.n	800511e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40007000 	.word	0x40007000
 800512c:	40023800 	.word	0x40023800
 8005130:	42470060 	.word	0x42470060

08005134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0cc      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005148:	4b68      	ldr	r3, [pc, #416]	; (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d90c      	bls.n	8005170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005156:	4b65      	ldr	r3, [pc, #404]	; (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b63      	ldr	r3, [pc, #396]	; (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0b8      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005188:	4b59      	ldr	r3, [pc, #356]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a58      	ldr	r2, [pc, #352]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051a0:	4b53      	ldr	r3, [pc, #332]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	4a52      	ldr	r2, [pc, #328]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ac:	4b50      	ldr	r3, [pc, #320]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	494d      	ldr	r1, [pc, #308]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d044      	beq.n	8005254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d2:	4b47      	ldr	r3, [pc, #284]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d119      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e07f      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d003      	beq.n	80051f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d107      	bne.n	8005202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f2:	4b3f      	ldr	r3, [pc, #252]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e06f      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005202:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e067      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005212:	4b37      	ldr	r3, [pc, #220]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f023 0203 	bic.w	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4934      	ldr	r1, [pc, #208]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	4313      	orrs	r3, r2
 8005222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005224:	f7fd ffd0 	bl	80031c8 <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522a:	e00a      	b.n	8005242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800522c:	f7fd ffcc 	bl	80031c8 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	; 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e04f      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005242:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 020c 	and.w	r2, r3, #12
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	429a      	cmp	r2, r3
 8005252:	d1eb      	bne.n	800522c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d20c      	bcs.n	800527c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b22      	ldr	r3, [pc, #136]	; (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b20      	ldr	r3, [pc, #128]	; (80052ec <HAL_RCC_ClockConfig+0x1b8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e032      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005288:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4916      	ldr	r1, [pc, #88]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	490e      	ldr	r1, [pc, #56]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052ba:	f000 f821 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	490a      	ldr	r1, [pc, #40]	; (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 80052cc:	5ccb      	ldrb	r3, [r1, r3]
 80052ce:	fa22 f303 	lsr.w	r3, r2, r3
 80052d2:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fd ff30 	bl	8003140 <HAL_InitTick>

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40023c00 	.word	0x40023c00
 80052f0:	40023800 	.word	0x40023800
 80052f4:	080071a8 	.word	0x080071a8
 80052f8:	20000000 	.word	0x20000000
 80052fc:	20000064 	.word	0x20000064

08005300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005300:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	2300      	movs	r3, #0
 8005312:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005318:	4b67      	ldr	r3, [pc, #412]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 030c 	and.w	r3, r3, #12
 8005320:	2b08      	cmp	r3, #8
 8005322:	d00d      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x40>
 8005324:	2b08      	cmp	r3, #8
 8005326:	f200 80bd 	bhi.w	80054a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_RCC_GetSysClockFreq+0x34>
 800532e:	2b04      	cmp	r3, #4
 8005330:	d003      	beq.n	800533a <HAL_RCC_GetSysClockFreq+0x3a>
 8005332:	e0b7      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005334:	4b61      	ldr	r3, [pc, #388]	; (80054bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005336:	60bb      	str	r3, [r7, #8]
       break;
 8005338:	e0b7      	b.n	80054aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800533a:	4b61      	ldr	r3, [pc, #388]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800533c:	60bb      	str	r3, [r7, #8]
      break;
 800533e:	e0b4      	b.n	80054aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005340:	4b5d      	ldr	r3, [pc, #372]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005348:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800534a:	4b5b      	ldr	r3, [pc, #364]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d04d      	beq.n	80053f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005356:	4b58      	ldr	r3, [pc, #352]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	099b      	lsrs	r3, r3, #6
 800535c:	461a      	mov	r2, r3
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005366:	f04f 0100 	mov.w	r1, #0
 800536a:	ea02 0800 	and.w	r8, r2, r0
 800536e:	ea03 0901 	and.w	r9, r3, r1
 8005372:	4640      	mov	r0, r8
 8005374:	4649      	mov	r1, r9
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	014b      	lsls	r3, r1, #5
 8005380:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005384:	0142      	lsls	r2, r0, #5
 8005386:	4610      	mov	r0, r2
 8005388:	4619      	mov	r1, r3
 800538a:	ebb0 0008 	subs.w	r0, r0, r8
 800538e:	eb61 0109 	sbc.w	r1, r1, r9
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	018b      	lsls	r3, r1, #6
 800539c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053a0:	0182      	lsls	r2, r0, #6
 80053a2:	1a12      	subs	r2, r2, r0
 80053a4:	eb63 0301 	sbc.w	r3, r3, r1
 80053a8:	f04f 0000 	mov.w	r0, #0
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	00d9      	lsls	r1, r3, #3
 80053b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053b6:	00d0      	lsls	r0, r2, #3
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	eb12 0208 	adds.w	r2, r2, r8
 80053c0:	eb43 0309 	adc.w	r3, r3, r9
 80053c4:	f04f 0000 	mov.w	r0, #0
 80053c8:	f04f 0100 	mov.w	r1, #0
 80053cc:	0259      	lsls	r1, r3, #9
 80053ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80053d2:	0250      	lsls	r0, r2, #9
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4610      	mov	r0, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	461a      	mov	r2, r3
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	f7fa ff54 	bl	8000290 <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4613      	mov	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e04a      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f2:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	461a      	mov	r2, r3
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005402:	f04f 0100 	mov.w	r1, #0
 8005406:	ea02 0400 	and.w	r4, r2, r0
 800540a:	ea03 0501 	and.w	r5, r3, r1
 800540e:	4620      	mov	r0, r4
 8005410:	4629      	mov	r1, r5
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	014b      	lsls	r3, r1, #5
 800541c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005420:	0142      	lsls	r2, r0, #5
 8005422:	4610      	mov	r0, r2
 8005424:	4619      	mov	r1, r3
 8005426:	1b00      	subs	r0, r0, r4
 8005428:	eb61 0105 	sbc.w	r1, r1, r5
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	018b      	lsls	r3, r1, #6
 8005436:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800543a:	0182      	lsls	r2, r0, #6
 800543c:	1a12      	subs	r2, r2, r0
 800543e:	eb63 0301 	sbc.w	r3, r3, r1
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	00d9      	lsls	r1, r3, #3
 800544c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005450:	00d0      	lsls	r0, r2, #3
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	1912      	adds	r2, r2, r4
 8005458:	eb45 0303 	adc.w	r3, r5, r3
 800545c:	f04f 0000 	mov.w	r0, #0
 8005460:	f04f 0100 	mov.w	r1, #0
 8005464:	0299      	lsls	r1, r3, #10
 8005466:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800546a:	0290      	lsls	r0, r2, #10
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4610      	mov	r0, r2
 8005472:	4619      	mov	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	461a      	mov	r2, r3
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	f7fa ff08 	bl	8000290 <__aeabi_uldivmod>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4613      	mov	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	0c1b      	lsrs	r3, r3, #16
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	3301      	adds	r3, #1
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	60bb      	str	r3, [r7, #8]
      break;
 80054a2:	e002      	b.n	80054aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80054a6:	60bb      	str	r3, [r7, #8]
      break;
 80054a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054aa:	68bb      	ldr	r3, [r7, #8]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80054b6:	bf00      	nop
 80054b8:	40023800 	.word	0x40023800
 80054bc:	00f42400 	.word	0x00f42400
 80054c0:	007a1200 	.word	0x007a1200

080054c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c8:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ca:	681b      	ldr	r3, [r3, #0]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000000 	.word	0x20000000

080054dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054e0:	f7ff fff0 	bl	80054c4 <HAL_RCC_GetHCLKFreq>
 80054e4:	4602      	mov	r2, r0
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	0a9b      	lsrs	r3, r3, #10
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	4903      	ldr	r1, [pc, #12]	; (8005500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f2:	5ccb      	ldrb	r3, [r1, r3]
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40023800 	.word	0x40023800
 8005500:	080071b8 	.word	0x080071b8

08005504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005534:	2b00      	cmp	r3, #0
 8005536:	d075      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005538:	4bad      	ldr	r3, [pc, #692]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800553e:	f7fd fe43 	bl	80031c8 <HAL_GetTick>
 8005542:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005546:	f7fd fe3f 	bl	80031c8 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e18b      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005558:	4ba6      	ldr	r3, [pc, #664]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f0      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	019a      	lsls	r2, r3, #6
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	071b      	lsls	r3, r3, #28
 800557c:	499d      	ldr	r1, [pc, #628]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01f      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005590:	4b98      	ldr	r3, [pc, #608]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005596:	0f1b      	lsrs	r3, r3, #28
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	019a      	lsls	r2, r3, #6
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	431a      	orrs	r2, r3
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	071b      	lsls	r3, r3, #28
 80055b0:	4990      	ldr	r1, [pc, #576]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055b8:	4b8e      	ldr	r3, [pc, #568]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055be:	f023 021f 	bic.w	r2, r3, #31
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	498a      	ldr	r1, [pc, #552]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00d      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	019a      	lsls	r2, r3, #6
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	071b      	lsls	r3, r3, #28
 80055f0:	4980      	ldr	r1, [pc, #512]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055f8:	4b7d      	ldr	r3, [pc, #500]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055fe:	f7fd fde3 	bl	80031c8 <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005606:	f7fd fddf 	bl	80031c8 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e12b      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005618:	4b76      	ldr	r3, [pc, #472]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d105      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005638:	2b00      	cmp	r3, #0
 800563a:	d079      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800563c:	4b6e      	ldr	r3, [pc, #440]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005642:	f7fd fdc1 	bl	80031c8 <HAL_GetTick>
 8005646:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005648:	e008      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800564a:	f7fd fdbd 	bl	80031c8 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e109      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800565c:	4b65      	ldr	r3, [pc, #404]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005668:	d0ef      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d020      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005676:	4b5f      	ldr	r3, [pc, #380]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567c:	0f1b      	lsrs	r3, r3, #28
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	019a      	lsls	r2, r3, #6
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	061b      	lsls	r3, r3, #24
 8005690:	431a      	orrs	r2, r3
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	071b      	lsls	r3, r3, #28
 8005696:	4957      	ldr	r1, [pc, #348]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800569e:	4b55      	ldr	r3, [pc, #340]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	4950      	ldr	r1, [pc, #320]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01e      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056c4:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	0e1b      	lsrs	r3, r3, #24
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	019a      	lsls	r2, r3, #6
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	061b      	lsls	r3, r3, #24
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	071b      	lsls	r3, r3, #28
 80056e4:	4943      	ldr	r1, [pc, #268]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056ec:	4b41      	ldr	r3, [pc, #260]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	493e      	ldr	r1, [pc, #248]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005702:	4b3d      	ldr	r3, [pc, #244]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005708:	f7fd fd5e 	bl	80031c8 <HAL_GetTick>
 800570c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005710:	f7fd fd5a 	bl	80031c8 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e0a6      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005722:	4b34      	ldr	r3, [pc, #208]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800572a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572e:	d1ef      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 808d 	beq.w	8005858 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	4b2c      	ldr	r3, [pc, #176]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	4a2b      	ldr	r2, [pc, #172]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574c:	6413      	str	r3, [r2, #64]	; 0x40
 800574e:	4b29      	ldr	r3, [pc, #164]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800575a:	4b28      	ldr	r3, [pc, #160]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a27      	ldr	r2, [pc, #156]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005764:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005766:	f7fd fd2f 	bl	80031c8 <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fd fd2b 	bl	80031c8 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e077      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005780:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800578c:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005794:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d039      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d032      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057b4:	4b12      	ldr	r3, [pc, #72]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ba:	4b11      	ldr	r3, [pc, #68]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057c0:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057c6:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d11e      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fd fcf9 	bl	80031c8 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d8:	e014      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057da:	f7fd fcf5 	bl	80031c8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d90b      	bls.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e03f      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80057f0:	42470068 	.word	0x42470068
 80057f4:	40023800 	.word	0x40023800
 80057f8:	42470070 	.word	0x42470070
 80057fc:	40007000 	.word	0x40007000
 8005800:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005804:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0e4      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800581c:	d10d      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800581e:	4b16      	ldr	r3, [pc, #88]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	4911      	ldr	r1, [pc, #68]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005834:	4313      	orrs	r3, r2
 8005836:	608b      	str	r3, [r1, #8]
 8005838:	e005      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	4a0e      	ldr	r2, [pc, #56]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005840:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005844:	6093      	str	r3, [r2, #8]
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005848:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005852:	4909      	ldr	r1, [pc, #36]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005854:	4313      	orrs	r3, r2
 8005856:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800586a:	4b04      	ldr	r3, [pc, #16]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800586c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	424711e0 	.word	0x424711e0

08005880 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e025      	b.n	80058e0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7fc f985 	bl	8001bb8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3304      	adds	r3, #4
 80058be:	4619      	mov	r1, r3
 80058c0:	4610      	mov	r0, r2
 80058c2:	f000 fe3b 	bl	800653c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	461a      	mov	r2, r3
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	f000 fea6 	bl	8006622 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d101      	bne.n	8005904 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
 8005902:	e018      	b.n	8005936 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 ff03 	bl	8006720 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d104      	bne.n	800592c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2205      	movs	r2, #5
 8005926:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800592a:	e003      	b.n	8005934 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d101      	bne.n	8005958 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
 8005956:	e00e      	b.n	8005976 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 ff16 	bl	8006798 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e07b      	b.n	8005a88 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	d108      	bne.n	80059aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a0:	d009      	beq.n	80059b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	61da      	str	r2, [r3, #28]
 80059a8:	e005      	b.n	80059b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fb fff9 	bl	80019c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	ea42 0103 	orr.w	r1, r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	0c1b      	lsrs	r3, r3, #16
 8005a54:	f003 0104 	and.w	r1, r3, #4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	f003 0210 	and.w	r2, r3, #16
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e01a      	b.n	8005ad8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fb ffcc 	bl	8001a58 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_SPI_Transmit+0x22>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e126      	b.n	8005d50 <HAL_SPI_Transmit+0x270>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b0a:	f7fd fb5d 	bl	80031c8 <HAL_GetTick>
 8005b0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d002      	beq.n	8005b26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
 8005b22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b24:	e10b      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_SPI_Transmit+0x52>
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b36:	e102      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7e:	d10f      	bne.n	8005ba0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d007      	beq.n	8005bbe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bbc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc6:	d14b      	bne.n	8005c60 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_SPI_Transmit+0xf6>
 8005bd0:	8afb      	ldrh	r3, [r7, #22]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d13e      	bne.n	8005c54 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	881a      	ldrh	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bfa:	e02b      	b.n	8005c54 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d112      	bne.n	8005c30 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	881a      	ldrh	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c2e:	e011      	b.n	8005c54 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c30:	f7fd faca 	bl	80031c8 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d803      	bhi.n	8005c48 <HAL_SPI_Transmit+0x168>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d102      	bne.n	8005c4e <HAL_SPI_Transmit+0x16e>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c52:	e074      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1ce      	bne.n	8005bfc <HAL_SPI_Transmit+0x11c>
 8005c5e:	e04c      	b.n	8005cfa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_SPI_Transmit+0x18e>
 8005c68:	8afb      	ldrh	r3, [r7, #22]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d140      	bne.n	8005cf0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	330c      	adds	r3, #12
 8005c78:	7812      	ldrb	r2, [r2, #0]
 8005c7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c94:	e02c      	b.n	8005cf0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d113      	bne.n	8005ccc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cca:	e011      	b.n	8005cf0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ccc:	f7fd fa7c 	bl	80031c8 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d803      	bhi.n	8005ce4 <HAL_SPI_Transmit+0x204>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d102      	bne.n	8005cea <HAL_SPI_Transmit+0x20a>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cee:	e026      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1cd      	bne.n	8005c96 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fbda 	bl	80064b8 <SPI_EndRxTxTransaction>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d002      	beq.n	8005d3c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e000      	b.n	8005d3e <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	4613      	mov	r3, r2
 8005d66:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d74:	d112      	bne.n	8005d9c <HAL_SPI_Receive+0x44>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10e      	bne.n	8005d9c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2204      	movs	r2, #4
 8005d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d86:	88fa      	ldrh	r2, [r7, #6]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f8f1 	bl	8005f7a <HAL_SPI_TransmitReceive>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	e0ea      	b.n	8005f72 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_SPI_Receive+0x52>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e0e3      	b.n	8005f72 <HAL_SPI_Receive+0x21a>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db2:	f7fd fa09 	bl	80031c8 <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d002      	beq.n	8005dca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dc8:	e0ca      	b.n	8005f60 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_SPI_Receive+0x7e>
 8005dd0:	88fb      	ldrh	r3, [r7, #6]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dda:	e0c1      	b.n	8005f60 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2204      	movs	r2, #4
 8005de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e22:	d10f      	bne.n	8005e44 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e42:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d007      	beq.n	8005e62 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e60:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d162      	bne.n	8005f30 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e6a:	e02e      	b.n	8005eca <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d115      	bne.n	8005ea6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f103 020c 	add.w	r2, r3, #12
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	7812      	ldrb	r2, [r2, #0]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ea4:	e011      	b.n	8005eca <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ea6:	f7fd f98f 	bl	80031c8 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d803      	bhi.n	8005ebe <HAL_SPI_Receive+0x166>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d102      	bne.n	8005ec4 <HAL_SPI_Receive+0x16c>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ec8:	e04a      	b.n	8005f60 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1cb      	bne.n	8005e6c <HAL_SPI_Receive+0x114>
 8005ed4:	e031      	b.n	8005f3a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d113      	bne.n	8005f0c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	b292      	uxth	r2, r2
 8005ef0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f0a:	e011      	b.n	8005f30 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f0c:	f7fd f95c 	bl	80031c8 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d803      	bhi.n	8005f24 <HAL_SPI_Receive+0x1cc>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d102      	bne.n	8005f2a <HAL_SPI_Receive+0x1d2>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f2e:	e017      	b.n	8005f60 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1cd      	bne.n	8005ed6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fa54 	bl	80063ec <SPI_EndRxTransaction>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	75fb      	strb	r3, [r7, #23]
 8005f5c:	e000      	b.n	8005f60 <HAL_SPI_Receive+0x208>
  }

error :
 8005f5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b08c      	sub	sp, #48	; 0x30
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_SPI_TransmitReceive+0x26>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e18a      	b.n	80062b6 <HAL_SPI_TransmitReceive+0x33c>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa8:	f7fd f90e 	bl	80031c8 <HAL_GetTick>
 8005fac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005fbe:	887b      	ldrh	r3, [r7, #2]
 8005fc0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d00f      	beq.n	8005fea <HAL_SPI_TransmitReceive+0x70>
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd0:	d107      	bne.n	8005fe2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d103      	bne.n	8005fe2 <HAL_SPI_TransmitReceive+0x68>
 8005fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d003      	beq.n	8005fea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005fe8:	e15b      	b.n	80062a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x82>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x82>
 8005ff6:	887b      	ldrh	r3, [r7, #2]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d103      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006002:	e14e      	b.n	80062a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b04      	cmp	r3, #4
 800600e:	d003      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2205      	movs	r2, #5
 8006014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	887a      	ldrh	r2, [r7, #2]
 8006028:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	887a      	ldrh	r2, [r7, #2]
 800602e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	887a      	ldrh	r2, [r7, #2]
 800603a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	887a      	ldrh	r2, [r7, #2]
 8006040:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d007      	beq.n	800606c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800606a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006074:	d178      	bne.n	8006168 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_SPI_TransmitReceive+0x10a>
 800607e:	8b7b      	ldrh	r3, [r7, #26]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d166      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	881a      	ldrh	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	1c9a      	adds	r2, r3, #2
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a8:	e053      	b.n	8006152 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d11b      	bne.n	80060f0 <HAL_SPI_TransmitReceive+0x176>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d016      	beq.n	80060f0 <HAL_SPI_TransmitReceive+0x176>
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d113      	bne.n	80060f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	881a      	ldrh	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	1c9a      	adds	r2, r3, #2
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d119      	bne.n	8006132 <HAL_SPI_TransmitReceive+0x1b8>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d014      	beq.n	8006132 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	b292      	uxth	r2, r2
 8006114:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	1c9a      	adds	r2, r3, #2
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800612e:	2301      	movs	r3, #1
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006132:	f7fd f849 	bl	80031c8 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800613e:	429a      	cmp	r2, r3
 8006140:	d807      	bhi.n	8006152 <HAL_SPI_TransmitReceive+0x1d8>
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006148:	d003      	beq.n	8006152 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006150:	e0a7      	b.n	80062a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1a6      	bne.n	80060aa <HAL_SPI_TransmitReceive+0x130>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1a1      	bne.n	80060aa <HAL_SPI_TransmitReceive+0x130>
 8006166:	e07c      	b.n	8006262 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <HAL_SPI_TransmitReceive+0x1fc>
 8006170:	8b7b      	ldrh	r3, [r7, #26]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d16b      	bne.n	800624e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006192:	b29b      	uxth	r3, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800619c:	e057      	b.n	800624e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d11c      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x26c>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d017      	beq.n	80061e6 <HAL_SPI_TransmitReceive+0x26c>
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d114      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d119      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x2ae>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d014      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006224:	2301      	movs	r3, #1
 8006226:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006228:	f7fc ffce 	bl	80031c8 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006234:	429a      	cmp	r2, r3
 8006236:	d803      	bhi.n	8006240 <HAL_SPI_TransmitReceive+0x2c6>
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d102      	bne.n	8006246 <HAL_SPI_TransmitReceive+0x2cc>
 8006240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800624c:	e029      	b.n	80062a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006252:	b29b      	uxth	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1a2      	bne.n	800619e <HAL_SPI_TransmitReceive+0x224>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d19d      	bne.n	800619e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f926 	bl	80064b8 <SPI_EndRxTxTransaction>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d006      	beq.n	8006280 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800627e:	e010      	b.n	80062a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10b      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	e000      	b.n	80062a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80062a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3730      	adds	r7, #48	; 0x30
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062cc:	b2db      	uxtb	r3, r3
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062ec:	f7fc ff6c 	bl	80031c8 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	4413      	add	r3, r2
 80062fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062fc:	f7fc ff64 	bl	80031c8 <HAL_GetTick>
 8006300:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006302:	4b39      	ldr	r3, [pc, #228]	; (80063e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	015b      	lsls	r3, r3, #5
 8006308:	0d1b      	lsrs	r3, r3, #20
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	fb02 f303 	mul.w	r3, r2, r3
 8006310:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006312:	e054      	b.n	80063be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631a:	d050      	beq.n	80063be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800631c:	f7fc ff54 	bl	80031c8 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	429a      	cmp	r2, r3
 800632a:	d902      	bls.n	8006332 <SPI_WaitFlagStateUntilTimeout+0x56>
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d13d      	bne.n	80063ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006340:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800634a:	d111      	bne.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x94>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006354:	d004      	beq.n	8006360 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635e:	d107      	bne.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006378:	d10f      	bne.n	800639a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006398:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e017      	b.n	80063de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4013      	ands	r3, r2
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	bf0c      	ite	eq
 80063ce:	2301      	moveq	r3, #1
 80063d0:	2300      	movne	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d19b      	bne.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000000 	.word	0x20000000

080063ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006400:	d111      	bne.n	8006426 <SPI_EndRxTransaction+0x3a>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800640a:	d004      	beq.n	8006416 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006414:	d107      	bne.n	8006426 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006424:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642e:	d12a      	bne.n	8006486 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006438:	d012      	beq.n	8006460 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	2180      	movs	r1, #128	; 0x80
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f7ff ff49 	bl	80062dc <SPI_WaitFlagStateUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d02d      	beq.n	80064ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006454:	f043 0220 	orr.w	r2, r3, #32
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e026      	b.n	80064ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2200      	movs	r2, #0
 8006468:	2101      	movs	r1, #1
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f7ff ff36 	bl	80062dc <SPI_WaitFlagStateUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01a      	beq.n	80064ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	f043 0220 	orr.w	r2, r3, #32
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e013      	b.n	80064ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2200      	movs	r2, #0
 800648e:	2101      	movs	r1, #1
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff ff23 	bl	80062dc <SPI_WaitFlagStateUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e000      	b.n	80064ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064c4:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <SPI_EndRxTxTransaction+0x7c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1b      	ldr	r2, [pc, #108]	; (8006538 <SPI_EndRxTxTransaction+0x80>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	0d5b      	lsrs	r3, r3, #21
 80064d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
 80064d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064e2:	d112      	bne.n	800650a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2200      	movs	r2, #0
 80064ec:	2180      	movs	r1, #128	; 0x80
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff fef4 	bl	80062dc <SPI_WaitFlagStateUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d016      	beq.n	8006528 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	f043 0220 	orr.w	r2, r3, #32
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e00f      	b.n	800652a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	3b01      	subs	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006520:	2b80      	cmp	r3, #128	; 0x80
 8006522:	d0f2      	beq.n	800650a <SPI_EndRxTxTransaction+0x52>
 8006524:	e000      	b.n	8006528 <SPI_EndRxTxTransaction+0x70>
        break;
 8006526:	bf00      	nop
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000000 	.word	0x20000000
 8006538:	165e9f81 	.word	0x165e9f81

0800653c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d029      	beq.n	80065aa <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006562:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006566:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006570:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006576:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800657c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006582:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006588:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800658e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006594:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800659a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	e034      	b.n	8006614 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065b6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80065c0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80065c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80065da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065de:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80065e8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80065ee:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80065f4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80065fa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006600:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	4313      	orrs	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006622:	b480      	push	{r7}
 8006624:	b087      	sub	sp, #28
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d02e      	beq.n	800669a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006648:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	3b01      	subs	r3, #1
 8006656:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006658:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	3b01      	subs	r3, #1
 8006660:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006662:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	3b01      	subs	r3, #1
 800666a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800666c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	3b01      	subs	r3, #1
 8006674:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006676:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	3b01      	subs	r3, #1
 800667e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006680:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	3b01      	subs	r3, #1
 8006688:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800668a:	4313      	orrs	r3, r2
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	609a      	str	r2, [r3, #8]
 8006698:	e03b      	b.n	8006712 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066aa:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80066bc:	4313      	orrs	r3, r2
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066d0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	3b01      	subs	r3, #1
 80066de:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80066e0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80066ea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80066f4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80066fe:	4313      	orrs	r3, r2
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800673c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	3b01      	subs	r3, #1
 8006744:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006746:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006758:	f7fc fd36 	bl	80031c8 <HAL_GetTick>
 800675c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800675e:	e010      	b.n	8006782 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d00c      	beq.n	8006782 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <FMC_SDRAM_SendCommand+0x5e>
 800676e:	f7fc fd2b 	bl	80031c8 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d201      	bcs.n	8006782 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e006      	b.n	8006790 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b20      	cmp	r3, #32
 800678c:	d0e8      	beq.n	8006760 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695a      	ldr	r2, [r3, #20]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
	...

080067c0 <__errno>:
 80067c0:	4b01      	ldr	r3, [pc, #4]	; (80067c8 <__errno+0x8>)
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	2000006c 	.word	0x2000006c

080067cc <__libc_init_array>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4d0d      	ldr	r5, [pc, #52]	; (8006804 <__libc_init_array+0x38>)
 80067d0:	4c0d      	ldr	r4, [pc, #52]	; (8006808 <__libc_init_array+0x3c>)
 80067d2:	1b64      	subs	r4, r4, r5
 80067d4:	10a4      	asrs	r4, r4, #2
 80067d6:	2600      	movs	r6, #0
 80067d8:	42a6      	cmp	r6, r4
 80067da:	d109      	bne.n	80067f0 <__libc_init_array+0x24>
 80067dc:	4d0b      	ldr	r5, [pc, #44]	; (800680c <__libc_init_array+0x40>)
 80067de:	4c0c      	ldr	r4, [pc, #48]	; (8006810 <__libc_init_array+0x44>)
 80067e0:	f000 fc4e 	bl	8007080 <_init>
 80067e4:	1b64      	subs	r4, r4, r5
 80067e6:	10a4      	asrs	r4, r4, #2
 80067e8:	2600      	movs	r6, #0
 80067ea:	42a6      	cmp	r6, r4
 80067ec:	d105      	bne.n	80067fa <__libc_init_array+0x2e>
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f4:	4798      	blx	r3
 80067f6:	3601      	adds	r6, #1
 80067f8:	e7ee      	b.n	80067d8 <__libc_init_array+0xc>
 80067fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fe:	4798      	blx	r3
 8006800:	3601      	adds	r6, #1
 8006802:	e7f2      	b.n	80067ea <__libc_init_array+0x1e>
 8006804:	0800abe8 	.word	0x0800abe8
 8006808:	0800abe8 	.word	0x0800abe8
 800680c:	0800abe8 	.word	0x0800abe8
 8006810:	0800abec 	.word	0x0800abec

08006814 <memset>:
 8006814:	4402      	add	r2, r0
 8006816:	4603      	mov	r3, r0
 8006818:	4293      	cmp	r3, r2
 800681a:	d100      	bne.n	800681e <memset+0xa>
 800681c:	4770      	bx	lr
 800681e:	f803 1b01 	strb.w	r1, [r3], #1
 8006822:	e7f9      	b.n	8006818 <memset+0x4>

08006824 <siprintf>:
 8006824:	b40e      	push	{r1, r2, r3}
 8006826:	b500      	push	{lr}
 8006828:	b09c      	sub	sp, #112	; 0x70
 800682a:	ab1d      	add	r3, sp, #116	; 0x74
 800682c:	9002      	str	r0, [sp, #8]
 800682e:	9006      	str	r0, [sp, #24]
 8006830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006834:	4809      	ldr	r0, [pc, #36]	; (800685c <siprintf+0x38>)
 8006836:	9107      	str	r1, [sp, #28]
 8006838:	9104      	str	r1, [sp, #16]
 800683a:	4909      	ldr	r1, [pc, #36]	; (8006860 <siprintf+0x3c>)
 800683c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006840:	9105      	str	r1, [sp, #20]
 8006842:	6800      	ldr	r0, [r0, #0]
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	a902      	add	r1, sp, #8
 8006848:	f000 f868 	bl	800691c <_svfiprintf_r>
 800684c:	9b02      	ldr	r3, [sp, #8]
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	b01c      	add	sp, #112	; 0x70
 8006854:	f85d eb04 	ldr.w	lr, [sp], #4
 8006858:	b003      	add	sp, #12
 800685a:	4770      	bx	lr
 800685c:	2000006c 	.word	0x2000006c
 8006860:	ffff0208 	.word	0xffff0208

08006864 <__ssputs_r>:
 8006864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006868:	688e      	ldr	r6, [r1, #8]
 800686a:	429e      	cmp	r6, r3
 800686c:	4682      	mov	sl, r0
 800686e:	460c      	mov	r4, r1
 8006870:	4690      	mov	r8, r2
 8006872:	461f      	mov	r7, r3
 8006874:	d838      	bhi.n	80068e8 <__ssputs_r+0x84>
 8006876:	898a      	ldrh	r2, [r1, #12]
 8006878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800687c:	d032      	beq.n	80068e4 <__ssputs_r+0x80>
 800687e:	6825      	ldr	r5, [r4, #0]
 8006880:	6909      	ldr	r1, [r1, #16]
 8006882:	eba5 0901 	sub.w	r9, r5, r1
 8006886:	6965      	ldr	r5, [r4, #20]
 8006888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800688c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006890:	3301      	adds	r3, #1
 8006892:	444b      	add	r3, r9
 8006894:	106d      	asrs	r5, r5, #1
 8006896:	429d      	cmp	r5, r3
 8006898:	bf38      	it	cc
 800689a:	461d      	movcc	r5, r3
 800689c:	0553      	lsls	r3, r2, #21
 800689e:	d531      	bpl.n	8006904 <__ssputs_r+0xa0>
 80068a0:	4629      	mov	r1, r5
 80068a2:	f000 fb47 	bl	8006f34 <_malloc_r>
 80068a6:	4606      	mov	r6, r0
 80068a8:	b950      	cbnz	r0, 80068c0 <__ssputs_r+0x5c>
 80068aa:	230c      	movs	r3, #12
 80068ac:	f8ca 3000 	str.w	r3, [sl]
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	f04f 30ff 	mov.w	r0, #4294967295
 80068bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c0:	6921      	ldr	r1, [r4, #16]
 80068c2:	464a      	mov	r2, r9
 80068c4:	f000 fabe 	bl	8006e44 <memcpy>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d2:	81a3      	strh	r3, [r4, #12]
 80068d4:	6126      	str	r6, [r4, #16]
 80068d6:	6165      	str	r5, [r4, #20]
 80068d8:	444e      	add	r6, r9
 80068da:	eba5 0509 	sub.w	r5, r5, r9
 80068de:	6026      	str	r6, [r4, #0]
 80068e0:	60a5      	str	r5, [r4, #8]
 80068e2:	463e      	mov	r6, r7
 80068e4:	42be      	cmp	r6, r7
 80068e6:	d900      	bls.n	80068ea <__ssputs_r+0x86>
 80068e8:	463e      	mov	r6, r7
 80068ea:	4632      	mov	r2, r6
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	4641      	mov	r1, r8
 80068f0:	f000 fab6 	bl	8006e60 <memmove>
 80068f4:	68a3      	ldr	r3, [r4, #8]
 80068f6:	6822      	ldr	r2, [r4, #0]
 80068f8:	1b9b      	subs	r3, r3, r6
 80068fa:	4432      	add	r2, r6
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	6022      	str	r2, [r4, #0]
 8006900:	2000      	movs	r0, #0
 8006902:	e7db      	b.n	80068bc <__ssputs_r+0x58>
 8006904:	462a      	mov	r2, r5
 8006906:	f000 fb6f 	bl	8006fe8 <_realloc_r>
 800690a:	4606      	mov	r6, r0
 800690c:	2800      	cmp	r0, #0
 800690e:	d1e1      	bne.n	80068d4 <__ssputs_r+0x70>
 8006910:	6921      	ldr	r1, [r4, #16]
 8006912:	4650      	mov	r0, sl
 8006914:	f000 fabe 	bl	8006e94 <_free_r>
 8006918:	e7c7      	b.n	80068aa <__ssputs_r+0x46>
	...

0800691c <_svfiprintf_r>:
 800691c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006920:	4698      	mov	r8, r3
 8006922:	898b      	ldrh	r3, [r1, #12]
 8006924:	061b      	lsls	r3, r3, #24
 8006926:	b09d      	sub	sp, #116	; 0x74
 8006928:	4607      	mov	r7, r0
 800692a:	460d      	mov	r5, r1
 800692c:	4614      	mov	r4, r2
 800692e:	d50e      	bpl.n	800694e <_svfiprintf_r+0x32>
 8006930:	690b      	ldr	r3, [r1, #16]
 8006932:	b963      	cbnz	r3, 800694e <_svfiprintf_r+0x32>
 8006934:	2140      	movs	r1, #64	; 0x40
 8006936:	f000 fafd 	bl	8006f34 <_malloc_r>
 800693a:	6028      	str	r0, [r5, #0]
 800693c:	6128      	str	r0, [r5, #16]
 800693e:	b920      	cbnz	r0, 800694a <_svfiprintf_r+0x2e>
 8006940:	230c      	movs	r3, #12
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	e0d1      	b.n	8006aee <_svfiprintf_r+0x1d2>
 800694a:	2340      	movs	r3, #64	; 0x40
 800694c:	616b      	str	r3, [r5, #20]
 800694e:	2300      	movs	r3, #0
 8006950:	9309      	str	r3, [sp, #36]	; 0x24
 8006952:	2320      	movs	r3, #32
 8006954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006958:	f8cd 800c 	str.w	r8, [sp, #12]
 800695c:	2330      	movs	r3, #48	; 0x30
 800695e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b08 <_svfiprintf_r+0x1ec>
 8006962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006966:	f04f 0901 	mov.w	r9, #1
 800696a:	4623      	mov	r3, r4
 800696c:	469a      	mov	sl, r3
 800696e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006972:	b10a      	cbz	r2, 8006978 <_svfiprintf_r+0x5c>
 8006974:	2a25      	cmp	r2, #37	; 0x25
 8006976:	d1f9      	bne.n	800696c <_svfiprintf_r+0x50>
 8006978:	ebba 0b04 	subs.w	fp, sl, r4
 800697c:	d00b      	beq.n	8006996 <_svfiprintf_r+0x7a>
 800697e:	465b      	mov	r3, fp
 8006980:	4622      	mov	r2, r4
 8006982:	4629      	mov	r1, r5
 8006984:	4638      	mov	r0, r7
 8006986:	f7ff ff6d 	bl	8006864 <__ssputs_r>
 800698a:	3001      	adds	r0, #1
 800698c:	f000 80aa 	beq.w	8006ae4 <_svfiprintf_r+0x1c8>
 8006990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006992:	445a      	add	r2, fp
 8006994:	9209      	str	r2, [sp, #36]	; 0x24
 8006996:	f89a 3000 	ldrb.w	r3, [sl]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80a2 	beq.w	8006ae4 <_svfiprintf_r+0x1c8>
 80069a0:	2300      	movs	r3, #0
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295
 80069a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069aa:	f10a 0a01 	add.w	sl, sl, #1
 80069ae:	9304      	str	r3, [sp, #16]
 80069b0:	9307      	str	r3, [sp, #28]
 80069b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069b6:	931a      	str	r3, [sp, #104]	; 0x68
 80069b8:	4654      	mov	r4, sl
 80069ba:	2205      	movs	r2, #5
 80069bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c0:	4851      	ldr	r0, [pc, #324]	; (8006b08 <_svfiprintf_r+0x1ec>)
 80069c2:	f7f9 fc15 	bl	80001f0 <memchr>
 80069c6:	9a04      	ldr	r2, [sp, #16]
 80069c8:	b9d8      	cbnz	r0, 8006a02 <_svfiprintf_r+0xe6>
 80069ca:	06d0      	lsls	r0, r2, #27
 80069cc:	bf44      	itt	mi
 80069ce:	2320      	movmi	r3, #32
 80069d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069d4:	0711      	lsls	r1, r2, #28
 80069d6:	bf44      	itt	mi
 80069d8:	232b      	movmi	r3, #43	; 0x2b
 80069da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069de:	f89a 3000 	ldrb.w	r3, [sl]
 80069e2:	2b2a      	cmp	r3, #42	; 0x2a
 80069e4:	d015      	beq.n	8006a12 <_svfiprintf_r+0xf6>
 80069e6:	9a07      	ldr	r2, [sp, #28]
 80069e8:	4654      	mov	r4, sl
 80069ea:	2000      	movs	r0, #0
 80069ec:	f04f 0c0a 	mov.w	ip, #10
 80069f0:	4621      	mov	r1, r4
 80069f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069f6:	3b30      	subs	r3, #48	; 0x30
 80069f8:	2b09      	cmp	r3, #9
 80069fa:	d94e      	bls.n	8006a9a <_svfiprintf_r+0x17e>
 80069fc:	b1b0      	cbz	r0, 8006a2c <_svfiprintf_r+0x110>
 80069fe:	9207      	str	r2, [sp, #28]
 8006a00:	e014      	b.n	8006a2c <_svfiprintf_r+0x110>
 8006a02:	eba0 0308 	sub.w	r3, r0, r8
 8006a06:	fa09 f303 	lsl.w	r3, r9, r3
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	46a2      	mov	sl, r4
 8006a10:	e7d2      	b.n	80069b8 <_svfiprintf_r+0x9c>
 8006a12:	9b03      	ldr	r3, [sp, #12]
 8006a14:	1d19      	adds	r1, r3, #4
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	9103      	str	r1, [sp, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bfbb      	ittet	lt
 8006a1e:	425b      	neglt	r3, r3
 8006a20:	f042 0202 	orrlt.w	r2, r2, #2
 8006a24:	9307      	strge	r3, [sp, #28]
 8006a26:	9307      	strlt	r3, [sp, #28]
 8006a28:	bfb8      	it	lt
 8006a2a:	9204      	strlt	r2, [sp, #16]
 8006a2c:	7823      	ldrb	r3, [r4, #0]
 8006a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a30:	d10c      	bne.n	8006a4c <_svfiprintf_r+0x130>
 8006a32:	7863      	ldrb	r3, [r4, #1]
 8006a34:	2b2a      	cmp	r3, #42	; 0x2a
 8006a36:	d135      	bne.n	8006aa4 <_svfiprintf_r+0x188>
 8006a38:	9b03      	ldr	r3, [sp, #12]
 8006a3a:	1d1a      	adds	r2, r3, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	9203      	str	r2, [sp, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bfb8      	it	lt
 8006a44:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a48:	3402      	adds	r4, #2
 8006a4a:	9305      	str	r3, [sp, #20]
 8006a4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b18 <_svfiprintf_r+0x1fc>
 8006a50:	7821      	ldrb	r1, [r4, #0]
 8006a52:	2203      	movs	r2, #3
 8006a54:	4650      	mov	r0, sl
 8006a56:	f7f9 fbcb 	bl	80001f0 <memchr>
 8006a5a:	b140      	cbz	r0, 8006a6e <_svfiprintf_r+0x152>
 8006a5c:	2340      	movs	r3, #64	; 0x40
 8006a5e:	eba0 000a 	sub.w	r0, r0, sl
 8006a62:	fa03 f000 	lsl.w	r0, r3, r0
 8006a66:	9b04      	ldr	r3, [sp, #16]
 8006a68:	4303      	orrs	r3, r0
 8006a6a:	3401      	adds	r4, #1
 8006a6c:	9304      	str	r3, [sp, #16]
 8006a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a72:	4826      	ldr	r0, [pc, #152]	; (8006b0c <_svfiprintf_r+0x1f0>)
 8006a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a78:	2206      	movs	r2, #6
 8006a7a:	f7f9 fbb9 	bl	80001f0 <memchr>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	d038      	beq.n	8006af4 <_svfiprintf_r+0x1d8>
 8006a82:	4b23      	ldr	r3, [pc, #140]	; (8006b10 <_svfiprintf_r+0x1f4>)
 8006a84:	bb1b      	cbnz	r3, 8006ace <_svfiprintf_r+0x1b2>
 8006a86:	9b03      	ldr	r3, [sp, #12]
 8006a88:	3307      	adds	r3, #7
 8006a8a:	f023 0307 	bic.w	r3, r3, #7
 8006a8e:	3308      	adds	r3, #8
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a94:	4433      	add	r3, r6
 8006a96:	9309      	str	r3, [sp, #36]	; 0x24
 8006a98:	e767      	b.n	800696a <_svfiprintf_r+0x4e>
 8006a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	e7a5      	b.n	80069f0 <_svfiprintf_r+0xd4>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	3401      	adds	r4, #1
 8006aa8:	9305      	str	r3, [sp, #20]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f04f 0c0a 	mov.w	ip, #10
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab6:	3a30      	subs	r2, #48	; 0x30
 8006ab8:	2a09      	cmp	r2, #9
 8006aba:	d903      	bls.n	8006ac4 <_svfiprintf_r+0x1a8>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0c5      	beq.n	8006a4c <_svfiprintf_r+0x130>
 8006ac0:	9105      	str	r1, [sp, #20]
 8006ac2:	e7c3      	b.n	8006a4c <_svfiprintf_r+0x130>
 8006ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ac8:	4604      	mov	r4, r0
 8006aca:	2301      	movs	r3, #1
 8006acc:	e7f0      	b.n	8006ab0 <_svfiprintf_r+0x194>
 8006ace:	ab03      	add	r3, sp, #12
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	4b0f      	ldr	r3, [pc, #60]	; (8006b14 <_svfiprintf_r+0x1f8>)
 8006ad6:	a904      	add	r1, sp, #16
 8006ad8:	4638      	mov	r0, r7
 8006ada:	f3af 8000 	nop.w
 8006ade:	1c42      	adds	r2, r0, #1
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	d1d6      	bne.n	8006a92 <_svfiprintf_r+0x176>
 8006ae4:	89ab      	ldrh	r3, [r5, #12]
 8006ae6:	065b      	lsls	r3, r3, #25
 8006ae8:	f53f af2c 	bmi.w	8006944 <_svfiprintf_r+0x28>
 8006aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aee:	b01d      	add	sp, #116	; 0x74
 8006af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af4:	ab03      	add	r3, sp, #12
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	462a      	mov	r2, r5
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <_svfiprintf_r+0x1f8>)
 8006afc:	a904      	add	r1, sp, #16
 8006afe:	4638      	mov	r0, r7
 8006b00:	f000 f87a 	bl	8006bf8 <_printf_i>
 8006b04:	e7eb      	b.n	8006ade <_svfiprintf_r+0x1c2>
 8006b06:	bf00      	nop
 8006b08:	0800abac 	.word	0x0800abac
 8006b0c:	0800abb6 	.word	0x0800abb6
 8006b10:	00000000 	.word	0x00000000
 8006b14:	08006865 	.word	0x08006865
 8006b18:	0800abb2 	.word	0x0800abb2

08006b1c <_printf_common>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	4616      	mov	r6, r2
 8006b22:	4699      	mov	r9, r3
 8006b24:	688a      	ldr	r2, [r1, #8]
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	bfb8      	it	lt
 8006b30:	4613      	movlt	r3, r2
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b38:	4607      	mov	r7, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	b10a      	cbz	r2, 8006b42 <_printf_common+0x26>
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	0699      	lsls	r1, r3, #26
 8006b46:	bf42      	ittt	mi
 8006b48:	6833      	ldrmi	r3, [r6, #0]
 8006b4a:	3302      	addmi	r3, #2
 8006b4c:	6033      	strmi	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	f015 0506 	ands.w	r5, r5, #6
 8006b54:	d106      	bne.n	8006b64 <_printf_common+0x48>
 8006b56:	f104 0a19 	add.w	sl, r4, #25
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	6832      	ldr	r2, [r6, #0]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc26      	bgt.n	8006bb2 <_printf_common+0x96>
 8006b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b68:	1e13      	subs	r3, r2, #0
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	bf18      	it	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	0692      	lsls	r2, r2, #26
 8006b72:	d42b      	bmi.n	8006bcc <_printf_common+0xb0>
 8006b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	47c0      	blx	r8
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d01e      	beq.n	8006bc0 <_printf_common+0xa4>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	68e5      	ldr	r5, [r4, #12]
 8006b86:	6832      	ldr	r2, [r6, #0]
 8006b88:	f003 0306 	and.w	r3, r3, #6
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	bf08      	it	eq
 8006b90:	1aad      	subeq	r5, r5, r2
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	6922      	ldr	r2, [r4, #16]
 8006b96:	bf0c      	ite	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	2500      	movne	r5, #0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bfc4      	itt	gt
 8006ba2:	1a9b      	subgt	r3, r3, r2
 8006ba4:	18ed      	addgt	r5, r5, r3
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	341a      	adds	r4, #26
 8006baa:	42b5      	cmp	r5, r6
 8006bac:	d11a      	bne.n	8006be4 <_printf_common+0xc8>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e008      	b.n	8006bc4 <_printf_common+0xa8>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	4638      	mov	r0, r7
 8006bba:	47c0      	blx	r8
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d103      	bne.n	8006bc8 <_printf_common+0xac>
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc8:	3501      	adds	r5, #1
 8006bca:	e7c6      	b.n	8006b5a <_printf_common+0x3e>
 8006bcc:	18e1      	adds	r1, r4, r3
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	2030      	movs	r0, #48	; 0x30
 8006bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bd6:	4422      	add	r2, r4
 8006bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be0:	3302      	adds	r3, #2
 8006be2:	e7c7      	b.n	8006b74 <_printf_common+0x58>
 8006be4:	2301      	movs	r3, #1
 8006be6:	4622      	mov	r2, r4
 8006be8:	4649      	mov	r1, r9
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c0      	blx	r8
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d0e6      	beq.n	8006bc0 <_printf_common+0xa4>
 8006bf2:	3601      	adds	r6, #1
 8006bf4:	e7d9      	b.n	8006baa <_printf_common+0x8e>
	...

08006bf8 <_printf_i>:
 8006bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	4691      	mov	r9, r2
 8006c00:	7e27      	ldrb	r7, [r4, #24]
 8006c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c04:	2f78      	cmp	r7, #120	; 0x78
 8006c06:	4680      	mov	r8, r0
 8006c08:	469a      	mov	sl, r3
 8006c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c0e:	d807      	bhi.n	8006c20 <_printf_i+0x28>
 8006c10:	2f62      	cmp	r7, #98	; 0x62
 8006c12:	d80a      	bhi.n	8006c2a <_printf_i+0x32>
 8006c14:	2f00      	cmp	r7, #0
 8006c16:	f000 80d8 	beq.w	8006dca <_printf_i+0x1d2>
 8006c1a:	2f58      	cmp	r7, #88	; 0x58
 8006c1c:	f000 80a3 	beq.w	8006d66 <_printf_i+0x16e>
 8006c20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c28:	e03a      	b.n	8006ca0 <_printf_i+0xa8>
 8006c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c2e:	2b15      	cmp	r3, #21
 8006c30:	d8f6      	bhi.n	8006c20 <_printf_i+0x28>
 8006c32:	a001      	add	r0, pc, #4	; (adr r0, 8006c38 <_printf_i+0x40>)
 8006c34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006c21 	.word	0x08006c21
 8006c44:	08006c21 	.word	0x08006c21
 8006c48:	08006c21 	.word	0x08006c21
 8006c4c:	08006c21 	.word	0x08006c21
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006c21 	.word	0x08006c21
 8006c58:	08006c21 	.word	0x08006c21
 8006c5c:	08006c21 	.word	0x08006c21
 8006c60:	08006c21 	.word	0x08006c21
 8006c64:	08006db1 	.word	0x08006db1
 8006c68:	08006cd5 	.word	0x08006cd5
 8006c6c:	08006d93 	.word	0x08006d93
 8006c70:	08006c21 	.word	0x08006c21
 8006c74:	08006c21 	.word	0x08006c21
 8006c78:	08006dd3 	.word	0x08006dd3
 8006c7c:	08006c21 	.word	0x08006c21
 8006c80:	08006cd5 	.word	0x08006cd5
 8006c84:	08006c21 	.word	0x08006c21
 8006c88:	08006c21 	.word	0x08006c21
 8006c8c:	08006d9b 	.word	0x08006d9b
 8006c90:	680b      	ldr	r3, [r1, #0]
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	600a      	str	r2, [r1, #0]
 8006c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e0a3      	b.n	8006dec <_printf_i+0x1f4>
 8006ca4:	6825      	ldr	r5, [r4, #0]
 8006ca6:	6808      	ldr	r0, [r1, #0]
 8006ca8:	062e      	lsls	r6, r5, #24
 8006caa:	f100 0304 	add.w	r3, r0, #4
 8006cae:	d50a      	bpl.n	8006cc6 <_printf_i+0xce>
 8006cb0:	6805      	ldr	r5, [r0, #0]
 8006cb2:	600b      	str	r3, [r1, #0]
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	da03      	bge.n	8006cc0 <_printf_i+0xc8>
 8006cb8:	232d      	movs	r3, #45	; 0x2d
 8006cba:	426d      	negs	r5, r5
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc0:	485e      	ldr	r0, [pc, #376]	; (8006e3c <_printf_i+0x244>)
 8006cc2:	230a      	movs	r3, #10
 8006cc4:	e019      	b.n	8006cfa <_printf_i+0x102>
 8006cc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cca:	6805      	ldr	r5, [r0, #0]
 8006ccc:	600b      	str	r3, [r1, #0]
 8006cce:	bf18      	it	ne
 8006cd0:	b22d      	sxthne	r5, r5
 8006cd2:	e7ef      	b.n	8006cb4 <_printf_i+0xbc>
 8006cd4:	680b      	ldr	r3, [r1, #0]
 8006cd6:	6825      	ldr	r5, [r4, #0]
 8006cd8:	1d18      	adds	r0, r3, #4
 8006cda:	6008      	str	r0, [r1, #0]
 8006cdc:	0628      	lsls	r0, r5, #24
 8006cde:	d501      	bpl.n	8006ce4 <_printf_i+0xec>
 8006ce0:	681d      	ldr	r5, [r3, #0]
 8006ce2:	e002      	b.n	8006cea <_printf_i+0xf2>
 8006ce4:	0669      	lsls	r1, r5, #25
 8006ce6:	d5fb      	bpl.n	8006ce0 <_printf_i+0xe8>
 8006ce8:	881d      	ldrh	r5, [r3, #0]
 8006cea:	4854      	ldr	r0, [pc, #336]	; (8006e3c <_printf_i+0x244>)
 8006cec:	2f6f      	cmp	r7, #111	; 0x6f
 8006cee:	bf0c      	ite	eq
 8006cf0:	2308      	moveq	r3, #8
 8006cf2:	230a      	movne	r3, #10
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cfa:	6866      	ldr	r6, [r4, #4]
 8006cfc:	60a6      	str	r6, [r4, #8]
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	bfa2      	ittt	ge
 8006d02:	6821      	ldrge	r1, [r4, #0]
 8006d04:	f021 0104 	bicge.w	r1, r1, #4
 8006d08:	6021      	strge	r1, [r4, #0]
 8006d0a:	b90d      	cbnz	r5, 8006d10 <_printf_i+0x118>
 8006d0c:	2e00      	cmp	r6, #0
 8006d0e:	d04d      	beq.n	8006dac <_printf_i+0x1b4>
 8006d10:	4616      	mov	r6, r2
 8006d12:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d16:	fb03 5711 	mls	r7, r3, r1, r5
 8006d1a:	5dc7      	ldrb	r7, [r0, r7]
 8006d1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d20:	462f      	mov	r7, r5
 8006d22:	42bb      	cmp	r3, r7
 8006d24:	460d      	mov	r5, r1
 8006d26:	d9f4      	bls.n	8006d12 <_printf_i+0x11a>
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d10b      	bne.n	8006d44 <_printf_i+0x14c>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	07df      	lsls	r7, r3, #31
 8006d30:	d508      	bpl.n	8006d44 <_printf_i+0x14c>
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	6861      	ldr	r1, [r4, #4]
 8006d36:	4299      	cmp	r1, r3
 8006d38:	bfde      	ittt	le
 8006d3a:	2330      	movle	r3, #48	; 0x30
 8006d3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d44:	1b92      	subs	r2, r2, r6
 8006d46:	6122      	str	r2, [r4, #16]
 8006d48:	f8cd a000 	str.w	sl, [sp]
 8006d4c:	464b      	mov	r3, r9
 8006d4e:	aa03      	add	r2, sp, #12
 8006d50:	4621      	mov	r1, r4
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7ff fee2 	bl	8006b1c <_printf_common>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d14c      	bne.n	8006df6 <_printf_i+0x1fe>
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	b004      	add	sp, #16
 8006d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d66:	4835      	ldr	r0, [pc, #212]	; (8006e3c <_printf_i+0x244>)
 8006d68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	680e      	ldr	r6, [r1, #0]
 8006d70:	061f      	lsls	r7, r3, #24
 8006d72:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d76:	600e      	str	r6, [r1, #0]
 8006d78:	d514      	bpl.n	8006da4 <_printf_i+0x1ac>
 8006d7a:	07d9      	lsls	r1, r3, #31
 8006d7c:	bf44      	itt	mi
 8006d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d82:	6023      	strmi	r3, [r4, #0]
 8006d84:	b91d      	cbnz	r5, 8006d8e <_printf_i+0x196>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	f023 0320 	bic.w	r3, r3, #32
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	2310      	movs	r3, #16
 8006d90:	e7b0      	b.n	8006cf4 <_printf_i+0xfc>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	f043 0320 	orr.w	r3, r3, #32
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	2378      	movs	r3, #120	; 0x78
 8006d9c:	4828      	ldr	r0, [pc, #160]	; (8006e40 <_printf_i+0x248>)
 8006d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006da2:	e7e3      	b.n	8006d6c <_printf_i+0x174>
 8006da4:	065e      	lsls	r6, r3, #25
 8006da6:	bf48      	it	mi
 8006da8:	b2ad      	uxthmi	r5, r5
 8006daa:	e7e6      	b.n	8006d7a <_printf_i+0x182>
 8006dac:	4616      	mov	r6, r2
 8006dae:	e7bb      	b.n	8006d28 <_printf_i+0x130>
 8006db0:	680b      	ldr	r3, [r1, #0]
 8006db2:	6826      	ldr	r6, [r4, #0]
 8006db4:	6960      	ldr	r0, [r4, #20]
 8006db6:	1d1d      	adds	r5, r3, #4
 8006db8:	600d      	str	r5, [r1, #0]
 8006dba:	0635      	lsls	r5, r6, #24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	d501      	bpl.n	8006dc4 <_printf_i+0x1cc>
 8006dc0:	6018      	str	r0, [r3, #0]
 8006dc2:	e002      	b.n	8006dca <_printf_i+0x1d2>
 8006dc4:	0671      	lsls	r1, r6, #25
 8006dc6:	d5fb      	bpl.n	8006dc0 <_printf_i+0x1c8>
 8006dc8:	8018      	strh	r0, [r3, #0]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	4616      	mov	r6, r2
 8006dd0:	e7ba      	b.n	8006d48 <_printf_i+0x150>
 8006dd2:	680b      	ldr	r3, [r1, #0]
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	600a      	str	r2, [r1, #0]
 8006dd8:	681e      	ldr	r6, [r3, #0]
 8006dda:	6862      	ldr	r2, [r4, #4]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4630      	mov	r0, r6
 8006de0:	f7f9 fa06 	bl	80001f0 <memchr>
 8006de4:	b108      	cbz	r0, 8006dea <_printf_i+0x1f2>
 8006de6:	1b80      	subs	r0, r0, r6
 8006de8:	6060      	str	r0, [r4, #4]
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	2300      	movs	r3, #0
 8006df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df4:	e7a8      	b.n	8006d48 <_printf_i+0x150>
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	4632      	mov	r2, r6
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	47d0      	blx	sl
 8006e00:	3001      	adds	r0, #1
 8006e02:	d0ab      	beq.n	8006d5c <_printf_i+0x164>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	079b      	lsls	r3, r3, #30
 8006e08:	d413      	bmi.n	8006e32 <_printf_i+0x23a>
 8006e0a:	68e0      	ldr	r0, [r4, #12]
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	4298      	cmp	r0, r3
 8006e10:	bfb8      	it	lt
 8006e12:	4618      	movlt	r0, r3
 8006e14:	e7a4      	b.n	8006d60 <_printf_i+0x168>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	47d0      	blx	sl
 8006e20:	3001      	adds	r0, #1
 8006e22:	d09b      	beq.n	8006d5c <_printf_i+0x164>
 8006e24:	3501      	adds	r5, #1
 8006e26:	68e3      	ldr	r3, [r4, #12]
 8006e28:	9903      	ldr	r1, [sp, #12]
 8006e2a:	1a5b      	subs	r3, r3, r1
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dcf2      	bgt.n	8006e16 <_printf_i+0x21e>
 8006e30:	e7eb      	b.n	8006e0a <_printf_i+0x212>
 8006e32:	2500      	movs	r5, #0
 8006e34:	f104 0619 	add.w	r6, r4, #25
 8006e38:	e7f5      	b.n	8006e26 <_printf_i+0x22e>
 8006e3a:	bf00      	nop
 8006e3c:	0800abbd 	.word	0x0800abbd
 8006e40:	0800abce 	.word	0x0800abce

08006e44 <memcpy>:
 8006e44:	440a      	add	r2, r1
 8006e46:	4291      	cmp	r1, r2
 8006e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e4c:	d100      	bne.n	8006e50 <memcpy+0xc>
 8006e4e:	4770      	bx	lr
 8006e50:	b510      	push	{r4, lr}
 8006e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e5a:	4291      	cmp	r1, r2
 8006e5c:	d1f9      	bne.n	8006e52 <memcpy+0xe>
 8006e5e:	bd10      	pop	{r4, pc}

08006e60 <memmove>:
 8006e60:	4288      	cmp	r0, r1
 8006e62:	b510      	push	{r4, lr}
 8006e64:	eb01 0402 	add.w	r4, r1, r2
 8006e68:	d902      	bls.n	8006e70 <memmove+0x10>
 8006e6a:	4284      	cmp	r4, r0
 8006e6c:	4623      	mov	r3, r4
 8006e6e:	d807      	bhi.n	8006e80 <memmove+0x20>
 8006e70:	1e43      	subs	r3, r0, #1
 8006e72:	42a1      	cmp	r1, r4
 8006e74:	d008      	beq.n	8006e88 <memmove+0x28>
 8006e76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e7e:	e7f8      	b.n	8006e72 <memmove+0x12>
 8006e80:	4402      	add	r2, r0
 8006e82:	4601      	mov	r1, r0
 8006e84:	428a      	cmp	r2, r1
 8006e86:	d100      	bne.n	8006e8a <memmove+0x2a>
 8006e88:	bd10      	pop	{r4, pc}
 8006e8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e92:	e7f7      	b.n	8006e84 <memmove+0x24>

08006e94 <_free_r>:
 8006e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e96:	2900      	cmp	r1, #0
 8006e98:	d048      	beq.n	8006f2c <_free_r+0x98>
 8006e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e9e:	9001      	str	r0, [sp, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ea6:	bfb8      	it	lt
 8006ea8:	18e4      	addlt	r4, r4, r3
 8006eaa:	f000 f8d3 	bl	8007054 <__malloc_lock>
 8006eae:	4a20      	ldr	r2, [pc, #128]	; (8006f30 <_free_r+0x9c>)
 8006eb0:	9801      	ldr	r0, [sp, #4]
 8006eb2:	6813      	ldr	r3, [r2, #0]
 8006eb4:	4615      	mov	r5, r2
 8006eb6:	b933      	cbnz	r3, 8006ec6 <_free_r+0x32>
 8006eb8:	6063      	str	r3, [r4, #4]
 8006eba:	6014      	str	r4, [r2, #0]
 8006ebc:	b003      	add	sp, #12
 8006ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ec2:	f000 b8cd 	b.w	8007060 <__malloc_unlock>
 8006ec6:	42a3      	cmp	r3, r4
 8006ec8:	d90b      	bls.n	8006ee2 <_free_r+0x4e>
 8006eca:	6821      	ldr	r1, [r4, #0]
 8006ecc:	1862      	adds	r2, r4, r1
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	bf04      	itt	eq
 8006ed2:	681a      	ldreq	r2, [r3, #0]
 8006ed4:	685b      	ldreq	r3, [r3, #4]
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	bf04      	itt	eq
 8006eda:	1852      	addeq	r2, r2, r1
 8006edc:	6022      	streq	r2, [r4, #0]
 8006ede:	602c      	str	r4, [r5, #0]
 8006ee0:	e7ec      	b.n	8006ebc <_free_r+0x28>
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	b10b      	cbz	r3, 8006eec <_free_r+0x58>
 8006ee8:	42a3      	cmp	r3, r4
 8006eea:	d9fa      	bls.n	8006ee2 <_free_r+0x4e>
 8006eec:	6811      	ldr	r1, [r2, #0]
 8006eee:	1855      	adds	r5, r2, r1
 8006ef0:	42a5      	cmp	r5, r4
 8006ef2:	d10b      	bne.n	8006f0c <_free_r+0x78>
 8006ef4:	6824      	ldr	r4, [r4, #0]
 8006ef6:	4421      	add	r1, r4
 8006ef8:	1854      	adds	r4, r2, r1
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	6011      	str	r1, [r2, #0]
 8006efe:	d1dd      	bne.n	8006ebc <_free_r+0x28>
 8006f00:	681c      	ldr	r4, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	6053      	str	r3, [r2, #4]
 8006f06:	4421      	add	r1, r4
 8006f08:	6011      	str	r1, [r2, #0]
 8006f0a:	e7d7      	b.n	8006ebc <_free_r+0x28>
 8006f0c:	d902      	bls.n	8006f14 <_free_r+0x80>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	6003      	str	r3, [r0, #0]
 8006f12:	e7d3      	b.n	8006ebc <_free_r+0x28>
 8006f14:	6825      	ldr	r5, [r4, #0]
 8006f16:	1961      	adds	r1, r4, r5
 8006f18:	428b      	cmp	r3, r1
 8006f1a:	bf04      	itt	eq
 8006f1c:	6819      	ldreq	r1, [r3, #0]
 8006f1e:	685b      	ldreq	r3, [r3, #4]
 8006f20:	6063      	str	r3, [r4, #4]
 8006f22:	bf04      	itt	eq
 8006f24:	1949      	addeq	r1, r1, r5
 8006f26:	6021      	streq	r1, [r4, #0]
 8006f28:	6054      	str	r4, [r2, #4]
 8006f2a:	e7c7      	b.n	8006ebc <_free_r+0x28>
 8006f2c:	b003      	add	sp, #12
 8006f2e:	bd30      	pop	{r4, r5, pc}
 8006f30:	2000029c 	.word	0x2000029c

08006f34 <_malloc_r>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	1ccd      	adds	r5, r1, #3
 8006f38:	f025 0503 	bic.w	r5, r5, #3
 8006f3c:	3508      	adds	r5, #8
 8006f3e:	2d0c      	cmp	r5, #12
 8006f40:	bf38      	it	cc
 8006f42:	250c      	movcc	r5, #12
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	4606      	mov	r6, r0
 8006f48:	db01      	blt.n	8006f4e <_malloc_r+0x1a>
 8006f4a:	42a9      	cmp	r1, r5
 8006f4c:	d903      	bls.n	8006f56 <_malloc_r+0x22>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	6033      	str	r3, [r6, #0]
 8006f52:	2000      	movs	r0, #0
 8006f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f56:	f000 f87d 	bl	8007054 <__malloc_lock>
 8006f5a:	4921      	ldr	r1, [pc, #132]	; (8006fe0 <_malloc_r+0xac>)
 8006f5c:	680a      	ldr	r2, [r1, #0]
 8006f5e:	4614      	mov	r4, r2
 8006f60:	b99c      	cbnz	r4, 8006f8a <_malloc_r+0x56>
 8006f62:	4f20      	ldr	r7, [pc, #128]	; (8006fe4 <_malloc_r+0xb0>)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	b923      	cbnz	r3, 8006f72 <_malloc_r+0x3e>
 8006f68:	4621      	mov	r1, r4
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f000 f862 	bl	8007034 <_sbrk_r>
 8006f70:	6038      	str	r0, [r7, #0]
 8006f72:	4629      	mov	r1, r5
 8006f74:	4630      	mov	r0, r6
 8006f76:	f000 f85d 	bl	8007034 <_sbrk_r>
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	d123      	bne.n	8006fc6 <_malloc_r+0x92>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	6033      	str	r3, [r6, #0]
 8006f82:	4630      	mov	r0, r6
 8006f84:	f000 f86c 	bl	8007060 <__malloc_unlock>
 8006f88:	e7e3      	b.n	8006f52 <_malloc_r+0x1e>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	1b5b      	subs	r3, r3, r5
 8006f8e:	d417      	bmi.n	8006fc0 <_malloc_r+0x8c>
 8006f90:	2b0b      	cmp	r3, #11
 8006f92:	d903      	bls.n	8006f9c <_malloc_r+0x68>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	441c      	add	r4, r3
 8006f98:	6025      	str	r5, [r4, #0]
 8006f9a:	e004      	b.n	8006fa6 <_malloc_r+0x72>
 8006f9c:	6863      	ldr	r3, [r4, #4]
 8006f9e:	42a2      	cmp	r2, r4
 8006fa0:	bf0c      	ite	eq
 8006fa2:	600b      	streq	r3, [r1, #0]
 8006fa4:	6053      	strne	r3, [r2, #4]
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f000 f85a 	bl	8007060 <__malloc_unlock>
 8006fac:	f104 000b 	add.w	r0, r4, #11
 8006fb0:	1d23      	adds	r3, r4, #4
 8006fb2:	f020 0007 	bic.w	r0, r0, #7
 8006fb6:	1ac2      	subs	r2, r0, r3
 8006fb8:	d0cc      	beq.n	8006f54 <_malloc_r+0x20>
 8006fba:	1a1b      	subs	r3, r3, r0
 8006fbc:	50a3      	str	r3, [r4, r2]
 8006fbe:	e7c9      	b.n	8006f54 <_malloc_r+0x20>
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	6864      	ldr	r4, [r4, #4]
 8006fc4:	e7cc      	b.n	8006f60 <_malloc_r+0x2c>
 8006fc6:	1cc4      	adds	r4, r0, #3
 8006fc8:	f024 0403 	bic.w	r4, r4, #3
 8006fcc:	42a0      	cmp	r0, r4
 8006fce:	d0e3      	beq.n	8006f98 <_malloc_r+0x64>
 8006fd0:	1a21      	subs	r1, r4, r0
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f000 f82e 	bl	8007034 <_sbrk_r>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d1dd      	bne.n	8006f98 <_malloc_r+0x64>
 8006fdc:	e7cf      	b.n	8006f7e <_malloc_r+0x4a>
 8006fde:	bf00      	nop
 8006fe0:	2000029c 	.word	0x2000029c
 8006fe4:	200002a0 	.word	0x200002a0

08006fe8 <_realloc_r>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	4607      	mov	r7, r0
 8006fec:	4614      	mov	r4, r2
 8006fee:	460e      	mov	r6, r1
 8006ff0:	b921      	cbnz	r1, 8006ffc <_realloc_r+0x14>
 8006ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	f7ff bf9c 	b.w	8006f34 <_malloc_r>
 8006ffc:	b922      	cbnz	r2, 8007008 <_realloc_r+0x20>
 8006ffe:	f7ff ff49 	bl	8006e94 <_free_r>
 8007002:	4625      	mov	r5, r4
 8007004:	4628      	mov	r0, r5
 8007006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007008:	f000 f830 	bl	800706c <_malloc_usable_size_r>
 800700c:	42a0      	cmp	r0, r4
 800700e:	d20f      	bcs.n	8007030 <_realloc_r+0x48>
 8007010:	4621      	mov	r1, r4
 8007012:	4638      	mov	r0, r7
 8007014:	f7ff ff8e 	bl	8006f34 <_malloc_r>
 8007018:	4605      	mov	r5, r0
 800701a:	2800      	cmp	r0, #0
 800701c:	d0f2      	beq.n	8007004 <_realloc_r+0x1c>
 800701e:	4631      	mov	r1, r6
 8007020:	4622      	mov	r2, r4
 8007022:	f7ff ff0f 	bl	8006e44 <memcpy>
 8007026:	4631      	mov	r1, r6
 8007028:	4638      	mov	r0, r7
 800702a:	f7ff ff33 	bl	8006e94 <_free_r>
 800702e:	e7e9      	b.n	8007004 <_realloc_r+0x1c>
 8007030:	4635      	mov	r5, r6
 8007032:	e7e7      	b.n	8007004 <_realloc_r+0x1c>

08007034 <_sbrk_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d06      	ldr	r5, [pc, #24]	; (8007050 <_sbrk_r+0x1c>)
 8007038:	2300      	movs	r3, #0
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	602b      	str	r3, [r5, #0]
 8007040:	f7fa fdee 	bl	8001c20 <_sbrk>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_sbrk_r+0x1a>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_sbrk_r+0x1a>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	20000570 	.word	0x20000570

08007054 <__malloc_lock>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__malloc_lock+0x8>)
 8007056:	f000 b811 	b.w	800707c <__retarget_lock_acquire_recursive>
 800705a:	bf00      	nop
 800705c:	20000578 	.word	0x20000578

08007060 <__malloc_unlock>:
 8007060:	4801      	ldr	r0, [pc, #4]	; (8007068 <__malloc_unlock+0x8>)
 8007062:	f000 b80c 	b.w	800707e <__retarget_lock_release_recursive>
 8007066:	bf00      	nop
 8007068:	20000578 	.word	0x20000578

0800706c <_malloc_usable_size_r>:
 800706c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007070:	1f18      	subs	r0, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	bfbc      	itt	lt
 8007076:	580b      	ldrlt	r3, [r1, r0]
 8007078:	18c0      	addlt	r0, r0, r3
 800707a:	4770      	bx	lr

0800707c <__retarget_lock_acquire_recursive>:
 800707c:	4770      	bx	lr

0800707e <__retarget_lock_release_recursive>:
 800707e:	4770      	bx	lr

08007080 <_init>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	bf00      	nop
 8007084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007086:	bc08      	pop	{r3}
 8007088:	469e      	mov	lr, r3
 800708a:	4770      	bx	lr

0800708c <_fini>:
 800708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708e:	bf00      	nop
 8007090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007092:	bc08      	pop	{r3}
 8007094:	469e      	mov	lr, r3
 8007096:	4770      	bx	lr
